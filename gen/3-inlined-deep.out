
0000:

    #0000
    #instruction: NOP
    advance (4)
    #0001
    #instruction: NOP
    advance (4)
    #0002
    #instruction: NOP
    advance (4)
    #0003
    #instruction: JP   18D4
    advance (10)
    #18D4
    #instruction: LD   SP,2400
    advance (10)
    #18D7
    #instruction: LD   B,00
    advance (7)
    #18D9
    #instruction: CALL 01E6
    M[23FF] := 18;
    M[23FE] := DC;
    #return-to: 18DC
    advance (17)
    #01E6
    #instruction: LD   DE,1B00
    advance (10)
    #01E9
    #instruction: LD   HL,2000
    advance (10)
    #01EC
    #instruction: JP   1A32
    advance (10)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2000] := 01;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a1 = addWithCarry(!true,00,~00) in
    let:8 a2 = (00 & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a1[7:0])) {
      advance (10)
      A := 01;
      B := a1[7:0];
      D := 1B;
      E := 01;
      H := 20;
      L := 01;
      SPH := 23;
      SPL := FE;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:8 a5 = M[23FE] in
      let:8 a6 = M[23FF] in
      advance (10)
      A := 01;
      B := a1[7:0];
      D := 1B;
      E := 01;
      H := 20;
      L := 01;
      SPH := 24;
      SPL := 00;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump ((a6,a5));
    }

0008:

    #0008
    #instruction: PUSH PSW
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #0009
    #instruction: PUSH BC
    let:16 a3 = (-1 + a2) in
    M[a3] := B;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    advance (11)
    #000A
    #instruction: PUSH DE
    let:16 a5 = (-1 + a4) in
    M[a5] := D;
    let:16 a6 = (-1 + a5) in
    M[a6] := E;
    advance (11)
    #000B
    #instruction: PUSH HL
    let:16 a7 = (-1 + a6) in
    M[a7] := H;
    let:16 a8 = (-1 + a7) in
    M[a8] := L;
    advance (11)
    #000C
    #instruction: JP   008C
    advance (10)
    #008C
    #instruction: XOR  A
    let:8 a9 = (A ^ A) in
    advance (4)
    #008D
    #instruction: LD   (2072),A
    M[2072] := a9;
    advance (13)
    #0090
    #instruction: LD   A,(20E9)
    let:8 a10 = M[20E9] in
    advance (13)
    #0093
    #instruction: AND  A
    let:8 a11 = (a10 & a10) in
    let:8 a12 = (a10 | a10) in
    advance (4)
    #0094
    #instruction: JP   Z,0082
    if (is_zero(a11)) {
      advance (10)
      #0082
      #instruction: POP  HL
      let:16 a13 = (1 + a8) in
      let:8 a14 = M[a8] in
      let:16 a15 = (1 + a13) in
      let:8 a16 = M[a13] in
      advance (10)
      #0083
      #instruction: POP  DE
      let:16 a17 = (1 + a15) in
      let:8 a18 = M[a15] in
      let:16 a19 = (1 + a17) in
      let:8 a20 = M[a17] in
      advance (10)
      #0084
      #instruction: POP  BC
      let:16 a21 = (1 + a19) in
      let:8 a22 = M[a19] in
      let:16 a23 = (1 + a21) in
      let:8 a24 = M[a21] in
      advance (10)
      #0085
      #instruction: POP  PSW
      let:16 a25 = (1 + a23) in
      let:8 a26 = M[a23] in
      let:16 a27 = (1 + a25) in
      let:8 a28 = M[a25] in
      advance (10)
      #0086
      #instruction: EI
      enable_interrupts()
      advance (4)
      #0087
      #instruction: RET
      let:16 a29 = (1 + a27) in
      let:8 a30 = M[a27] in
      let:16 a31 = (1 + a29) in
      let:8 a32 = M[a29] in
      advance (10)
      A := a28;
      B := a24;
      C := a22;
      D := a20;
      E := a18;
      H := a16;
      L := a14;
      SPH := a31[15:8];
      SPL := a31[7:0];
      FlagS := a26[7];
      FlagZ := a26[6];
      FlagA := a26[4];
      FlagP := a26[2];
      FlagCY := a26[0];
      jump ((a32,a30));
    } else {
      advance (10)
      #0097
      #instruction: LD   A,(20EF)
      let:8 a33 = M[20EF] in
      advance (13)
      #009A
      #instruction: AND  A
      let:8 a34 = (a33 & a33) in
      let:8 a35 = (a33 | a33) in
      advance (4)
      #009B
      #instruction: JP   NZ,00A5
      if (!is_zero(a34)) {
        advance (10)
        #00A5
        #instruction: LD   HL,2020
        advance (10)
        #00A8
        #instruction: CALL 024B
        let:16 a36 = (-1 + a8) in
        M[a36] := 00;
        let:16 a37 = (-1 + a36) in
        M[a37] := AB;
        #return-to: 00AB
        advance (17)
        #024B
        #instruction: LD   A,(HL)
        let:8 a38 = M[2020] in
        advance (7)
        #024C
        #instruction: CP   FF
        let:16 a39 = addWithCarry(!false,a38,~FF) in
        let:8 a40 = (a38 & 0F) in
        let:8 a41 = (~FF & 0F) in
        let:16 a42 = addWithCarry(!false,a40,a41) in
        advance (7)
        #024E
        #instruction: RET  Z
        if (is_zero(a39[7:0])) {
          let:16 a43 = (1 + a37) in
          let:8 a44 = M[a37] in
          let:16 a45 = (1 + a43) in
          let:8 a46 = M[a43] in
          advance (11)
          A := a38;
          H := 20;
          L := 20;
          SPH := a45[15:8];
          SPL := a45[7:0];
          FlagS := a39[7:0][7];
          FlagZ := is_zero(a39[7:0]);
          FlagA := a42[7:0][4];
          FlagP := parity(a39[7:0]);
          FlagCY := !a39[15:8][0];
          jump ((a46,a44));
        } else {
          advance (5)
          #024F
          #instruction: CP   FE
          let:16 a47 = addWithCarry(!false,a38,~FE) in
          let:8 a48 = (a38 & 0F) in
          let:8 a49 = (~FE & 0F) in
          let:16 a50 = addWithCarry(!false,a48,a49) in
          advance (7)
          #0251
          #instruction: JP   Z,0281
          if (is_zero(a47[7:0])) {
            advance (10)
            #0281
            #instruction: LD   DE,0010
            advance (10)
            #0284
            #instruction: ADD  HL,DE
            let:17 a51 = add17(0010,2020) in
            advance (10)
            #0285
            #instruction: JP   024B
            advance (10)
            A := a38;
            D := 00;
            E := 10;
            H := a51[15:0][15:8];
            L := a51[15:0][7:0];
            SPH := a37[15:8];
            SPL := a37[7:0];
            FlagS := a47[7:0][7];
            FlagZ := is_zero(a47[7:0]);
            FlagA := a50[7:0][4];
            FlagP := parity(a47[7:0]);
            FlagCY := a51[16];
            jump (024B);
          } else {
            advance (10)
            #0254
            #instruction: INC  HL
            advance (5)
            #0255
            #instruction: LD   B,(HL)
            let:8 a52 = M[2021] in
            advance (7)
            #0256
            #instruction: LD   C,A
            advance (5)
            #0257
            #instruction: OR   B
            let:8 a53 = (a52 | a38) in
            advance (4)
            #0258
            #instruction: LD   A,C
            advance (5)
            #0259
            #instruction: JP   NZ,0277
            if (!is_zero(a53)) {
              advance (10)
              #0277
              #instruction: DEC  B
              let:16 a54 = addWithCarry(!true,a52,~00) in
              let:8 a55 = (a52 & 0F) in
              let:8 a56 = (~00 & 0F) in
              let:16 a57 = addWithCarry(!true,a55,a56) in
              advance (5)
              #0278
              #instruction: INC  B
              let:16 a58 = addWithCarry(true,a54[7:0],00) in
              let:8 a59 = (a54[7:0] & 0F) in
              let:8 a60 = (00 & 0F) in
              let:16 a61 = addWithCarry(true,a59,a60) in
              advance (5)
              #0279
              #instruction: JP   NZ,027D
              if (!is_zero(a58[7:0])) {
                advance (10)
                #027D
                #instruction: DEC  B
                let:16 a62 = addWithCarry(!true,a58[7:0],~00) in
                let:8 a63 = (a58[7:0] & 0F) in
                let:8 a64 = (~00 & 0F) in
                let:16 a65 = addWithCarry(!true,a63,a64) in
                advance (5)
                #027E
                #instruction: LD   (HL),B
                M[2021] := a62[7:0];
                advance (7)
                #027F
                #instruction: DEC  HL
                advance (5)
                #0280
                #instruction: LD   (HL),A
                M[2020] := a38;
                advance (7)
                #0281
                #instruction: LD   DE,0010
                advance (10)
                #0284
                #instruction: ADD  HL,DE
                let:17 a66 = add17(0010,2020) in
                advance (10)
                #0285
                #instruction: JP   024B
                advance (10)
                A := a38;
                B := a62[7:0];
                C := a38;
                D := 00;
                E := 10;
                H := a66[15:0][15:8];
                L := a66[15:0][7:0];
                SPH := a37[15:8];
                SPL := a37[7:0];
                FlagS := a62[7:0][7];
                FlagZ := is_zero(a62[7:0]);
                FlagA := a65[7:0][4];
                FlagP := parity(a62[7:0]);
                FlagCY := a66[16];
                jump (024B);
              } else {
                advance (10)
                #027C
                #instruction: DEC  A
                let:16 a67 = addWithCarry(!true,a38,~00) in
                let:8 a68 = (a38 & 0F) in
                let:8 a69 = (~00 & 0F) in
                let:16 a70 = addWithCarry(!true,a68,a69) in
                advance (5)
                #027D
                #instruction: DEC  B
                let:16 a71 = addWithCarry(!true,a58[7:0],~00) in
                let:8 a72 = (a58[7:0] & 0F) in
                let:8 a73 = (~00 & 0F) in
                let:16 a74 = addWithCarry(!true,a72,a73) in
                advance (5)
                #027E
                #instruction: LD   (HL),B
                M[2021] := a71[7:0];
                advance (7)
                #027F
                #instruction: DEC  HL
                advance (5)
                #0280
                #instruction: LD   (HL),A
                M[2020] := a67[7:0];
                advance (7)
                #0281
                #instruction: LD   DE,0010
                advance (10)
                #0284
                #instruction: ADD  HL,DE
                let:17 a75 = add17(0010,2020) in
                advance (10)
                #0285
                #instruction: JP   024B
                advance (10)
                A := a67[7:0];
                B := a71[7:0];
                C := a38;
                D := 00;
                E := 10;
                H := a75[15:0][15:8];
                L := a75[15:0][7:0];
                SPH := a37[15:8];
                SPL := a37[7:0];
                FlagS := a71[7:0][7];
                FlagZ := is_zero(a71[7:0]);
                FlagA := a74[7:0][4];
                FlagP := parity(a71[7:0]);
                FlagCY := a75[16];
                jump (024B);
              }
            } else {
              advance (10)
              #025C
              #instruction: INC  HL
              advance (5)
              #025D
              #instruction: LD   A,(HL)
              let:8 a76 = M[2022] in
              advance (7)
              #025E
              #instruction: AND  A
              let:8 a77 = (a76 & a76) in
              let:8 a78 = (a76 | a76) in
              advance (4)
              #025F
              #instruction: JP   NZ,0288
              if (!is_zero(a77)) {
                advance (10)
                #0288
                #instruction: DEC  (HL)
                let:8 a79 = M[2022] in
                let:16 a80 = addWithCarry(!true,a79,~00) in
                let:8 a81 = (a79 & 0F) in
                let:8 a82 = (~00 & 0F) in
                let:16 a83 = addWithCarry(!true,a81,a82) in
                M[2022] := a80[7:0];
                advance (10)
                #0289
                #instruction: DEC  HL
                advance (5)
                #028A
                #instruction: DEC  HL
                advance (5)
                #028B
                #instruction: JP   0281
                advance (10)
                #0281
                #instruction: LD   DE,0010
                advance (10)
                #0284
                #instruction: ADD  HL,DE
                let:17 a84 = add17(0010,2020) in
                advance (10)
                #0285
                #instruction: JP   024B
                advance (10)
                A := a77;
                B := a52;
                C := a38;
                D := 00;
                E := 10;
                H := a84[15:0][15:8];
                L := a84[15:0][7:0];
                SPH := a37[15:8];
                SPL := a37[7:0];
                FlagS := a80[7:0][7];
                FlagZ := is_zero(a80[7:0]);
                FlagA := a83[7:0][4];
                FlagP := parity(a80[7:0]);
                FlagCY := a84[16];
                jump (024B);
              } else {
                advance (10)
                #0262
                #instruction: INC  HL
                advance (5)
                #0263
                #instruction: LD   E,(HL)
                let:8 a85 = M[2023] in
                advance (7)
                #0264
                #instruction: INC  HL
                advance (5)
                #0265
                #instruction: LD   D,(HL)
                let:8 a86 = M[2024] in
                advance (7)
                #0266
                #instruction: PUSH HL
                let:16 a87 = (-1 + a37) in
                M[a87] := 20;
                let:16 a88 = (-1 + a87) in
                M[a88] := 24;
                advance (11)
                #0267
                #instruction: EX   DE,HL
                advance (4)
                #0268
                #instruction: PUSH HL
                let:16 a89 = (-1 + a88) in
                M[a89] := a86;
                let:16 a90 = (-1 + a89) in
                M[a90] := a85;
                advance (11)
                #0269
                #instruction: LD   HL,026F
                advance (10)
                #026C
                #instruction: EX   (SP),HL
                let:16 a91 = (1 + a90) in
                let:8 a92 = M[a90] in
                let:8 a93 = M[a91] in
                M[a90] := 6F;
                M[a91] := 02;
                advance (18)
                #026D
                #instruction: PUSH DE
                let:16 a94 = (-1 + a90) in
                M[a94] := 20;
                let:16 a95 = (-1 + a94) in
                M[a95] := 24;
                advance (11)
                #026E
                #instruction: JP   (HL)
                advance (5)
                A := a77;
                B := a52;
                C := a38;
                D := 20;
                E := 24;
                H := a93;
                L := a92;
                SPH := a95[15:8];
                SPL := a95[7:0];
                FlagS := a77[7];
                FlagZ := is_zero(a77);
                FlagA := a78[3];
                FlagP := parity(a77);
                FlagCY := false;
                jump ((a93,a92));
              }
            }
          }
        }
      } else {
        advance (10)
        #009E
        #instruction: LD   A,(20C1)
        let:8 a96 = M[20C1] in
        advance (13)
        #00A1
        #instruction: RRCA
        advance (4)
        #00A2
        #instruction: JP   NC,0082
        if (!a96[0]) {
          advance (10)
          #0082
          #instruction: POP  HL
          let:16 a97 = (1 + a8) in
          let:8 a98 = M[a8] in
          let:16 a99 = (1 + a97) in
          let:8 a100 = M[a97] in
          advance (10)
          #0083
          #instruction: POP  DE
          let:16 a101 = (1 + a99) in
          let:8 a102 = M[a99] in
          let:16 a103 = (1 + a101) in
          let:8 a104 = M[a101] in
          advance (10)
          #0084
          #instruction: POP  BC
          let:16 a105 = (1 + a103) in
          let:8 a106 = M[a103] in
          let:16 a107 = (1 + a105) in
          let:8 a108 = M[a105] in
          advance (10)
          #0085
          #instruction: POP  PSW
          let:16 a109 = (1 + a107) in
          let:8 a110 = M[a107] in
          let:16 a111 = (1 + a109) in
          let:8 a112 = M[a109] in
          advance (10)
          #0086
          #instruction: EI
          enable_interrupts()
          advance (4)
          #0087
          #instruction: RET
          let:16 a113 = (1 + a111) in
          let:8 a114 = M[a111] in
          let:16 a115 = (1 + a113) in
          let:8 a116 = M[a113] in
          advance (10)
          A := a112;
          B := a108;
          C := a106;
          D := a104;
          E := a102;
          H := a100;
          L := a98;
          SPH := a115[15:8];
          SPL := a115[7:0];
          FlagS := a110[7];
          FlagZ := a110[6];
          FlagA := a110[4];
          FlagP := a110[2];
          FlagCY := a110[0];
          jump ((a116,a114));
        } else {
          advance (10)
          #00A5
          #instruction: LD   HL,2020
          advance (10)
          #00A8
          #instruction: CALL 024B
          let:16 a117 = (-1 + a8) in
          M[a117] := 00;
          let:16 a118 = (-1 + a117) in
          M[a118] := AB;
          #return-to: 00AB
          advance (17)
          #024B
          #instruction: LD   A,(HL)
          let:8 a119 = M[2020] in
          advance (7)
          #024C
          #instruction: CP   FF
          let:16 a120 = addWithCarry(!false,a119,~FF) in
          let:8 a121 = (a119 & 0F) in
          let:8 a122 = (~FF & 0F) in
          let:16 a123 = addWithCarry(!false,a121,a122) in
          advance (7)
          #024E
          #instruction: RET  Z
          if (is_zero(a120[7:0])) {
            let:16 a124 = (1 + a118) in
            let:8 a125 = M[a118] in
            let:16 a126 = (1 + a124) in
            let:8 a127 = M[a124] in
            advance (11)
            A := a119;
            H := 20;
            L := 20;
            SPH := a126[15:8];
            SPL := a126[7:0];
            FlagS := a120[7:0][7];
            FlagZ := is_zero(a120[7:0]);
            FlagA := a123[7:0][4];
            FlagP := parity(a120[7:0]);
            FlagCY := !a120[15:8][0];
            jump ((a127,a125));
          } else {
            advance (5)
            #024F
            #instruction: CP   FE
            let:16 a128 = addWithCarry(!false,a119,~FE) in
            let:8 a129 = (a119 & 0F) in
            let:8 a130 = (~FE & 0F) in
            let:16 a131 = addWithCarry(!false,a129,a130) in
            advance (7)
            #0251
            #instruction: JP   Z,0281
            if (is_zero(a128[7:0])) {
              advance (10)
              #0281
              #instruction: LD   DE,0010
              advance (10)
              #0284
              #instruction: ADD  HL,DE
              let:17 a132 = add17(0010,2020) in
              advance (10)
              #0285
              #instruction: JP   024B
              advance (10)
              A := a119;
              D := 00;
              E := 10;
              H := a132[15:0][15:8];
              L := a132[15:0][7:0];
              SPH := a118[15:8];
              SPL := a118[7:0];
              FlagS := a128[7:0][7];
              FlagZ := is_zero(a128[7:0]);
              FlagA := a131[7:0][4];
              FlagP := parity(a128[7:0]);
              FlagCY := a132[16];
              jump (024B);
            } else {
              advance (10)
              #0254
              #instruction: INC  HL
              advance (5)
              #0255
              #instruction: LD   B,(HL)
              let:8 a133 = M[2021] in
              advance (7)
              #0256
              #instruction: LD   C,A
              advance (5)
              #0257
              #instruction: OR   B
              let:8 a134 = (a133 | a119) in
              advance (4)
              #0258
              #instruction: LD   A,C
              advance (5)
              #0259
              #instruction: JP   NZ,0277
              if (!is_zero(a134)) {
                advance (10)
                #0277
                #instruction: DEC  B
                let:16 a135 = addWithCarry(!true,a133,~00) in
                let:8 a136 = (a133 & 0F) in
                let:8 a137 = (~00 & 0F) in
                let:16 a138 = addWithCarry(!true,a136,a137) in
                advance (5)
                #0278
                #instruction: INC  B
                let:16 a139 = addWithCarry(true,a135[7:0],00) in
                let:8 a140 = (a135[7:0] & 0F) in
                let:8 a141 = (00 & 0F) in
                let:16 a142 = addWithCarry(true,a140,a141) in
                advance (5)
                #0279
                #instruction: JP   NZ,027D
                if (!is_zero(a139[7:0])) {
                  advance (10)
                  #027D
                  #instruction: DEC  B
                  let:16 a143 = addWithCarry(!true,a139[7:0],~00) in
                  let:8 a144 = (a139[7:0] & 0F) in
                  let:8 a145 = (~00 & 0F) in
                  let:16 a146 = addWithCarry(!true,a144,a145) in
                  advance (5)
                  #027E
                  #instruction: LD   (HL),B
                  M[2021] := a143[7:0];
                  advance (7)
                  #027F
                  #instruction: DEC  HL
                  advance (5)
                  #0280
                  #instruction: LD   (HL),A
                  M[2020] := a119;
                  advance (7)
                  #0281
                  #instruction: LD   DE,0010
                  advance (10)
                  #0284
                  #instruction: ADD  HL,DE
                  let:17 a147 = add17(0010,2020) in
                  advance (10)
                  #0285
                  #instruction: JP   024B
                  advance (10)
                  A := a119;
                  B := a143[7:0];
                  C := a119;
                  D := 00;
                  E := 10;
                  H := a147[15:0][15:8];
                  L := a147[15:0][7:0];
                  SPH := a118[15:8];
                  SPL := a118[7:0];
                  FlagS := a143[7:0][7];
                  FlagZ := is_zero(a143[7:0]);
                  FlagA := a146[7:0][4];
                  FlagP := parity(a143[7:0]);
                  FlagCY := a147[16];
                  jump (024B);
                } else {
                  advance (10)
                  #027C
                  #instruction: DEC  A
                  let:16 a148 = addWithCarry(!true,a119,~00) in
                  let:8 a149 = (a119 & 0F) in
                  let:8 a150 = (~00 & 0F) in
                  let:16 a151 = addWithCarry(!true,a149,a150) in
                  advance (5)
                  #027D
                  #instruction: DEC  B
                  let:16 a152 = addWithCarry(!true,a139[7:0],~00) in
                  let:8 a153 = (a139[7:0] & 0F) in
                  let:8 a154 = (~00 & 0F) in
                  let:16 a155 = addWithCarry(!true,a153,a154) in
                  advance (5)
                  #027E
                  #instruction: LD   (HL),B
                  M[2021] := a152[7:0];
                  advance (7)
                  #027F
                  #instruction: DEC  HL
                  advance (5)
                  #0280
                  #instruction: LD   (HL),A
                  M[2020] := a148[7:0];
                  advance (7)
                  #0281
                  #instruction: LD   DE,0010
                  advance (10)
                  #0284
                  #instruction: ADD  HL,DE
                  let:17 a156 = add17(0010,2020) in
                  advance (10)
                  #0285
                  #instruction: JP   024B
                  advance (10)
                  A := a148[7:0];
                  B := a152[7:0];
                  C := a119;
                  D := 00;
                  E := 10;
                  H := a156[15:0][15:8];
                  L := a156[15:0][7:0];
                  SPH := a118[15:8];
                  SPL := a118[7:0];
                  FlagS := a152[7:0][7];
                  FlagZ := is_zero(a152[7:0]);
                  FlagA := a155[7:0][4];
                  FlagP := parity(a152[7:0]);
                  FlagCY := a156[16];
                  jump (024B);
                }
              } else {
                advance (10)
                #025C
                #instruction: INC  HL
                advance (5)
                #025D
                #instruction: LD   A,(HL)
                let:8 a157 = M[2022] in
                advance (7)
                #025E
                #instruction: AND  A
                let:8 a158 = (a157 & a157) in
                let:8 a159 = (a157 | a157) in
                advance (4)
                #025F
                #instruction: JP   NZ,0288
                if (!is_zero(a158)) {
                  advance (10)
                  #0288
                  #instruction: DEC  (HL)
                  let:8 a160 = M[2022] in
                  let:16 a161 = addWithCarry(!true,a160,~00) in
                  let:8 a162 = (a160 & 0F) in
                  let:8 a163 = (~00 & 0F) in
                  let:16 a164 = addWithCarry(!true,a162,a163) in
                  M[2022] := a161[7:0];
                  advance (10)
                  #0289
                  #instruction: DEC  HL
                  advance (5)
                  #028A
                  #instruction: DEC  HL
                  advance (5)
                  #028B
                  #instruction: JP   0281
                  advance (10)
                  #0281
                  #instruction: LD   DE,0010
                  advance (10)
                  #0284
                  #instruction: ADD  HL,DE
                  let:17 a165 = add17(0010,2020) in
                  advance (10)
                  #0285
                  #instruction: JP   024B
                  advance (10)
                  A := a158;
                  B := a133;
                  C := a119;
                  D := 00;
                  E := 10;
                  H := a165[15:0][15:8];
                  L := a165[15:0][7:0];
                  SPH := a118[15:8];
                  SPL := a118[7:0];
                  FlagS := a161[7:0][7];
                  FlagZ := is_zero(a161[7:0]);
                  FlagA := a164[7:0][4];
                  FlagP := parity(a161[7:0]);
                  FlagCY := a165[16];
                  jump (024B);
                } else {
                  advance (10)
                  #0262
                  #instruction: INC  HL
                  advance (5)
                  #0263
                  #instruction: LD   E,(HL)
                  let:8 a166 = M[2023] in
                  advance (7)
                  #0264
                  #instruction: INC  HL
                  advance (5)
                  #0265
                  #instruction: LD   D,(HL)
                  let:8 a167 = M[2024] in
                  advance (7)
                  #0266
                  #instruction: PUSH HL
                  let:16 a168 = (-1 + a118) in
                  M[a168] := 20;
                  let:16 a169 = (-1 + a168) in
                  M[a169] := 24;
                  advance (11)
                  #0267
                  #instruction: EX   DE,HL
                  advance (4)
                  #0268
                  #instruction: PUSH HL
                  let:16 a170 = (-1 + a169) in
                  M[a170] := a167;
                  let:16 a171 = (-1 + a170) in
                  M[a171] := a166;
                  advance (11)
                  #0269
                  #instruction: LD   HL,026F
                  advance (10)
                  #026C
                  #instruction: EX   (SP),HL
                  let:16 a172 = (1 + a171) in
                  let:8 a173 = M[a171] in
                  let:8 a174 = M[a172] in
                  M[a171] := 6F;
                  M[a172] := 02;
                  advance (18)
                  #026D
                  #instruction: PUSH DE
                  let:16 a175 = (-1 + a171) in
                  M[a175] := 20;
                  let:16 a176 = (-1 + a175) in
                  M[a176] := 24;
                  advance (11)
                  #026E
                  #instruction: JP   (HL)
                  advance (5)
                  A := a158;
                  B := a133;
                  C := a119;
                  D := 20;
                  E := 24;
                  H := a174;
                  L := a173;
                  SPH := a176[15:8];
                  SPL := a176[7:0];
                  FlagS := a158[7];
                  FlagZ := is_zero(a158);
                  FlagA := a159[3];
                  FlagP := parity(a158);
                  FlagCY := false;
                  jump ((a174,a173));
                }
              }
            }
          }
        }
      }
    }

0010:

    #0010
    #instruction: PUSH PSW
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #0011
    #instruction: PUSH BC
    let:16 a3 = (-1 + a2) in
    M[a3] := B;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    advance (11)
    #0012
    #instruction: PUSH DE
    let:16 a5 = (-1 + a4) in
    M[a5] := D;
    let:16 a6 = (-1 + a5) in
    M[a6] := E;
    advance (11)
    #0013
    #instruction: PUSH HL
    let:16 a7 = (-1 + a6) in
    M[a7] := H;
    let:16 a8 = (-1 + a7) in
    M[a8] := L;
    advance (11)
    #0014
    #instruction: LD   A,80
    advance (7)
    #0016
    #instruction: LD   (2072),A
    M[2072] := 80;
    advance (13)
    #0019
    #instruction: LD   HL,20C0
    advance (10)
    #001C
    #instruction: DEC  (HL)
    let:8 a9 = M[20C0] in
    let:16 a10 = addWithCarry(!true,a9,~00) in
    let:8 a11 = (a9 & 0F) in
    let:8 a12 = (~00 & 0F) in
    let:16 a13 = addWithCarry(!true,a11,a12) in
    M[20C0] := a10[7:0];
    advance (10)
    #001D
    #instruction: CALL 17CD
    let:16 a14 = (-1 + a8) in
    M[a14] := 00;
    let:16 a15 = (-1 + a14) in
    M[a15] := 20;
    #return-to: 0020
    advance (17)
    #17CD
    #instruction: IN   02
    advance (10)
    #17CF
    #instruction: AND  04
    let:8 a16 = (04 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
    let:8 a17 = (04 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
    advance (7)
    #17D1
    #instruction: RET  Z
    if (is_zero(a16)) {
      let:16 a18 = (1 + a15) in
      let:8 a19 = M[a15] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (11)
      A := a16;
      H := 20;
      L := C0;
      SPH := a20[15:8];
      SPL := a20[7:0];
      FlagS := a16[7];
      FlagZ := is_zero(a16);
      FlagA := a17[3];
      FlagP := parity(a16);
      FlagCY := false;
      jump ((a21,a19));
    } else {
      advance (5)
      #17D2
      #instruction: LD   A,(209A)
      let:8 a22 = M[209A] in
      advance (13)
      #17D5
      #instruction: AND  A
      let:8 a23 = (a22 & a22) in
      let:8 a24 = (a22 | a22) in
      advance (4)
      #17D6
      #instruction: RET  NZ
      if (!is_zero(a23)) {
        let:16 a25 = (1 + a15) in
        let:8 a26 = M[a15] in
        let:16 a27 = (1 + a25) in
        let:8 a28 = M[a25] in
        advance (11)
        A := a23;
        H := 20;
        L := C0;
        SPH := a27[15:8];
        SPL := a27[7:0];
        FlagS := a23[7];
        FlagZ := is_zero(a23);
        FlagA := a24[3];
        FlagP := parity(a23);
        FlagCY := false;
        jump ((a28,a26));
      } else {
        advance (5)
        #17D7
        #instruction: LD   SP,2400
        advance (10)
        #17DA
        #instruction: LD   B,04
        advance (7)
        #17DC
        #instruction: CALL 09D6
        M[23FF] := 17;
        M[23FE] := DF;
        #return-to: 17DF
        advance (17)
        #09D6
        #instruction: LD   HL,2402
        advance (10)
        #09D9
        #instruction: LD   (HL),00
        M[2402] := 00;
        advance (10)
        #09DB
        #instruction: INC  HL
        advance (5)
        #09DC
        #instruction: LD   A,L
        advance (5)
        #09DD
        #instruction: AND  1F
        let:8 a29 = (1F & 03) in
        let:8 a30 = (1F | 03) in
        advance (7)
        #09DF
        #instruction: CP   1C
        let:16 a31 = addWithCarry(!false,a29,~1C) in
        let:8 a32 = (a29 & 0F) in
        let:8 a33 = (~1C & 0F) in
        let:16 a34 = addWithCarry(!false,a32,a33) in
        advance (7)
        #09E1
        #instruction: JP   CY,09E8
        if (!a31[15:8][0]) {
          advance (10)
          #09E8
          #instruction: LD   A,H
          advance (5)
          #09E9
          #instruction: CP   40
          let:16 a35 = addWithCarry(!false,24,~40) in
          let:8 a36 = (24 & 0F) in
          let:8 a37 = (~40 & 0F) in
          let:16 a38 = addWithCarry(!false,a36,a37) in
          advance (7)
          #09EB
          #instruction: JP   CY,09D9
          if (!a35[15:8][0]) {
            advance (10)
            A := 24;
            B := 04;
            H := 24;
            L := 03;
            SPH := 23;
            SPL := FE;
            FlagS := a35[7:0][7];
            FlagZ := is_zero(a35[7:0]);
            FlagA := a38[7:0][4];
            FlagP := parity(a35[7:0]);
            FlagCY := !a35[15:8][0];
            jump (09D9);
          } else {
            advance (10)
            #09EE
            #instruction: RET
            let:8 a39 = M[23FE] in
            let:8 a40 = M[23FF] in
            advance (10)
            A := 24;
            B := 04;
            H := 24;
            L := 03;
            SPH := 24;
            SPL := 00;
            FlagS := a35[7:0][7];
            FlagZ := is_zero(a35[7:0]);
            FlagA := a38[7:0][4];
            FlagP := parity(a35[7:0]);
            FlagCY := !a35[15:8][0];
            jump ((a40,a39));
          }
        } else {
          advance (10)
          #09E4
          #instruction: LD   DE,0006
          advance (10)
          #09E7
          #instruction: ADD  HL,DE
          let:17 a41 = add17(0006,2403) in
          advance (10)
          #09E8
          #instruction: LD   A,H
          advance (5)
          #09E9
          #instruction: CP   40
          let:16 a42 = addWithCarry(!false,a41[15:0][15:8],~40) in
          let:8 a43 = (a41[15:0][15:8] & 0F) in
          let:8 a44 = (~40 & 0F) in
          let:16 a45 = addWithCarry(!false,a43,a44) in
          advance (7)
          #09EB
          #instruction: JP   CY,09D9
          if (!a42[15:8][0]) {
            advance (10)
            A := a41[15:0][15:8];
            B := 04;
            D := 00;
            E := 06;
            H := a41[15:0][15:8];
            L := a41[15:0][7:0];
            SPH := 23;
            SPL := FE;
            FlagS := a42[7:0][7];
            FlagZ := is_zero(a42[7:0]);
            FlagA := a45[7:0][4];
            FlagP := parity(a42[7:0]);
            FlagCY := !a42[15:8][0];
            jump (09D9);
          } else {
            advance (10)
            #09EE
            #instruction: RET
            let:8 a46 = M[23FE] in
            let:8 a47 = M[23FF] in
            advance (10)
            A := a41[15:0][15:8];
            B := 04;
            D := 00;
            E := 06;
            H := a41[15:0][15:8];
            L := a41[15:0][7:0];
            SPH := 24;
            SPL := 00;
            FlagS := a42[7:0][7];
            FlagZ := is_zero(a42[7:0]);
            FlagA := a45[7:0][4];
            FlagP := parity(a42[7:0]);
            FlagCY := !a42[15:8][0];
            jump ((a47,a46));
          }
        }
      }
    }

0020:

    #0020
    #instruction: IN   01
    advance (10)
    #0022
    #instruction: RRCA
    advance (4)
    #0023
    #instruction: JP   CY,0067
    if (updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) {
      advance (10)
      #0067
      #instruction: LD   A,01
      advance (7)
      #0069
      #instruction: LD   (20EA),A
      M[20EA] := 01;
      advance (13)
      #006C
      #instruction: JP   003F
      advance (10)
      #003F
      #instruction: LD   (20EA),A
      M[20EA] := 01;
      advance (13)
      #0042
      #instruction: LD   A,(20E9)
      let:8 a1 = M[20E9] in
      advance (13)
      #0045
      #instruction: AND  A
      let:8 a2 = (a1 & a1) in
      let:8 a3 = (a1 | a1) in
      advance (4)
      #0046
      #instruction: JP   Z,0082
      if (is_zero(a2)) {
        advance (10)
        #0082
        #instruction: POP  HL
        let:16 a4 = (1 + (SPH,SPL)) in
        let:8 a5 = M[(SPH,SPL)] in
        let:16 a6 = (1 + a4) in
        let:8 a7 = M[a4] in
        advance (10)
        #0083
        #instruction: POP  DE
        let:16 a8 = (1 + a6) in
        let:8 a9 = M[a6] in
        let:16 a10 = (1 + a8) in
        let:8 a11 = M[a8] in
        advance (10)
        #0084
        #instruction: POP  BC
        let:16 a12 = (1 + a10) in
        let:8 a13 = M[a10] in
        let:16 a14 = (1 + a12) in
        let:8 a15 = M[a12] in
        advance (10)
        #0085
        #instruction: POP  PSW
        let:16 a16 = (1 + a14) in
        let:8 a17 = M[a14] in
        let:16 a18 = (1 + a16) in
        let:8 a19 = M[a16] in
        advance (10)
        #0086
        #instruction: EI
        enable_interrupts()
        advance (4)
        #0087
        #instruction: RET
        let:16 a20 = (1 + a18) in
        let:8 a21 = M[a18] in
        let:16 a22 = (1 + a20) in
        let:8 a23 = M[a20] in
        advance (10)
        A := a19;
        B := a15;
        C := a13;
        D := a11;
        E := a9;
        H := a7;
        L := a5;
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a17[7];
        FlagZ := a17[6];
        FlagA := a17[4];
        FlagP := a17[2];
        FlagCY := a17[0];
        jump ((a23,a21));
      } else {
        advance (10)
        #0049
        #instruction: LD   A,(20EF)
        let:8 a24 = M[20EF] in
        advance (13)
        #004C
        #instruction: AND  A
        let:8 a25 = (a24 & a24) in
        let:8 a26 = (a24 | a24) in
        advance (4)
        #004D
        #instruction: JP   NZ,006F
        if (!is_zero(a25)) {
          advance (10)
          #006F
          #instruction: CALL 1740
          let:16 a27 = (-1 + (SPH,SPL)) in
          M[a27] := 00;
          let:16 a28 = (-1 + a27) in
          M[a28] := 72;
          #return-to: 0072
          advance (17)
          #1740
          #instruction: LD   HL,209B
          advance (10)
          #1743
          #instruction: DEC  (HL)
          let:8 a29 = M[209B] in
          let:16 a30 = addWithCarry(!true,a29,~00) in
          let:8 a31 = (a29 & 0F) in
          let:8 a32 = (~00 & 0F) in
          let:16 a33 = addWithCarry(!true,a31,a32) in
          M[209B] := a30[7:0];
          advance (10)
          #1744
          #instruction: CALL Z,176D
          if (is_zero(a30[7:0])) {
            let:16 a34 = (-1 + a28) in
            M[a34] := 17;
            let:16 a35 = (-1 + a34) in
            M[a35] := 47;
            #return-to: 1747
            advance (17)
            #176D
            #instruction: LD   A,(2098)
            let:8 a36 = M[2098] in
            advance (13)
            #1770
            #instruction: AND  30
            let:8 a37 = (30 & a36) in
            let:8 a38 = (30 | a36) in
            advance (7)
            #1772
            #instruction: OUT  05
            sound_control(FleetMovement1,a37[0]);
            sound_control(FleetMovement2,a37[1]);
            sound_control(FleetMovement3,a37[2]);
            sound_control(FleetMovement4,a37[3]);
            sound_control(UfoHit,a37[4]);
            advance (10)
            #1774
            #instruction: RET
            let:16 a39 = (1 + a35) in
            let:8 a40 = M[a35] in
            let:16 a41 = (1 + a39) in
            let:8 a42 = M[a39] in
            advance (10)
            A := a37;
            H := 20;
            L := 9B;
            SPH := a41[15:8];
            SPL := a41[7:0];
            FlagS := a37[7];
            FlagZ := is_zero(a37);
            FlagA := a38[3];
            FlagP := parity(a37);
            FlagCY := false;
            jump ((a42,a40));
          } else {
            advance (11)
            A := a25;
            H := 20;
            L := 9B;
            SPH := a28[15:8];
            SPL := a28[7:0];
            FlagS := a30[7:0][7];
            FlagZ := is_zero(a30[7:0]);
            FlagA := a33[7:0][4];
            FlagP := parity(a30[7:0]);
            FlagCY := false;
            jump (1747);
          }
        } else {
          advance (10)
          #0050
          #instruction: LD   A,(20EB)
          let:8 a43 = M[20EB] in
          advance (13)
          #0053
          #instruction: AND  A
          let:8 a44 = (a43 & a43) in
          let:8 a45 = (a43 | a43) in
          advance (4)
          #0054
          #instruction: JP   NZ,005D
          if (!is_zero(a44)) {
            advance (10)
            #005D
            #instruction: LD   A,(2093)
            let:8 a46 = M[2093] in
            advance (13)
            #0060
            #instruction: AND  A
            let:8 a47 = (a46 & a46) in
            let:8 a48 = (a46 | a46) in
            advance (4)
            #0061
            #instruction: JP   NZ,0082
            if (!is_zero(a47)) {
              advance (10)
              #0082
              #instruction: POP  HL
              let:16 a49 = (1 + (SPH,SPL)) in
              let:8 a50 = M[(SPH,SPL)] in
              let:16 a51 = (1 + a49) in
              let:8 a52 = M[a49] in
              advance (10)
              #0083
              #instruction: POP  DE
              let:16 a53 = (1 + a51) in
              let:8 a54 = M[a51] in
              let:16 a55 = (1 + a53) in
              let:8 a56 = M[a53] in
              advance (10)
              #0084
              #instruction: POP  BC
              let:16 a57 = (1 + a55) in
              let:8 a58 = M[a55] in
              let:16 a59 = (1 + a57) in
              let:8 a60 = M[a57] in
              advance (10)
              #0085
              #instruction: POP  PSW
              let:16 a61 = (1 + a59) in
              let:8 a62 = M[a59] in
              let:16 a63 = (1 + a61) in
              let:8 a64 = M[a61] in
              advance (10)
              #0086
              #instruction: EI
              enable_interrupts()
              advance (4)
              #0087
              #instruction: RET
              let:16 a65 = (1 + a63) in
              let:8 a66 = M[a63] in
              let:16 a67 = (1 + a65) in
              let:8 a68 = M[a65] in
              advance (10)
              A := a64;
              B := a60;
              C := a58;
              D := a56;
              E := a54;
              H := a52;
              L := a50;
              SPH := a67[15:8];
              SPL := a67[7:0];
              FlagS := a62[7];
              FlagZ := a62[6];
              FlagA := a62[4];
              FlagP := a62[2];
              FlagCY := a62[0];
              jump ((a68,a66));
            } else {
              advance (10)
              #0064
              #instruction: JP   0765
              advance (10)
              #0765
              #instruction: LD   A,01
              advance (7)
              #0767
              #instruction: LD   (2093),A
              M[2093] := 01;
              advance (13)
              #076A
              #instruction: LD   SP,2400
              advance (10)
              #076D
              #instruction: EI
              enable_interrupts()
              advance (4)
              #076E
              #instruction: CALL 1979
              M[23FF] := 07;
              M[23FE] := 71;
              #return-to: 0771
              advance (17)
              #1979
              #instruction: CALL 19D7
              M[23FD] := 19;
              M[23FC] := 7C;
              #return-to: 197C
              advance (17)
              #19D7
              #instruction: XOR  A
              let:8 a69 = (01 ^ 01) in
              advance (4)
              #19D8
              #instruction: JP   19D3
              advance (10)
              #19D3
              #instruction: LD   (20E9),A
              M[20E9] := a69;
              advance (13)
              #19D6
              #instruction: RET
              let:8 a70 = M[23FC] in
              let:8 a71 = M[23FD] in
              advance (10)
              A := a69;
              SPH := 23;
              SPL := FE;
              FlagS := a69[7];
              FlagZ := is_zero(a69);
              FlagA := false;
              FlagP := parity(a69);
              FlagCY := false;
              jump ((a71,a70));
            }
          } else {
            advance (10)
            #0057
            #instruction: CALL 0ABF
            let:16 a72 = (-1 + (SPH,SPL)) in
            M[a72] := 00;
            let:16 a73 = (-1 + a72) in
            M[a73] := 5A;
            #return-to: 005A
            advance (17)
            #0ABF
            #instruction: LD   A,(20C1)
            let:8 a74 = M[20C1] in
            advance (13)
            #0AC2
            #instruction: RRCA
            advance (4)
            #0AC3
            #instruction: JP   CY,0ABB
            if (a74[0]) {
              advance (10)
              #0ABB
              #instruction: POP  HL
              let:16 a75 = (1 + a73) in
              let:8 a76 = M[a73] in
              let:16 a77 = (1 + a75) in
              let:8 a78 = M[a75] in
              advance (10)
              #0ABC
              #instruction: JP   0072
              advance (10)
              A := updateBit((a74 >> 01),7,a74[0]);
              H := a78;
              L := a76;
              SPH := a77[15:8];
              SPL := a77[7:0];
              FlagS := a44[7];
              FlagZ := is_zero(a44);
              FlagA := a45[3];
              FlagP := parity(a44);
              FlagCY := a74[0];
              jump (0072);
            } else {
              advance (10)
              #0AC6
              #instruction: RRCA
              advance (4)
              #0AC7
              #instruction: JP   CY,1868
              if (updateBit((a74 >> 01),7,a74[0])[0]) {
                advance (10)
                #1868
                #instruction: LD   HL,20C2
                advance (10)
                #186B
                #instruction: INC  (HL)
                let:8 a79 = M[20C2] in
                let:16 a80 = addWithCarry(true,a79,00) in
                let:8 a81 = (a79 & 0F) in
                let:8 a82 = (00 & 0F) in
                let:16 a83 = addWithCarry(true,a81,a82) in
                M[20C2] := a80[7:0];
                advance (10)
                #186C
                #instruction: INC  HL
                advance (5)
                #186D
                #instruction: LD   C,(HL)
                let:8 a84 = M[20C3] in
                advance (7)
                #186E
                #instruction: CALL 01D9
                let:16 a85 = (-1 + a73) in
                M[a85] := 18;
                let:16 a86 = (-1 + a85) in
                M[a86] := 71;
                #return-to: 1871
                advance (17)
                #01D9
                #instruction: INC  HL
                advance (5)
                #01DA
                #instruction: LD   B,(HL)
                let:8 a87 = M[20C4] in
                advance (7)
                #01DB
                #instruction: INC  HL
                advance (5)
                #01DC
                #instruction: LD   A,C
                advance (5)
                #01DD
                #instruction: ADD  (HL)
                let:8 a88 = M[20C5] in
                let:16 a89 = addWithCarry(false,a88,a84) in
                let:8 a90 = (a88 & 0F) in
                let:8 a91 = (a84 & 0F) in
                let:16 a92 = addWithCarry(false,a90,a91) in
                advance (7)
                #01DE
                #instruction: LD   (HL),A
                M[20C5] := a89[7:0];
                advance (7)
                #01DF
                #instruction: INC  HL
                advance (5)
                #01E0
                #instruction: LD   A,B
                advance (5)
                #01E1
                #instruction: ADD  (HL)
                let:8 a93 = M[20C6] in
                let:16 a94 = addWithCarry(false,a93,a87) in
                let:8 a95 = (a93 & 0F) in
                let:8 a96 = (a87 & 0F) in
                let:16 a97 = addWithCarry(false,a95,a96) in
                advance (7)
                #01E2
                #instruction: LD   (HL),A
                M[20C6] := a94[7:0];
                advance (7)
                #01E3
                #instruction: RET
                let:16 a98 = (1 + a86) in
                let:8 a99 = M[a86] in
                let:16 a100 = (1 + a98) in
                let:8 a101 = M[a98] in
                advance (10)
                A := a94[7:0];
                B := a87;
                C := a84;
                H := 20;
                L := C6;
                SPH := a100[15:8];
                SPL := a100[7:0];
                FlagS := a94[7:0][7];
                FlagZ := is_zero(a94[7:0]);
                FlagA := a97[7:0][4];
                FlagP := parity(a94[7:0]);
                FlagCY := a94[15:8][0];
                jump ((a101,a99));
              } else {
                advance (10)
                #0ACA
                #instruction: RRCA
                advance (4)
                #0ACB
                #instruction: JP   CY,0AAB
                if (updateBit((updateBit((a74 >> 01),7,a74[0]) >> 01),7,updateBit((a74 >> 01),7,a74[0])[0])[0]) {
                  advance (10)
                  #0AAB
                  #instruction: LD   HL,2050
                  advance (10)
                  #0AAE
                  #instruction: JP   024B
                  advance (10)
                  #024B
                  #instruction: LD   A,(HL)
                  let:8 a102 = M[2050] in
                  advance (7)
                  #024C
                  #instruction: CP   FF
                  let:16 a103 = addWithCarry(!false,a102,~FF) in
                  let:8 a104 = (a102 & 0F) in
                  let:8 a105 = (~FF & 0F) in
                  let:16 a106 = addWithCarry(!false,a104,a105) in
                  advance (7)
                  #024E
                  #instruction: RET  Z
                  if (is_zero(a103[7:0])) {
                    let:16 a107 = (1 + a73) in
                    let:8 a108 = M[a73] in
                    let:16 a109 = (1 + a107) in
                    let:8 a110 = M[a107] in
                    advance (11)
                    A := a102;
                    H := 20;
                    L := 50;
                    SPH := a109[15:8];
                    SPL := a109[7:0];
                    FlagS := a103[7:0][7];
                    FlagZ := is_zero(a103[7:0]);
                    FlagA := a106[7:0][4];
                    FlagP := parity(a103[7:0]);
                    FlagCY := !a103[15:8][0];
                    jump ((a110,a108));
                  } else {
                    advance (5)
                    #024F
                    #instruction: CP   FE
                    let:16 a111 = addWithCarry(!false,a102,~FE) in
                    let:8 a112 = (a102 & 0F) in
                    let:8 a113 = (~FE & 0F) in
                    let:16 a114 = addWithCarry(!false,a112,a113) in
                    advance (7)
                    #0251
                    #instruction: JP   Z,0281
                    if (is_zero(a111[7:0])) {
                      advance (10)
                      #0281
                      #instruction: LD   DE,0010
                      advance (10)
                      #0284
                      #instruction: ADD  HL,DE
                      let:17 a115 = add17(0010,2050) in
                      advance (10)
                      #0285
                      #instruction: JP   024B
                      advance (10)
                      A := a102;
                      D := 00;
                      E := 10;
                      H := a115[15:0][15:8];
                      L := a115[15:0][7:0];
                      SPH := a73[15:8];
                      SPL := a73[7:0];
                      FlagS := a111[7:0][7];
                      FlagZ := is_zero(a111[7:0]);
                      FlagA := a114[7:0][4];
                      FlagP := parity(a111[7:0]);
                      FlagCY := a115[16];
                      jump (024B);
                    } else {
                      advance (10)
                      #0254
                      #instruction: INC  HL
                      advance (5)
                      #0255
                      #instruction: LD   B,(HL)
                      let:8 a116 = M[2051] in
                      advance (7)
                      #0256
                      #instruction: LD   C,A
                      advance (5)
                      #0257
                      #instruction: OR   B
                      let:8 a117 = (a116 | a102) in
                      advance (4)
                      #0258
                      #instruction: LD   A,C
                      advance (5)
                      #0259
                      #instruction: JP   NZ,0277
                      if (!is_zero(a117)) {
                        advance (10)
                        #0277
                        #instruction: DEC  B
                        let:16 a118 = addWithCarry(!true,a116,~00) in
                        let:8 a119 = (a116 & 0F) in
                        let:8 a120 = (~00 & 0F) in
                        let:16 a121 = addWithCarry(!true,a119,a120) in
                        advance (5)
                        #0278
                        #instruction: INC  B
                        let:16 a122 = addWithCarry(true,a118[7:0],00) in
                        let:8 a123 = (a118[7:0] & 0F) in
                        let:8 a124 = (00 & 0F) in
                        let:16 a125 = addWithCarry(true,a123,a124) in
                        advance (5)
                        #0279
                        #instruction: JP   NZ,027D
                        if (!is_zero(a122[7:0])) {
                          advance (10)
                          #027D
                          #instruction: DEC  B
                          let:16 a126 = addWithCarry(!true,a122[7:0],~00) in
                          let:8 a127 = (a122[7:0] & 0F) in
                          let:8 a128 = (~00 & 0F) in
                          let:16 a129 = addWithCarry(!true,a127,a128) in
                          advance (5)
                          #027E
                          #instruction: LD   (HL),B
                          M[2051] := a126[7:0];
                          advance (7)
                          #027F
                          #instruction: DEC  HL
                          advance (5)
                          #0280
                          #instruction: LD   (HL),A
                          M[2050] := a102;
                          advance (7)
                          #0281
                          #instruction: LD   DE,0010
                          advance (10)
                          #0284
                          #instruction: ADD  HL,DE
                          let:17 a130 = add17(0010,2050) in
                          advance (10)
                          #0285
                          #instruction: JP   024B
                          advance (10)
                          A := a102;
                          B := a126[7:0];
                          C := a102;
                          D := 00;
                          E := 10;
                          H := a130[15:0][15:8];
                          L := a130[15:0][7:0];
                          SPH := a73[15:8];
                          SPL := a73[7:0];
                          FlagS := a126[7:0][7];
                          FlagZ := is_zero(a126[7:0]);
                          FlagA := a129[7:0][4];
                          FlagP := parity(a126[7:0]);
                          FlagCY := a130[16];
                          jump (024B);
                        } else {
                          advance (10)
                          #027C
                          #instruction: DEC  A
                          let:16 a131 = addWithCarry(!true,a102,~00) in
                          let:8 a132 = (a102 & 0F) in
                          let:8 a133 = (~00 & 0F) in
                          let:16 a134 = addWithCarry(!true,a132,a133) in
                          advance (5)
                          #027D
                          #instruction: DEC  B
                          let:16 a135 = addWithCarry(!true,a122[7:0],~00) in
                          let:8 a136 = (a122[7:0] & 0F) in
                          let:8 a137 = (~00 & 0F) in
                          let:16 a138 = addWithCarry(!true,a136,a137) in
                          advance (5)
                          #027E
                          #instruction: LD   (HL),B
                          M[2051] := a135[7:0];
                          advance (7)
                          #027F
                          #instruction: DEC  HL
                          advance (5)
                          #0280
                          #instruction: LD   (HL),A
                          M[2050] := a131[7:0];
                          advance (7)
                          #0281
                          #instruction: LD   DE,0010
                          advance (10)
                          #0284
                          #instruction: ADD  HL,DE
                          let:17 a139 = add17(0010,2050) in
                          advance (10)
                          #0285
                          #instruction: JP   024B
                          advance (10)
                          A := a131[7:0];
                          B := a135[7:0];
                          C := a102;
                          D := 00;
                          E := 10;
                          H := a139[15:0][15:8];
                          L := a139[15:0][7:0];
                          SPH := a73[15:8];
                          SPL := a73[7:0];
                          FlagS := a135[7:0][7];
                          FlagZ := is_zero(a135[7:0]);
                          FlagA := a138[7:0][4];
                          FlagP := parity(a135[7:0]);
                          FlagCY := a139[16];
                          jump (024B);
                        }
                      } else {
                        advance (10)
                        #025C
                        #instruction: INC  HL
                        advance (5)
                        #025D
                        #instruction: LD   A,(HL)
                        let:8 a140 = M[2052] in
                        advance (7)
                        #025E
                        #instruction: AND  A
                        let:8 a141 = (a140 & a140) in
                        let:8 a142 = (a140 | a140) in
                        advance (4)
                        #025F
                        #instruction: JP   NZ,0288
                        if (!is_zero(a141)) {
                          advance (10)
                          #0288
                          #instruction: DEC  (HL)
                          let:8 a143 = M[2052] in
                          let:16 a144 = addWithCarry(!true,a143,~00) in
                          let:8 a145 = (a143 & 0F) in
                          let:8 a146 = (~00 & 0F) in
                          let:16 a147 = addWithCarry(!true,a145,a146) in
                          M[2052] := a144[7:0];
                          advance (10)
                          #0289
                          #instruction: DEC  HL
                          advance (5)
                          #028A
                          #instruction: DEC  HL
                          advance (5)
                          #028B
                          #instruction: JP   0281
                          advance (10)
                          #0281
                          #instruction: LD   DE,0010
                          advance (10)
                          #0284
                          #instruction: ADD  HL,DE
                          let:17 a148 = add17(0010,2050) in
                          advance (10)
                          #0285
                          #instruction: JP   024B
                          advance (10)
                          A := a141;
                          B := a116;
                          C := a102;
                          D := 00;
                          E := 10;
                          H := a148[15:0][15:8];
                          L := a148[15:0][7:0];
                          SPH := a73[15:8];
                          SPL := a73[7:0];
                          FlagS := a144[7:0][7];
                          FlagZ := is_zero(a144[7:0]);
                          FlagA := a147[7:0][4];
                          FlagP := parity(a144[7:0]);
                          FlagCY := a148[16];
                          jump (024B);
                        } else {
                          advance (10)
                          #0262
                          #instruction: INC  HL
                          advance (5)
                          #0263
                          #instruction: LD   E,(HL)
                          let:8 a149 = M[2053] in
                          advance (7)
                          #0264
                          #instruction: INC  HL
                          advance (5)
                          #0265
                          #instruction: LD   D,(HL)
                          let:8 a150 = M[2054] in
                          advance (7)
                          #0266
                          #instruction: PUSH HL
                          let:16 a151 = (-1 + a73) in
                          M[a151] := 20;
                          let:16 a152 = (-1 + a151) in
                          M[a152] := 54;
                          advance (11)
                          #0267
                          #instruction: EX   DE,HL
                          advance (4)
                          #0268
                          #instruction: PUSH HL
                          let:16 a153 = (-1 + a152) in
                          M[a153] := a150;
                          let:16 a154 = (-1 + a153) in
                          M[a154] := a149;
                          advance (11)
                          #0269
                          #instruction: LD   HL,026F
                          advance (10)
                          #026C
                          #instruction: EX   (SP),HL
                          let:16 a155 = (1 + a154) in
                          let:8 a156 = M[a154] in
                          let:8 a157 = M[a155] in
                          M[a154] := 6F;
                          M[a155] := 02;
                          advance (18)
                          #026D
                          #instruction: PUSH DE
                          let:16 a158 = (-1 + a154) in
                          M[a158] := 20;
                          let:16 a159 = (-1 + a158) in
                          M[a159] := 54;
                          advance (11)
                          #026E
                          #instruction: JP   (HL)
                          advance (5)
                          A := a141;
                          B := a116;
                          C := a102;
                          D := 20;
                          E := 54;
                          H := a157;
                          L := a156;
                          SPH := a159[15:8];
                          SPL := a159[7:0];
                          FlagS := a141[7];
                          FlagZ := is_zero(a141);
                          FlagA := a142[3];
                          FlagP := parity(a141);
                          FlagCY := false;
                          jump ((a157,a156));
                        }
                      }
                    }
                  }
                } else {
                  advance (10)
                  #0ACE
                  #instruction: RET
                  let:16 a160 = (1 + a73) in
                  let:8 a161 = M[a73] in
                  let:16 a162 = (1 + a160) in
                  let:8 a163 = M[a160] in
                  advance (10)
                  A := updateBit((updateBit((updateBit((a74 >> 01),7,a74[0]) >> 01),7,updateBit((a74 >> 01),7,a74[0])[0]) >> 01),7,updateBit((updateBit((a74 >> 01),7,a74[0]) >> 01),7,updateBit((a74 >> 01),7,a74[0])[0])[0]);
                  SPH := a162[15:8];
                  SPL := a162[7:0];
                  FlagS := a44[7];
                  FlagZ := is_zero(a44);
                  FlagA := a45[3];
                  FlagP := parity(a44);
                  FlagCY := updateBit((updateBit((a74 >> 01),7,a74[0]) >> 01),7,updateBit((a74 >> 01),7,a74[0])[0])[0];
                  jump ((a163,a161));
                }
              }
            }
          }
        }
      }
    } else {
      advance (10)
      #0026
      #instruction: LD   A,(20EA)
      let:8 a164 = M[20EA] in
      advance (13)
      #0029
      #instruction: AND  A
      let:8 a165 = (a164 & a164) in
      let:8 a166 = (a164 | a164) in
      advance (4)
      #002A
      #instruction: JP   Z,0042
      if (is_zero(a165)) {
        advance (10)
        #0042
        #instruction: LD   A,(20E9)
        let:8 a167 = M[20E9] in
        advance (13)
        #0045
        #instruction: AND  A
        let:8 a168 = (a167 & a167) in
        let:8 a169 = (a167 | a167) in
        advance (4)
        #0046
        #instruction: JP   Z,0082
        if (is_zero(a168)) {
          advance (10)
          #0082
          #instruction: POP  HL
          let:16 a170 = (1 + (SPH,SPL)) in
          let:8 a171 = M[(SPH,SPL)] in
          let:16 a172 = (1 + a170) in
          let:8 a173 = M[a170] in
          advance (10)
          #0083
          #instruction: POP  DE
          let:16 a174 = (1 + a172) in
          let:8 a175 = M[a172] in
          let:16 a176 = (1 + a174) in
          let:8 a177 = M[a174] in
          advance (10)
          #0084
          #instruction: POP  BC
          let:16 a178 = (1 + a176) in
          let:8 a179 = M[a176] in
          let:16 a180 = (1 + a178) in
          let:8 a181 = M[a178] in
          advance (10)
          #0085
          #instruction: POP  PSW
          let:16 a182 = (1 + a180) in
          let:8 a183 = M[a180] in
          let:16 a184 = (1 + a182) in
          let:8 a185 = M[a182] in
          advance (10)
          #0086
          #instruction: EI
          enable_interrupts()
          advance (4)
          #0087
          #instruction: RET
          let:16 a186 = (1 + a184) in
          let:8 a187 = M[a184] in
          let:16 a188 = (1 + a186) in
          let:8 a189 = M[a186] in
          advance (10)
          A := a185;
          B := a181;
          C := a179;
          D := a177;
          E := a175;
          H := a173;
          L := a171;
          SPH := a188[15:8];
          SPL := a188[7:0];
          FlagS := a183[7];
          FlagZ := a183[6];
          FlagA := a183[4];
          FlagP := a183[2];
          FlagCY := a183[0];
          jump ((a189,a187));
        } else {
          advance (10)
          #0049
          #instruction: LD   A,(20EF)
          let:8 a190 = M[20EF] in
          advance (13)
          #004C
          #instruction: AND  A
          let:8 a191 = (a190 & a190) in
          let:8 a192 = (a190 | a190) in
          advance (4)
          #004D
          #instruction: JP   NZ,006F
          if (!is_zero(a191)) {
            advance (10)
            #006F
            #instruction: CALL 1740
            let:16 a193 = (-1 + (SPH,SPL)) in
            M[a193] := 00;
            let:16 a194 = (-1 + a193) in
            M[a194] := 72;
            #return-to: 0072
            advance (17)
            #1740
            #instruction: LD   HL,209B
            advance (10)
            #1743
            #instruction: DEC  (HL)
            let:8 a195 = M[209B] in
            let:16 a196 = addWithCarry(!true,a195,~00) in
            let:8 a197 = (a195 & 0F) in
            let:8 a198 = (~00 & 0F) in
            let:16 a199 = addWithCarry(!true,a197,a198) in
            M[209B] := a196[7:0];
            advance (10)
            #1744
            #instruction: CALL Z,176D
            if (is_zero(a196[7:0])) {
              let:16 a200 = (-1 + a194) in
              M[a200] := 17;
              let:16 a201 = (-1 + a200) in
              M[a201] := 47;
              #return-to: 1747
              advance (17)
              #176D
              #instruction: LD   A,(2098)
              let:8 a202 = M[2098] in
              advance (13)
              #1770
              #instruction: AND  30
              let:8 a203 = (30 & a202) in
              let:8 a204 = (30 | a202) in
              advance (7)
              #1772
              #instruction: OUT  05
              sound_control(FleetMovement1,a203[0]);
              sound_control(FleetMovement2,a203[1]);
              sound_control(FleetMovement3,a203[2]);
              sound_control(FleetMovement4,a203[3]);
              sound_control(UfoHit,a203[4]);
              advance (10)
              #1774
              #instruction: RET
              let:16 a205 = (1 + a201) in
              let:8 a206 = M[a201] in
              let:16 a207 = (1 + a205) in
              let:8 a208 = M[a205] in
              advance (10)
              A := a203;
              H := 20;
              L := 9B;
              SPH := a207[15:8];
              SPL := a207[7:0];
              FlagS := a203[7];
              FlagZ := is_zero(a203);
              FlagA := a204[3];
              FlagP := parity(a203);
              FlagCY := false;
              jump ((a208,a206));
            } else {
              advance (11)
              A := a191;
              H := 20;
              L := 9B;
              SPH := a194[15:8];
              SPL := a194[7:0];
              FlagS := a196[7:0][7];
              FlagZ := is_zero(a196[7:0]);
              FlagA := a199[7:0][4];
              FlagP := parity(a196[7:0]);
              FlagCY := false;
              jump (1747);
            }
          } else {
            advance (10)
            #0050
            #instruction: LD   A,(20EB)
            let:8 a209 = M[20EB] in
            advance (13)
            #0053
            #instruction: AND  A
            let:8 a210 = (a209 & a209) in
            let:8 a211 = (a209 | a209) in
            advance (4)
            #0054
            #instruction: JP   NZ,005D
            if (!is_zero(a210)) {
              advance (10)
              #005D
              #instruction: LD   A,(2093)
              let:8 a212 = M[2093] in
              advance (13)
              #0060
              #instruction: AND  A
              let:8 a213 = (a212 & a212) in
              let:8 a214 = (a212 | a212) in
              advance (4)
              #0061
              #instruction: JP   NZ,0082
              if (!is_zero(a213)) {
                advance (10)
                #0082
                #instruction: POP  HL
                let:16 a215 = (1 + (SPH,SPL)) in
                let:8 a216 = M[(SPH,SPL)] in
                let:16 a217 = (1 + a215) in
                let:8 a218 = M[a215] in
                advance (10)
                #0083
                #instruction: POP  DE
                let:16 a219 = (1 + a217) in
                let:8 a220 = M[a217] in
                let:16 a221 = (1 + a219) in
                let:8 a222 = M[a219] in
                advance (10)
                #0084
                #instruction: POP  BC
                let:16 a223 = (1 + a221) in
                let:8 a224 = M[a221] in
                let:16 a225 = (1 + a223) in
                let:8 a226 = M[a223] in
                advance (10)
                #0085
                #instruction: POP  PSW
                let:16 a227 = (1 + a225) in
                let:8 a228 = M[a225] in
                let:16 a229 = (1 + a227) in
                let:8 a230 = M[a227] in
                advance (10)
                #0086
                #instruction: EI
                enable_interrupts()
                advance (4)
                #0087
                #instruction: RET
                let:16 a231 = (1 + a229) in
                let:8 a232 = M[a229] in
                let:16 a233 = (1 + a231) in
                let:8 a234 = M[a231] in
                advance (10)
                A := a230;
                B := a226;
                C := a224;
                D := a222;
                E := a220;
                H := a218;
                L := a216;
                SPH := a233[15:8];
                SPL := a233[7:0];
                FlagS := a228[7];
                FlagZ := a228[6];
                FlagA := a228[4];
                FlagP := a228[2];
                FlagCY := a228[0];
                jump ((a234,a232));
              } else {
                advance (10)
                #0064
                #instruction: JP   0765
                advance (10)
                #0765
                #instruction: LD   A,01
                advance (7)
                #0767
                #instruction: LD   (2093),A
                M[2093] := 01;
                advance (13)
                #076A
                #instruction: LD   SP,2400
                advance (10)
                #076D
                #instruction: EI
                enable_interrupts()
                advance (4)
                #076E
                #instruction: CALL 1979
                M[23FF] := 07;
                M[23FE] := 71;
                #return-to: 0771
                advance (17)
                #1979
                #instruction: CALL 19D7
                M[23FD] := 19;
                M[23FC] := 7C;
                #return-to: 197C
                advance (17)
                #19D7
                #instruction: XOR  A
                let:8 a235 = (01 ^ 01) in
                advance (4)
                #19D8
                #instruction: JP   19D3
                advance (10)
                #19D3
                #instruction: LD   (20E9),A
                M[20E9] := a235;
                advance (13)
                #19D6
                #instruction: RET
                let:8 a236 = M[23FC] in
                let:8 a237 = M[23FD] in
                advance (10)
                A := a235;
                SPH := 23;
                SPL := FE;
                FlagS := a235[7];
                FlagZ := is_zero(a235);
                FlagA := false;
                FlagP := parity(a235);
                FlagCY := false;
                jump ((a237,a236));
              }
            } else {
              advance (10)
              #0057
              #instruction: CALL 0ABF
              let:16 a238 = (-1 + (SPH,SPL)) in
              M[a238] := 00;
              let:16 a239 = (-1 + a238) in
              M[a239] := 5A;
              #return-to: 005A
              advance (17)
              #0ABF
              #instruction: LD   A,(20C1)
              let:8 a240 = M[20C1] in
              advance (13)
              #0AC2
              #instruction: RRCA
              advance (4)
              #0AC3
              #instruction: JP   CY,0ABB
              if (a240[0]) {
                advance (10)
                #0ABB
                #instruction: POP  HL
                let:16 a241 = (1 + a239) in
                let:8 a242 = M[a239] in
                let:16 a243 = (1 + a241) in
                let:8 a244 = M[a241] in
                advance (10)
                #0ABC
                #instruction: JP   0072
                advance (10)
                A := updateBit((a240 >> 01),7,a240[0]);
                H := a244;
                L := a242;
                SPH := a243[15:8];
                SPL := a243[7:0];
                FlagS := a210[7];
                FlagZ := is_zero(a210);
                FlagA := a211[3];
                FlagP := parity(a210);
                FlagCY := a240[0];
                jump (0072);
              } else {
                advance (10)
                #0AC6
                #instruction: RRCA
                advance (4)
                #0AC7
                #instruction: JP   CY,1868
                if (updateBit((a240 >> 01),7,a240[0])[0]) {
                  advance (10)
                  #1868
                  #instruction: LD   HL,20C2
                  advance (10)
                  #186B
                  #instruction: INC  (HL)
                  let:8 a245 = M[20C2] in
                  let:16 a246 = addWithCarry(true,a245,00) in
                  let:8 a247 = (a245 & 0F) in
                  let:8 a248 = (00 & 0F) in
                  let:16 a249 = addWithCarry(true,a247,a248) in
                  M[20C2] := a246[7:0];
                  advance (10)
                  #186C
                  #instruction: INC  HL
                  advance (5)
                  #186D
                  #instruction: LD   C,(HL)
                  let:8 a250 = M[20C3] in
                  advance (7)
                  #186E
                  #instruction: CALL 01D9
                  let:16 a251 = (-1 + a239) in
                  M[a251] := 18;
                  let:16 a252 = (-1 + a251) in
                  M[a252] := 71;
                  #return-to: 1871
                  advance (17)
                  #01D9
                  #instruction: INC  HL
                  advance (5)
                  #01DA
                  #instruction: LD   B,(HL)
                  let:8 a253 = M[20C4] in
                  advance (7)
                  #01DB
                  #instruction: INC  HL
                  advance (5)
                  #01DC
                  #instruction: LD   A,C
                  advance (5)
                  #01DD
                  #instruction: ADD  (HL)
                  let:8 a254 = M[20C5] in
                  let:16 a255 = addWithCarry(false,a254,a250) in
                  let:8 a256 = (a254 & 0F) in
                  let:8 a257 = (a250 & 0F) in
                  let:16 a258 = addWithCarry(false,a256,a257) in
                  advance (7)
                  #01DE
                  #instruction: LD   (HL),A
                  M[20C5] := a255[7:0];
                  advance (7)
                  #01DF
                  #instruction: INC  HL
                  advance (5)
                  #01E0
                  #instruction: LD   A,B
                  advance (5)
                  #01E1
                  #instruction: ADD  (HL)
                  let:8 a259 = M[20C6] in
                  let:16 a260 = addWithCarry(false,a259,a253) in
                  let:8 a261 = (a259 & 0F) in
                  let:8 a262 = (a253 & 0F) in
                  let:16 a263 = addWithCarry(false,a261,a262) in
                  advance (7)
                  #01E2
                  #instruction: LD   (HL),A
                  M[20C6] := a260[7:0];
                  advance (7)
                  #01E3
                  #instruction: RET
                  let:16 a264 = (1 + a252) in
                  let:8 a265 = M[a252] in
                  let:16 a266 = (1 + a264) in
                  let:8 a267 = M[a264] in
                  advance (10)
                  A := a260[7:0];
                  B := a253;
                  C := a250;
                  H := 20;
                  L := C6;
                  SPH := a266[15:8];
                  SPL := a266[7:0];
                  FlagS := a260[7:0][7];
                  FlagZ := is_zero(a260[7:0]);
                  FlagA := a263[7:0][4];
                  FlagP := parity(a260[7:0]);
                  FlagCY := a260[15:8][0];
                  jump ((a267,a265));
                } else {
                  advance (10)
                  #0ACA
                  #instruction: RRCA
                  advance (4)
                  #0ACB
                  #instruction: JP   CY,0AAB
                  if (updateBit((updateBit((a240 >> 01),7,a240[0]) >> 01),7,updateBit((a240 >> 01),7,a240[0])[0])[0]) {
                    advance (10)
                    #0AAB
                    #instruction: LD   HL,2050
                    advance (10)
                    #0AAE
                    #instruction: JP   024B
                    advance (10)
                    #024B
                    #instruction: LD   A,(HL)
                    let:8 a268 = M[2050] in
                    advance (7)
                    #024C
                    #instruction: CP   FF
                    let:16 a269 = addWithCarry(!false,a268,~FF) in
                    let:8 a270 = (a268 & 0F) in
                    let:8 a271 = (~FF & 0F) in
                    let:16 a272 = addWithCarry(!false,a270,a271) in
                    advance (7)
                    #024E
                    #instruction: RET  Z
                    if (is_zero(a269[7:0])) {
                      let:16 a273 = (1 + a239) in
                      let:8 a274 = M[a239] in
                      let:16 a275 = (1 + a273) in
                      let:8 a276 = M[a273] in
                      advance (11)
                      A := a268;
                      H := 20;
                      L := 50;
                      SPH := a275[15:8];
                      SPL := a275[7:0];
                      FlagS := a269[7:0][7];
                      FlagZ := is_zero(a269[7:0]);
                      FlagA := a272[7:0][4];
                      FlagP := parity(a269[7:0]);
                      FlagCY := !a269[15:8][0];
                      jump ((a276,a274));
                    } else {
                      advance (5)
                      #024F
                      #instruction: CP   FE
                      let:16 a277 = addWithCarry(!false,a268,~FE) in
                      let:8 a278 = (a268 & 0F) in
                      let:8 a279 = (~FE & 0F) in
                      let:16 a280 = addWithCarry(!false,a278,a279) in
                      advance (7)
                      #0251
                      #instruction: JP   Z,0281
                      if (is_zero(a277[7:0])) {
                        advance (10)
                        #0281
                        #instruction: LD   DE,0010
                        advance (10)
                        #0284
                        #instruction: ADD  HL,DE
                        let:17 a281 = add17(0010,2050) in
                        advance (10)
                        #0285
                        #instruction: JP   024B
                        advance (10)
                        A := a268;
                        D := 00;
                        E := 10;
                        H := a281[15:0][15:8];
                        L := a281[15:0][7:0];
                        SPH := a239[15:8];
                        SPL := a239[7:0];
                        FlagS := a277[7:0][7];
                        FlagZ := is_zero(a277[7:0]);
                        FlagA := a280[7:0][4];
                        FlagP := parity(a277[7:0]);
                        FlagCY := a281[16];
                        jump (024B);
                      } else {
                        advance (10)
                        #0254
                        #instruction: INC  HL
                        advance (5)
                        #0255
                        #instruction: LD   B,(HL)
                        let:8 a282 = M[2051] in
                        advance (7)
                        #0256
                        #instruction: LD   C,A
                        advance (5)
                        #0257
                        #instruction: OR   B
                        let:8 a283 = (a282 | a268) in
                        advance (4)
                        #0258
                        #instruction: LD   A,C
                        advance (5)
                        #0259
                        #instruction: JP   NZ,0277
                        if (!is_zero(a283)) {
                          advance (10)
                          #0277
                          #instruction: DEC  B
                          let:16 a284 = addWithCarry(!true,a282,~00) in
                          let:8 a285 = (a282 & 0F) in
                          let:8 a286 = (~00 & 0F) in
                          let:16 a287 = addWithCarry(!true,a285,a286) in
                          advance (5)
                          #0278
                          #instruction: INC  B
                          let:16 a288 = addWithCarry(true,a284[7:0],00) in
                          let:8 a289 = (a284[7:0] & 0F) in
                          let:8 a290 = (00 & 0F) in
                          let:16 a291 = addWithCarry(true,a289,a290) in
                          advance (5)
                          #0279
                          #instruction: JP   NZ,027D
                          if (!is_zero(a288[7:0])) {
                            advance (10)
                            #027D
                            #instruction: DEC  B
                            let:16 a292 = addWithCarry(!true,a288[7:0],~00) in
                            let:8 a293 = (a288[7:0] & 0F) in
                            let:8 a294 = (~00 & 0F) in
                            let:16 a295 = addWithCarry(!true,a293,a294) in
                            advance (5)
                            #027E
                            #instruction: LD   (HL),B
                            M[2051] := a292[7:0];
                            advance (7)
                            #027F
                            #instruction: DEC  HL
                            advance (5)
                            #0280
                            #instruction: LD   (HL),A
                            M[2050] := a268;
                            advance (7)
                            #0281
                            #instruction: LD   DE,0010
                            advance (10)
                            #0284
                            #instruction: ADD  HL,DE
                            let:17 a296 = add17(0010,2050) in
                            advance (10)
                            #0285
                            #instruction: JP   024B
                            advance (10)
                            A := a268;
                            B := a292[7:0];
                            C := a268;
                            D := 00;
                            E := 10;
                            H := a296[15:0][15:8];
                            L := a296[15:0][7:0];
                            SPH := a239[15:8];
                            SPL := a239[7:0];
                            FlagS := a292[7:0][7];
                            FlagZ := is_zero(a292[7:0]);
                            FlagA := a295[7:0][4];
                            FlagP := parity(a292[7:0]);
                            FlagCY := a296[16];
                            jump (024B);
                          } else {
                            advance (10)
                            #027C
                            #instruction: DEC  A
                            let:16 a297 = addWithCarry(!true,a268,~00) in
                            let:8 a298 = (a268 & 0F) in
                            let:8 a299 = (~00 & 0F) in
                            let:16 a300 = addWithCarry(!true,a298,a299) in
                            advance (5)
                            #027D
                            #instruction: DEC  B
                            let:16 a301 = addWithCarry(!true,a288[7:0],~00) in
                            let:8 a302 = (a288[7:0] & 0F) in
                            let:8 a303 = (~00 & 0F) in
                            let:16 a304 = addWithCarry(!true,a302,a303) in
                            advance (5)
                            #027E
                            #instruction: LD   (HL),B
                            M[2051] := a301[7:0];
                            advance (7)
                            #027F
                            #instruction: DEC  HL
                            advance (5)
                            #0280
                            #instruction: LD   (HL),A
                            M[2050] := a297[7:0];
                            advance (7)
                            #0281
                            #instruction: LD   DE,0010
                            advance (10)
                            #0284
                            #instruction: ADD  HL,DE
                            let:17 a305 = add17(0010,2050) in
                            advance (10)
                            #0285
                            #instruction: JP   024B
                            advance (10)
                            A := a297[7:0];
                            B := a301[7:0];
                            C := a268;
                            D := 00;
                            E := 10;
                            H := a305[15:0][15:8];
                            L := a305[15:0][7:0];
                            SPH := a239[15:8];
                            SPL := a239[7:0];
                            FlagS := a301[7:0][7];
                            FlagZ := is_zero(a301[7:0]);
                            FlagA := a304[7:0][4];
                            FlagP := parity(a301[7:0]);
                            FlagCY := a305[16];
                            jump (024B);
                          }
                        } else {
                          advance (10)
                          #025C
                          #instruction: INC  HL
                          advance (5)
                          #025D
                          #instruction: LD   A,(HL)
                          let:8 a306 = M[2052] in
                          advance (7)
                          #025E
                          #instruction: AND  A
                          let:8 a307 = (a306 & a306) in
                          let:8 a308 = (a306 | a306) in
                          advance (4)
                          #025F
                          #instruction: JP   NZ,0288
                          if (!is_zero(a307)) {
                            advance (10)
                            #0288
                            #instruction: DEC  (HL)
                            let:8 a309 = M[2052] in
                            let:16 a310 = addWithCarry(!true,a309,~00) in
                            let:8 a311 = (a309 & 0F) in
                            let:8 a312 = (~00 & 0F) in
                            let:16 a313 = addWithCarry(!true,a311,a312) in
                            M[2052] := a310[7:0];
                            advance (10)
                            #0289
                            #instruction: DEC  HL
                            advance (5)
                            #028A
                            #instruction: DEC  HL
                            advance (5)
                            #028B
                            #instruction: JP   0281
                            advance (10)
                            #0281
                            #instruction: LD   DE,0010
                            advance (10)
                            #0284
                            #instruction: ADD  HL,DE
                            let:17 a314 = add17(0010,2050) in
                            advance (10)
                            #0285
                            #instruction: JP   024B
                            advance (10)
                            A := a307;
                            B := a282;
                            C := a268;
                            D := 00;
                            E := 10;
                            H := a314[15:0][15:8];
                            L := a314[15:0][7:0];
                            SPH := a239[15:8];
                            SPL := a239[7:0];
                            FlagS := a310[7:0][7];
                            FlagZ := is_zero(a310[7:0]);
                            FlagA := a313[7:0][4];
                            FlagP := parity(a310[7:0]);
                            FlagCY := a314[16];
                            jump (024B);
                          } else {
                            advance (10)
                            #0262
                            #instruction: INC  HL
                            advance (5)
                            #0263
                            #instruction: LD   E,(HL)
                            let:8 a315 = M[2053] in
                            advance (7)
                            #0264
                            #instruction: INC  HL
                            advance (5)
                            #0265
                            #instruction: LD   D,(HL)
                            let:8 a316 = M[2054] in
                            advance (7)
                            #0266
                            #instruction: PUSH HL
                            let:16 a317 = (-1 + a239) in
                            M[a317] := 20;
                            let:16 a318 = (-1 + a317) in
                            M[a318] := 54;
                            advance (11)
                            #0267
                            #instruction: EX   DE,HL
                            advance (4)
                            #0268
                            #instruction: PUSH HL
                            let:16 a319 = (-1 + a318) in
                            M[a319] := a316;
                            let:16 a320 = (-1 + a319) in
                            M[a320] := a315;
                            advance (11)
                            #0269
                            #instruction: LD   HL,026F
                            advance (10)
                            #026C
                            #instruction: EX   (SP),HL
                            let:16 a321 = (1 + a320) in
                            let:8 a322 = M[a320] in
                            let:8 a323 = M[a321] in
                            M[a320] := 6F;
                            M[a321] := 02;
                            advance (18)
                            #026D
                            #instruction: PUSH DE
                            let:16 a324 = (-1 + a320) in
                            M[a324] := 20;
                            let:16 a325 = (-1 + a324) in
                            M[a325] := 54;
                            advance (11)
                            #026E
                            #instruction: JP   (HL)
                            advance (5)
                            A := a307;
                            B := a282;
                            C := a268;
                            D := 20;
                            E := 54;
                            H := a323;
                            L := a322;
                            SPH := a325[15:8];
                            SPL := a325[7:0];
                            FlagS := a307[7];
                            FlagZ := is_zero(a307);
                            FlagA := a308[3];
                            FlagP := parity(a307);
                            FlagCY := false;
                            jump ((a323,a322));
                          }
                        }
                      }
                    }
                  } else {
                    advance (10)
                    #0ACE
                    #instruction: RET
                    let:16 a326 = (1 + a239) in
                    let:8 a327 = M[a239] in
                    let:16 a328 = (1 + a326) in
                    let:8 a329 = M[a326] in
                    advance (10)
                    A := updateBit((updateBit((updateBit((a240 >> 01),7,a240[0]) >> 01),7,updateBit((a240 >> 01),7,a240[0])[0]) >> 01),7,updateBit((updateBit((a240 >> 01),7,a240[0]) >> 01),7,updateBit((a240 >> 01),7,a240[0])[0])[0]);
                    SPH := a328[15:8];
                    SPL := a328[7:0];
                    FlagS := a210[7];
                    FlagZ := is_zero(a210);
                    FlagA := a211[3];
                    FlagP := parity(a210);
                    FlagCY := updateBit((updateBit((a240 >> 01),7,a240[0]) >> 01),7,updateBit((a240 >> 01),7,a240[0])[0])[0];
                    jump ((a329,a327));
                  }
                }
              }
            }
          }
        }
      } else {
        advance (10)
        #002D
        #instruction: LD   A,(20EB)
        let:8 a330 = M[20EB] in
        advance (13)
        #0030
        #instruction: CP   99
        let:16 a331 = addWithCarry(!false,a330,~99) in
        let:8 a332 = (a330 & 0F) in
        let:8 a333 = (~99 & 0F) in
        let:16 a334 = addWithCarry(!false,a332,a333) in
        advance (7)
        #0032
        #instruction: JP   Z,003E
        if (is_zero(a331[7:0])) {
          advance (10)
          A := a330;
          FlagS := a331[7:0][7];
          FlagZ := is_zero(a331[7:0]);
          FlagA := a334[7:0][4];
          FlagP := parity(a331[7:0]);
          FlagCY := !a331[15:8][0];
          jump (003E);
        } else {
          advance (10)
          #0035
          #instruction: ADD  01
          let:16 a335 = addWithCarry(false,01,a330) in
          let:8 a336 = (01 & 0F) in
          let:8 a337 = (a330 & 0F) in
          let:16 a338 = addWithCarry(false,a336,a337) in
          advance (7)
          #0037
          #instruction: DAA
          let:8 a339 = (a335[7:0] & 0F) in
          let:16 a340 = addWithCarry(false,a339,06) in
          let:16 a341 = addWithCarry(((((a339[1] || a339[2]) && a339[3]) || a338[7:0][4]) ? a340[7:0] : a339)[4],(a335[7:0] >> 04),00) in
          let:16 a342 = addWithCarry(false,a341[7:0],06) in
          let:8 a343 = (((((a339[1] || a339[2]) && a339[3]) || a338[7:0][4]) ? a340[7:0] : a339) & 0F) in
          let:8 a344 = ((((((a341[7:0][1] || a341[7:0][2]) && a341[7:0][3]) || a335[15:8][0]) ? a342[7:0] : a341[7:0]) << 04) | a343) in
          advance (4)
          #0038
          #instruction: LD   (20EB),A
          M[20EB] := a344;
          advance (13)
          #003B
          #instruction: CALL 1947
          let:16 a345 = (-1 + (SPH,SPL)) in
          M[a345] := 00;
          let:16 a346 = (-1 + a345) in
          M[a346] := 3E;
          #return-to: 003E
          advance (17)
          #1947
          #instruction: LD   A,(20EB)
          let:8 a347 = M[20EB] in
          advance (13)
          #194A
          #instruction: LD   HL,3C01
          advance (10)
          #194D
          #instruction: JP   09B2
          advance (10)
          #09B2
          #instruction: PUSH DE
          let:16 a348 = (-1 + a346) in
          M[a348] := D;
          let:16 a349 = (-1 + a348) in
          M[a349] := E;
          advance (11)
          #09B3
          #instruction: PUSH PSW
          let:16 a350 = (-1 + a349) in
          M[a350] := a347;
          let:16 a351 = (-1 + a350) in
          M[a351] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a344[7]),6,is_zero(a344)),4,((((a339[1] || a339[2]) && a339[3]) || a338[7:0][4]) ? a340[7:0] : a339)[4]),2,parity(a344)),0,(((((a341[7:0][1] || a341[7:0][2]) && a341[7:0][3]) || a335[15:8][0]) ? a342[7:0] : a341[7:0])[4] || a335[15:8][0]));
          advance (11)
          #09B4
          #instruction: RRCA
          advance (4)
          #09B5
          #instruction: RRCA
          advance (4)
          #09B6
          #instruction: RRCA
          advance (4)
          #09B7
          #instruction: RRCA
          advance (4)
          #09B8
          #instruction: AND  0F
          let:8 a352 = (0F & updateBit((updateBit((updateBit((updateBit((a347 >> 01),7,a347[0]) >> 01),7,updateBit((a347 >> 01),7,a347[0])[0]) >> 01),7,updateBit((updateBit((a347 >> 01),7,a347[0]) >> 01),7,updateBit((a347 >> 01),7,a347[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a347 >> 01),7,a347[0]) >> 01),7,updateBit((a347 >> 01),7,a347[0])[0]) >> 01),7,updateBit((updateBit((a347 >> 01),7,a347[0]) >> 01),7,updateBit((a347 >> 01),7,a347[0])[0])[0])[0])) in
          let:8 a353 = (0F | updateBit((updateBit((updateBit((updateBit((a347 >> 01),7,a347[0]) >> 01),7,updateBit((a347 >> 01),7,a347[0])[0]) >> 01),7,updateBit((updateBit((a347 >> 01),7,a347[0]) >> 01),7,updateBit((a347 >> 01),7,a347[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a347 >> 01),7,a347[0]) >> 01),7,updateBit((a347 >> 01),7,a347[0])[0]) >> 01),7,updateBit((updateBit((a347 >> 01),7,a347[0]) >> 01),7,updateBit((a347 >> 01),7,a347[0])[0])[0])[0])) in
          advance (7)
          #09BA
          #instruction: CALL 09C5
          let:16 a354 = (-1 + a351) in
          M[a354] := 09;
          let:16 a355 = (-1 + a354) in
          M[a355] := BD;
          #return-to: 09BD
          advance (17)
          #09C5
          #instruction: ADD  1A
          let:16 a356 = addWithCarry(false,1A,a352) in
          let:8 a357 = (1A & 0F) in
          let:8 a358 = (a352 & 0F) in
          let:16 a359 = addWithCarry(false,a357,a358) in
          advance (7)
          #09C7
          #instruction: JP   08FF
          advance (10)
          #08FF
          #instruction: LD   DE,1E00
          advance (10)
          #0902
          #instruction: PUSH HL
          let:16 a360 = (-1 + a355) in
          M[a360] := 3C;
          let:16 a361 = (-1 + a360) in
          M[a361] := 01;
          advance (11)
          #0903
          #instruction: LD   H,00
          advance (7)
          #0905
          #instruction: LD   L,A
          advance (5)
          #0906
          #instruction: ADD  HL,HL
          let:17 a362 = add17((00,a356[7:0]),(00,a356[7:0])) in
          advance (10)
          #0907
          #instruction: ADD  HL,HL
          let:17 a363 = add17(a362[15:0],a362[15:0]) in
          advance (10)
          #0908
          #instruction: ADD  HL,HL
          let:17 a364 = add17(a363[15:0],a363[15:0]) in
          advance (10)
          #0909
          #instruction: ADD  HL,DE
          let:17 a365 = add17(1E00,a364[15:0]) in
          advance (10)
          #090A
          #instruction: EX   DE,HL
          advance (4)
          #090B
          #instruction: POP  HL
          let:16 a366 = (1 + a361) in
          let:8 a367 = M[a361] in
          let:16 a368 = (1 + a366) in
          let:8 a369 = M[a366] in
          advance (10)
          #090C
          #instruction: LD   B,08
          advance (7)
          #090E
          #instruction: OUT  06
          advance (10)
          #0910
          #instruction: JP   1439
          advance (10)
          #1439
          #instruction: PUSH BC
          let:16 a370 = (-1 + a368) in
          M[a370] := 08;
          let:16 a371 = (-1 + a370) in
          M[a371] := C;
          advance (11)
          #143A
          #instruction: LD   A,(DE)
          let:8 a372 = M[a365[15:0]] in
          advance (7)
          #143B
          #instruction: LD   (HL),A
          M[(a369,a367)] := a372;
          advance (7)
          #143C
          #instruction: INC  DE
          let:16 a373 = (1 + a365[15:0]) in
          advance (5)
          #143D
          #instruction: LD   BC,0020
          advance (10)
          #1440
          #instruction: ADD  HL,BC
          let:17 a374 = add17(0020,(a369,a367)) in
          advance (10)
          #1441
          #instruction: POP  BC
          let:16 a375 = (1 + a371) in
          let:8 a376 = M[a371] in
          let:16 a377 = (1 + a375) in
          let:8 a378 = M[a375] in
          advance (10)
          #1442
          #instruction: DEC  B
          let:16 a379 = addWithCarry(!true,a378,~00) in
          let:8 a380 = (a378 & 0F) in
          let:8 a381 = (~00 & 0F) in
          let:16 a382 = addWithCarry(!true,a380,a381) in
          advance (5)
          #1443
          #instruction: JP   NZ,1439
          if (!is_zero(a379[7:0])) {
            advance (10)
            A := a372;
            B := a379[7:0];
            C := a376;
            D := a373[15:8];
            E := a373[7:0];
            H := a374[15:0][15:8];
            L := a374[15:0][7:0];
            SPH := a377[15:8];
            SPL := a377[7:0];
            FlagS := a379[7:0][7];
            FlagZ := is_zero(a379[7:0]);
            FlagA := a382[7:0][4];
            FlagP := parity(a379[7:0]);
            FlagCY := a374[16];
            jump (1439);
          } else {
            advance (10)
            #1446
            #instruction: RET
            let:16 a383 = (1 + a377) in
            let:8 a384 = M[a377] in
            let:16 a385 = (1 + a383) in
            let:8 a386 = M[a383] in
            advance (10)
            A := a372;
            B := a379[7:0];
            C := a376;
            D := a373[15:8];
            E := a373[7:0];
            H := a374[15:0][15:8];
            L := a374[15:0][7:0];
            SPH := a385[15:8];
            SPL := a385[7:0];
            FlagS := a379[7:0][7];
            FlagZ := is_zero(a379[7:0]);
            FlagA := a382[7:0][4];
            FlagP := parity(a379[7:0]);
            FlagCY := a374[16];
            jump ((a386,a384));
          }
        }
      }
    }

003E:

    #003E
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #003F
    #instruction: LD   (20EA),A
    M[20EA] := a1;
    advance (13)
    #0042
    #instruction: LD   A,(20E9)
    let:8 a2 = M[20E9] in
    advance (13)
    #0045
    #instruction: AND  A
    let:8 a3 = (a2 & a2) in
    let:8 a4 = (a2 | a2) in
    advance (4)
    #0046
    #instruction: JP   Z,0082
    if (is_zero(a3)) {
      advance (10)
      #0082
      #instruction: POP  HL
      let:16 a5 = (1 + (SPH,SPL)) in
      let:8 a6 = M[(SPH,SPL)] in
      let:16 a7 = (1 + a5) in
      let:8 a8 = M[a5] in
      advance (10)
      #0083
      #instruction: POP  DE
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      let:16 a11 = (1 + a9) in
      let:8 a12 = M[a9] in
      advance (10)
      #0084
      #instruction: POP  BC
      let:16 a13 = (1 + a11) in
      let:8 a14 = M[a11] in
      let:16 a15 = (1 + a13) in
      let:8 a16 = M[a13] in
      advance (10)
      #0085
      #instruction: POP  PSW
      let:16 a17 = (1 + a15) in
      let:8 a18 = M[a15] in
      let:16 a19 = (1 + a17) in
      let:8 a20 = M[a17] in
      advance (10)
      #0086
      #instruction: EI
      enable_interrupts()
      advance (4)
      #0087
      #instruction: RET
      let:16 a21 = (1 + a19) in
      let:8 a22 = M[a19] in
      let:16 a23 = (1 + a21) in
      let:8 a24 = M[a21] in
      advance (10)
      A := a20;
      B := a16;
      C := a14;
      D := a12;
      E := a10;
      H := a8;
      L := a6;
      SPH := a23[15:8];
      SPL := a23[7:0];
      FlagS := a18[7];
      FlagZ := a18[6];
      FlagA := a18[4];
      FlagP := a18[2];
      FlagCY := a18[0];
      jump ((a24,a22));
    } else {
      advance (10)
      #0049
      #instruction: LD   A,(20EF)
      let:8 a25 = M[20EF] in
      advance (13)
      #004C
      #instruction: AND  A
      let:8 a26 = (a25 & a25) in
      let:8 a27 = (a25 | a25) in
      advance (4)
      #004D
      #instruction: JP   NZ,006F
      if (!is_zero(a26)) {
        advance (10)
        #006F
        #instruction: CALL 1740
        let:16 a28 = (-1 + (SPH,SPL)) in
        M[a28] := 00;
        let:16 a29 = (-1 + a28) in
        M[a29] := 72;
        #return-to: 0072
        advance (17)
        #1740
        #instruction: LD   HL,209B
        advance (10)
        #1743
        #instruction: DEC  (HL)
        let:8 a30 = M[209B] in
        let:16 a31 = addWithCarry(!true,a30,~00) in
        let:8 a32 = (a30 & 0F) in
        let:8 a33 = (~00 & 0F) in
        let:16 a34 = addWithCarry(!true,a32,a33) in
        M[209B] := a31[7:0];
        advance (10)
        #1744
        #instruction: CALL Z,176D
        if (is_zero(a31[7:0])) {
          let:16 a35 = (-1 + a29) in
          M[a35] := 17;
          let:16 a36 = (-1 + a35) in
          M[a36] := 47;
          #return-to: 1747
          advance (17)
          #176D
          #instruction: LD   A,(2098)
          let:8 a37 = M[2098] in
          advance (13)
          #1770
          #instruction: AND  30
          let:8 a38 = (30 & a37) in
          let:8 a39 = (30 | a37) in
          advance (7)
          #1772
          #instruction: OUT  05
          sound_control(FleetMovement1,a38[0]);
          sound_control(FleetMovement2,a38[1]);
          sound_control(FleetMovement3,a38[2]);
          sound_control(FleetMovement4,a38[3]);
          sound_control(UfoHit,a38[4]);
          advance (10)
          #1774
          #instruction: RET
          let:16 a40 = (1 + a36) in
          let:8 a41 = M[a36] in
          let:16 a42 = (1 + a40) in
          let:8 a43 = M[a40] in
          advance (10)
          A := a38;
          H := 20;
          L := 9B;
          SPH := a42[15:8];
          SPL := a42[7:0];
          FlagS := a38[7];
          FlagZ := is_zero(a38);
          FlagA := a39[3];
          FlagP := parity(a38);
          FlagCY := false;
          jump ((a43,a41));
        } else {
          advance (11)
          A := a26;
          H := 20;
          L := 9B;
          SPH := a29[15:8];
          SPL := a29[7:0];
          FlagS := a31[7:0][7];
          FlagZ := is_zero(a31[7:0]);
          FlagA := a34[7:0][4];
          FlagP := parity(a31[7:0]);
          FlagCY := false;
          jump (1747);
        }
      } else {
        advance (10)
        #0050
        #instruction: LD   A,(20EB)
        let:8 a44 = M[20EB] in
        advance (13)
        #0053
        #instruction: AND  A
        let:8 a45 = (a44 & a44) in
        let:8 a46 = (a44 | a44) in
        advance (4)
        #0054
        #instruction: JP   NZ,005D
        if (!is_zero(a45)) {
          advance (10)
          #005D
          #instruction: LD   A,(2093)
          let:8 a47 = M[2093] in
          advance (13)
          #0060
          #instruction: AND  A
          let:8 a48 = (a47 & a47) in
          let:8 a49 = (a47 | a47) in
          advance (4)
          #0061
          #instruction: JP   NZ,0082
          if (!is_zero(a48)) {
            advance (10)
            #0082
            #instruction: POP  HL
            let:16 a50 = (1 + (SPH,SPL)) in
            let:8 a51 = M[(SPH,SPL)] in
            let:16 a52 = (1 + a50) in
            let:8 a53 = M[a50] in
            advance (10)
            #0083
            #instruction: POP  DE
            let:16 a54 = (1 + a52) in
            let:8 a55 = M[a52] in
            let:16 a56 = (1 + a54) in
            let:8 a57 = M[a54] in
            advance (10)
            #0084
            #instruction: POP  BC
            let:16 a58 = (1 + a56) in
            let:8 a59 = M[a56] in
            let:16 a60 = (1 + a58) in
            let:8 a61 = M[a58] in
            advance (10)
            #0085
            #instruction: POP  PSW
            let:16 a62 = (1 + a60) in
            let:8 a63 = M[a60] in
            let:16 a64 = (1 + a62) in
            let:8 a65 = M[a62] in
            advance (10)
            #0086
            #instruction: EI
            enable_interrupts()
            advance (4)
            #0087
            #instruction: RET
            let:16 a66 = (1 + a64) in
            let:8 a67 = M[a64] in
            let:16 a68 = (1 + a66) in
            let:8 a69 = M[a66] in
            advance (10)
            A := a65;
            B := a61;
            C := a59;
            D := a57;
            E := a55;
            H := a53;
            L := a51;
            SPH := a68[15:8];
            SPL := a68[7:0];
            FlagS := a63[7];
            FlagZ := a63[6];
            FlagA := a63[4];
            FlagP := a63[2];
            FlagCY := a63[0];
            jump ((a69,a67));
          } else {
            advance (10)
            #0064
            #instruction: JP   0765
            advance (10)
            #0765
            #instruction: LD   A,01
            advance (7)
            #0767
            #instruction: LD   (2093),A
            M[2093] := 01;
            advance (13)
            #076A
            #instruction: LD   SP,2400
            advance (10)
            #076D
            #instruction: EI
            enable_interrupts()
            advance (4)
            #076E
            #instruction: CALL 1979
            M[23FF] := 07;
            M[23FE] := 71;
            #return-to: 0771
            advance (17)
            #1979
            #instruction: CALL 19D7
            M[23FD] := 19;
            M[23FC] := 7C;
            #return-to: 197C
            advance (17)
            #19D7
            #instruction: XOR  A
            let:8 a70 = (01 ^ 01) in
            advance (4)
            #19D8
            #instruction: JP   19D3
            advance (10)
            #19D3
            #instruction: LD   (20E9),A
            M[20E9] := a70;
            advance (13)
            #19D6
            #instruction: RET
            let:8 a71 = M[23FC] in
            let:8 a72 = M[23FD] in
            advance (10)
            A := a70;
            SPH := 23;
            SPL := FE;
            FlagS := a70[7];
            FlagZ := is_zero(a70);
            FlagA := false;
            FlagP := parity(a70);
            FlagCY := false;
            jump ((a72,a71));
          }
        } else {
          advance (10)
          #0057
          #instruction: CALL 0ABF
          let:16 a73 = (-1 + (SPH,SPL)) in
          M[a73] := 00;
          let:16 a74 = (-1 + a73) in
          M[a74] := 5A;
          #return-to: 005A
          advance (17)
          #0ABF
          #instruction: LD   A,(20C1)
          let:8 a75 = M[20C1] in
          advance (13)
          #0AC2
          #instruction: RRCA
          advance (4)
          #0AC3
          #instruction: JP   CY,0ABB
          if (a75[0]) {
            advance (10)
            #0ABB
            #instruction: POP  HL
            let:16 a76 = (1 + a74) in
            let:8 a77 = M[a74] in
            let:16 a78 = (1 + a76) in
            let:8 a79 = M[a76] in
            advance (10)
            #0ABC
            #instruction: JP   0072
            advance (10)
            A := updateBit((a75 >> 01),7,a75[0]);
            H := a79;
            L := a77;
            SPH := a78[15:8];
            SPL := a78[7:0];
            FlagS := a45[7];
            FlagZ := is_zero(a45);
            FlagA := a46[3];
            FlagP := parity(a45);
            FlagCY := a75[0];
            jump (0072);
          } else {
            advance (10)
            #0AC6
            #instruction: RRCA
            advance (4)
            #0AC7
            #instruction: JP   CY,1868
            if (updateBit((a75 >> 01),7,a75[0])[0]) {
              advance (10)
              #1868
              #instruction: LD   HL,20C2
              advance (10)
              #186B
              #instruction: INC  (HL)
              let:8 a80 = M[20C2] in
              let:16 a81 = addWithCarry(true,a80,00) in
              let:8 a82 = (a80 & 0F) in
              let:8 a83 = (00 & 0F) in
              let:16 a84 = addWithCarry(true,a82,a83) in
              M[20C2] := a81[7:0];
              advance (10)
              #186C
              #instruction: INC  HL
              advance (5)
              #186D
              #instruction: LD   C,(HL)
              let:8 a85 = M[20C3] in
              advance (7)
              #186E
              #instruction: CALL 01D9
              let:16 a86 = (-1 + a74) in
              M[a86] := 18;
              let:16 a87 = (-1 + a86) in
              M[a87] := 71;
              #return-to: 1871
              advance (17)
              #01D9
              #instruction: INC  HL
              advance (5)
              #01DA
              #instruction: LD   B,(HL)
              let:8 a88 = M[20C4] in
              advance (7)
              #01DB
              #instruction: INC  HL
              advance (5)
              #01DC
              #instruction: LD   A,C
              advance (5)
              #01DD
              #instruction: ADD  (HL)
              let:8 a89 = M[20C5] in
              let:16 a90 = addWithCarry(false,a89,a85) in
              let:8 a91 = (a89 & 0F) in
              let:8 a92 = (a85 & 0F) in
              let:16 a93 = addWithCarry(false,a91,a92) in
              advance (7)
              #01DE
              #instruction: LD   (HL),A
              M[20C5] := a90[7:0];
              advance (7)
              #01DF
              #instruction: INC  HL
              advance (5)
              #01E0
              #instruction: LD   A,B
              advance (5)
              #01E1
              #instruction: ADD  (HL)
              let:8 a94 = M[20C6] in
              let:16 a95 = addWithCarry(false,a94,a88) in
              let:8 a96 = (a94 & 0F) in
              let:8 a97 = (a88 & 0F) in
              let:16 a98 = addWithCarry(false,a96,a97) in
              advance (7)
              #01E2
              #instruction: LD   (HL),A
              M[20C6] := a95[7:0];
              advance (7)
              #01E3
              #instruction: RET
              let:16 a99 = (1 + a87) in
              let:8 a100 = M[a87] in
              let:16 a101 = (1 + a99) in
              let:8 a102 = M[a99] in
              advance (10)
              A := a95[7:0];
              B := a88;
              C := a85;
              H := 20;
              L := C6;
              SPH := a101[15:8];
              SPL := a101[7:0];
              FlagS := a95[7:0][7];
              FlagZ := is_zero(a95[7:0]);
              FlagA := a98[7:0][4];
              FlagP := parity(a95[7:0]);
              FlagCY := a95[15:8][0];
              jump ((a102,a100));
            } else {
              advance (10)
              #0ACA
              #instruction: RRCA
              advance (4)
              #0ACB
              #instruction: JP   CY,0AAB
              if (updateBit((updateBit((a75 >> 01),7,a75[0]) >> 01),7,updateBit((a75 >> 01),7,a75[0])[0])[0]) {
                advance (10)
                #0AAB
                #instruction: LD   HL,2050
                advance (10)
                #0AAE
                #instruction: JP   024B
                advance (10)
                #024B
                #instruction: LD   A,(HL)
                let:8 a103 = M[2050] in
                advance (7)
                #024C
                #instruction: CP   FF
                let:16 a104 = addWithCarry(!false,a103,~FF) in
                let:8 a105 = (a103 & 0F) in
                let:8 a106 = (~FF & 0F) in
                let:16 a107 = addWithCarry(!false,a105,a106) in
                advance (7)
                #024E
                #instruction: RET  Z
                if (is_zero(a104[7:0])) {
                  let:16 a108 = (1 + a74) in
                  let:8 a109 = M[a74] in
                  let:16 a110 = (1 + a108) in
                  let:8 a111 = M[a108] in
                  advance (11)
                  A := a103;
                  H := 20;
                  L := 50;
                  SPH := a110[15:8];
                  SPL := a110[7:0];
                  FlagS := a104[7:0][7];
                  FlagZ := is_zero(a104[7:0]);
                  FlagA := a107[7:0][4];
                  FlagP := parity(a104[7:0]);
                  FlagCY := !a104[15:8][0];
                  jump ((a111,a109));
                } else {
                  advance (5)
                  #024F
                  #instruction: CP   FE
                  let:16 a112 = addWithCarry(!false,a103,~FE) in
                  let:8 a113 = (a103 & 0F) in
                  let:8 a114 = (~FE & 0F) in
                  let:16 a115 = addWithCarry(!false,a113,a114) in
                  advance (7)
                  #0251
                  #instruction: JP   Z,0281
                  if (is_zero(a112[7:0])) {
                    advance (10)
                    #0281
                    #instruction: LD   DE,0010
                    advance (10)
                    #0284
                    #instruction: ADD  HL,DE
                    let:17 a116 = add17(0010,2050) in
                    advance (10)
                    #0285
                    #instruction: JP   024B
                    advance (10)
                    A := a103;
                    D := 00;
                    E := 10;
                    H := a116[15:0][15:8];
                    L := a116[15:0][7:0];
                    SPH := a74[15:8];
                    SPL := a74[7:0];
                    FlagS := a112[7:0][7];
                    FlagZ := is_zero(a112[7:0]);
                    FlagA := a115[7:0][4];
                    FlagP := parity(a112[7:0]);
                    FlagCY := a116[16];
                    jump (024B);
                  } else {
                    advance (10)
                    #0254
                    #instruction: INC  HL
                    advance (5)
                    #0255
                    #instruction: LD   B,(HL)
                    let:8 a117 = M[2051] in
                    advance (7)
                    #0256
                    #instruction: LD   C,A
                    advance (5)
                    #0257
                    #instruction: OR   B
                    let:8 a118 = (a117 | a103) in
                    advance (4)
                    #0258
                    #instruction: LD   A,C
                    advance (5)
                    #0259
                    #instruction: JP   NZ,0277
                    if (!is_zero(a118)) {
                      advance (10)
                      #0277
                      #instruction: DEC  B
                      let:16 a119 = addWithCarry(!true,a117,~00) in
                      let:8 a120 = (a117 & 0F) in
                      let:8 a121 = (~00 & 0F) in
                      let:16 a122 = addWithCarry(!true,a120,a121) in
                      advance (5)
                      #0278
                      #instruction: INC  B
                      let:16 a123 = addWithCarry(true,a119[7:0],00) in
                      let:8 a124 = (a119[7:0] & 0F) in
                      let:8 a125 = (00 & 0F) in
                      let:16 a126 = addWithCarry(true,a124,a125) in
                      advance (5)
                      #0279
                      #instruction: JP   NZ,027D
                      if (!is_zero(a123[7:0])) {
                        advance (10)
                        #027D
                        #instruction: DEC  B
                        let:16 a127 = addWithCarry(!true,a123[7:0],~00) in
                        let:8 a128 = (a123[7:0] & 0F) in
                        let:8 a129 = (~00 & 0F) in
                        let:16 a130 = addWithCarry(!true,a128,a129) in
                        advance (5)
                        #027E
                        #instruction: LD   (HL),B
                        M[2051] := a127[7:0];
                        advance (7)
                        #027F
                        #instruction: DEC  HL
                        advance (5)
                        #0280
                        #instruction: LD   (HL),A
                        M[2050] := a103;
                        advance (7)
                        #0281
                        #instruction: LD   DE,0010
                        advance (10)
                        #0284
                        #instruction: ADD  HL,DE
                        let:17 a131 = add17(0010,2050) in
                        advance (10)
                        #0285
                        #instruction: JP   024B
                        advance (10)
                        A := a103;
                        B := a127[7:0];
                        C := a103;
                        D := 00;
                        E := 10;
                        H := a131[15:0][15:8];
                        L := a131[15:0][7:0];
                        SPH := a74[15:8];
                        SPL := a74[7:0];
                        FlagS := a127[7:0][7];
                        FlagZ := is_zero(a127[7:0]);
                        FlagA := a130[7:0][4];
                        FlagP := parity(a127[7:0]);
                        FlagCY := a131[16];
                        jump (024B);
                      } else {
                        advance (10)
                        #027C
                        #instruction: DEC  A
                        let:16 a132 = addWithCarry(!true,a103,~00) in
                        let:8 a133 = (a103 & 0F) in
                        let:8 a134 = (~00 & 0F) in
                        let:16 a135 = addWithCarry(!true,a133,a134) in
                        advance (5)
                        #027D
                        #instruction: DEC  B
                        let:16 a136 = addWithCarry(!true,a123[7:0],~00) in
                        let:8 a137 = (a123[7:0] & 0F) in
                        let:8 a138 = (~00 & 0F) in
                        let:16 a139 = addWithCarry(!true,a137,a138) in
                        advance (5)
                        #027E
                        #instruction: LD   (HL),B
                        M[2051] := a136[7:0];
                        advance (7)
                        #027F
                        #instruction: DEC  HL
                        advance (5)
                        #0280
                        #instruction: LD   (HL),A
                        M[2050] := a132[7:0];
                        advance (7)
                        #0281
                        #instruction: LD   DE,0010
                        advance (10)
                        #0284
                        #instruction: ADD  HL,DE
                        let:17 a140 = add17(0010,2050) in
                        advance (10)
                        #0285
                        #instruction: JP   024B
                        advance (10)
                        A := a132[7:0];
                        B := a136[7:0];
                        C := a103;
                        D := 00;
                        E := 10;
                        H := a140[15:0][15:8];
                        L := a140[15:0][7:0];
                        SPH := a74[15:8];
                        SPL := a74[7:0];
                        FlagS := a136[7:0][7];
                        FlagZ := is_zero(a136[7:0]);
                        FlagA := a139[7:0][4];
                        FlagP := parity(a136[7:0]);
                        FlagCY := a140[16];
                        jump (024B);
                      }
                    } else {
                      advance (10)
                      #025C
                      #instruction: INC  HL
                      advance (5)
                      #025D
                      #instruction: LD   A,(HL)
                      let:8 a141 = M[2052] in
                      advance (7)
                      #025E
                      #instruction: AND  A
                      let:8 a142 = (a141 & a141) in
                      let:8 a143 = (a141 | a141) in
                      advance (4)
                      #025F
                      #instruction: JP   NZ,0288
                      if (!is_zero(a142)) {
                        advance (10)
                        #0288
                        #instruction: DEC  (HL)
                        let:8 a144 = M[2052] in
                        let:16 a145 = addWithCarry(!true,a144,~00) in
                        let:8 a146 = (a144 & 0F) in
                        let:8 a147 = (~00 & 0F) in
                        let:16 a148 = addWithCarry(!true,a146,a147) in
                        M[2052] := a145[7:0];
                        advance (10)
                        #0289
                        #instruction: DEC  HL
                        advance (5)
                        #028A
                        #instruction: DEC  HL
                        advance (5)
                        #028B
                        #instruction: JP   0281
                        advance (10)
                        #0281
                        #instruction: LD   DE,0010
                        advance (10)
                        #0284
                        #instruction: ADD  HL,DE
                        let:17 a149 = add17(0010,2050) in
                        advance (10)
                        #0285
                        #instruction: JP   024B
                        advance (10)
                        A := a142;
                        B := a117;
                        C := a103;
                        D := 00;
                        E := 10;
                        H := a149[15:0][15:8];
                        L := a149[15:0][7:0];
                        SPH := a74[15:8];
                        SPL := a74[7:0];
                        FlagS := a145[7:0][7];
                        FlagZ := is_zero(a145[7:0]);
                        FlagA := a148[7:0][4];
                        FlagP := parity(a145[7:0]);
                        FlagCY := a149[16];
                        jump (024B);
                      } else {
                        advance (10)
                        #0262
                        #instruction: INC  HL
                        advance (5)
                        #0263
                        #instruction: LD   E,(HL)
                        let:8 a150 = M[2053] in
                        advance (7)
                        #0264
                        #instruction: INC  HL
                        advance (5)
                        #0265
                        #instruction: LD   D,(HL)
                        let:8 a151 = M[2054] in
                        advance (7)
                        #0266
                        #instruction: PUSH HL
                        let:16 a152 = (-1 + a74) in
                        M[a152] := 20;
                        let:16 a153 = (-1 + a152) in
                        M[a153] := 54;
                        advance (11)
                        #0267
                        #instruction: EX   DE,HL
                        advance (4)
                        #0268
                        #instruction: PUSH HL
                        let:16 a154 = (-1 + a153) in
                        M[a154] := a151;
                        let:16 a155 = (-1 + a154) in
                        M[a155] := a150;
                        advance (11)
                        #0269
                        #instruction: LD   HL,026F
                        advance (10)
                        #026C
                        #instruction: EX   (SP),HL
                        let:16 a156 = (1 + a155) in
                        let:8 a157 = M[a155] in
                        let:8 a158 = M[a156] in
                        M[a155] := 6F;
                        M[a156] := 02;
                        advance (18)
                        #026D
                        #instruction: PUSH DE
                        let:16 a159 = (-1 + a155) in
                        M[a159] := 20;
                        let:16 a160 = (-1 + a159) in
                        M[a160] := 54;
                        advance (11)
                        #026E
                        #instruction: JP   (HL)
                        advance (5)
                        A := a142;
                        B := a117;
                        C := a103;
                        D := 20;
                        E := 54;
                        H := a158;
                        L := a157;
                        SPH := a160[15:8];
                        SPL := a160[7:0];
                        FlagS := a142[7];
                        FlagZ := is_zero(a142);
                        FlagA := a143[3];
                        FlagP := parity(a142);
                        FlagCY := false;
                        jump ((a158,a157));
                      }
                    }
                  }
                }
              } else {
                advance (10)
                #0ACE
                #instruction: RET
                let:16 a161 = (1 + a74) in
                let:8 a162 = M[a74] in
                let:16 a163 = (1 + a161) in
                let:8 a164 = M[a161] in
                advance (10)
                A := updateBit((updateBit((updateBit((a75 >> 01),7,a75[0]) >> 01),7,updateBit((a75 >> 01),7,a75[0])[0]) >> 01),7,updateBit((updateBit((a75 >> 01),7,a75[0]) >> 01),7,updateBit((a75 >> 01),7,a75[0])[0])[0]);
                SPH := a163[15:8];
                SPL := a163[7:0];
                FlagS := a45[7];
                FlagZ := is_zero(a45);
                FlagA := a46[3];
                FlagP := parity(a45);
                FlagCY := updateBit((updateBit((a75 >> 01),7,a75[0]) >> 01),7,updateBit((a75 >> 01),7,a75[0])[0])[0];
                jump ((a164,a162));
              }
            }
          }
        }
      }
    }

005A:

    #005A
    #instruction: JP   0082
    advance (10)
    #0082
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0083
    #instruction: POP  DE
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    #0084
    #instruction: POP  BC
    let:16 a9 = (1 + a7) in
    let:8 a10 = M[a7] in
    let:16 a11 = (1 + a9) in
    let:8 a12 = M[a9] in
    advance (10)
    #0085
    #instruction: POP  PSW
    let:16 a13 = (1 + a11) in
    let:8 a14 = M[a11] in
    let:16 a15 = (1 + a13) in
    let:8 a16 = M[a13] in
    advance (10)
    #0086
    #instruction: EI
    enable_interrupts()
    advance (4)
    #0087
    #instruction: RET
    let:16 a17 = (1 + a15) in
    let:8 a18 = M[a15] in
    let:16 a19 = (1 + a17) in
    let:8 a20 = M[a17] in
    advance (10)
    A := a16;
    B := a12;
    C := a10;
    D := a8;
    E := a6;
    H := a4;
    L := a2;
    SPH := a19[15:8];
    SPL := a19[7:0];
    FlagS := a14[7];
    FlagZ := a14[6];
    FlagA := a14[4];
    FlagP := a14[2];
    FlagCY := a14[0];
    jump ((a20,a18));

0072:

    #0072
    #instruction: LD   A,(2032)
    let:8 a1 = M[2032] in
    advance (13)
    #0075
    #instruction: LD   (2080),A
    M[2080] := a1;
    advance (13)
    #0078
    #instruction: CALL 0100
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 00;
    let:16 a3 = (-1 + a2) in
    M[a3] := 7B;
    #return-to: 007B
    advance (17)
    #0100
    #instruction: LD   HL,2002
    advance (10)
    #0103
    #instruction: LD   A,(HL)
    let:8 a4 = M[2002] in
    advance (7)
    #0104
    #instruction: AND  A
    let:8 a5 = (a4 & a4) in
    let:8 a6 = (a4 | a4) in
    advance (4)
    #0105
    #instruction: JP   NZ,1538
    if (!is_zero(a5)) {
      advance (10)
      #1538
      #instruction: LD   HL,2003
      advance (10)
      #153B
      #instruction: DEC  (HL)
      let:8 a7 = M[2003] in
      let:16 a8 = addWithCarry(!true,a7,~00) in
      let:8 a9 = (a7 & 0F) in
      let:8 a10 = (~00 & 0F) in
      let:16 a11 = addWithCarry(!true,a9,a10) in
      M[2003] := a8[7:0];
      advance (10)
      #153C
      #instruction: RET  NZ
      if (!is_zero(a8[7:0])) {
        let:16 a12 = (1 + a3) in
        let:8 a13 = M[a3] in
        let:16 a14 = (1 + a12) in
        let:8 a15 = M[a12] in
        advance (11)
        A := a5;
        H := 20;
        L := 03;
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagS := a8[7:0][7];
        FlagZ := is_zero(a8[7:0]);
        FlagA := a11[7:0][4];
        FlagP := parity(a8[7:0]);
        FlagCY := false;
        jump ((a15,a13));
      } else {
        advance (5)
        #153D
        #instruction: LD   HL,(2064)
        let:8 a16 = M[2064] in
        let:8 a17 = M[2065] in
        advance (16)
        #1540
        #instruction: LD   B,10
        advance (7)
        #1542
        #instruction: CALL 1424
        let:16 a18 = (-1 + a3) in
        M[a18] := 15;
        let:16 a19 = (-1 + a18) in
        M[a19] := 45;
        #return-to: 1545
        advance (17)
        #1424
        #instruction: CALL 1474
        let:16 a20 = (-1 + a19) in
        M[a20] := 14;
        let:16 a21 = (-1 + a20) in
        M[a21] := 27;
        #return-to: 1427
        advance (17)
        #1474
        #instruction: LD   A,L
        advance (5)
        #1475
        #instruction: AND  07
        let:8 a22 = (07 & a16) in
        let:8 a23 = (07 | a16) in
        advance (7)
        #1477
        #instruction: OUT  02
        advance (10)
        #1479
        #instruction: JP   1A47
        advance (10)
        #1A47
        #instruction: PUSH BC
        let:16 a24 = (-1 + a21) in
        M[a24] := 10;
        let:16 a25 = (-1 + a24) in
        M[a25] := C;
        advance (11)
        #1A48
        #instruction: LD   B,03
        advance (7)
        #1A4A
        #instruction: LD   A,H
        advance (5)
        #1A4B
        #instruction: RAR
        advance (4)
        #1A4C
        #instruction: LD   H,A
        advance (5)
        #1A4D
        #instruction: LD   A,L
        advance (5)
        #1A4E
        #instruction: RAR
        advance (4)
        #1A4F
        #instruction: LD   L,A
        advance (5)
        #1A50
        #instruction: DEC  B
        let:16 a26 = addWithCarry(!true,03,~00) in
        let:8 a27 = (03 & 0F) in
        let:8 a28 = (~00 & 0F) in
        let:16 a29 = addWithCarry(!true,a27,a28) in
        advance (5)
        #1A51
        #instruction: JP   NZ,1A4A
        if (!is_zero(a26[7:0])) {
          advance (10)
          A := updateBit((a16 >> 01),7,a17[0]);
          B := a26[7:0];
          H := updateBit((a17 >> 01),7,false);
          L := updateBit((a16 >> 01),7,a17[0]);
          SPH := a25[15:8];
          SPL := a25[7:0];
          FlagS := a26[7:0][7];
          FlagZ := is_zero(a26[7:0]);
          FlagA := a29[7:0][4];
          FlagP := parity(a26[7:0]);
          FlagCY := a16[0];
          Shifter_OFF := a22;
          jump (1A4A);
        } else {
          advance (10)
          #1A54
          #instruction: LD   A,H
          advance (5)
          #1A55
          #instruction: AND  3F
          let:8 a30 = (3F & updateBit((a17 >> 01),7,false)) in
          let:8 a31 = (3F | updateBit((a17 >> 01),7,false)) in
          advance (7)
          #1A57
          #instruction: OR   20
          let:8 a32 = (20 | a30) in
          advance (7)
          #1A59
          #instruction: LD   H,A
          advance (5)
          #1A5A
          #instruction: POP  BC
          let:16 a33 = (1 + a25) in
          let:8 a34 = M[a25] in
          let:16 a35 = (1 + a33) in
          let:8 a36 = M[a33] in
          advance (10)
          #1A5B
          #instruction: RET
          let:16 a37 = (1 + a35) in
          let:8 a38 = M[a35] in
          let:16 a39 = (1 + a37) in
          let:8 a40 = M[a37] in
          advance (10)
          A := a32;
          B := a36;
          C := a34;
          H := a32;
          L := updateBit((a16 >> 01),7,a17[0]);
          SPH := a39[15:8];
          SPL := a39[7:0];
          FlagS := a32[7];
          FlagZ := is_zero(a32);
          FlagA := false;
          FlagP := parity(a32);
          FlagCY := false;
          Shifter_OFF := a22;
          jump ((a40,a38));
        }
      }
    } else {
      advance (10)
      #0108
      #instruction: PUSH HL
      let:16 a41 = (-1 + a3) in
      M[a41] := 20;
      let:16 a42 = (-1 + a41) in
      M[a42] := 02;
      advance (11)
      #0109
      #instruction: LD   A,(2006)
      let:8 a43 = M[2006] in
      advance (13)
      #010C
      #instruction: LD   L,A
      advance (5)
      #010D
      #instruction: LD   A,(2067)
      let:8 a44 = M[2067] in
      advance (13)
      #0110
      #instruction: LD   H,A
      advance (5)
      #0111
      #instruction: LD   A,(HL)
      let:8 a45 = M[(a44,a43)] in
      advance (7)
      #0112
      #instruction: AND  A
      let:8 a46 = (a45 & a45) in
      let:8 a47 = (a45 | a45) in
      advance (4)
      #0113
      #instruction: POP  HL
      let:16 a48 = (1 + a42) in
      let:8 a49 = M[a42] in
      let:16 a50 = (1 + a48) in
      let:8 a51 = M[a48] in
      advance (10)
      #0114
      #instruction: JP   Z,0136
      if (is_zero(a46)) {
        advance (10)
        A := a46;
        H := a51;
        L := a49;
        SPH := a50[15:8];
        SPL := a50[7:0];
        FlagS := a46[7];
        FlagZ := is_zero(a46);
        FlagA := a47[3];
        FlagP := parity(a46);
        FlagCY := false;
        jump (0136);
      } else {
        advance (10)
        #0117
        #instruction: INC  HL
        let:16 a52 = (1 + (a51,a49)) in
        advance (5)
        #0118
        #instruction: INC  HL
        let:16 a53 = (1 + a52) in
        advance (5)
        #0119
        #instruction: LD   A,(HL)
        let:8 a54 = M[a53] in
        advance (7)
        #011A
        #instruction: INC  HL
        let:16 a55 = (1 + a53) in
        advance (5)
        #011B
        #instruction: LD   B,(HL)
        let:8 a56 = M[a55] in
        advance (7)
        #011C
        #instruction: AND  FE
        let:8 a57 = (FE & a54) in
        let:8 a58 = (FE | a54) in
        advance (7)
        #011E
        #instruction: RLCA
        advance (4)
        #011F
        #instruction: RLCA
        advance (4)
        #0120
        #instruction: RLCA
        advance (4)
        #0121
        #instruction: LD   E,A
        advance (5)
        #0122
        #instruction: LD   D,00
        advance (7)
        #0124
        #instruction: LD   HL,1C00
        advance (10)
        #0127
        #instruction: ADD  HL,DE
        let:17 a59 = add17((00,updateBit((updateBit((updateBit((a57 << 01),0,a57[7]) << 01),0,updateBit((a57 << 01),0,a57[7])[7]) << 01),0,updateBit((updateBit((a57 << 01),0,a57[7]) << 01),0,updateBit((a57 << 01),0,a57[7])[7])[7])),1C00) in
        advance (10)
        #0128
        #instruction: EX   DE,HL
        advance (4)
        #0129
        #instruction: LD   A,B
        advance (5)
        #012A
        #instruction: AND  A
        let:8 a60 = (a56 & a56) in
        let:8 a61 = (a56 | a56) in
        advance (4)
        #012B
        #instruction: CALL NZ,013B
        if (!is_zero(a60)) {
          let:16 a62 = (-1 + a50) in
          M[a62] := 01;
          let:16 a63 = (-1 + a62) in
          M[a63] := 2E;
          #return-to: 012E
          advance (17)
          #013B
          #instruction: LD   HL,0030
          advance (10)
          #013E
          #instruction: ADD  HL,DE
          let:17 a64 = add17(a59[15:0],0030) in
          advance (10)
          #013F
          #instruction: EX   DE,HL
          advance (4)
          #0140
          #instruction: RET
          let:16 a65 = (1 + a63) in
          let:8 a66 = M[a63] in
          let:16 a67 = (1 + a65) in
          let:8 a68 = M[a65] in
          advance (10)
          A := a60;
          B := a56;
          D := a64[15:0][15:8];
          E := a64[15:0][7:0];
          H := a59[15:0][15:8];
          L := a59[15:0][7:0];
          SPH := a67[15:8];
          SPL := a67[7:0];
          FlagS := a60[7];
          FlagZ := is_zero(a60);
          FlagA := a61[3];
          FlagP := parity(a60);
          FlagCY := a64[16];
          jump ((a68,a66));
        } else {
          advance (11)
          A := a60;
          B := a56;
          D := a59[15:0][15:8];
          E := a59[15:0][7:0];
          H := 00;
          L := updateBit((updateBit((updateBit((a57 << 01),0,a57[7]) << 01),0,updateBit((a57 << 01),0,a57[7])[7]) << 01),0,updateBit((updateBit((a57 << 01),0,a57[7]) << 01),0,updateBit((a57 << 01),0,a57[7])[7])[7]);
          SPH := a50[15:8];
          SPL := a50[7:0];
          FlagS := a60[7];
          FlagZ := is_zero(a60);
          FlagA := a61[3];
          FlagP := parity(a60);
          FlagCY := false;
          jump (012E);
        }
      }
    }

007B:

    #007B
    #instruction: CALL 0248
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7E;
    #return-to: 007E
    advance (17)
    #0248
    #instruction: LD   HL,2010
    advance (10)
    #024B
    #instruction: LD   A,(HL)
    let:8 a3 = M[2010] in
    advance (7)
    #024C
    #instruction: CP   FF
    let:16 a4 = addWithCarry(!false,a3,~FF) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~FF & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #024E
    #instruction: RET  Z
    if (is_zero(a4[7:0])) {
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (11)
      A := a3;
      H := 20;
      L := 10;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := !a4[15:8][0];
      jump ((a11,a9));
    } else {
      advance (5)
      #024F
      #instruction: CP   FE
      let:16 a12 = addWithCarry(!false,a3,~FE) in
      let:8 a13 = (a3 & 0F) in
      let:8 a14 = (~FE & 0F) in
      let:16 a15 = addWithCarry(!false,a13,a14) in
      advance (7)
      #0251
      #instruction: JP   Z,0281
      if (is_zero(a12[7:0])) {
        advance (10)
        #0281
        #instruction: LD   DE,0010
        advance (10)
        #0284
        #instruction: ADD  HL,DE
        let:17 a16 = add17(0010,2010) in
        advance (10)
        #0285
        #instruction: JP   024B
        advance (10)
        A := a3;
        D := 00;
        E := 10;
        H := a16[15:0][15:8];
        L := a16[15:0][7:0];
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a12[7:0][7];
        FlagZ := is_zero(a12[7:0]);
        FlagA := a15[7:0][4];
        FlagP := parity(a12[7:0]);
        FlagCY := a16[16];
        jump (024B);
      } else {
        advance (10)
        #0254
        #instruction: INC  HL
        advance (5)
        #0255
        #instruction: LD   B,(HL)
        let:8 a17 = M[2011] in
        advance (7)
        #0256
        #instruction: LD   C,A
        advance (5)
        #0257
        #instruction: OR   B
        let:8 a18 = (a17 | a3) in
        advance (4)
        #0258
        #instruction: LD   A,C
        advance (5)
        #0259
        #instruction: JP   NZ,0277
        if (!is_zero(a18)) {
          advance (10)
          #0277
          #instruction: DEC  B
          let:16 a19 = addWithCarry(!true,a17,~00) in
          let:8 a20 = (a17 & 0F) in
          let:8 a21 = (~00 & 0F) in
          let:16 a22 = addWithCarry(!true,a20,a21) in
          advance (5)
          #0278
          #instruction: INC  B
          let:16 a23 = addWithCarry(true,a19[7:0],00) in
          let:8 a24 = (a19[7:0] & 0F) in
          let:8 a25 = (00 & 0F) in
          let:16 a26 = addWithCarry(true,a24,a25) in
          advance (5)
          #0279
          #instruction: JP   NZ,027D
          if (!is_zero(a23[7:0])) {
            advance (10)
            #027D
            #instruction: DEC  B
            let:16 a27 = addWithCarry(!true,a23[7:0],~00) in
            let:8 a28 = (a23[7:0] & 0F) in
            let:8 a29 = (~00 & 0F) in
            let:16 a30 = addWithCarry(!true,a28,a29) in
            advance (5)
            #027E
            #instruction: LD   (HL),B
            M[2011] := a27[7:0];
            advance (7)
            #027F
            #instruction: DEC  HL
            advance (5)
            #0280
            #instruction: LD   (HL),A
            M[2010] := a3;
            advance (7)
            #0281
            #instruction: LD   DE,0010
            advance (10)
            #0284
            #instruction: ADD  HL,DE
            let:17 a31 = add17(0010,2010) in
            advance (10)
            #0285
            #instruction: JP   024B
            advance (10)
            A := a3;
            B := a27[7:0];
            C := a3;
            D := 00;
            E := 10;
            H := a31[15:0][15:8];
            L := a31[15:0][7:0];
            SPH := a2[15:8];
            SPL := a2[7:0];
            FlagS := a27[7:0][7];
            FlagZ := is_zero(a27[7:0]);
            FlagA := a30[7:0][4];
            FlagP := parity(a27[7:0]);
            FlagCY := a31[16];
            jump (024B);
          } else {
            advance (10)
            #027C
            #instruction: DEC  A
            let:16 a32 = addWithCarry(!true,a3,~00) in
            let:8 a33 = (a3 & 0F) in
            let:8 a34 = (~00 & 0F) in
            let:16 a35 = addWithCarry(!true,a33,a34) in
            advance (5)
            #027D
            #instruction: DEC  B
            let:16 a36 = addWithCarry(!true,a23[7:0],~00) in
            let:8 a37 = (a23[7:0] & 0F) in
            let:8 a38 = (~00 & 0F) in
            let:16 a39 = addWithCarry(!true,a37,a38) in
            advance (5)
            #027E
            #instruction: LD   (HL),B
            M[2011] := a36[7:0];
            advance (7)
            #027F
            #instruction: DEC  HL
            advance (5)
            #0280
            #instruction: LD   (HL),A
            M[2010] := a32[7:0];
            advance (7)
            #0281
            #instruction: LD   DE,0010
            advance (10)
            #0284
            #instruction: ADD  HL,DE
            let:17 a40 = add17(0010,2010) in
            advance (10)
            #0285
            #instruction: JP   024B
            advance (10)
            A := a32[7:0];
            B := a36[7:0];
            C := a3;
            D := 00;
            E := 10;
            H := a40[15:0][15:8];
            L := a40[15:0][7:0];
            SPH := a2[15:8];
            SPL := a2[7:0];
            FlagS := a36[7:0][7];
            FlagZ := is_zero(a36[7:0]);
            FlagA := a39[7:0][4];
            FlagP := parity(a36[7:0]);
            FlagCY := a40[16];
            jump (024B);
          }
        } else {
          advance (10)
          #025C
          #instruction: INC  HL
          advance (5)
          #025D
          #instruction: LD   A,(HL)
          let:8 a41 = M[2012] in
          advance (7)
          #025E
          #instruction: AND  A
          let:8 a42 = (a41 & a41) in
          let:8 a43 = (a41 | a41) in
          advance (4)
          #025F
          #instruction: JP   NZ,0288
          if (!is_zero(a42)) {
            advance (10)
            #0288
            #instruction: DEC  (HL)
            let:8 a44 = M[2012] in
            let:16 a45 = addWithCarry(!true,a44,~00) in
            let:8 a46 = (a44 & 0F) in
            let:8 a47 = (~00 & 0F) in
            let:16 a48 = addWithCarry(!true,a46,a47) in
            M[2012] := a45[7:0];
            advance (10)
            #0289
            #instruction: DEC  HL
            advance (5)
            #028A
            #instruction: DEC  HL
            advance (5)
            #028B
            #instruction: JP   0281
            advance (10)
            #0281
            #instruction: LD   DE,0010
            advance (10)
            #0284
            #instruction: ADD  HL,DE
            let:17 a49 = add17(0010,2010) in
            advance (10)
            #0285
            #instruction: JP   024B
            advance (10)
            A := a42;
            B := a17;
            C := a3;
            D := 00;
            E := 10;
            H := a49[15:0][15:8];
            L := a49[15:0][7:0];
            SPH := a2[15:8];
            SPL := a2[7:0];
            FlagS := a45[7:0][7];
            FlagZ := is_zero(a45[7:0]);
            FlagA := a48[7:0][4];
            FlagP := parity(a45[7:0]);
            FlagCY := a49[16];
            jump (024B);
          } else {
            advance (10)
            #0262
            #instruction: INC  HL
            advance (5)
            #0263
            #instruction: LD   E,(HL)
            let:8 a50 = M[2013] in
            advance (7)
            #0264
            #instruction: INC  HL
            advance (5)
            #0265
            #instruction: LD   D,(HL)
            let:8 a51 = M[2014] in
            advance (7)
            #0266
            #instruction: PUSH HL
            let:16 a52 = (-1 + a2) in
            M[a52] := 20;
            let:16 a53 = (-1 + a52) in
            M[a53] := 14;
            advance (11)
            #0267
            #instruction: EX   DE,HL
            advance (4)
            #0268
            #instruction: PUSH HL
            let:16 a54 = (-1 + a53) in
            M[a54] := a51;
            let:16 a55 = (-1 + a54) in
            M[a55] := a50;
            advance (11)
            #0269
            #instruction: LD   HL,026F
            advance (10)
            #026C
            #instruction: EX   (SP),HL
            let:16 a56 = (1 + a55) in
            let:8 a57 = M[a55] in
            let:8 a58 = M[a56] in
            M[a55] := 6F;
            M[a56] := 02;
            advance (18)
            #026D
            #instruction: PUSH DE
            let:16 a59 = (-1 + a55) in
            M[a59] := 20;
            let:16 a60 = (-1 + a59) in
            M[a60] := 14;
            advance (11)
            #026E
            #instruction: JP   (HL)
            advance (5)
            A := a42;
            B := a17;
            C := a3;
            D := 20;
            E := 14;
            H := a58;
            L := a57;
            SPH := a60[15:8];
            SPL := a60[7:0];
            FlagS := a42[7];
            FlagZ := is_zero(a42);
            FlagA := a43[3];
            FlagP := parity(a42);
            FlagCY := false;
            jump ((a58,a57));
          }
        }
      }
    }

007E:

    #007E
    #instruction: CALL 0913
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 81;
    #return-to: 0081
    advance (17)
    #0913
    #instruction: LD   A,(2009)
    let:8 a3 = M[2009] in
    advance (13)
    #0916
    #instruction: CP   78
    let:16 a4 = addWithCarry(!false,a3,~78) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~78 & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #0918
    #instruction: RET  NC
    if (!!a4[15:8][0]) {
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (11)
      A := a3;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := !a4[15:8][0];
      jump ((a11,a9));
    } else {
      advance (5)
      #0919
      #instruction: LD   HL,(2091)
      let:8 a12 = M[2091] in
      let:8 a13 = M[2092] in
      advance (16)
      #091C
      #instruction: LD   A,L
      advance (5)
      #091D
      #instruction: OR   H
      let:8 a14 = (a13 | a12) in
      advance (4)
      #091E
      #instruction: JP   NZ,0929
      if (!is_zero(a14)) {
        advance (10)
        #0929
        #instruction: DEC  HL
        let:16 a15 = (-1 + (a13,a12)) in
        advance (5)
        #092A
        #instruction: LD   (2091),HL
        M[2091] := a15[7:0];
        M[2092] := a15[15:8];
        advance (16)
        #092D
        #instruction: RET
        let:16 a16 = (1 + a2) in
        let:8 a17 = M[a2] in
        let:16 a18 = (1 + a16) in
        let:8 a19 = M[a16] in
        advance (10)
        A := a14;
        H := a15[15:8];
        L := a15[7:0];
        SPH := a18[15:8];
        SPL := a18[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := false;
        jump ((a19,a17));
      } else {
        advance (10)
        #0921
        #instruction: LD   HL,0600
        advance (10)
        #0924
        #instruction: LD   A,01
        advance (7)
        #0926
        #instruction: LD   (2083),A
        M[2083] := 01;
        advance (13)
        #0929
        #instruction: DEC  HL
        advance (5)
        #092A
        #instruction: LD   (2091),HL
        M[2091] := FF;
        M[2092] := 05;
        advance (16)
        #092D
        #instruction: RET
        let:16 a20 = (1 + a2) in
        let:8 a21 = M[a2] in
        let:16 a22 = (1 + a20) in
        let:8 a23 = M[a20] in
        advance (10)
        A := 01;
        H := 05;
        L := FF;
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := false;
        jump ((a23,a21));
      }
    }

0081:

    #0081
    #instruction: NOP
    advance (4)
    #0082
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0083
    #instruction: POP  DE
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    #0084
    #instruction: POP  BC
    let:16 a9 = (1 + a7) in
    let:8 a10 = M[a7] in
    let:16 a11 = (1 + a9) in
    let:8 a12 = M[a9] in
    advance (10)
    #0085
    #instruction: POP  PSW
    let:16 a13 = (1 + a11) in
    let:8 a14 = M[a11] in
    let:16 a15 = (1 + a13) in
    let:8 a16 = M[a13] in
    advance (10)
    #0086
    #instruction: EI
    enable_interrupts()
    advance (4)
    #0087
    #instruction: RET
    let:16 a17 = (1 + a15) in
    let:8 a18 = M[a15] in
    let:16 a19 = (1 + a17) in
    let:8 a20 = M[a17] in
    advance (10)
    A := a16;
    B := a12;
    C := a10;
    D := a8;
    E := a6;
    H := a4;
    L := a2;
    SPH := a19[15:8];
    SPL := a19[7:0];
    FlagS := a14[7];
    FlagZ := a14[6];
    FlagA := a14[4];
    FlagP := a14[2];
    FlagCY := a14[0];
    jump ((a20,a18));

00AB:

    #00AB
    #instruction: CALL 0141
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := AE;
    #return-to: 00AE
    advance (17)
    #0141
    #instruction: LD   A,(2068)
    let:8 a3 = M[2068] in
    advance (13)
    #0144
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0145
    #instruction: RET  Z
    if (is_zero(a4)) {
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (11)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    } else {
      advance (5)
      #0146
      #instruction: LD   A,(2000)
      let:8 a10 = M[2000] in
      advance (13)
      #0149
      #instruction: AND  A
      let:8 a11 = (a10 & a10) in
      let:8 a12 = (a10 | a10) in
      advance (4)
      #014A
      #instruction: RET  NZ
      if (!is_zero(a11)) {
        let:16 a13 = (1 + a2) in
        let:8 a14 = M[a2] in
        let:16 a15 = (1 + a13) in
        let:8 a16 = M[a13] in
        advance (11)
        A := a11;
        SPH := a15[15:8];
        SPL := a15[7:0];
        FlagS := a11[7];
        FlagZ := is_zero(a11);
        FlagA := a12[3];
        FlagP := parity(a11);
        FlagCY := false;
        jump ((a16,a14));
      } else {
        advance (5)
        #014B
        #instruction: LD   A,(2067)
        let:8 a17 = M[2067] in
        advance (13)
        #014E
        #instruction: LD   H,A
        advance (5)
        #014F
        #instruction: LD   A,(2006)
        let:8 a18 = M[2006] in
        advance (13)
        #0152
        #instruction: LD   D,02
        advance (7)
        #0154
        #instruction: INC  A
        let:16 a19 = addWithCarry(true,a18,00) in
        let:8 a20 = (a18 & 0F) in
        let:8 a21 = (00 & 0F) in
        let:16 a22 = addWithCarry(true,a20,a21) in
        advance (5)
        #0155
        #instruction: CP   37
        let:16 a23 = addWithCarry(!false,a19[7:0],~37) in
        let:8 a24 = (a19[7:0] & 0F) in
        let:8 a25 = (~37 & 0F) in
        let:16 a26 = addWithCarry(!false,a24,a25) in
        advance (7)
        #0157
        #instruction: CALL Z,01A1
        if (is_zero(a23[7:0])) {
          let:16 a27 = (-1 + a2) in
          M[a27] := 01;
          let:16 a28 = (-1 + a27) in
          M[a28] := 5A;
          #return-to: 015A
          advance (17)
          #01A1
          #instruction: DEC  D
          let:16 a29 = addWithCarry(!true,02,~00) in
          let:8 a30 = (02 & 0F) in
          let:8 a31 = (~00 & 0F) in
          let:16 a32 = addWithCarry(!true,a30,a31) in
          advance (5)
          #01A2
          #instruction: JP   Z,01CD
          if (is_zero(a29[7:0])) {
            advance (10)
            #01CD
            #instruction: POP  HL
            let:16 a33 = (1 + a28) in
            let:8 a34 = M[a28] in
            let:16 a35 = (1 + a33) in
            let:8 a36 = M[a33] in
            advance (10)
            #01CE
            #instruction: RET
            let:16 a37 = (1 + a35) in
            let:8 a38 = M[a35] in
            let:16 a39 = (1 + a37) in
            let:8 a40 = M[a37] in
            advance (10)
            A := a19[7:0];
            D := a29[7:0];
            H := a36;
            L := a34;
            SPH := a39[15:8];
            SPL := a39[7:0];
            FlagS := a29[7:0][7];
            FlagZ := is_zero(a29[7:0]);
            FlagA := a32[7:0][4];
            FlagP := parity(a29[7:0]);
            FlagCY := !a23[15:8][0];
            jump ((a40,a38));
          } else {
            advance (10)
            #01A5
            #instruction: LD   HL,2006
            advance (10)
            #01A8
            #instruction: LD   (HL),00
            M[2006] := 00;
            advance (10)
            #01AA
            #instruction: INC  HL
            advance (5)
            #01AB
            #instruction: LD   C,(HL)
            let:8 a41 = M[2007] in
            advance (7)
            #01AC
            #instruction: LD   (HL),00
            M[2007] := 00;
            advance (10)
            #01AE
            #instruction: CALL 01D9
            let:16 a42 = (-1 + a28) in
            M[a42] := 01;
            let:16 a43 = (-1 + a42) in
            M[a43] := B1;
            #return-to: 01B1
            advance (17)
            #01D9
            #instruction: INC  HL
            advance (5)
            #01DA
            #instruction: LD   B,(HL)
            let:8 a44 = M[2008] in
            advance (7)
            #01DB
            #instruction: INC  HL
            advance (5)
            #01DC
            #instruction: LD   A,C
            advance (5)
            #01DD
            #instruction: ADD  (HL)
            let:8 a45 = M[2009] in
            let:16 a46 = addWithCarry(false,a45,a41) in
            let:8 a47 = (a45 & 0F) in
            let:8 a48 = (a41 & 0F) in
            let:16 a49 = addWithCarry(false,a47,a48) in
            advance (7)
            #01DE
            #instruction: LD   (HL),A
            M[2009] := a46[7:0];
            advance (7)
            #01DF
            #instruction: INC  HL
            advance (5)
            #01E0
            #instruction: LD   A,B
            advance (5)
            #01E1
            #instruction: ADD  (HL)
            let:8 a50 = M[200A] in
            let:16 a51 = addWithCarry(false,a50,a44) in
            let:8 a52 = (a50 & 0F) in
            let:8 a53 = (a44 & 0F) in
            let:16 a54 = addWithCarry(false,a52,a53) in
            advance (7)
            #01E2
            #instruction: LD   (HL),A
            M[200A] := a51[7:0];
            advance (7)
            #01E3
            #instruction: RET
            let:16 a55 = (1 + a43) in
            let:8 a56 = M[a43] in
            let:16 a57 = (1 + a55) in
            let:8 a58 = M[a55] in
            advance (10)
            A := a51[7:0];
            B := a44;
            C := a41;
            D := a29[7:0];
            H := 20;
            L := 0A;
            SPH := a57[15:8];
            SPL := a57[7:0];
            FlagS := a51[7:0][7];
            FlagZ := is_zero(a51[7:0]);
            FlagA := a54[7:0][4];
            FlagP := parity(a51[7:0]);
            FlagCY := a51[15:8][0];
            jump ((a58,a56));
          }
        } else {
          advance (11)
          A := a19[7:0];
          D := 02;
          H := a17;
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagS := a23[7:0][7];
          FlagZ := is_zero(a23[7:0]);
          FlagA := a26[7:0][4];
          FlagP := parity(a23[7:0]);
          FlagCY := !a23[15:8][0];
          jump (015A);
        }
      }
    }

00AE:

    #00AE
    #instruction: JP   0082
    advance (10)
    #0082
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0083
    #instruction: POP  DE
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    #0084
    #instruction: POP  BC
    let:16 a9 = (1 + a7) in
    let:8 a10 = M[a7] in
    let:16 a11 = (1 + a9) in
    let:8 a12 = M[a9] in
    advance (10)
    #0085
    #instruction: POP  PSW
    let:16 a13 = (1 + a11) in
    let:8 a14 = M[a11] in
    let:16 a15 = (1 + a13) in
    let:8 a16 = M[a13] in
    advance (10)
    #0086
    #instruction: EI
    enable_interrupts()
    advance (4)
    #0087
    #instruction: RET
    let:16 a17 = (1 + a15) in
    let:8 a18 = M[a15] in
    let:16 a19 = (1 + a17) in
    let:8 a20 = M[a17] in
    advance (10)
    A := a16;
    B := a12;
    C := a10;
    D := a8;
    E := a6;
    H := a4;
    L := a2;
    SPH := a19[15:8];
    SPL := a19[7:0];
    FlagS := a14[7];
    FlagZ := a14[6];
    FlagA := a14[4];
    FlagP := a14[2];
    FlagCY := a14[0];
    jump ((a20,a18));

00B4:

    #00B4
    #instruction: PUSH HL
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    advance (11)
    #00B5
    #instruction: LD   A,(HL)
    let:8 a3 = M[(H,L)] in
    advance (7)
    #00B6
    #instruction: INC  HL
    let:16 a4 = (1 + (H,L)) in
    advance (5)
    #00B7
    #instruction: LD   H,(HL)
    let:8 a5 = M[a4] in
    advance (7)
    #00B8
    #instruction: LD   L,A
    advance (5)
    #00B9
    #instruction: LD   (2009),HL
    M[2009] := a3;
    M[200A] := a5;
    advance (16)
    #00BC
    #instruction: LD   (200B),HL
    M[200B] := a3;
    M[200C] := a5;
    advance (16)
    #00BF
    #instruction: POP  HL
    let:16 a6 = (1 + a2) in
    let:8 a7 = M[a2] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    #00C0
    #instruction: DEC  HL
    let:16 a10 = (-1 + (a9,a7)) in
    advance (5)
    #00C1
    #instruction: LD   A,(HL)
    let:8 a11 = M[a10] in
    advance (7)
    #00C2
    #instruction: CP   03
    let:16 a12 = addWithCarry(!false,a11,~03) in
    let:8 a13 = (a11 & 0F) in
    let:8 a14 = (~03 & 0F) in
    let:16 a15 = addWithCarry(!false,a13,a14) in
    advance (7)
    #00C4
    #instruction: JP   NZ,00C8
    if (!is_zero(a12[7:0])) {
      advance (10)
      #00C8
      #instruction: LD   (2008),A
      M[2008] := a11;
      advance (13)
      #00CB
      #instruction: CP   FE
      let:16 a16 = addWithCarry(!false,a11,~FE) in
      let:8 a17 = (a11 & 0F) in
      let:8 a18 = (~FE & 0F) in
      let:16 a19 = addWithCarry(!false,a17,a18) in
      advance (7)
      #00CD
      #instruction: LD   A,00
      advance (7)
      #00CF
      #instruction: JP   NZ,00D3
      if (!is_zero(a16[7:0])) {
        advance (10)
        #00D3
        #instruction: LD   (200D),A
        M[200D] := 00;
        advance (13)
        #00D6
        #instruction: RET
        let:16 a20 = (1 + a8) in
        let:8 a21 = M[a8] in
        let:16 a22 = (1 + a20) in
        let:8 a23 = M[a20] in
        advance (10)
        A := 00;
        H := a10[15:8];
        L := a10[7:0];
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a16[7:0][7];
        FlagZ := is_zero(a16[7:0]);
        FlagA := a19[7:0][4];
        FlagP := parity(a16[7:0]);
        FlagCY := !a16[15:8][0];
        jump ((a23,a21));
      } else {
        advance (10)
        #00D2
        #instruction: INC  A
        let:16 a24 = addWithCarry(true,00,00) in
        let:8 a25 = (00 & 0F) in
        let:8 a26 = (00 & 0F) in
        let:16 a27 = addWithCarry(true,a25,a26) in
        advance (5)
        #00D3
        #instruction: LD   (200D),A
        M[200D] := a24[7:0];
        advance (13)
        #00D6
        #instruction: RET
        let:16 a28 = (1 + a8) in
        let:8 a29 = M[a8] in
        let:16 a30 = (1 + a28) in
        let:8 a31 = M[a28] in
        advance (10)
        A := a24[7:0];
        H := a10[15:8];
        L := a10[7:0];
        SPH := a30[15:8];
        SPL := a30[7:0];
        FlagS := a24[7:0][7];
        FlagZ := is_zero(a24[7:0]);
        FlagA := a27[7:0][4];
        FlagP := parity(a24[7:0]);
        FlagCY := !a16[15:8][0];
        jump ((a31,a29));
      }
    } else {
      advance (10)
      #00C7
      #instruction: DEC  A
      let:16 a32 = addWithCarry(!true,a11,~00) in
      let:8 a33 = (a11 & 0F) in
      let:8 a34 = (~00 & 0F) in
      let:16 a35 = addWithCarry(!true,a33,a34) in
      advance (5)
      #00C8
      #instruction: LD   (2008),A
      M[2008] := a32[7:0];
      advance (13)
      #00CB
      #instruction: CP   FE
      let:16 a36 = addWithCarry(!false,a32[7:0],~FE) in
      let:8 a37 = (a32[7:0] & 0F) in
      let:8 a38 = (~FE & 0F) in
      let:16 a39 = addWithCarry(!false,a37,a38) in
      advance (7)
      #00CD
      #instruction: LD   A,00
      advance (7)
      #00CF
      #instruction: JP   NZ,00D3
      if (!is_zero(a36[7:0])) {
        advance (10)
        #00D3
        #instruction: LD   (200D),A
        M[200D] := 00;
        advance (13)
        #00D6
        #instruction: RET
        let:16 a40 = (1 + a8) in
        let:8 a41 = M[a8] in
        let:16 a42 = (1 + a40) in
        let:8 a43 = M[a40] in
        advance (10)
        A := 00;
        H := a10[15:8];
        L := a10[7:0];
        SPH := a42[15:8];
        SPL := a42[7:0];
        FlagS := a36[7:0][7];
        FlagZ := is_zero(a36[7:0]);
        FlagA := a39[7:0][4];
        FlagP := parity(a36[7:0]);
        FlagCY := !a36[15:8][0];
        jump ((a43,a41));
      } else {
        advance (10)
        #00D2
        #instruction: INC  A
        let:16 a44 = addWithCarry(true,00,00) in
        let:8 a45 = (00 & 0F) in
        let:8 a46 = (00 & 0F) in
        let:16 a47 = addWithCarry(true,a45,a46) in
        advance (5)
        #00D3
        #instruction: LD   (200D),A
        M[200D] := a44[7:0];
        advance (13)
        #00D6
        #instruction: RET
        let:16 a48 = (1 + a8) in
        let:8 a49 = M[a8] in
        let:16 a50 = (1 + a48) in
        let:8 a51 = M[a48] in
        advance (10)
        A := a44[7:0];
        H := a10[15:8];
        L := a10[7:0];
        SPH := a50[15:8];
        SPL := a50[7:0];
        FlagS := a44[7:0][7];
        FlagZ := is_zero(a44[7:0]);
        FlagA := a47[7:0][4];
        FlagP := parity(a44[7:0]);
        FlagCY := !a36[15:8][0];
        jump ((a51,a49));
      }
    }

012E:

    #012E
    #instruction: LD   HL,(200B)
    let:8 a1 = M[200B] in
    let:8 a2 = M[200C] in
    advance (16)
    #0131
    #instruction: LD   B,10
    advance (7)
    #0133
    #instruction: CALL 15D3
    let:16 a3 = (-1 + (SPH,SPL)) in
    M[a3] := 01;
    let:16 a4 = (-1 + a3) in
    M[a4] := 36;
    #return-to: 0136
    advance (17)
    #15D3
    #instruction: CALL 1474
    let:16 a5 = (-1 + a4) in
    M[a5] := 15;
    let:16 a6 = (-1 + a5) in
    M[a6] := D6;
    #return-to: 15D6
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a7 = (07 & a1) in
    let:8 a8 = (07 | a1) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a9 = (-1 + a6) in
    M[a9] := 10;
    let:16 a10 = (-1 + a9) in
    M[a10] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a11 = addWithCarry(!true,03,~00) in
    let:8 a12 = (03 & 0F) in
    let:8 a13 = (~00 & 0F) in
    let:16 a14 = addWithCarry(!true,a12,a13) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a11[7:0])) {
      advance (10)
      A := updateBit((a1 >> 01),7,a2[0]);
      B := a11[7:0];
      H := updateBit((a2 >> 01),7,false);
      L := updateBit((a1 >> 01),7,a2[0]);
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a11[7:0][7];
      FlagZ := is_zero(a11[7:0]);
      FlagA := a14[7:0][4];
      FlagP := parity(a11[7:0]);
      FlagCY := a1[0];
      Shifter_OFF := a7;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a15 = (3F & updateBit((a2 >> 01),7,false)) in
      let:8 a16 = (3F | updateBit((a2 >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a17 = (20 | a15) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a18 = (1 + a10) in
      let:8 a19 = M[a10] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a22 = (1 + a20) in
      let:8 a23 = M[a20] in
      let:16 a24 = (1 + a22) in
      let:8 a25 = M[a22] in
      advance (10)
      A := a17;
      B := a21;
      C := a19;
      H := a17;
      L := updateBit((a1 >> 01),7,a2[0]);
      SPH := a24[15:8];
      SPL := a24[7:0];
      FlagS := a17[7];
      FlagZ := is_zero(a17);
      FlagA := false;
      FlagP := parity(a17);
      FlagCY := false;
      Shifter_OFF := a7;
      jump ((a25,a23));
    }

0136:

    #0136
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #0137
    #instruction: LD   (2000),A
    M[2000] := a1;
    advance (13)
    #013A
    #instruction: RET
    let:16 a2 = (1 + (SPH,SPL)) in
    let:8 a3 = M[(SPH,SPL)] in
    let:16 a4 = (1 + a2) in
    let:8 a5 = M[a2] in
    advance (10)
    A := a1;
    SPH := a4[15:8];
    SPL := a4[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump ((a5,a3));

015A:

    #015A
    #instruction: LD   L,A
    advance (5)
    #015B
    #instruction: LD   B,(HL)
    let:8 a1 = M[(H,A)] in
    advance (7)
    #015C
    #instruction: DEC  B
    let:16 a2 = addWithCarry(!true,a1,~00) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~00 & 0F) in
    let:16 a5 = addWithCarry(!true,a3,a4) in
    advance (5)
    #015D
    #instruction: JP   NZ,0154
    if (!is_zero(a2[7:0])) {
      advance (10)
      #0154
      #instruction: INC  A
      let:16 a6 = addWithCarry(true,A,00) in
      let:8 a7 = (A & 0F) in
      let:8 a8 = (00 & 0F) in
      let:16 a9 = addWithCarry(true,a7,a8) in
      advance (5)
      #0155
      #instruction: CP   37
      let:16 a10 = addWithCarry(!false,a6[7:0],~37) in
      let:8 a11 = (a6[7:0] & 0F) in
      let:8 a12 = (~37 & 0F) in
      let:16 a13 = addWithCarry(!false,a11,a12) in
      advance (7)
      #0157
      #instruction: CALL Z,01A1
      if (is_zero(a10[7:0])) {
        let:16 a14 = (-1 + (SPH,SPL)) in
        M[a14] := 01;
        let:16 a15 = (-1 + a14) in
        M[a15] := 5A;
        #return-to: 015A
        advance (17)
        #01A1
        #instruction: DEC  D
        let:16 a16 = addWithCarry(!true,D,~00) in
        let:8 a17 = (D & 0F) in
        let:8 a18 = (~00 & 0F) in
        let:16 a19 = addWithCarry(!true,a17,a18) in
        advance (5)
        #01A2
        #instruction: JP   Z,01CD
        if (is_zero(a16[7:0])) {
          advance (10)
          #01CD
          #instruction: POP  HL
          let:16 a20 = (1 + a15) in
          let:8 a21 = M[a15] in
          let:16 a22 = (1 + a20) in
          let:8 a23 = M[a20] in
          advance (10)
          #01CE
          #instruction: RET
          let:16 a24 = (1 + a22) in
          let:8 a25 = M[a22] in
          let:16 a26 = (1 + a24) in
          let:8 a27 = M[a24] in
          advance (10)
          A := a6[7:0];
          B := a2[7:0];
          D := a16[7:0];
          H := a23;
          L := a21;
          SPH := a26[15:8];
          SPL := a26[7:0];
          FlagS := a16[7:0][7];
          FlagZ := is_zero(a16[7:0]);
          FlagA := a19[7:0][4];
          FlagP := parity(a16[7:0]);
          FlagCY := !a10[15:8][0];
          jump ((a27,a25));
        } else {
          advance (10)
          #01A5
          #instruction: LD   HL,2006
          advance (10)
          #01A8
          #instruction: LD   (HL),00
          M[2006] := 00;
          advance (10)
          #01AA
          #instruction: INC  HL
          advance (5)
          #01AB
          #instruction: LD   C,(HL)
          let:8 a28 = M[2007] in
          advance (7)
          #01AC
          #instruction: LD   (HL),00
          M[2007] := 00;
          advance (10)
          #01AE
          #instruction: CALL 01D9
          let:16 a29 = (-1 + a15) in
          M[a29] := 01;
          let:16 a30 = (-1 + a29) in
          M[a30] := B1;
          #return-to: 01B1
          advance (17)
          #01D9
          #instruction: INC  HL
          advance (5)
          #01DA
          #instruction: LD   B,(HL)
          let:8 a31 = M[2008] in
          advance (7)
          #01DB
          #instruction: INC  HL
          advance (5)
          #01DC
          #instruction: LD   A,C
          advance (5)
          #01DD
          #instruction: ADD  (HL)
          let:8 a32 = M[2009] in
          let:16 a33 = addWithCarry(false,a32,a28) in
          let:8 a34 = (a32 & 0F) in
          let:8 a35 = (a28 & 0F) in
          let:16 a36 = addWithCarry(false,a34,a35) in
          advance (7)
          #01DE
          #instruction: LD   (HL),A
          M[2009] := a33[7:0];
          advance (7)
          #01DF
          #instruction: INC  HL
          advance (5)
          #01E0
          #instruction: LD   A,B
          advance (5)
          #01E1
          #instruction: ADD  (HL)
          let:8 a37 = M[200A] in
          let:16 a38 = addWithCarry(false,a37,a31) in
          let:8 a39 = (a37 & 0F) in
          let:8 a40 = (a31 & 0F) in
          let:16 a41 = addWithCarry(false,a39,a40) in
          advance (7)
          #01E2
          #instruction: LD   (HL),A
          M[200A] := a38[7:0];
          advance (7)
          #01E3
          #instruction: RET
          let:16 a42 = (1 + a30) in
          let:8 a43 = M[a30] in
          let:16 a44 = (1 + a42) in
          let:8 a45 = M[a42] in
          advance (10)
          A := a38[7:0];
          B := a31;
          C := a28;
          D := a16[7:0];
          H := 20;
          L := 0A;
          SPH := a44[15:8];
          SPL := a44[7:0];
          FlagS := a38[7:0][7];
          FlagZ := is_zero(a38[7:0]);
          FlagA := a41[7:0][4];
          FlagP := parity(a38[7:0]);
          FlagCY := a38[15:8][0];
          jump ((a45,a43));
        }
      } else {
        advance (11)
        A := a6[7:0];
        B := a2[7:0];
        L := A;
        FlagS := a10[7:0][7];
        FlagZ := is_zero(a10[7:0]);
        FlagA := a13[7:0][4];
        FlagP := parity(a10[7:0]);
        FlagCY := !a10[15:8][0];
        jump (015A);
      }
    } else {
      advance (10)
      #0160
      #instruction: LD   (2006),A
      M[2006] := A;
      advance (13)
      #0163
      #instruction: CALL 017A
      let:16 a46 = (-1 + (SPH,SPL)) in
      M[a46] := 01;
      let:16 a47 = (-1 + a46) in
      M[a47] := 66;
      #return-to: 0166
      advance (17)
      #017A
      #instruction: LD   D,00
      advance (7)
      #017C
      #instruction: LD   A,L
      advance (5)
      #017D
      #instruction: LD   HL,2009
      advance (10)
      #0180
      #instruction: LD   B,(HL)
      let:8 a48 = M[2009] in
      advance (7)
      #0181
      #instruction: INC  HL
      advance (5)
      #0182
      #instruction: LD   C,(HL)
      let:8 a49 = M[200A] in
      advance (7)
      #0183
      #instruction: CP   0B
      let:16 a50 = addWithCarry(!false,A,~0B) in
      let:8 a51 = (A & 0F) in
      let:8 a52 = (~0B & 0F) in
      let:16 a53 = addWithCarry(!false,a51,a52) in
      advance (7)
      #0185
      #instruction: JP   MI,0194
      if (a50[7:0][7]) {
        advance (10)
        #0194
        #instruction: LD   L,B
        advance (5)
        #0195
        #instruction: AND  A
        let:8 a54 = (A & A) in
        let:8 a55 = (A | A) in
        advance (4)
        #0196
        #instruction: RET  Z
        if (is_zero(a54)) {
          let:16 a56 = (1 + a47) in
          let:8 a57 = M[a47] in
          let:16 a58 = (1 + a56) in
          let:8 a59 = M[a56] in
          advance (11)
          A := a54;
          B := a48;
          C := a49;
          D := 00;
          H := 20;
          L := a48;
          SPH := a58[15:8];
          SPL := a58[7:0];
          FlagS := a54[7];
          FlagZ := is_zero(a54);
          FlagA := a55[3];
          FlagP := parity(a54);
          FlagCY := false;
          jump ((a59,a57));
        } else {
          advance (5)
          #0197
          #instruction: LD   E,A
          advance (5)
          #0198
          #instruction: LD   A,C
          advance (5)
          #0199
          #instruction: ADD  10
          let:16 a60 = addWithCarry(false,10,a49) in
          let:8 a61 = (10 & 0F) in
          let:8 a62 = (a49 & 0F) in
          let:16 a63 = addWithCarry(false,a61,a62) in
          advance (7)
          #019B
          #instruction: LD   C,A
          advance (5)
          #019C
          #instruction: LD   A,E
          advance (5)
          #019D
          #instruction: DEC  A
          let:16 a64 = addWithCarry(!true,a54,~00) in
          let:8 a65 = (a54 & 0F) in
          let:8 a66 = (~00 & 0F) in
          let:16 a67 = addWithCarry(!true,a65,a66) in
          advance (5)
          #019E
          #instruction: JP   0195
          advance (10)
          A := a64[7:0];
          B := a48;
          C := a60[7:0];
          D := 00;
          E := a54;
          H := 20;
          L := a48;
          SPH := a47[15:8];
          SPL := a47[7:0];
          FlagS := a64[7:0][7];
          FlagZ := is_zero(a64[7:0]);
          FlagA := a67[7:0][4];
          FlagP := parity(a64[7:0]);
          FlagCY := a60[15:8][0];
          jump (0195);
        }
      } else {
        advance (10)
        #0188
        #instruction: SBC  0B
        let:16 a68 = addWithCarry(!!a50[15:8][0],A,~0B) in
        let:8 a69 = (A & 0F) in
        let:8 a70 = (~0B & 0F) in
        let:16 a71 = addWithCarry(!!a50[15:8][0],a69,a70) in
        advance (7)
        #018A
        #instruction: LD   E,A
        advance (5)
        #018B
        #instruction: LD   A,B
        advance (5)
        #018C
        #instruction: ADD  10
        let:16 a72 = addWithCarry(false,10,a48) in
        let:8 a73 = (10 & 0F) in
        let:8 a74 = (a48 & 0F) in
        let:16 a75 = addWithCarry(false,a73,a74) in
        advance (7)
        #018E
        #instruction: LD   B,A
        advance (5)
        #018F
        #instruction: LD   A,E
        advance (5)
        #0190
        #instruction: INC  D
        let:16 a76 = addWithCarry(true,00,00) in
        let:8 a77 = (00 & 0F) in
        let:8 a78 = (00 & 0F) in
        let:16 a79 = addWithCarry(true,a77,a78) in
        advance (5)
        #0191
        #instruction: JP   0183
        advance (10)
        A := a68[7:0];
        B := a72[7:0];
        C := a49;
        D := a76[7:0];
        E := a68[7:0];
        H := 20;
        L := 0A;
        SPH := a47[15:8];
        SPL := a47[7:0];
        FlagS := a76[7:0][7];
        FlagZ := is_zero(a76[7:0]);
        FlagA := a79[7:0][4];
        FlagP := parity(a76[7:0]);
        FlagCY := a72[15:8][0];
        jump (0183);
      }
    }

0166:

    #0166
    #instruction: LD   H,C
    advance (5)
    #0167
    #instruction: LD   (200B),HL
    M[200B] := L;
    M[200C] := C;
    advance (16)
    #016A
    #instruction: LD   A,L
    advance (5)
    #016B
    #instruction: CP   28
    let:16 a1 = addWithCarry(!false,L,~28) in
    let:8 a2 = (L & 0F) in
    let:8 a3 = (~28 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    advance (7)
    #016D
    #instruction: JP   CY,1971
    if (!a1[15:8][0]) {
      advance (10)
      #1971
      #instruction: LD   A,01
      advance (7)
      #1973
      #instruction: LD   (206D),A
      M[206D] := 01;
      advance (13)
      #1976
      #instruction: JP   16E6
      advance (10)
      #16E6
      #instruction: LD   SP,2400
      advance (10)
      #16E9
      #instruction: EI
      enable_interrupts()
      advance (4)
      #16EA
      #instruction: XOR  A
      let:8 a5 = (01 ^ 01) in
      advance (4)
      #16EB
      #instruction: LD   (2015),A
      M[2015] := a5;
      advance (13)
      #16EE
      #instruction: CALL 14D8
      M[23FF] := 16;
      M[23FE] := F1;
      #return-to: 16F1
      advance (17)
      #14D8
      #instruction: LD   A,(2025)
      let:8 a6 = M[2025] in
      advance (13)
      #14DB
      #instruction: CP   05
      let:16 a7 = addWithCarry(!false,a6,~05) in
      let:8 a8 = (a6 & 0F) in
      let:8 a9 = (~05 & 0F) in
      let:16 a10 = addWithCarry(!false,a8,a9) in
      advance (7)
      #14DD
      #instruction: RET  Z
      if (is_zero(a7[7:0])) {
        let:8 a11 = M[23FE] in
        let:8 a12 = M[23FF] in
        advance (11)
        A := a6;
        H := C;
        SPH := 24;
        SPL := 00;
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a7[15:8][0];
        jump ((a12,a11));
      } else {
        advance (5)
        #14DE
        #instruction: CP   02
        let:16 a13 = addWithCarry(!false,a6,~02) in
        let:8 a14 = (a6 & 0F) in
        let:8 a15 = (~02 & 0F) in
        let:16 a16 = addWithCarry(!false,a14,a15) in
        advance (7)
        #14E0
        #instruction: RET  NZ
        if (!is_zero(a13[7:0])) {
          let:8 a17 = M[23FE] in
          let:8 a18 = M[23FF] in
          advance (11)
          A := a6;
          H := C;
          SPH := 24;
          SPL := 00;
          FlagS := a13[7:0][7];
          FlagZ := is_zero(a13[7:0]);
          FlagA := a16[7:0][4];
          FlagP := parity(a13[7:0]);
          FlagCY := !a13[15:8][0];
          jump ((a18,a17));
        } else {
          advance (5)
          #14E1
          #instruction: LD   A,(2029)
          let:8 a19 = M[2029] in
          advance (13)
          #14E4
          #instruction: CP   D8
          let:16 a20 = addWithCarry(!false,a19,~D8) in
          let:8 a21 = (a19 & 0F) in
          let:8 a22 = (~D8 & 0F) in
          let:16 a23 = addWithCarry(!false,a21,a22) in
          advance (7)
          #14E6
          #instruction: LD   B,A
          advance (5)
          #14E7
          #instruction: JP   NC,1530
          if (!!a20[15:8][0]) {
            advance (10)
            #1530
            #instruction: LD   A,03
            advance (7)
            #1532
            #instruction: LD   (2025),A
            M[2025] := 03;
            advance (13)
            #1535
            #instruction: JP   154A
            advance (10)
            #154A
            #instruction: XOR  A
            let:8 a24 = (03 ^ 03) in
            advance (4)
            #154B
            #instruction: LD   (2002),A
            M[2002] := a24;
            advance (13)
            #154E
            #instruction: LD   B,F7
            advance (7)
            #1550
            #instruction: JP   19DC
            advance (10)
            #19DC
            #instruction: LD   A,(2094)
            let:8 a25 = M[2094] in
            advance (13)
            #19DF
            #instruction: AND  B
            let:8 a26 = (F7 & a25) in
            let:8 a27 = (F7 | a25) in
            advance (4)
            #19E0
            #instruction: LD   (2094),A
            M[2094] := a26;
            advance (13)
            #19E3
            #instruction: OUT  03
            sound_control(Ufo,a26[0]);
            sound_control(Shot,a26[1]);
            sound_control(PlayerDie,a26[2]);
            sound_control(InvaderDie,a26[3]);
            sound_control(ExtraLife,a26[4]);
            advance (10)
            #19E5
            #instruction: RET
            let:8 a28 = M[23FE] in
            let:8 a29 = M[23FF] in
            advance (10)
            A := a26;
            B := F7;
            H := C;
            SPH := 24;
            SPL := 00;
            FlagS := a26[7];
            FlagZ := is_zero(a26);
            FlagA := a27[3];
            FlagP := parity(a26);
            FlagCY := false;
            jump ((a29,a28));
          } else {
            advance (10)
            #14EA
            #instruction: LD   A,(2002)
            let:8 a30 = M[2002] in
            advance (13)
            #14ED
            #instruction: AND  A
            let:8 a31 = (a30 & a30) in
            let:8 a32 = (a30 | a30) in
            advance (4)
            #14EE
            #instruction: RET  Z
            if (is_zero(a31)) {
              let:8 a33 = M[23FE] in
              let:8 a34 = M[23FF] in
              advance (11)
              A := a31;
              B := a19;
              H := C;
              SPH := 24;
              SPL := 00;
              FlagS := a31[7];
              FlagZ := is_zero(a31);
              FlagA := a32[3];
              FlagP := parity(a31);
              FlagCY := false;
              jump ((a34,a33));
            } else {
              advance (5)
              #14EF
              #instruction: LD   A,B
              advance (5)
              #14F0
              #instruction: CP   CE
              let:16 a35 = addWithCarry(!false,a19,~CE) in
              let:8 a36 = (a19 & 0F) in
              let:8 a37 = (~CE & 0F) in
              let:16 a38 = addWithCarry(!false,a36,a37) in
              advance (7)
              #14F2
              #instruction: JP   NC,1579
              if (!!a35[15:8][0]) {
                advance (10)
                #1579
                #instruction: LD   A,01
                advance (7)
                #157B
                #instruction: LD   (2085),A
                M[2085] := 01;
                advance (13)
                #157E
                #instruction: JP   1545
                advance (10)
                A := 01;
                B := a19;
                H := C;
                SPH := 23;
                SPL := FE;
                FlagS := a35[7:0][7];
                FlagZ := is_zero(a35[7:0]);
                FlagA := a38[7:0][4];
                FlagP := parity(a35[7:0]);
                FlagCY := !a35[15:8][0];
                jump (1545);
              } else {
                advance (10)
                #14F5
                #instruction: ADD  06
                let:16 a39 = addWithCarry(false,06,a19) in
                let:8 a40 = (06 & 0F) in
                let:8 a41 = (a19 & 0F) in
                let:16 a42 = addWithCarry(false,a40,a41) in
                advance (7)
                #14F7
                #instruction: LD   B,A
                advance (5)
                #14F8
                #instruction: LD   A,(2009)
                let:8 a43 = M[2009] in
                advance (13)
                #14FB
                #instruction: CP   90
                let:16 a44 = addWithCarry(!false,a43,~90) in
                let:8 a45 = (a43 & 0F) in
                let:8 a46 = (~90 & 0F) in
                let:16 a47 = addWithCarry(!false,a45,a46) in
                advance (7)
                #14FD
                #instruction: JP   NC,1504
                if (!!a44[15:8][0]) {
                  advance (10)
                  #1504
                  #instruction: LD   L,B
                  advance (5)
                  #1505
                  #instruction: CALL 1562
                  M[23FD] := 15;
                  M[23FC] := 08;
                  #return-to: 1508
                  advance (17)
                  #1562
                  #instruction: LD   A,(2009)
                  let:8 a48 = M[2009] in
                  advance (13)
                  #1565
                  #instruction: LD   H,L
                  advance (5)
                  #1566
                  #instruction: CALL 1554
                  M[23FB] := 15;
                  M[23FA] := 69;
                  #return-to: 1569
                  advance (17)
                  #1554
                  #instruction: LD   C,00
                  advance (7)
                  #1556
                  #instruction: CP   H
                  let:16 a49 = addWithCarry(!false,a48,~a39[7:0]) in
                  let:8 a50 = (a48 & 0F) in
                  let:8 a51 = (~a39[7:0] & 0F) in
                  let:16 a52 = addWithCarry(!false,a50,a51) in
                  advance (4)
                  #1557
                  #instruction: CALL NC,1590
                  if (!!a49[15:8][0]) {
                    M[23F9] := 15;
                    M[23F8] := 5A;
                    #return-to: 155A
                    advance (17)
                    #1590
                    #instruction: INC  C
                    let:16 a53 = addWithCarry(true,00,00) in
                    let:8 a54 = (00 & 0F) in
                    let:8 a55 = (00 & 0F) in
                    let:16 a56 = addWithCarry(true,a54,a55) in
                    advance (5)
                    #1591
                    #instruction: ADD  10
                    let:16 a57 = addWithCarry(false,10,a48) in
                    let:8 a58 = (10 & 0F) in
                    let:8 a59 = (a48 & 0F) in
                    let:16 a60 = addWithCarry(false,a58,a59) in
                    advance (7)
                    #1593
                    #instruction: JP   MI,1590
                    if (a57[7:0][7]) {
                      advance (10)
                      A := a57[7:0];
                      B := a39[7:0];
                      C := a53[7:0];
                      H := a39[7:0];
                      L := a39[7:0];
                      SPH := 23;
                      SPL := F8;
                      FlagS := a57[7:0][7];
                      FlagZ := is_zero(a57[7:0]);
                      FlagA := a60[7:0][4];
                      FlagP := parity(a57[7:0]);
                      FlagCY := a57[15:8][0];
                      jump (1590);
                    } else {
                      advance (10)
                      #1596
                      #instruction: RET
                      let:8 a61 = M[23F8] in
                      let:8 a62 = M[23F9] in
                      advance (10)
                      A := a57[7:0];
                      B := a39[7:0];
                      C := a53[7:0];
                      H := a39[7:0];
                      L := a39[7:0];
                      SPH := 23;
                      SPL := FA;
                      FlagS := a57[7:0][7];
                      FlagZ := is_zero(a57[7:0]);
                      FlagA := a60[7:0][4];
                      FlagP := parity(a57[7:0]);
                      FlagCY := a57[15:8][0];
                      jump ((a62,a61));
                    }
                  } else {
                    advance (11)
                    A := a48;
                    B := a39[7:0];
                    C := 00;
                    H := a39[7:0];
                    L := a39[7:0];
                    SPH := 23;
                    SPL := FA;
                    FlagS := a49[7:0][7];
                    FlagZ := is_zero(a49[7:0]);
                    FlagA := a52[7:0][4];
                    FlagP := parity(a49[7:0]);
                    FlagCY := !a49[15:8][0];
                    jump (155A);
                  }
                } else {
                  advance (10)
                  #1500
                  #instruction: CP   B
                  let:16 a63 = addWithCarry(!false,a43,~a39[7:0]) in
                  let:8 a64 = (a43 & 0F) in
                  let:8 a65 = (~a39[7:0] & 0F) in
                  let:16 a66 = addWithCarry(!false,a64,a65) in
                  advance (4)
                  #1501
                  #instruction: JP   NC,1530
                  if (!!a63[15:8][0]) {
                    advance (10)
                    #1530
                    #instruction: LD   A,03
                    advance (7)
                    #1532
                    #instruction: LD   (2025),A
                    M[2025] := 03;
                    advance (13)
                    #1535
                    #instruction: JP   154A
                    advance (10)
                    #154A
                    #instruction: XOR  A
                    let:8 a67 = (03 ^ 03) in
                    advance (4)
                    #154B
                    #instruction: LD   (2002),A
                    M[2002] := a67;
                    advance (13)
                    #154E
                    #instruction: LD   B,F7
                    advance (7)
                    #1550
                    #instruction: JP   19DC
                    advance (10)
                    #19DC
                    #instruction: LD   A,(2094)
                    let:8 a68 = M[2094] in
                    advance (13)
                    #19DF
                    #instruction: AND  B
                    let:8 a69 = (F7 & a68) in
                    let:8 a70 = (F7 | a68) in
                    advance (4)
                    #19E0
                    #instruction: LD   (2094),A
                    M[2094] := a69;
                    advance (13)
                    #19E3
                    #instruction: OUT  03
                    sound_control(Ufo,a69[0]);
                    sound_control(Shot,a69[1]);
                    sound_control(PlayerDie,a69[2]);
                    sound_control(InvaderDie,a69[3]);
                    sound_control(ExtraLife,a69[4]);
                    advance (10)
                    #19E5
                    #instruction: RET
                    let:8 a71 = M[23FE] in
                    let:8 a72 = M[23FF] in
                    advance (10)
                    A := a69;
                    B := F7;
                    H := C;
                    SPH := 24;
                    SPL := 00;
                    FlagS := a69[7];
                    FlagZ := is_zero(a69);
                    FlagA := a70[3];
                    FlagP := parity(a69);
                    FlagCY := false;
                    jump ((a72,a71));
                  } else {
                    advance (10)
                    #1504
                    #instruction: LD   L,B
                    advance (5)
                    #1505
                    #instruction: CALL 1562
                    M[23FD] := 15;
                    M[23FC] := 08;
                    #return-to: 1508
                    advance (17)
                    #1562
                    #instruction: LD   A,(2009)
                    let:8 a73 = M[2009] in
                    advance (13)
                    #1565
                    #instruction: LD   H,L
                    advance (5)
                    #1566
                    #instruction: CALL 1554
                    M[23FB] := 15;
                    M[23FA] := 69;
                    #return-to: 1569
                    advance (17)
                    #1554
                    #instruction: LD   C,00
                    advance (7)
                    #1556
                    #instruction: CP   H
                    let:16 a74 = addWithCarry(!false,a73,~a39[7:0]) in
                    let:8 a75 = (a73 & 0F) in
                    let:8 a76 = (~a39[7:0] & 0F) in
                    let:16 a77 = addWithCarry(!false,a75,a76) in
                    advance (4)
                    #1557
                    #instruction: CALL NC,1590
                    if (!!a74[15:8][0]) {
                      M[23F9] := 15;
                      M[23F8] := 5A;
                      #return-to: 155A
                      advance (17)
                      #1590
                      #instruction: INC  C
                      let:16 a78 = addWithCarry(true,00,00) in
                      let:8 a79 = (00 & 0F) in
                      let:8 a80 = (00 & 0F) in
                      let:16 a81 = addWithCarry(true,a79,a80) in
                      advance (5)
                      #1591
                      #instruction: ADD  10
                      let:16 a82 = addWithCarry(false,10,a73) in
                      let:8 a83 = (10 & 0F) in
                      let:8 a84 = (a73 & 0F) in
                      let:16 a85 = addWithCarry(false,a83,a84) in
                      advance (7)
                      #1593
                      #instruction: JP   MI,1590
                      if (a82[7:0][7]) {
                        advance (10)
                        A := a82[7:0];
                        B := a39[7:0];
                        C := a78[7:0];
                        H := a39[7:0];
                        L := a39[7:0];
                        SPH := 23;
                        SPL := F8;
                        FlagS := a82[7:0][7];
                        FlagZ := is_zero(a82[7:0]);
                        FlagA := a85[7:0][4];
                        FlagP := parity(a82[7:0]);
                        FlagCY := a82[15:8][0];
                        jump (1590);
                      } else {
                        advance (10)
                        #1596
                        #instruction: RET
                        let:8 a86 = M[23F8] in
                        let:8 a87 = M[23F9] in
                        advance (10)
                        A := a82[7:0];
                        B := a39[7:0];
                        C := a78[7:0];
                        H := a39[7:0];
                        L := a39[7:0];
                        SPH := 23;
                        SPL := FA;
                        FlagS := a82[7:0][7];
                        FlagZ := is_zero(a82[7:0]);
                        FlagA := a85[7:0][4];
                        FlagP := parity(a82[7:0]);
                        FlagCY := a82[15:8][0];
                        jump ((a87,a86));
                      }
                    } else {
                      advance (11)
                      A := a73;
                      B := a39[7:0];
                      C := 00;
                      H := a39[7:0];
                      L := a39[7:0];
                      SPH := 23;
                      SPL := FA;
                      FlagS := a74[7:0][7];
                      FlagZ := is_zero(a74[7:0]);
                      FlagA := a77[7:0][4];
                      FlagP := parity(a74[7:0]);
                      FlagCY := !a74[15:8][0];
                      jump (155A);
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else {
      advance (10)
      #0170
      #instruction: LD   A,D
      advance (5)
      #0171
      #instruction: LD   (2004),A
      M[2004] := D;
      advance (13)
      #0174
      #instruction: LD   A,01
      advance (7)
      #0176
      #instruction: LD   (2000),A
      M[2000] := 01;
      advance (13)
      #0179
      #instruction: RET
      let:16 a88 = (1 + (SPH,SPL)) in
      let:8 a89 = M[(SPH,SPL)] in
      let:16 a90 = (1 + a88) in
      let:8 a91 = M[a88] in
      advance (10)
      A := 01;
      H := C;
      SPH := a90[15:8];
      SPL := a90[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump ((a91,a89));
    }

01B1:

    #01B1
    #instruction: LD   HL,2005
    advance (10)
    #01B4
    #instruction: LD   A,(HL)
    let:8 a1 = M[2005] in
    advance (7)
    #01B5
    #instruction: INC  A
    let:16 a2 = addWithCarry(true,a1,00) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (00 & 0F) in
    let:16 a5 = addWithCarry(true,a3,a4) in
    advance (5)
    #01B6
    #instruction: AND  01
    let:8 a6 = (01 & a2[7:0]) in
    let:8 a7 = (01 | a2[7:0]) in
    advance (7)
    #01B8
    #instruction: LD   (HL),A
    M[2005] := a6;
    advance (7)
    #01B9
    #instruction: XOR  A
    let:8 a8 = (a6 ^ a6) in
    advance (4)
    #01BA
    #instruction: LD   HL,2067
    advance (10)
    #01BD
    #instruction: LD   H,(HL)
    let:8 a9 = M[2067] in
    advance (7)
    #01BE
    #instruction: RET
    let:16 a10 = (1 + (SPH,SPL)) in
    let:8 a11 = M[(SPH,SPL)] in
    let:16 a12 = (1 + a10) in
    let:8 a13 = M[a10] in
    advance (10)
    A := a8;
    H := a9;
    L := 67;
    SPH := a12[15:8];
    SPL := a12[7:0];
    FlagS := a8[7];
    FlagZ := is_zero(a8);
    FlagA := false;
    FlagP := parity(a8);
    FlagCY := false;
    jump ((a13,a11));

0203:

    #0203
    #instruction: POP  DE
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0204
    #instruction: DEC  C
    let:16 a5 = addWithCarry(!true,C,~00) in
    let:8 a6 = (C & 0F) in
    let:8 a7 = (~00 & 0F) in
    let:16 a8 = addWithCarry(!true,a6,a7) in
    advance (5)
    #0205
    #instruction: JP   NZ,01FD
    if (!is_zero(a5[7:0])) {
      advance (10)
      #01FD
      #instruction: PUSH DE
      let:16 a9 = (-1 + a3) in
      M[a9] := a4;
      let:16 a10 = (-1 + a9) in
      M[a10] := a2;
      advance (11)
      #01FE
      #instruction: LD   B,2C
      advance (7)
      #0200
      #instruction: CALL 1A32
      let:16 a11 = (-1 + a10) in
      M[a11] := 02;
      let:16 a12 = (-1 + a11) in
      M[a12] := 03;
      #return-to: 0203
      advance (17)
      #1A32
      #instruction: LD   A,(DE)
      let:8 a13 = M[(a4,a2)] in
      advance (7)
      #1A33
      #instruction: LD   (HL),A
      M[(H,L)] := a13;
      advance (7)
      #1A34
      #instruction: INC  HL
      let:16 a14 = (1 + (H,L)) in
      advance (5)
      #1A35
      #instruction: INC  DE
      let:16 a15 = (1 + (a4,a2)) in
      advance (5)
      #1A36
      #instruction: DEC  B
      let:16 a16 = addWithCarry(!true,2C,~00) in
      let:8 a17 = (2C & 0F) in
      let:8 a18 = (~00 & 0F) in
      let:16 a19 = addWithCarry(!true,a17,a18) in
      advance (5)
      #1A37
      #instruction: JP   NZ,1A32
      if (!is_zero(a16[7:0])) {
        advance (10)
        A := a13;
        B := a16[7:0];
        C := a5[7:0];
        D := a15[15:8];
        E := a15[7:0];
        H := a14[15:8];
        L := a14[7:0];
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a16[7:0][7];
        FlagZ := is_zero(a16[7:0]);
        FlagA := a19[7:0][4];
        FlagP := parity(a16[7:0]);
        jump (1A32);
      } else {
        advance (10)
        #1A3A
        #instruction: RET
        let:16 a20 = (1 + a12) in
        let:8 a21 = M[a12] in
        let:16 a22 = (1 + a20) in
        let:8 a23 = M[a20] in
        advance (10)
        A := a13;
        B := a16[7:0];
        C := a5[7:0];
        D := a15[15:8];
        E := a15[7:0];
        H := a14[15:8];
        L := a14[7:0];
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a16[7:0][7];
        FlagZ := is_zero(a16[7:0]);
        FlagA := a19[7:0][4];
        FlagP := parity(a16[7:0]);
        jump ((a23,a21));
      }
    } else {
      advance (10)
      #0208
      #instruction: RET
      let:16 a24 = (1 + a3) in
      let:8 a25 = M[a3] in
      let:16 a26 = (1 + a24) in
      let:8 a27 = M[a24] in
      advance (10)
      C := a5[7:0];
      D := a4;
      E := a2;
      SPH := a26[15:8];
      SPL := a26[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      jump ((a27,a25));
    }

0235:

    #0235
    #instruction: POP  BC
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0236
    #instruction: POP  PSW
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    #0237
    #instruction: DEC  A
    let:16 a9 = addWithCarry(!true,a8,~00) in
    let:8 a10 = (a8 & 0F) in
    let:8 a11 = (~00 & 0F) in
    let:16 a12 = addWithCarry(!true,a10,a11) in
    advance (5)
    #0238
    #instruction: RET  Z
    if (is_zero(a9[7:0])) {
      let:16 a13 = (1 + a7) in
      let:8 a14 = M[a7] in
      let:16 a15 = (1 + a13) in
      let:8 a16 = M[a13] in
      advance (11)
      A := a9[7:0];
      B := a4;
      C := a2;
      SPH := a15[15:8];
      SPL := a15[7:0];
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      FlagCY := a6[0];
      jump ((a16,a14));
    } else {
      advance (5)
      #0239
      #instruction: PUSH DE
      let:16 a17 = (-1 + a7) in
      M[a17] := D;
      let:16 a18 = (-1 + a17) in
      M[a18] := E;
      advance (11)
      #023A
      #instruction: LD   DE,02E0
      advance (10)
      #023D
      #instruction: ADD  HL,DE
      let:17 a19 = add17(02E0,(H,L)) in
      advance (10)
      #023E
      #instruction: POP  DE
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      let:16 a22 = (1 + a20) in
      let:8 a23 = M[a20] in
      advance (10)
      #023F
      #instruction: JP   0229
      advance (10)
      #0229
      #instruction: PUSH PSW
      let:16 a24 = (-1 + a22) in
      M[a24] := a9[7:0];
      let:16 a25 = (-1 + a24) in
      M[a25] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a9[7:0][7]),6,is_zero(a9[7:0])),4,a12[7:0][4]),2,parity(a9[7:0])),0,a19[16]);
      advance (11)
      #022A
      #instruction: PUSH BC
      let:16 a26 = (-1 + a25) in
      M[a26] := a4;
      let:16 a27 = (-1 + a26) in
      M[a27] := a2;
      advance (11)
      #022B
      #instruction: LD   A,(2081)
      let:8 a28 = M[2081] in
      advance (13)
      #022E
      #instruction: AND  A
      let:8 a29 = (a28 & a28) in
      let:8 a30 = (a28 | a28) in
      advance (4)
      #022F
      #instruction: JP   NZ,0242
      if (!is_zero(a29)) {
        advance (10)
        #0242
        #instruction: CALL 147C
        let:16 a31 = (-1 + a27) in
        M[a31] := 02;
        let:16 a32 = (-1 + a31) in
        M[a32] := 45;
        #return-to: 0245
        advance (17)
        #147C
        #instruction: PUSH BC
        let:16 a33 = (-1 + a32) in
        M[a33] := a4;
        let:16 a34 = (-1 + a33) in
        M[a34] := a2;
        advance (11)
        #147D
        #instruction: PUSH HL
        let:16 a35 = (-1 + a34) in
        M[a35] := a19[15:0][15:8];
        let:16 a36 = (-1 + a35) in
        M[a36] := a19[15:0][7:0];
        advance (11)
        #147E
        #instruction: LD   A,(HL)
        let:8 a37 = M[a19[15:0]] in
        advance (7)
        #147F
        #instruction: LD   (DE),A
        M[(a23,a21)] := a37;
        advance (7)
        #1480
        #instruction: INC  DE
        let:16 a38 = (1 + (a23,a21)) in
        advance (5)
        #1481
        #instruction: INC  HL
        let:16 a39 = (1 + a19[15:0]) in
        advance (5)
        #1482
        #instruction: DEC  C
        let:16 a40 = addWithCarry(!true,a2,~00) in
        let:8 a41 = (a2 & 0F) in
        let:8 a42 = (~00 & 0F) in
        let:16 a43 = addWithCarry(!true,a41,a42) in
        advance (5)
        #1483
        #instruction: JP   NZ,147E
        if (!is_zero(a40[7:0])) {
          advance (10)
          A := a37;
          B := a4;
          C := a40[7:0];
          D := a38[15:8];
          E := a38[7:0];
          H := a39[15:8];
          L := a39[7:0];
          SPH := a36[15:8];
          SPL := a36[7:0];
          FlagS := a40[7:0][7];
          FlagZ := is_zero(a40[7:0]);
          FlagA := a43[7:0][4];
          FlagP := parity(a40[7:0]);
          FlagCY := false;
          jump (147E);
        } else {
          advance (10)
          #1486
          #instruction: POP  HL
          let:16 a44 = (1 + a36) in
          let:8 a45 = M[a36] in
          let:16 a46 = (1 + a44) in
          let:8 a47 = M[a44] in
          advance (10)
          #1487
          #instruction: LD   BC,0020
          advance (10)
          #148A
          #instruction: ADD  HL,BC
          let:17 a48 = add17(0020,(a47,a45)) in
          advance (10)
          #148B
          #instruction: POP  BC
          let:16 a49 = (1 + a46) in
          let:8 a50 = M[a46] in
          let:16 a51 = (1 + a49) in
          let:8 a52 = M[a49] in
          advance (10)
          #148C
          #instruction: DEC  B
          let:16 a53 = addWithCarry(!true,a52,~00) in
          let:8 a54 = (a52 & 0F) in
          let:8 a55 = (~00 & 0F) in
          let:16 a56 = addWithCarry(!true,a54,a55) in
          advance (5)
          #148D
          #instruction: JP   NZ,147C
          if (!is_zero(a53[7:0])) {
            advance (10)
            A := a37;
            B := a53[7:0];
            C := a50;
            D := a38[15:8];
            E := a38[7:0];
            H := a48[15:0][15:8];
            L := a48[15:0][7:0];
            SPH := a51[15:8];
            SPL := a51[7:0];
            FlagS := a53[7:0][7];
            FlagZ := is_zero(a53[7:0]);
            FlagA := a56[7:0][4];
            FlagP := parity(a53[7:0]);
            FlagCY := a48[16];
            jump (147C);
          } else {
            advance (10)
            #1490
            #instruction: RET
            let:16 a57 = (1 + a51) in
            let:8 a58 = M[a51] in
            let:16 a59 = (1 + a57) in
            let:8 a60 = M[a57] in
            advance (10)
            A := a37;
            B := a53[7:0];
            C := a50;
            D := a38[15:8];
            E := a38[7:0];
            H := a48[15:0][15:8];
            L := a48[15:0][7:0];
            SPH := a59[15:8];
            SPL := a59[7:0];
            FlagS := a53[7:0][7];
            FlagZ := is_zero(a53[7:0]);
            FlagA := a56[7:0][4];
            FlagP := parity(a53[7:0]);
            FlagCY := a48[16];
            jump ((a60,a58));
          }
        }
      } else {
        advance (10)
        #0232
        #instruction: CALL 1A69
        let:16 a61 = (-1 + a27) in
        M[a61] := 02;
        let:16 a62 = (-1 + a61) in
        M[a62] := 35;
        #return-to: 0235
        advance (17)
        #1A69
        #instruction: PUSH BC
        let:16 a63 = (-1 + a62) in
        M[a63] := a4;
        let:16 a64 = (-1 + a63) in
        M[a64] := a2;
        advance (11)
        #1A6A
        #instruction: PUSH HL
        let:16 a65 = (-1 + a64) in
        M[a65] := a19[15:0][15:8];
        let:16 a66 = (-1 + a65) in
        M[a66] := a19[15:0][7:0];
        advance (11)
        #1A6B
        #instruction: LD   A,(DE)
        let:8 a67 = M[(a23,a21)] in
        advance (7)
        #1A6C
        #instruction: OR   (HL)
        let:8 a68 = M[a19[15:0]] in
        let:8 a69 = (a68 | a67) in
        advance (7)
        #1A6D
        #instruction: LD   (HL),A
        M[a19[15:0]] := a69;
        advance (7)
        #1A6E
        #instruction: INC  DE
        let:16 a70 = (1 + (a23,a21)) in
        advance (5)
        #1A6F
        #instruction: INC  HL
        let:16 a71 = (1 + a19[15:0]) in
        advance (5)
        #1A70
        #instruction: DEC  C
        let:16 a72 = addWithCarry(!true,a2,~00) in
        let:8 a73 = (a2 & 0F) in
        let:8 a74 = (~00 & 0F) in
        let:16 a75 = addWithCarry(!true,a73,a74) in
        advance (5)
        #1A71
        #instruction: JP   NZ,1A6B
        if (!is_zero(a72[7:0])) {
          advance (10)
          A := a69;
          B := a4;
          C := a72[7:0];
          D := a70[15:8];
          E := a70[7:0];
          H := a71[15:8];
          L := a71[7:0];
          SPH := a66[15:8];
          SPL := a66[7:0];
          FlagS := a72[7:0][7];
          FlagZ := is_zero(a72[7:0]);
          FlagA := a75[7:0][4];
          FlagP := parity(a72[7:0]);
          FlagCY := false;
          jump (1A6B);
        } else {
          advance (10)
          #1A74
          #instruction: POP  HL
          let:16 a76 = (1 + a66) in
          let:8 a77 = M[a66] in
          let:16 a78 = (1 + a76) in
          let:8 a79 = M[a76] in
          advance (10)
          #1A75
          #instruction: LD   BC,0020
          advance (10)
          #1A78
          #instruction: ADD  HL,BC
          let:17 a80 = add17(0020,(a79,a77)) in
          advance (10)
          #1A79
          #instruction: POP  BC
          let:16 a81 = (1 + a78) in
          let:8 a82 = M[a78] in
          let:16 a83 = (1 + a81) in
          let:8 a84 = M[a81] in
          advance (10)
          #1A7A
          #instruction: DEC  B
          let:16 a85 = addWithCarry(!true,a84,~00) in
          let:8 a86 = (a84 & 0F) in
          let:8 a87 = (~00 & 0F) in
          let:16 a88 = addWithCarry(!true,a86,a87) in
          advance (5)
          #1A7B
          #instruction: JP   NZ,1A69
          if (!is_zero(a85[7:0])) {
            advance (10)
            A := a69;
            B := a85[7:0];
            C := a82;
            D := a70[15:8];
            E := a70[7:0];
            H := a80[15:0][15:8];
            L := a80[15:0][7:0];
            SPH := a83[15:8];
            SPL := a83[7:0];
            FlagS := a85[7:0][7];
            FlagZ := is_zero(a85[7:0]);
            FlagA := a88[7:0][4];
            FlagP := parity(a85[7:0]);
            FlagCY := a80[16];
            jump (1A69);
          } else {
            advance (10)
            #1A7E
            #instruction: RET
            let:16 a89 = (1 + a83) in
            let:8 a90 = M[a83] in
            let:16 a91 = (1 + a89) in
            let:8 a92 = M[a89] in
            advance (10)
            A := a69;
            B := a85[7:0];
            C := a82;
            D := a70[15:8];
            E := a70[7:0];
            H := a80[15:0][15:8];
            L := a80[15:0][7:0];
            SPH := a91[15:8];
            SPL := a91[7:0];
            FlagS := a85[7:0][7];
            FlagZ := is_zero(a85[7:0]);
            FlagA := a88[7:0][4];
            FlagP := parity(a85[7:0]);
            FlagCY := a80[16];
            jump ((a92,a90));
          }
        }
      }
    }

0245:

    #0245
    #instruction: JP   0235
    advance (10)
    jump (0235);

026F:

    #026F
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0270
    #instruction: LD   DE,000C
    advance (10)
    #0273
    #instruction: ADD  HL,DE
    let:17 a5 = add17(000C,(a4,a2)) in
    advance (10)
    #0274
    #instruction: JP   024B
    advance (10)
    #024B
    #instruction: LD   A,(HL)
    let:8 a6 = M[a5[15:0]] in
    advance (7)
    #024C
    #instruction: CP   FF
    let:16 a7 = addWithCarry(!false,a6,~FF) in
    let:8 a8 = (a6 & 0F) in
    let:8 a9 = (~FF & 0F) in
    let:16 a10 = addWithCarry(!false,a8,a9) in
    advance (7)
    #024E
    #instruction: RET  Z
    if (is_zero(a7[7:0])) {
      let:16 a11 = (1 + a3) in
      let:8 a12 = M[a3] in
      let:16 a13 = (1 + a11) in
      let:8 a14 = M[a11] in
      advance (11)
      A := a6;
      D := 00;
      E := 0C;
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a13[15:8];
      SPL := a13[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      FlagCY := !a7[15:8][0];
      jump ((a14,a12));
    } else {
      advance (5)
      #024F
      #instruction: CP   FE
      let:16 a15 = addWithCarry(!false,a6,~FE) in
      let:8 a16 = (a6 & 0F) in
      let:8 a17 = (~FE & 0F) in
      let:16 a18 = addWithCarry(!false,a16,a17) in
      advance (7)
      #0251
      #instruction: JP   Z,0281
      if (is_zero(a15[7:0])) {
        advance (10)
        #0281
        #instruction: LD   DE,0010
        advance (10)
        #0284
        #instruction: ADD  HL,DE
        let:17 a19 = add17(0010,a5[15:0]) in
        advance (10)
        #0285
        #instruction: JP   024B
        advance (10)
        A := a6;
        D := 00;
        E := 10;
        H := a19[15:0][15:8];
        L := a19[15:0][7:0];
        SPH := a3[15:8];
        SPL := a3[7:0];
        FlagS := a15[7:0][7];
        FlagZ := is_zero(a15[7:0]);
        FlagA := a18[7:0][4];
        FlagP := parity(a15[7:0]);
        FlagCY := a19[16];
        jump (024B);
      } else {
        advance (10)
        #0254
        #instruction: INC  HL
        let:16 a20 = (1 + a5[15:0]) in
        advance (5)
        #0255
        #instruction: LD   B,(HL)
        let:8 a21 = M[a20] in
        advance (7)
        #0256
        #instruction: LD   C,A
        advance (5)
        #0257
        #instruction: OR   B
        let:8 a22 = (a21 | a6) in
        advance (4)
        #0258
        #instruction: LD   A,C
        advance (5)
        #0259
        #instruction: JP   NZ,0277
        if (!is_zero(a22)) {
          advance (10)
          #0277
          #instruction: DEC  B
          let:16 a23 = addWithCarry(!true,a21,~00) in
          let:8 a24 = (a21 & 0F) in
          let:8 a25 = (~00 & 0F) in
          let:16 a26 = addWithCarry(!true,a24,a25) in
          advance (5)
          #0278
          #instruction: INC  B
          let:16 a27 = addWithCarry(true,a23[7:0],00) in
          let:8 a28 = (a23[7:0] & 0F) in
          let:8 a29 = (00 & 0F) in
          let:16 a30 = addWithCarry(true,a28,a29) in
          advance (5)
          #0279
          #instruction: JP   NZ,027D
          if (!is_zero(a27[7:0])) {
            advance (10)
            #027D
            #instruction: DEC  B
            let:16 a31 = addWithCarry(!true,a27[7:0],~00) in
            let:8 a32 = (a27[7:0] & 0F) in
            let:8 a33 = (~00 & 0F) in
            let:16 a34 = addWithCarry(!true,a32,a33) in
            advance (5)
            #027E
            #instruction: LD   (HL),B
            M[a20] := a31[7:0];
            advance (7)
            #027F
            #instruction: DEC  HL
            let:16 a35 = (-1 + a20) in
            advance (5)
            #0280
            #instruction: LD   (HL),A
            M[a35] := a6;
            advance (7)
            #0281
            #instruction: LD   DE,0010
            advance (10)
            #0284
            #instruction: ADD  HL,DE
            let:17 a36 = add17(0010,a35) in
            advance (10)
            #0285
            #instruction: JP   024B
            advance (10)
            A := a6;
            B := a31[7:0];
            C := a6;
            D := 00;
            E := 10;
            H := a36[15:0][15:8];
            L := a36[15:0][7:0];
            SPH := a3[15:8];
            SPL := a3[7:0];
            FlagS := a31[7:0][7];
            FlagZ := is_zero(a31[7:0]);
            FlagA := a34[7:0][4];
            FlagP := parity(a31[7:0]);
            FlagCY := a36[16];
            jump (024B);
          } else {
            advance (10)
            #027C
            #instruction: DEC  A
            let:16 a37 = addWithCarry(!true,a6,~00) in
            let:8 a38 = (a6 & 0F) in
            let:8 a39 = (~00 & 0F) in
            let:16 a40 = addWithCarry(!true,a38,a39) in
            advance (5)
            #027D
            #instruction: DEC  B
            let:16 a41 = addWithCarry(!true,a27[7:0],~00) in
            let:8 a42 = (a27[7:0] & 0F) in
            let:8 a43 = (~00 & 0F) in
            let:16 a44 = addWithCarry(!true,a42,a43) in
            advance (5)
            #027E
            #instruction: LD   (HL),B
            M[a20] := a41[7:0];
            advance (7)
            #027F
            #instruction: DEC  HL
            let:16 a45 = (-1 + a20) in
            advance (5)
            #0280
            #instruction: LD   (HL),A
            M[a45] := a37[7:0];
            advance (7)
            #0281
            #instruction: LD   DE,0010
            advance (10)
            #0284
            #instruction: ADD  HL,DE
            let:17 a46 = add17(0010,a45) in
            advance (10)
            #0285
            #instruction: JP   024B
            advance (10)
            A := a37[7:0];
            B := a41[7:0];
            C := a6;
            D := 00;
            E := 10;
            H := a46[15:0][15:8];
            L := a46[15:0][7:0];
            SPH := a3[15:8];
            SPL := a3[7:0];
            FlagS := a41[7:0][7];
            FlagZ := is_zero(a41[7:0]);
            FlagA := a44[7:0][4];
            FlagP := parity(a41[7:0]);
            FlagCY := a46[16];
            jump (024B);
          }
        } else {
          advance (10)
          #025C
          #instruction: INC  HL
          let:16 a47 = (1 + a20) in
          advance (5)
          #025D
          #instruction: LD   A,(HL)
          let:8 a48 = M[a47] in
          advance (7)
          #025E
          #instruction: AND  A
          let:8 a49 = (a48 & a48) in
          let:8 a50 = (a48 | a48) in
          advance (4)
          #025F
          #instruction: JP   NZ,0288
          if (!is_zero(a49)) {
            advance (10)
            #0288
            #instruction: DEC  (HL)
            let:8 a51 = M[a47] in
            let:16 a52 = addWithCarry(!true,a51,~00) in
            let:8 a53 = (a51 & 0F) in
            let:8 a54 = (~00 & 0F) in
            let:16 a55 = addWithCarry(!true,a53,a54) in
            M[a47] := a52[7:0];
            advance (10)
            #0289
            #instruction: DEC  HL
            let:16 a56 = (-1 + a47) in
            advance (5)
            #028A
            #instruction: DEC  HL
            let:16 a57 = (-1 + a56) in
            advance (5)
            #028B
            #instruction: JP   0281
            advance (10)
            #0281
            #instruction: LD   DE,0010
            advance (10)
            #0284
            #instruction: ADD  HL,DE
            let:17 a58 = add17(0010,a57) in
            advance (10)
            #0285
            #instruction: JP   024B
            advance (10)
            A := a49;
            B := a21;
            C := a6;
            D := 00;
            E := 10;
            H := a58[15:0][15:8];
            L := a58[15:0][7:0];
            SPH := a3[15:8];
            SPL := a3[7:0];
            FlagS := a52[7:0][7];
            FlagZ := is_zero(a52[7:0]);
            FlagA := a55[7:0][4];
            FlagP := parity(a52[7:0]);
            FlagCY := a58[16];
            jump (024B);
          } else {
            advance (10)
            #0262
            #instruction: INC  HL
            let:16 a59 = (1 + a47) in
            advance (5)
            #0263
            #instruction: LD   E,(HL)
            let:8 a60 = M[a59] in
            advance (7)
            #0264
            #instruction: INC  HL
            let:16 a61 = (1 + a59) in
            advance (5)
            #0265
            #instruction: LD   D,(HL)
            let:8 a62 = M[a61] in
            advance (7)
            #0266
            #instruction: PUSH HL
            let:16 a63 = (-1 + a3) in
            M[a63] := a61[15:8];
            let:16 a64 = (-1 + a63) in
            M[a64] := a61[7:0];
            advance (11)
            #0267
            #instruction: EX   DE,HL
            advance (4)
            #0268
            #instruction: PUSH HL
            let:16 a65 = (-1 + a64) in
            M[a65] := a62;
            let:16 a66 = (-1 + a65) in
            M[a66] := a60;
            advance (11)
            #0269
            #instruction: LD   HL,026F
            advance (10)
            #026C
            #instruction: EX   (SP),HL
            let:16 a67 = (1 + a66) in
            let:8 a68 = M[a66] in
            let:8 a69 = M[a67] in
            M[a66] := 6F;
            M[a67] := 02;
            advance (18)
            #026D
            #instruction: PUSH DE
            let:16 a70 = (-1 + a66) in
            M[a70] := a61[15:8];
            let:16 a71 = (-1 + a70) in
            M[a71] := a61[7:0];
            advance (11)
            #026E
            #instruction: JP   (HL)
            advance (5)
            A := a49;
            B := a21;
            C := a6;
            D := a61[15:8];
            E := a61[7:0];
            H := a69;
            L := a68;
            SPH := a71[15:8];
            SPL := a71[7:0];
            FlagS := a49[7];
            FlagZ := is_zero(a49);
            FlagA := a50[3];
            FlagP := parity(a49);
            FlagCY := false;
            jump ((a69,a68));
          }
        }
      }
    }

028E:

    #028E
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #028F
    #instruction: INC  HL
    let:16 a5 = (1 + (a4,a2)) in
    advance (5)
    #0290
    #instruction: LD   A,(HL)
    let:8 a6 = M[a5] in
    advance (7)
    #0291
    #instruction: CP   FF
    let:16 a7 = addWithCarry(!false,a6,~FF) in
    let:8 a8 = (a6 & 0F) in
    let:8 a9 = (~FF & 0F) in
    let:16 a10 = addWithCarry(!false,a8,a9) in
    advance (7)
    #0293
    #instruction: JP   Z,033B
    if (is_zero(a7[7:0])) {
      advance (10)
      #033B
      #instruction: LD   HL,2068
      advance (10)
      #033E
      #instruction: LD   (HL),01
      M[2068] := 01;
      advance (10)
      #0340
      #instruction: INC  HL
      advance (5)
      #0341
      #instruction: LD   A,(HL)
      let:8 a11 = M[2069] in
      advance (7)
      #0342
      #instruction: AND  A
      let:8 a12 = (a11 & a11) in
      let:8 a13 = (a11 | a11) in
      advance (4)
      #0343
      #instruction: JP   03B0
      advance (10)
      #03B0
      #instruction: JP   NZ,034A
      if (!is_zero(a12)) {
        advance (10)
        #034A
        #instruction: LD   A,(201B)
        let:8 a14 = M[201B] in
        advance (13)
        #034D
        #instruction: LD   B,A
        advance (5)
        #034E
        #instruction: LD   A,(20EF)
        let:8 a15 = M[20EF] in
        advance (13)
        #0351
        #instruction: AND  A
        let:8 a16 = (a15 & a15) in
        let:8 a17 = (a15 | a15) in
        advance (4)
        #0352
        #instruction: JP   NZ,0363
        if (!is_zero(a16)) {
          advance (10)
          #0363
          #instruction: CALL 17C0
          let:16 a18 = (-1 + a3) in
          M[a18] := 03;
          let:16 a19 = (-1 + a18) in
          M[a19] := 66;
          #return-to: 0366
          advance (17)
          #17C0
          #instruction: LD   A,(2067)
          let:8 a20 = M[2067] in
          advance (13)
          #17C3
          #instruction: RRCA
          advance (4)
          #17C4
          #instruction: JP   NC,17CA
          if (!a20[0]) {
            advance (10)
            #17CA
            #instruction: IN   02
            advance (10)
            #17CC
            #instruction: RET
            let:16 a21 = (1 + a19) in
            let:8 a22 = M[a19] in
            let:16 a23 = (1 + a21) in
            let:8 a24 = M[a21] in
            advance (10)
            A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
            B := a14;
            H := 20;
            L := 69;
            SPH := a23[15:8];
            SPL := a23[7:0];
            FlagS := a16[7];
            FlagZ := is_zero(a16);
            FlagA := a17[3];
            FlagP := parity(a16);
            FlagCY := a20[0];
            jump ((a24,a22));
          } else {
            advance (10)
            #17C7
            #instruction: IN   01
            advance (10)
            #17C9
            #instruction: RET
            let:16 a25 = (1 + a19) in
            let:8 a26 = M[a19] in
            let:16 a27 = (1 + a25) in
            let:8 a28 = M[a25] in
            advance (10)
            A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
            B := a14;
            H := 20;
            L := 69;
            SPH := a27[15:8];
            SPL := a27[7:0];
            FlagS := a16[7];
            FlagZ := is_zero(a16);
            FlagA := a17[3];
            FlagP := parity(a16);
            FlagCY := a20[0];
            jump ((a28,a26));
          }
        } else {
          advance (10)
          #0355
          #instruction: LD   A,(201D)
          let:8 a29 = M[201D] in
          advance (13)
          #0358
          #instruction: RRCA
          advance (4)
          #0359
          #instruction: JP   CY,0381
          if (a29[0]) {
            advance (10)
            #0381
            #instruction: LD   A,B
            advance (5)
            #0382
            #instruction: CP   D9
            let:16 a30 = addWithCarry(!false,a14,~D9) in
            let:8 a31 = (a14 & 0F) in
            let:8 a32 = (~D9 & 0F) in
            let:16 a33 = addWithCarry(!false,a31,a32) in
            advance (7)
            #0384
            #instruction: JP   Z,036F
            if (is_zero(a30[7:0])) {
              advance (10)
              #036F
              #instruction: LD   HL,2018
              advance (10)
              #0372
              #instruction: CALL 1A3B
              let:16 a34 = (-1 + a3) in
              M[a34] := 03;
              let:16 a35 = (-1 + a34) in
              M[a35] := 75;
              #return-to: 0375
              advance (17)
              #1A3B
              #instruction: LD   E,(HL)
              let:8 a36 = M[2018] in
              advance (7)
              #1A3C
              #instruction: INC  HL
              advance (5)
              #1A3D
              #instruction: LD   D,(HL)
              let:8 a37 = M[2019] in
              advance (7)
              #1A3E
              #instruction: INC  HL
              advance (5)
              #1A3F
              #instruction: LD   A,(HL)
              let:8 a38 = M[201A] in
              advance (7)
              #1A40
              #instruction: INC  HL
              advance (5)
              #1A41
              #instruction: LD   C,(HL)
              let:8 a39 = M[201B] in
              advance (7)
              #1A42
              #instruction: INC  HL
              advance (5)
              #1A43
              #instruction: LD   B,(HL)
              let:8 a40 = M[201C] in
              advance (7)
              #1A44
              #instruction: LD   H,C
              advance (5)
              #1A45
              #instruction: LD   L,A
              advance (5)
              #1A46
              #instruction: RET
              let:16 a41 = (1 + a35) in
              let:8 a42 = M[a35] in
              let:16 a43 = (1 + a41) in
              let:8 a44 = M[a41] in
              advance (10)
              A := a38;
              B := a40;
              C := a39;
              D := a37;
              E := a36;
              H := a39;
              L := a38;
              SPH := a43[15:8];
              SPL := a43[7:0];
              FlagS := a30[7:0][7];
              FlagZ := is_zero(a30[7:0]);
              FlagA := a33[7:0][4];
              FlagP := parity(a30[7:0]);
              FlagCY := !a30[15:8][0];
              jump ((a44,a42));
            } else {
              advance (10)
              #0387
              #instruction: INC  A
              let:16 a45 = addWithCarry(true,a14,00) in
              let:8 a46 = (a14 & 0F) in
              let:8 a47 = (00 & 0F) in
              let:16 a48 = addWithCarry(true,a46,a47) in
              advance (5)
              #0388
              #instruction: LD   (201B),A
              M[201B] := a45[7:0];
              advance (13)
              #038B
              #instruction: JP   036F
              advance (10)
              #036F
              #instruction: LD   HL,2018
              advance (10)
              #0372
              #instruction: CALL 1A3B
              let:16 a49 = (-1 + a3) in
              M[a49] := 03;
              let:16 a50 = (-1 + a49) in
              M[a50] := 75;
              #return-to: 0375
              advance (17)
              #1A3B
              #instruction: LD   E,(HL)
              let:8 a51 = M[2018] in
              advance (7)
              #1A3C
              #instruction: INC  HL
              advance (5)
              #1A3D
              #instruction: LD   D,(HL)
              let:8 a52 = M[2019] in
              advance (7)
              #1A3E
              #instruction: INC  HL
              advance (5)
              #1A3F
              #instruction: LD   A,(HL)
              let:8 a53 = M[201A] in
              advance (7)
              #1A40
              #instruction: INC  HL
              advance (5)
              #1A41
              #instruction: LD   C,(HL)
              let:8 a54 = M[201B] in
              advance (7)
              #1A42
              #instruction: INC  HL
              advance (5)
              #1A43
              #instruction: LD   B,(HL)
              let:8 a55 = M[201C] in
              advance (7)
              #1A44
              #instruction: LD   H,C
              advance (5)
              #1A45
              #instruction: LD   L,A
              advance (5)
              #1A46
              #instruction: RET
              let:16 a56 = (1 + a50) in
              let:8 a57 = M[a50] in
              let:16 a58 = (1 + a56) in
              let:8 a59 = M[a56] in
              advance (10)
              A := a53;
              B := a55;
              C := a54;
              D := a52;
              E := a51;
              H := a54;
              L := a53;
              SPH := a58[15:8];
              SPL := a58[7:0];
              FlagS := a45[7:0][7];
              FlagZ := is_zero(a45[7:0]);
              FlagA := a48[7:0][4];
              FlagP := parity(a45[7:0]);
              FlagCY := !a30[15:8][0];
              jump ((a59,a57));
            }
          } else {
            advance (10)
            #035C
            #instruction: RRCA
            advance (4)
            #035D
            #instruction: JP   CY,038E
            if (updateBit((a29 >> 01),7,a29[0])[0]) {
              advance (10)
              #038E
              #instruction: LD   A,B
              advance (5)
              #038F
              #instruction: CP   30
              let:16 a60 = addWithCarry(!false,a14,~30) in
              let:8 a61 = (a14 & 0F) in
              let:8 a62 = (~30 & 0F) in
              let:16 a63 = addWithCarry(!false,a61,a62) in
              advance (7)
              #0391
              #instruction: JP   Z,036F
              if (is_zero(a60[7:0])) {
                advance (10)
                #036F
                #instruction: LD   HL,2018
                advance (10)
                #0372
                #instruction: CALL 1A3B
                let:16 a64 = (-1 + a3) in
                M[a64] := 03;
                let:16 a65 = (-1 + a64) in
                M[a65] := 75;
                #return-to: 0375
                advance (17)
                #1A3B
                #instruction: LD   E,(HL)
                let:8 a66 = M[2018] in
                advance (7)
                #1A3C
                #instruction: INC  HL
                advance (5)
                #1A3D
                #instruction: LD   D,(HL)
                let:8 a67 = M[2019] in
                advance (7)
                #1A3E
                #instruction: INC  HL
                advance (5)
                #1A3F
                #instruction: LD   A,(HL)
                let:8 a68 = M[201A] in
                advance (7)
                #1A40
                #instruction: INC  HL
                advance (5)
                #1A41
                #instruction: LD   C,(HL)
                let:8 a69 = M[201B] in
                advance (7)
                #1A42
                #instruction: INC  HL
                advance (5)
                #1A43
                #instruction: LD   B,(HL)
                let:8 a70 = M[201C] in
                advance (7)
                #1A44
                #instruction: LD   H,C
                advance (5)
                #1A45
                #instruction: LD   L,A
                advance (5)
                #1A46
                #instruction: RET
                let:16 a71 = (1 + a65) in
                let:8 a72 = M[a65] in
                let:16 a73 = (1 + a71) in
                let:8 a74 = M[a71] in
                advance (10)
                A := a68;
                B := a70;
                C := a69;
                D := a67;
                E := a66;
                H := a69;
                L := a68;
                SPH := a73[15:8];
                SPL := a73[7:0];
                FlagS := a60[7:0][7];
                FlagZ := is_zero(a60[7:0]);
                FlagA := a63[7:0][4];
                FlagP := parity(a60[7:0]);
                FlagCY := !a60[15:8][0];
                jump ((a74,a72));
              } else {
                advance (10)
                #0394
                #instruction: DEC  A
                let:16 a75 = addWithCarry(!true,a14,~00) in
                let:8 a76 = (a14 & 0F) in
                let:8 a77 = (~00 & 0F) in
                let:16 a78 = addWithCarry(!true,a76,a77) in
                advance (5)
                #0395
                #instruction: LD   (201B),A
                M[201B] := a75[7:0];
                advance (13)
                #0398
                #instruction: JP   036F
                advance (10)
                #036F
                #instruction: LD   HL,2018
                advance (10)
                #0372
                #instruction: CALL 1A3B
                let:16 a79 = (-1 + a3) in
                M[a79] := 03;
                let:16 a80 = (-1 + a79) in
                M[a80] := 75;
                #return-to: 0375
                advance (17)
                #1A3B
                #instruction: LD   E,(HL)
                let:8 a81 = M[2018] in
                advance (7)
                #1A3C
                #instruction: INC  HL
                advance (5)
                #1A3D
                #instruction: LD   D,(HL)
                let:8 a82 = M[2019] in
                advance (7)
                #1A3E
                #instruction: INC  HL
                advance (5)
                #1A3F
                #instruction: LD   A,(HL)
                let:8 a83 = M[201A] in
                advance (7)
                #1A40
                #instruction: INC  HL
                advance (5)
                #1A41
                #instruction: LD   C,(HL)
                let:8 a84 = M[201B] in
                advance (7)
                #1A42
                #instruction: INC  HL
                advance (5)
                #1A43
                #instruction: LD   B,(HL)
                let:8 a85 = M[201C] in
                advance (7)
                #1A44
                #instruction: LD   H,C
                advance (5)
                #1A45
                #instruction: LD   L,A
                advance (5)
                #1A46
                #instruction: RET
                let:16 a86 = (1 + a80) in
                let:8 a87 = M[a80] in
                let:16 a88 = (1 + a86) in
                let:8 a89 = M[a86] in
                advance (10)
                A := a83;
                B := a85;
                C := a84;
                D := a82;
                E := a81;
                H := a84;
                L := a83;
                SPH := a88[15:8];
                SPL := a88[7:0];
                FlagS := a75[7:0][7];
                FlagZ := is_zero(a75[7:0]);
                FlagA := a78[7:0][4];
                FlagP := parity(a75[7:0]);
                FlagCY := !a60[15:8][0];
                jump ((a89,a87));
              }
            } else {
              advance (10)
              #0360
              #instruction: JP   036F
              advance (10)
              #036F
              #instruction: LD   HL,2018
              advance (10)
              #0372
              #instruction: CALL 1A3B
              let:16 a90 = (-1 + a3) in
              M[a90] := 03;
              let:16 a91 = (-1 + a90) in
              M[a91] := 75;
              #return-to: 0375
              advance (17)
              #1A3B
              #instruction: LD   E,(HL)
              let:8 a92 = M[2018] in
              advance (7)
              #1A3C
              #instruction: INC  HL
              advance (5)
              #1A3D
              #instruction: LD   D,(HL)
              let:8 a93 = M[2019] in
              advance (7)
              #1A3E
              #instruction: INC  HL
              advance (5)
              #1A3F
              #instruction: LD   A,(HL)
              let:8 a94 = M[201A] in
              advance (7)
              #1A40
              #instruction: INC  HL
              advance (5)
              #1A41
              #instruction: LD   C,(HL)
              let:8 a95 = M[201B] in
              advance (7)
              #1A42
              #instruction: INC  HL
              advance (5)
              #1A43
              #instruction: LD   B,(HL)
              let:8 a96 = M[201C] in
              advance (7)
              #1A44
              #instruction: LD   H,C
              advance (5)
              #1A45
              #instruction: LD   L,A
              advance (5)
              #1A46
              #instruction: RET
              let:16 a97 = (1 + a91) in
              let:8 a98 = M[a91] in
              let:16 a99 = (1 + a97) in
              let:8 a100 = M[a97] in
              advance (10)
              A := a94;
              B := a96;
              C := a95;
              D := a93;
              E := a92;
              H := a95;
              L := a94;
              SPH := a99[15:8];
              SPL := a99[7:0];
              FlagS := a16[7];
              FlagZ := is_zero(a16);
              FlagA := a17[3];
              FlagP := parity(a16);
              FlagCY := updateBit((a29 >> 01),7,a29[0])[0];
              jump ((a100,a98));
            }
          }
        }
      } else {
        advance (10)
        #03B3
        #instruction: INC  HL
        advance (5)
        #03B4
        #instruction: DEC  (HL)
        let:8 a101 = M[206A] in
        let:16 a102 = addWithCarry(!true,a101,~00) in
        let:8 a103 = (a101 & 0F) in
        let:8 a104 = (~00 & 0F) in
        let:16 a105 = addWithCarry(!true,a103,a104) in
        M[206A] := a102[7:0];
        advance (10)
        #03B5
        #instruction: JP   NZ,034A
        if (!is_zero(a102[7:0])) {
          advance (10)
          #034A
          #instruction: LD   A,(201B)
          let:8 a106 = M[201B] in
          advance (13)
          #034D
          #instruction: LD   B,A
          advance (5)
          #034E
          #instruction: LD   A,(20EF)
          let:8 a107 = M[20EF] in
          advance (13)
          #0351
          #instruction: AND  A
          let:8 a108 = (a107 & a107) in
          let:8 a109 = (a107 | a107) in
          advance (4)
          #0352
          #instruction: JP   NZ,0363
          if (!is_zero(a108)) {
            advance (10)
            #0363
            #instruction: CALL 17C0
            let:16 a110 = (-1 + a3) in
            M[a110] := 03;
            let:16 a111 = (-1 + a110) in
            M[a111] := 66;
            #return-to: 0366
            advance (17)
            #17C0
            #instruction: LD   A,(2067)
            let:8 a112 = M[2067] in
            advance (13)
            #17C3
            #instruction: RRCA
            advance (4)
            #17C4
            #instruction: JP   NC,17CA
            if (!a112[0]) {
              advance (10)
              #17CA
              #instruction: IN   02
              advance (10)
              #17CC
              #instruction: RET
              let:16 a113 = (1 + a111) in
              let:8 a114 = M[a111] in
              let:16 a115 = (1 + a113) in
              let:8 a116 = M[a113] in
              advance (10)
              A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
              B := a106;
              H := 20;
              L := 6A;
              SPH := a115[15:8];
              SPL := a115[7:0];
              FlagS := a108[7];
              FlagZ := is_zero(a108);
              FlagA := a109[3];
              FlagP := parity(a108);
              FlagCY := a112[0];
              jump ((a116,a114));
            } else {
              advance (10)
              #17C7
              #instruction: IN   01
              advance (10)
              #17C9
              #instruction: RET
              let:16 a117 = (1 + a111) in
              let:8 a118 = M[a111] in
              let:16 a119 = (1 + a117) in
              let:8 a120 = M[a117] in
              advance (10)
              A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
              B := a106;
              H := 20;
              L := 6A;
              SPH := a119[15:8];
              SPL := a119[7:0];
              FlagS := a108[7];
              FlagZ := is_zero(a108);
              FlagA := a109[3];
              FlagP := parity(a108);
              FlagCY := a112[0];
              jump ((a120,a118));
            }
          } else {
            advance (10)
            #0355
            #instruction: LD   A,(201D)
            let:8 a121 = M[201D] in
            advance (13)
            #0358
            #instruction: RRCA
            advance (4)
            #0359
            #instruction: JP   CY,0381
            if (a121[0]) {
              advance (10)
              #0381
              #instruction: LD   A,B
              advance (5)
              #0382
              #instruction: CP   D9
              let:16 a122 = addWithCarry(!false,a106,~D9) in
              let:8 a123 = (a106 & 0F) in
              let:8 a124 = (~D9 & 0F) in
              let:16 a125 = addWithCarry(!false,a123,a124) in
              advance (7)
              #0384
              #instruction: JP   Z,036F
              if (is_zero(a122[7:0])) {
                advance (10)
                #036F
                #instruction: LD   HL,2018
                advance (10)
                #0372
                #instruction: CALL 1A3B
                let:16 a126 = (-1 + a3) in
                M[a126] := 03;
                let:16 a127 = (-1 + a126) in
                M[a127] := 75;
                #return-to: 0375
                advance (17)
                #1A3B
                #instruction: LD   E,(HL)
                let:8 a128 = M[2018] in
                advance (7)
                #1A3C
                #instruction: INC  HL
                advance (5)
                #1A3D
                #instruction: LD   D,(HL)
                let:8 a129 = M[2019] in
                advance (7)
                #1A3E
                #instruction: INC  HL
                advance (5)
                #1A3F
                #instruction: LD   A,(HL)
                let:8 a130 = M[201A] in
                advance (7)
                #1A40
                #instruction: INC  HL
                advance (5)
                #1A41
                #instruction: LD   C,(HL)
                let:8 a131 = M[201B] in
                advance (7)
                #1A42
                #instruction: INC  HL
                advance (5)
                #1A43
                #instruction: LD   B,(HL)
                let:8 a132 = M[201C] in
                advance (7)
                #1A44
                #instruction: LD   H,C
                advance (5)
                #1A45
                #instruction: LD   L,A
                advance (5)
                #1A46
                #instruction: RET
                let:16 a133 = (1 + a127) in
                let:8 a134 = M[a127] in
                let:16 a135 = (1 + a133) in
                let:8 a136 = M[a133] in
                advance (10)
                A := a130;
                B := a132;
                C := a131;
                D := a129;
                E := a128;
                H := a131;
                L := a130;
                SPH := a135[15:8];
                SPL := a135[7:0];
                FlagS := a122[7:0][7];
                FlagZ := is_zero(a122[7:0]);
                FlagA := a125[7:0][4];
                FlagP := parity(a122[7:0]);
                FlagCY := !a122[15:8][0];
                jump ((a136,a134));
              } else {
                advance (10)
                #0387
                #instruction: INC  A
                let:16 a137 = addWithCarry(true,a106,00) in
                let:8 a138 = (a106 & 0F) in
                let:8 a139 = (00 & 0F) in
                let:16 a140 = addWithCarry(true,a138,a139) in
                advance (5)
                #0388
                #instruction: LD   (201B),A
                M[201B] := a137[7:0];
                advance (13)
                #038B
                #instruction: JP   036F
                advance (10)
                #036F
                #instruction: LD   HL,2018
                advance (10)
                #0372
                #instruction: CALL 1A3B
                let:16 a141 = (-1 + a3) in
                M[a141] := 03;
                let:16 a142 = (-1 + a141) in
                M[a142] := 75;
                #return-to: 0375
                advance (17)
                #1A3B
                #instruction: LD   E,(HL)
                let:8 a143 = M[2018] in
                advance (7)
                #1A3C
                #instruction: INC  HL
                advance (5)
                #1A3D
                #instruction: LD   D,(HL)
                let:8 a144 = M[2019] in
                advance (7)
                #1A3E
                #instruction: INC  HL
                advance (5)
                #1A3F
                #instruction: LD   A,(HL)
                let:8 a145 = M[201A] in
                advance (7)
                #1A40
                #instruction: INC  HL
                advance (5)
                #1A41
                #instruction: LD   C,(HL)
                let:8 a146 = M[201B] in
                advance (7)
                #1A42
                #instruction: INC  HL
                advance (5)
                #1A43
                #instruction: LD   B,(HL)
                let:8 a147 = M[201C] in
                advance (7)
                #1A44
                #instruction: LD   H,C
                advance (5)
                #1A45
                #instruction: LD   L,A
                advance (5)
                #1A46
                #instruction: RET
                let:16 a148 = (1 + a142) in
                let:8 a149 = M[a142] in
                let:16 a150 = (1 + a148) in
                let:8 a151 = M[a148] in
                advance (10)
                A := a145;
                B := a147;
                C := a146;
                D := a144;
                E := a143;
                H := a146;
                L := a145;
                SPH := a150[15:8];
                SPL := a150[7:0];
                FlagS := a137[7:0][7];
                FlagZ := is_zero(a137[7:0]);
                FlagA := a140[7:0][4];
                FlagP := parity(a137[7:0]);
                FlagCY := !a122[15:8][0];
                jump ((a151,a149));
              }
            } else {
              advance (10)
              #035C
              #instruction: RRCA
              advance (4)
              #035D
              #instruction: JP   CY,038E
              if (updateBit((a121 >> 01),7,a121[0])[0]) {
                advance (10)
                #038E
                #instruction: LD   A,B
                advance (5)
                #038F
                #instruction: CP   30
                let:16 a152 = addWithCarry(!false,a106,~30) in
                let:8 a153 = (a106 & 0F) in
                let:8 a154 = (~30 & 0F) in
                let:16 a155 = addWithCarry(!false,a153,a154) in
                advance (7)
                #0391
                #instruction: JP   Z,036F
                if (is_zero(a152[7:0])) {
                  advance (10)
                  #036F
                  #instruction: LD   HL,2018
                  advance (10)
                  #0372
                  #instruction: CALL 1A3B
                  let:16 a156 = (-1 + a3) in
                  M[a156] := 03;
                  let:16 a157 = (-1 + a156) in
                  M[a157] := 75;
                  #return-to: 0375
                  advance (17)
                  #1A3B
                  #instruction: LD   E,(HL)
                  let:8 a158 = M[2018] in
                  advance (7)
                  #1A3C
                  #instruction: INC  HL
                  advance (5)
                  #1A3D
                  #instruction: LD   D,(HL)
                  let:8 a159 = M[2019] in
                  advance (7)
                  #1A3E
                  #instruction: INC  HL
                  advance (5)
                  #1A3F
                  #instruction: LD   A,(HL)
                  let:8 a160 = M[201A] in
                  advance (7)
                  #1A40
                  #instruction: INC  HL
                  advance (5)
                  #1A41
                  #instruction: LD   C,(HL)
                  let:8 a161 = M[201B] in
                  advance (7)
                  #1A42
                  #instruction: INC  HL
                  advance (5)
                  #1A43
                  #instruction: LD   B,(HL)
                  let:8 a162 = M[201C] in
                  advance (7)
                  #1A44
                  #instruction: LD   H,C
                  advance (5)
                  #1A45
                  #instruction: LD   L,A
                  advance (5)
                  #1A46
                  #instruction: RET
                  let:16 a163 = (1 + a157) in
                  let:8 a164 = M[a157] in
                  let:16 a165 = (1 + a163) in
                  let:8 a166 = M[a163] in
                  advance (10)
                  A := a160;
                  B := a162;
                  C := a161;
                  D := a159;
                  E := a158;
                  H := a161;
                  L := a160;
                  SPH := a165[15:8];
                  SPL := a165[7:0];
                  FlagS := a152[7:0][7];
                  FlagZ := is_zero(a152[7:0]);
                  FlagA := a155[7:0][4];
                  FlagP := parity(a152[7:0]);
                  FlagCY := !a152[15:8][0];
                  jump ((a166,a164));
                } else {
                  advance (10)
                  #0394
                  #instruction: DEC  A
                  let:16 a167 = addWithCarry(!true,a106,~00) in
                  let:8 a168 = (a106 & 0F) in
                  let:8 a169 = (~00 & 0F) in
                  let:16 a170 = addWithCarry(!true,a168,a169) in
                  advance (5)
                  #0395
                  #instruction: LD   (201B),A
                  M[201B] := a167[7:0];
                  advance (13)
                  #0398
                  #instruction: JP   036F
                  advance (10)
                  #036F
                  #instruction: LD   HL,2018
                  advance (10)
                  #0372
                  #instruction: CALL 1A3B
                  let:16 a171 = (-1 + a3) in
                  M[a171] := 03;
                  let:16 a172 = (-1 + a171) in
                  M[a172] := 75;
                  #return-to: 0375
                  advance (17)
                  #1A3B
                  #instruction: LD   E,(HL)
                  let:8 a173 = M[2018] in
                  advance (7)
                  #1A3C
                  #instruction: INC  HL
                  advance (5)
                  #1A3D
                  #instruction: LD   D,(HL)
                  let:8 a174 = M[2019] in
                  advance (7)
                  #1A3E
                  #instruction: INC  HL
                  advance (5)
                  #1A3F
                  #instruction: LD   A,(HL)
                  let:8 a175 = M[201A] in
                  advance (7)
                  #1A40
                  #instruction: INC  HL
                  advance (5)
                  #1A41
                  #instruction: LD   C,(HL)
                  let:8 a176 = M[201B] in
                  advance (7)
                  #1A42
                  #instruction: INC  HL
                  advance (5)
                  #1A43
                  #instruction: LD   B,(HL)
                  let:8 a177 = M[201C] in
                  advance (7)
                  #1A44
                  #instruction: LD   H,C
                  advance (5)
                  #1A45
                  #instruction: LD   L,A
                  advance (5)
                  #1A46
                  #instruction: RET
                  let:16 a178 = (1 + a172) in
                  let:8 a179 = M[a172] in
                  let:16 a180 = (1 + a178) in
                  let:8 a181 = M[a178] in
                  advance (10)
                  A := a175;
                  B := a177;
                  C := a176;
                  D := a174;
                  E := a173;
                  H := a176;
                  L := a175;
                  SPH := a180[15:8];
                  SPL := a180[7:0];
                  FlagS := a167[7:0][7];
                  FlagZ := is_zero(a167[7:0]);
                  FlagA := a170[7:0][4];
                  FlagP := parity(a167[7:0]);
                  FlagCY := !a152[15:8][0];
                  jump ((a181,a179));
                }
              } else {
                advance (10)
                #0360
                #instruction: JP   036F
                advance (10)
                #036F
                #instruction: LD   HL,2018
                advance (10)
                #0372
                #instruction: CALL 1A3B
                let:16 a182 = (-1 + a3) in
                M[a182] := 03;
                let:16 a183 = (-1 + a182) in
                M[a183] := 75;
                #return-to: 0375
                advance (17)
                #1A3B
                #instruction: LD   E,(HL)
                let:8 a184 = M[2018] in
                advance (7)
                #1A3C
                #instruction: INC  HL
                advance (5)
                #1A3D
                #instruction: LD   D,(HL)
                let:8 a185 = M[2019] in
                advance (7)
                #1A3E
                #instruction: INC  HL
                advance (5)
                #1A3F
                #instruction: LD   A,(HL)
                let:8 a186 = M[201A] in
                advance (7)
                #1A40
                #instruction: INC  HL
                advance (5)
                #1A41
                #instruction: LD   C,(HL)
                let:8 a187 = M[201B] in
                advance (7)
                #1A42
                #instruction: INC  HL
                advance (5)
                #1A43
                #instruction: LD   B,(HL)
                let:8 a188 = M[201C] in
                advance (7)
                #1A44
                #instruction: LD   H,C
                advance (5)
                #1A45
                #instruction: LD   L,A
                advance (5)
                #1A46
                #instruction: RET
                let:16 a189 = (1 + a183) in
                let:8 a190 = M[a183] in
                let:16 a191 = (1 + a189) in
                let:8 a192 = M[a189] in
                advance (10)
                A := a186;
                B := a188;
                C := a187;
                D := a185;
                E := a184;
                H := a187;
                L := a186;
                SPH := a191[15:8];
                SPL := a191[7:0];
                FlagS := a108[7];
                FlagZ := is_zero(a108);
                FlagA := a109[3];
                FlagP := parity(a108);
                FlagCY := updateBit((a121 >> 01),7,a121[0])[0];
                jump ((a192,a190));
              }
            }
          }
        } else {
          advance (10)
          #03B8
          #instruction: JP   0346
          advance (10)
          #0346
          #instruction: NOP
          advance (4)
          #0347
          #instruction: DEC  HL
          advance (5)
          #0348
          #instruction: LD   (HL),01
          M[2069] := 01;
          advance (10)
          #034A
          #instruction: LD   A,(201B)
          let:8 a193 = M[201B] in
          advance (13)
          #034D
          #instruction: LD   B,A
          advance (5)
          #034E
          #instruction: LD   A,(20EF)
          let:8 a194 = M[20EF] in
          advance (13)
          #0351
          #instruction: AND  A
          let:8 a195 = (a194 & a194) in
          let:8 a196 = (a194 | a194) in
          advance (4)
          #0352
          #instruction: JP   NZ,0363
          if (!is_zero(a195)) {
            advance (10)
            #0363
            #instruction: CALL 17C0
            let:16 a197 = (-1 + a3) in
            M[a197] := 03;
            let:16 a198 = (-1 + a197) in
            M[a198] := 66;
            #return-to: 0366
            advance (17)
            #17C0
            #instruction: LD   A,(2067)
            let:8 a199 = M[2067] in
            advance (13)
            #17C3
            #instruction: RRCA
            advance (4)
            #17C4
            #instruction: JP   NC,17CA
            if (!a199[0]) {
              advance (10)
              #17CA
              #instruction: IN   02
              advance (10)
              #17CC
              #instruction: RET
              let:16 a200 = (1 + a198) in
              let:8 a201 = M[a198] in
              let:16 a202 = (1 + a200) in
              let:8 a203 = M[a200] in
              advance (10)
              A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
              B := a193;
              H := 20;
              L := 69;
              SPH := a202[15:8];
              SPL := a202[7:0];
              FlagS := a195[7];
              FlagZ := is_zero(a195);
              FlagA := a196[3];
              FlagP := parity(a195);
              FlagCY := a199[0];
              jump ((a203,a201));
            } else {
              advance (10)
              #17C7
              #instruction: IN   01
              advance (10)
              #17C9
              #instruction: RET
              let:16 a204 = (1 + a198) in
              let:8 a205 = M[a198] in
              let:16 a206 = (1 + a204) in
              let:8 a207 = M[a204] in
              advance (10)
              A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
              B := a193;
              H := 20;
              L := 69;
              SPH := a206[15:8];
              SPL := a206[7:0];
              FlagS := a195[7];
              FlagZ := is_zero(a195);
              FlagA := a196[3];
              FlagP := parity(a195);
              FlagCY := a199[0];
              jump ((a207,a205));
            }
          } else {
            advance (10)
            #0355
            #instruction: LD   A,(201D)
            let:8 a208 = M[201D] in
            advance (13)
            #0358
            #instruction: RRCA
            advance (4)
            #0359
            #instruction: JP   CY,0381
            if (a208[0]) {
              advance (10)
              #0381
              #instruction: LD   A,B
              advance (5)
              #0382
              #instruction: CP   D9
              let:16 a209 = addWithCarry(!false,a193,~D9) in
              let:8 a210 = (a193 & 0F) in
              let:8 a211 = (~D9 & 0F) in
              let:16 a212 = addWithCarry(!false,a210,a211) in
              advance (7)
              #0384
              #instruction: JP   Z,036F
              if (is_zero(a209[7:0])) {
                advance (10)
                #036F
                #instruction: LD   HL,2018
                advance (10)
                #0372
                #instruction: CALL 1A3B
                let:16 a213 = (-1 + a3) in
                M[a213] := 03;
                let:16 a214 = (-1 + a213) in
                M[a214] := 75;
                #return-to: 0375
                advance (17)
                #1A3B
                #instruction: LD   E,(HL)
                let:8 a215 = M[2018] in
                advance (7)
                #1A3C
                #instruction: INC  HL
                advance (5)
                #1A3D
                #instruction: LD   D,(HL)
                let:8 a216 = M[2019] in
                advance (7)
                #1A3E
                #instruction: INC  HL
                advance (5)
                #1A3F
                #instruction: LD   A,(HL)
                let:8 a217 = M[201A] in
                advance (7)
                #1A40
                #instruction: INC  HL
                advance (5)
                #1A41
                #instruction: LD   C,(HL)
                let:8 a218 = M[201B] in
                advance (7)
                #1A42
                #instruction: INC  HL
                advance (5)
                #1A43
                #instruction: LD   B,(HL)
                let:8 a219 = M[201C] in
                advance (7)
                #1A44
                #instruction: LD   H,C
                advance (5)
                #1A45
                #instruction: LD   L,A
                advance (5)
                #1A46
                #instruction: RET
                let:16 a220 = (1 + a214) in
                let:8 a221 = M[a214] in
                let:16 a222 = (1 + a220) in
                let:8 a223 = M[a220] in
                advance (10)
                A := a217;
                B := a219;
                C := a218;
                D := a216;
                E := a215;
                H := a218;
                L := a217;
                SPH := a222[15:8];
                SPL := a222[7:0];
                FlagS := a209[7:0][7];
                FlagZ := is_zero(a209[7:0]);
                FlagA := a212[7:0][4];
                FlagP := parity(a209[7:0]);
                FlagCY := !a209[15:8][0];
                jump ((a223,a221));
              } else {
                advance (10)
                #0387
                #instruction: INC  A
                let:16 a224 = addWithCarry(true,a193,00) in
                let:8 a225 = (a193 & 0F) in
                let:8 a226 = (00 & 0F) in
                let:16 a227 = addWithCarry(true,a225,a226) in
                advance (5)
                #0388
                #instruction: LD   (201B),A
                M[201B] := a224[7:0];
                advance (13)
                #038B
                #instruction: JP   036F
                advance (10)
                #036F
                #instruction: LD   HL,2018
                advance (10)
                #0372
                #instruction: CALL 1A3B
                let:16 a228 = (-1 + a3) in
                M[a228] := 03;
                let:16 a229 = (-1 + a228) in
                M[a229] := 75;
                #return-to: 0375
                advance (17)
                #1A3B
                #instruction: LD   E,(HL)
                let:8 a230 = M[2018] in
                advance (7)
                #1A3C
                #instruction: INC  HL
                advance (5)
                #1A3D
                #instruction: LD   D,(HL)
                let:8 a231 = M[2019] in
                advance (7)
                #1A3E
                #instruction: INC  HL
                advance (5)
                #1A3F
                #instruction: LD   A,(HL)
                let:8 a232 = M[201A] in
                advance (7)
                #1A40
                #instruction: INC  HL
                advance (5)
                #1A41
                #instruction: LD   C,(HL)
                let:8 a233 = M[201B] in
                advance (7)
                #1A42
                #instruction: INC  HL
                advance (5)
                #1A43
                #instruction: LD   B,(HL)
                let:8 a234 = M[201C] in
                advance (7)
                #1A44
                #instruction: LD   H,C
                advance (5)
                #1A45
                #instruction: LD   L,A
                advance (5)
                #1A46
                #instruction: RET
                let:16 a235 = (1 + a229) in
                let:8 a236 = M[a229] in
                let:16 a237 = (1 + a235) in
                let:8 a238 = M[a235] in
                advance (10)
                A := a232;
                B := a234;
                C := a233;
                D := a231;
                E := a230;
                H := a233;
                L := a232;
                SPH := a237[15:8];
                SPL := a237[7:0];
                FlagS := a224[7:0][7];
                FlagZ := is_zero(a224[7:0]);
                FlagA := a227[7:0][4];
                FlagP := parity(a224[7:0]);
                FlagCY := !a209[15:8][0];
                jump ((a238,a236));
              }
            } else {
              advance (10)
              #035C
              #instruction: RRCA
              advance (4)
              #035D
              #instruction: JP   CY,038E
              if (updateBit((a208 >> 01),7,a208[0])[0]) {
                advance (10)
                #038E
                #instruction: LD   A,B
                advance (5)
                #038F
                #instruction: CP   30
                let:16 a239 = addWithCarry(!false,a193,~30) in
                let:8 a240 = (a193 & 0F) in
                let:8 a241 = (~30 & 0F) in
                let:16 a242 = addWithCarry(!false,a240,a241) in
                advance (7)
                #0391
                #instruction: JP   Z,036F
                if (is_zero(a239[7:0])) {
                  advance (10)
                  #036F
                  #instruction: LD   HL,2018
                  advance (10)
                  #0372
                  #instruction: CALL 1A3B
                  let:16 a243 = (-1 + a3) in
                  M[a243] := 03;
                  let:16 a244 = (-1 + a243) in
                  M[a244] := 75;
                  #return-to: 0375
                  advance (17)
                  #1A3B
                  #instruction: LD   E,(HL)
                  let:8 a245 = M[2018] in
                  advance (7)
                  #1A3C
                  #instruction: INC  HL
                  advance (5)
                  #1A3D
                  #instruction: LD   D,(HL)
                  let:8 a246 = M[2019] in
                  advance (7)
                  #1A3E
                  #instruction: INC  HL
                  advance (5)
                  #1A3F
                  #instruction: LD   A,(HL)
                  let:8 a247 = M[201A] in
                  advance (7)
                  #1A40
                  #instruction: INC  HL
                  advance (5)
                  #1A41
                  #instruction: LD   C,(HL)
                  let:8 a248 = M[201B] in
                  advance (7)
                  #1A42
                  #instruction: INC  HL
                  advance (5)
                  #1A43
                  #instruction: LD   B,(HL)
                  let:8 a249 = M[201C] in
                  advance (7)
                  #1A44
                  #instruction: LD   H,C
                  advance (5)
                  #1A45
                  #instruction: LD   L,A
                  advance (5)
                  #1A46
                  #instruction: RET
                  let:16 a250 = (1 + a244) in
                  let:8 a251 = M[a244] in
                  let:16 a252 = (1 + a250) in
                  let:8 a253 = M[a250] in
                  advance (10)
                  A := a247;
                  B := a249;
                  C := a248;
                  D := a246;
                  E := a245;
                  H := a248;
                  L := a247;
                  SPH := a252[15:8];
                  SPL := a252[7:0];
                  FlagS := a239[7:0][7];
                  FlagZ := is_zero(a239[7:0]);
                  FlagA := a242[7:0][4];
                  FlagP := parity(a239[7:0]);
                  FlagCY := !a239[15:8][0];
                  jump ((a253,a251));
                } else {
                  advance (10)
                  #0394
                  #instruction: DEC  A
                  let:16 a254 = addWithCarry(!true,a193,~00) in
                  let:8 a255 = (a193 & 0F) in
                  let:8 a256 = (~00 & 0F) in
                  let:16 a257 = addWithCarry(!true,a255,a256) in
                  advance (5)
                  #0395
                  #instruction: LD   (201B),A
                  M[201B] := a254[7:0];
                  advance (13)
                  #0398
                  #instruction: JP   036F
                  advance (10)
                  #036F
                  #instruction: LD   HL,2018
                  advance (10)
                  #0372
                  #instruction: CALL 1A3B
                  let:16 a258 = (-1 + a3) in
                  M[a258] := 03;
                  let:16 a259 = (-1 + a258) in
                  M[a259] := 75;
                  #return-to: 0375
                  advance (17)
                  #1A3B
                  #instruction: LD   E,(HL)
                  let:8 a260 = M[2018] in
                  advance (7)
                  #1A3C
                  #instruction: INC  HL
                  advance (5)
                  #1A3D
                  #instruction: LD   D,(HL)
                  let:8 a261 = M[2019] in
                  advance (7)
                  #1A3E
                  #instruction: INC  HL
                  advance (5)
                  #1A3F
                  #instruction: LD   A,(HL)
                  let:8 a262 = M[201A] in
                  advance (7)
                  #1A40
                  #instruction: INC  HL
                  advance (5)
                  #1A41
                  #instruction: LD   C,(HL)
                  let:8 a263 = M[201B] in
                  advance (7)
                  #1A42
                  #instruction: INC  HL
                  advance (5)
                  #1A43
                  #instruction: LD   B,(HL)
                  let:8 a264 = M[201C] in
                  advance (7)
                  #1A44
                  #instruction: LD   H,C
                  advance (5)
                  #1A45
                  #instruction: LD   L,A
                  advance (5)
                  #1A46
                  #instruction: RET
                  let:16 a265 = (1 + a259) in
                  let:8 a266 = M[a259] in
                  let:16 a267 = (1 + a265) in
                  let:8 a268 = M[a265] in
                  advance (10)
                  A := a262;
                  B := a264;
                  C := a263;
                  D := a261;
                  E := a260;
                  H := a263;
                  L := a262;
                  SPH := a267[15:8];
                  SPL := a267[7:0];
                  FlagS := a254[7:0][7];
                  FlagZ := is_zero(a254[7:0]);
                  FlagA := a257[7:0][4];
                  FlagP := parity(a254[7:0]);
                  FlagCY := !a239[15:8][0];
                  jump ((a268,a266));
                }
              } else {
                advance (10)
                #0360
                #instruction: JP   036F
                advance (10)
                #036F
                #instruction: LD   HL,2018
                advance (10)
                #0372
                #instruction: CALL 1A3B
                let:16 a269 = (-1 + a3) in
                M[a269] := 03;
                let:16 a270 = (-1 + a269) in
                M[a270] := 75;
                #return-to: 0375
                advance (17)
                #1A3B
                #instruction: LD   E,(HL)
                let:8 a271 = M[2018] in
                advance (7)
                #1A3C
                #instruction: INC  HL
                advance (5)
                #1A3D
                #instruction: LD   D,(HL)
                let:8 a272 = M[2019] in
                advance (7)
                #1A3E
                #instruction: INC  HL
                advance (5)
                #1A3F
                #instruction: LD   A,(HL)
                let:8 a273 = M[201A] in
                advance (7)
                #1A40
                #instruction: INC  HL
                advance (5)
                #1A41
                #instruction: LD   C,(HL)
                let:8 a274 = M[201B] in
                advance (7)
                #1A42
                #instruction: INC  HL
                advance (5)
                #1A43
                #instruction: LD   B,(HL)
                let:8 a275 = M[201C] in
                advance (7)
                #1A44
                #instruction: LD   H,C
                advance (5)
                #1A45
                #instruction: LD   L,A
                advance (5)
                #1A46
                #instruction: RET
                let:16 a276 = (1 + a270) in
                let:8 a277 = M[a270] in
                let:16 a278 = (1 + a276) in
                let:8 a279 = M[a276] in
                advance (10)
                A := a273;
                B := a275;
                C := a274;
                D := a272;
                E := a271;
                H := a274;
                L := a273;
                SPH := a278[15:8];
                SPL := a278[7:0];
                FlagS := a195[7];
                FlagZ := is_zero(a195);
                FlagA := a196[3];
                FlagP := parity(a195);
                FlagCY := updateBit((a208 >> 01),7,a208[0])[0];
                jump ((a279,a277));
              }
            }
          }
        }
      }
    } else {
      advance (10)
      #0296
      #instruction: INC  HL
      let:16 a280 = (1 + a5) in
      advance (5)
      #0297
      #instruction: DEC  (HL)
      let:8 a281 = M[a280] in
      let:16 a282 = addWithCarry(!true,a281,~00) in
      let:8 a283 = (a281 & 0F) in
      let:8 a284 = (~00 & 0F) in
      let:16 a285 = addWithCarry(!true,a283,a284) in
      M[a280] := a282[7:0];
      advance (10)
      #0298
      #instruction: RET  NZ
      if (!is_zero(a282[7:0])) {
        let:16 a286 = (1 + a3) in
        let:8 a287 = M[a3] in
        let:16 a288 = (1 + a286) in
        let:8 a289 = M[a286] in
        advance (11)
        A := a6;
        H := a280[15:8];
        L := a280[7:0];
        SPH := a288[15:8];
        SPL := a288[7:0];
        FlagS := a282[7:0][7];
        FlagZ := is_zero(a282[7:0]);
        FlagA := a285[7:0][4];
        FlagP := parity(a282[7:0]);
        FlagCY := !a7[15:8][0];
        jump ((a289,a287));
      } else {
        advance (5)
        #0299
        #instruction: LD   B,A
        advance (5)
        #029A
        #instruction: XOR  A
        let:8 a290 = (a6 ^ a6) in
        advance (4)
        #029B
        #instruction: LD   (2068),A
        M[2068] := a290;
        advance (13)
        #029E
        #instruction: LD   (2069),A
        M[2069] := a290;
        advance (13)
        #02A1
        #instruction: LD   A,30
        advance (7)
        #02A3
        #instruction: LD   (206A),A
        M[206A] := 30;
        advance (13)
        #02A6
        #instruction: LD   A,B
        advance (5)
        #02A7
        #instruction: LD   (HL),05
        M[a280] := 05;
        advance (10)
        #02A9
        #instruction: INC  HL
        let:16 a291 = (1 + a280) in
        advance (5)
        #02AA
        #instruction: DEC  (HL)
        let:8 a292 = M[a291] in
        let:16 a293 = addWithCarry(!true,a292,~00) in
        let:8 a294 = (a292 & 0F) in
        let:8 a295 = (~00 & 0F) in
        let:16 a296 = addWithCarry(!true,a294,a295) in
        M[a291] := a293[7:0];
        advance (10)
        #02AB
        #instruction: JP   NZ,039B
        if (!is_zero(a293[7:0])) {
          advance (10)
          #039B
          #instruction: INC  A
          let:16 a297 = addWithCarry(true,a6,00) in
          let:8 a298 = (a6 & 0F) in
          let:8 a299 = (00 & 0F) in
          let:16 a300 = addWithCarry(true,a298,a299) in
          advance (5)
          #039C
          #instruction: AND  01
          let:8 a301 = (01 & a297[7:0]) in
          let:8 a302 = (01 | a297[7:0]) in
          advance (7)
          #039E
          #instruction: LD   (2015),A
          M[2015] := a301;
          advance (13)
          #03A1
          #instruction: RLCA
          advance (4)
          #03A2
          #instruction: RLCA
          advance (4)
          #03A3
          #instruction: RLCA
          advance (4)
          #03A4
          #instruction: RLCA
          advance (4)
          #03A5
          #instruction: LD   HL,1C70
          advance (10)
          #03A8
          #instruction: ADD  L
          let:16 a303 = addWithCarry(false,70,updateBit((updateBit((updateBit((updateBit((a301 << 01),0,a301[7]) << 01),0,updateBit((a301 << 01),0,a301[7])[7]) << 01),0,updateBit((updateBit((a301 << 01),0,a301[7]) << 01),0,updateBit((a301 << 01),0,a301[7])[7])[7]) << 01),0,updateBit((updateBit((updateBit((a301 << 01),0,a301[7]) << 01),0,updateBit((a301 << 01),0,a301[7])[7]) << 01),0,updateBit((updateBit((a301 << 01),0,a301[7]) << 01),0,updateBit((a301 << 01),0,a301[7])[7])[7])[7])) in
          let:8 a304 = (70 & 0F) in
          let:8 a305 = (updateBit((updateBit((updateBit((updateBit((a301 << 01),0,a301[7]) << 01),0,updateBit((a301 << 01),0,a301[7])[7]) << 01),0,updateBit((updateBit((a301 << 01),0,a301[7]) << 01),0,updateBit((a301 << 01),0,a301[7])[7])[7]) << 01),0,updateBit((updateBit((updateBit((a301 << 01),0,a301[7]) << 01),0,updateBit((a301 << 01),0,a301[7])[7]) << 01),0,updateBit((updateBit((a301 << 01),0,a301[7]) << 01),0,updateBit((a301 << 01),0,a301[7])[7])[7])[7]) & 0F) in
          let:16 a306 = addWithCarry(false,a304,a305) in
          advance (4)
          #03A9
          #instruction: LD   L,A
          advance (5)
          #03AA
          #instruction: LD   (2018),HL
          M[2018] := a303[7:0];
          M[2019] := 1C;
          advance (16)
          #03AD
          #instruction: JP   036F
          advance (10)
          #036F
          #instruction: LD   HL,2018
          advance (10)
          #0372
          #instruction: CALL 1A3B
          let:16 a307 = (-1 + a3) in
          M[a307] := 03;
          let:16 a308 = (-1 + a307) in
          M[a308] := 75;
          #return-to: 0375
          advance (17)
          #1A3B
          #instruction: LD   E,(HL)
          let:8 a309 = M[2018] in
          advance (7)
          #1A3C
          #instruction: INC  HL
          advance (5)
          #1A3D
          #instruction: LD   D,(HL)
          let:8 a310 = M[2019] in
          advance (7)
          #1A3E
          #instruction: INC  HL
          advance (5)
          #1A3F
          #instruction: LD   A,(HL)
          let:8 a311 = M[201A] in
          advance (7)
          #1A40
          #instruction: INC  HL
          advance (5)
          #1A41
          #instruction: LD   C,(HL)
          let:8 a312 = M[201B] in
          advance (7)
          #1A42
          #instruction: INC  HL
          advance (5)
          #1A43
          #instruction: LD   B,(HL)
          let:8 a313 = M[201C] in
          advance (7)
          #1A44
          #instruction: LD   H,C
          advance (5)
          #1A45
          #instruction: LD   L,A
          advance (5)
          #1A46
          #instruction: RET
          let:16 a314 = (1 + a308) in
          let:8 a315 = M[a308] in
          let:16 a316 = (1 + a314) in
          let:8 a317 = M[a314] in
          advance (10)
          A := a311;
          B := a313;
          C := a312;
          D := a310;
          E := a309;
          H := a312;
          L := a311;
          SPH := a316[15:8];
          SPL := a316[7:0];
          FlagS := a303[7:0][7];
          FlagZ := is_zero(a303[7:0]);
          FlagA := a306[7:0][4];
          FlagP := parity(a303[7:0]);
          FlagCY := a303[15:8][0];
          jump ((a317,a315));
        } else {
          advance (10)
          #02AE
          #instruction: LD   HL,(201A)
          let:8 a318 = M[201A] in
          let:8 a319 = M[201B] in
          advance (16)
          #02B1
          #instruction: LD   B,10
          advance (7)
          #02B3
          #instruction: CALL 1424
          let:16 a320 = (-1 + a3) in
          M[a320] := 02;
          let:16 a321 = (-1 + a320) in
          M[a321] := B6;
          #return-to: 02B6
          advance (17)
          #1424
          #instruction: CALL 1474
          let:16 a322 = (-1 + a321) in
          M[a322] := 14;
          let:16 a323 = (-1 + a322) in
          M[a323] := 27;
          #return-to: 1427
          advance (17)
          #1474
          #instruction: LD   A,L
          advance (5)
          #1475
          #instruction: AND  07
          let:8 a324 = (07 & a318) in
          let:8 a325 = (07 | a318) in
          advance (7)
          #1477
          #instruction: OUT  02
          advance (10)
          #1479
          #instruction: JP   1A47
          advance (10)
          #1A47
          #instruction: PUSH BC
          let:16 a326 = (-1 + a323) in
          M[a326] := 10;
          let:16 a327 = (-1 + a326) in
          M[a327] := C;
          advance (11)
          #1A48
          #instruction: LD   B,03
          advance (7)
          #1A4A
          #instruction: LD   A,H
          advance (5)
          #1A4B
          #instruction: RAR
          advance (4)
          #1A4C
          #instruction: LD   H,A
          advance (5)
          #1A4D
          #instruction: LD   A,L
          advance (5)
          #1A4E
          #instruction: RAR
          advance (4)
          #1A4F
          #instruction: LD   L,A
          advance (5)
          #1A50
          #instruction: DEC  B
          let:16 a328 = addWithCarry(!true,03,~00) in
          let:8 a329 = (03 & 0F) in
          let:8 a330 = (~00 & 0F) in
          let:16 a331 = addWithCarry(!true,a329,a330) in
          advance (5)
          #1A51
          #instruction: JP   NZ,1A4A
          if (!is_zero(a328[7:0])) {
            advance (10)
            A := updateBit((a318 >> 01),7,a319[0]);
            B := a328[7:0];
            H := updateBit((a319 >> 01),7,false);
            L := updateBit((a318 >> 01),7,a319[0]);
            SPH := a327[15:8];
            SPL := a327[7:0];
            FlagS := a328[7:0][7];
            FlagZ := is_zero(a328[7:0]);
            FlagA := a331[7:0][4];
            FlagP := parity(a328[7:0]);
            FlagCY := a318[0];
            Shifter_OFF := a324;
            jump (1A4A);
          } else {
            advance (10)
            #1A54
            #instruction: LD   A,H
            advance (5)
            #1A55
            #instruction: AND  3F
            let:8 a332 = (3F & updateBit((a319 >> 01),7,false)) in
            let:8 a333 = (3F | updateBit((a319 >> 01),7,false)) in
            advance (7)
            #1A57
            #instruction: OR   20
            let:8 a334 = (20 | a332) in
            advance (7)
            #1A59
            #instruction: LD   H,A
            advance (5)
            #1A5A
            #instruction: POP  BC
            let:16 a335 = (1 + a327) in
            let:8 a336 = M[a327] in
            let:16 a337 = (1 + a335) in
            let:8 a338 = M[a335] in
            advance (10)
            #1A5B
            #instruction: RET
            let:16 a339 = (1 + a337) in
            let:8 a340 = M[a337] in
            let:16 a341 = (1 + a339) in
            let:8 a342 = M[a339] in
            advance (10)
            A := a334;
            B := a338;
            C := a336;
            H := a334;
            L := updateBit((a318 >> 01),7,a319[0]);
            SPH := a341[15:8];
            SPL := a341[7:0];
            FlagS := a334[7];
            FlagZ := is_zero(a334);
            FlagA := false;
            FlagP := parity(a334);
            FlagCY := false;
            Shifter_OFF := a324;
            jump ((a342,a340));
          }
        }
      }
    }

02B6:

    #02B6
    #instruction: LD   HL,2010
    advance (10)
    #02B9
    #instruction: LD   DE,1B10
    advance (10)
    #02BC
    #instruction: LD   B,10
    advance (7)
    #02BE
    #instruction: CALL 1A32
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := C1;
    #return-to: 02C1
    advance (17)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2010] := 00;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,10,~00) in
    let:8 a4 = (10 & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a3[7:0])) {
      advance (10)
      A := 00;
      B := a3[7:0];
      D := 1B;
      E := 11;
      H := 20;
      L := 11;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := 00;
      B := a3[7:0];
      D := 1B;
      E := 11;
      H := 20;
      L := 11;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

02C1:

    #02C1
    #instruction: LD   B,00
    advance (7)
    #02C3
    #instruction: CALL 19DC
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := C6;
    #return-to: 02C6
    advance (17)
    #19DC
    #instruction: LD   A,(2094)
    let:8 a3 = M[2094] in
    advance (13)
    #19DF
    #instruction: AND  B
    let:8 a4 = (00 & a3) in
    let:8 a5 = (00 | a3) in
    advance (4)
    #19E0
    #instruction: LD   (2094),A
    M[2094] := a4;
    advance (13)
    #19E3
    #instruction: OUT  03
    sound_control(Ufo,a4[0]);
    sound_control(Shot,a4[1]);
    sound_control(PlayerDie,a4[2]);
    sound_control(InvaderDie,a4[3]);
    sound_control(ExtraLife,a4[4]);
    advance (10)
    #19E5
    #instruction: RET
    let:16 a6 = (1 + a2) in
    let:8 a7 = M[a2] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    A := a4;
    B := 00;
    SPH := a8[15:8];
    SPL := a8[7:0];
    FlagS := a4[7];
    FlagZ := is_zero(a4);
    FlagA := a5[3];
    FlagP := parity(a4);
    FlagCY := false;
    jump ((a9,a7));

02C6:

    #02C6
    #instruction: LD   A,(206D)
    let:8 a1 = M[206D] in
    advance (13)
    #02C9
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #02CA
    #instruction: RET  NZ
    if (!is_zero(a2)) {
      let:16 a4 = (1 + (SPH,SPL)) in
      let:8 a5 = M[(SPH,SPL)] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (11)
      A := a2;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump ((a7,a5));
    } else {
      advance (5)
      #02CB
      #instruction: LD   A,(20EF)
      let:8 a8 = M[20EF] in
      advance (13)
      #02CE
      #instruction: AND  A
      let:8 a9 = (a8 & a8) in
      let:8 a10 = (a8 | a8) in
      advance (4)
      #02CF
      #instruction: RET  Z
      if (is_zero(a9)) {
        let:16 a11 = (1 + (SPH,SPL)) in
        let:8 a12 = M[(SPH,SPL)] in
        let:16 a13 = (1 + a11) in
        let:8 a14 = M[a11] in
        advance (11)
        A := a9;
        SPH := a13[15:8];
        SPL := a13[7:0];
        FlagS := a9[7];
        FlagZ := is_zero(a9);
        FlagA := a10[3];
        FlagP := parity(a9);
        FlagCY := false;
        jump ((a14,a12));
      } else {
        advance (5)
        #02D0
        #instruction: LD   SP,2400
        advance (10)
        #02D3
        #instruction: EI
        enable_interrupts()
        advance (4)
        #02D4
        #instruction: CALL 19D7
        M[23FF] := 02;
        M[23FE] := D7;
        #return-to: 02D7
        advance (17)
        #19D7
        #instruction: XOR  A
        let:8 a15 = (a9 ^ a9) in
        advance (4)
        #19D8
        #instruction: JP   19D3
        advance (10)
        #19D3
        #instruction: LD   (20E9),A
        M[20E9] := a15;
        advance (13)
        #19D6
        #instruction: RET
        let:8 a16 = M[23FE] in
        let:8 a17 = M[23FF] in
        advance (10)
        A := a15;
        SPH := 24;
        SPL := 00;
        FlagS := a15[7];
        FlagZ := is_zero(a15);
        FlagA := false;
        FlagP := parity(a15);
        FlagCY := false;
        jump ((a17,a16));
      }
    }

02D7:

    #02D7
    #instruction: CALL 092E
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := DA;
    #return-to: 02DA
    advance (17)
    #092E
    #instruction: CALL 1611
    let:16 a3 = (-1 + a2) in
    M[a3] := 09;
    let:16 a4 = (-1 + a3) in
    M[a4] := 31;
    #return-to: 0931
    advance (17)
    #1611
    #instruction: LD   L,00
    advance (7)
    #1613
    #instruction: LD   A,(2067)
    let:8 a5 = M[2067] in
    advance (13)
    #1616
    #instruction: LD   H,A
    advance (5)
    #1617
    #instruction: RET
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    A := a5;
    H := a5;
    L := 00;
    SPH := a8[15:8];
    SPL := a8[7:0];
    jump ((a9,a7));

02DA:

    #02DA
    #instruction: AND  A
    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    advance (4)
    #02DB
    #instruction: JP   Z,166D
    if (is_zero(a1)) {
      advance (10)
      #166D
      #instruction: XOR  A
      let:8 a3 = (a1 ^ a1) in
      advance (4)
      #166E
      #instruction: CALL 1A8B
      let:16 a4 = (-1 + (SPH,SPL)) in
      M[a4] := 16;
      let:16 a5 = (-1 + a4) in
      M[a5] := 71;
      #return-to: 1671
      advance (17)
      #1A8B
      #instruction: LD   HL,2501
      advance (10)
      #1A8E
      #instruction: AND  0F
      let:8 a6 = (0F & a3) in
      let:8 a7 = (0F | a3) in
      advance (7)
      #1A90
      #instruction: JP   09C5
      advance (10)
      #09C5
      #instruction: ADD  1A
      let:16 a8 = addWithCarry(false,1A,a6) in
      let:8 a9 = (1A & 0F) in
      let:8 a10 = (a6 & 0F) in
      let:16 a11 = addWithCarry(false,a9,a10) in
      advance (7)
      #09C7
      #instruction: JP   08FF
      advance (10)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a12 = (-1 + a5) in
      M[a12] := 25;
      let:16 a13 = (-1 + a12) in
      M[a13] := 01;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a14 = add17((00,a8[7:0]),(00,a8[7:0])) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a15 = add17(a14[15:0],a14[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a16 = add17(a15[15:0],a15[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a17 = add17(1E00,a16[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a18 = (1 + a13) in
      let:8 a19 = M[a13] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a22 = (-1 + a20) in
      M[a22] := 08;
      let:16 a23 = (-1 + a22) in
      M[a23] := C;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a24 = M[a17[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a21,a19)] := a24;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a25 = (1 + a17[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a26 = add17(0020,(a21,a19)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a27 = (1 + a23) in
      let:8 a28 = M[a23] in
      let:16 a29 = (1 + a27) in
      let:8 a30 = M[a27] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a31 = addWithCarry(!true,a30,~00) in
      let:8 a32 = (a30 & 0F) in
      let:8 a33 = (~00 & 0F) in
      let:16 a34 = addWithCarry(!true,a32,a33) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a31[7:0])) {
        advance (10)
        A := a24;
        B := a31[7:0];
        C := a28;
        D := a25[15:8];
        E := a25[7:0];
        H := a26[15:0][15:8];
        L := a26[15:0][7:0];
        SPH := a29[15:8];
        SPL := a29[7:0];
        FlagS := a31[7:0][7];
        FlagZ := is_zero(a31[7:0]);
        FlagA := a34[7:0][4];
        FlagP := parity(a31[7:0]);
        FlagCY := a26[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a35 = (1 + a29) in
        let:8 a36 = M[a29] in
        let:16 a37 = (1 + a35) in
        let:8 a38 = M[a35] in
        advance (10)
        A := a24;
        B := a31[7:0];
        C := a28;
        D := a25[15:8];
        E := a25[7:0];
        H := a26[15:0][15:8];
        L := a26[15:0][7:0];
        SPH := a37[15:8];
        SPL := a37[7:0];
        FlagS := a31[7:0][7];
        FlagZ := is_zero(a31[7:0]);
        FlagA := a34[7:0][4];
        FlagP := parity(a31[7:0]);
        FlagCY := a26[16];
        jump ((a38,a36));
      }
    } else {
      advance (10)
      #02DE
      #instruction: CALL 18E7
      let:16 a39 = (-1 + (SPH,SPL)) in
      M[a39] := 02;
      let:16 a40 = (-1 + a39) in
      M[a40] := E1;
      #return-to: 02E1
      advance (17)
      #18E7
      #instruction: LD   A,(2067)
      let:8 a41 = M[2067] in
      advance (13)
      #18EA
      #instruction: LD   HL,20E7
      advance (10)
      #18ED
      #instruction: RRCA
      advance (4)
      #18EE
      #instruction: RET  NC
      if (!a41[0]) {
        let:16 a42 = (1 + a40) in
        let:8 a43 = M[a40] in
        let:16 a44 = (1 + a42) in
        let:8 a45 = M[a42] in
        advance (11)
        A := updateBit((a41 >> 01),7,a41[0]);
        H := 20;
        L := E7;
        SPH := a44[15:8];
        SPL := a44[7:0];
        FlagS := a1[7];
        FlagZ := is_zero(a1);
        FlagA := a2[3];
        FlagP := parity(a1);
        FlagCY := a41[0];
        jump ((a45,a43));
      } else {
        advance (5)
        #18EF
        #instruction: INC  HL
        advance (5)
        #18F0
        #instruction: RET
        let:16 a46 = (1 + a40) in
        let:8 a47 = M[a40] in
        let:16 a48 = (1 + a46) in
        let:8 a49 = M[a46] in
        advance (10)
        A := updateBit((a41 >> 01),7,a41[0]);
        H := 20;
        L := E8;
        SPH := a48[15:8];
        SPL := a48[7:0];
        FlagS := a1[7];
        FlagZ := is_zero(a1);
        FlagA := a2[3];
        FlagP := parity(a1);
        FlagCY := a41[0];
        jump ((a49,a47));
      }
    }

02E1:

    #02E1
    #instruction: LD   A,(HL)
    let:8 a1 = M[(H,L)] in
    advance (7)
    #02E2
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #02E3
    #instruction: JP   Z,032C
    if (is_zero(a2)) {
      advance (10)
      #032C
      #instruction: CALL 1A7F
      let:16 a4 = (-1 + (SPH,SPL)) in
      M[a4] := 03;
      let:16 a5 = (-1 + a4) in
      M[a5] := 2F;
      #return-to: 032F
      advance (17)
      #1A7F
      #instruction: CALL 092E
      let:16 a6 = (-1 + a5) in
      M[a6] := 1A;
      let:16 a7 = (-1 + a6) in
      M[a7] := 82;
      #return-to: 1A82
      advance (17)
      #092E
      #instruction: CALL 1611
      let:16 a8 = (-1 + a7) in
      M[a8] := 09;
      let:16 a9 = (-1 + a8) in
      M[a9] := 31;
      #return-to: 0931
      advance (17)
      #1611
      #instruction: LD   L,00
      advance (7)
      #1613
      #instruction: LD   A,(2067)
      let:8 a10 = M[2067] in
      advance (13)
      #1616
      #instruction: LD   H,A
      advance (5)
      #1617
      #instruction: RET
      let:16 a11 = (1 + a9) in
      let:8 a12 = M[a9] in
      let:16 a13 = (1 + a11) in
      let:8 a14 = M[a11] in
      advance (10)
      A := a10;
      H := a10;
      L := 00;
      SPH := a13[15:8];
      SPL := a13[7:0];
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump ((a14,a12));
    } else {
      advance (10)
      #02E6
      #instruction: LD   A,(20CE)
      let:8 a15 = M[20CE] in
      advance (13)
      #02E9
      #instruction: AND  A
      let:8 a16 = (a15 & a15) in
      let:8 a17 = (a15 | a15) in
      advance (4)
      #02EA
      #instruction: JP   Z,032C
      if (is_zero(a16)) {
        advance (10)
        #032C
        #instruction: CALL 1A7F
        let:16 a18 = (-1 + (SPH,SPL)) in
        M[a18] := 03;
        let:16 a19 = (-1 + a18) in
        M[a19] := 2F;
        #return-to: 032F
        advance (17)
        #1A7F
        #instruction: CALL 092E
        let:16 a20 = (-1 + a19) in
        M[a20] := 1A;
        let:16 a21 = (-1 + a20) in
        M[a21] := 82;
        #return-to: 1A82
        advance (17)
        #092E
        #instruction: CALL 1611
        let:16 a22 = (-1 + a21) in
        M[a22] := 09;
        let:16 a23 = (-1 + a22) in
        M[a23] := 31;
        #return-to: 0931
        advance (17)
        #1611
        #instruction: LD   L,00
        advance (7)
        #1613
        #instruction: LD   A,(2067)
        let:8 a24 = M[2067] in
        advance (13)
        #1616
        #instruction: LD   H,A
        advance (5)
        #1617
        #instruction: RET
        let:16 a25 = (1 + a23) in
        let:8 a26 = M[a23] in
        let:16 a27 = (1 + a25) in
        let:8 a28 = M[a25] in
        advance (10)
        A := a24;
        H := a24;
        L := 00;
        SPH := a27[15:8];
        SPL := a27[7:0];
        FlagS := a16[7];
        FlagZ := is_zero(a16);
        FlagA := a17[3];
        FlagP := parity(a16);
        FlagCY := false;
        jump ((a28,a26));
      } else {
        advance (10)
        #02ED
        #instruction: LD   A,(2067)
        let:8 a29 = M[2067] in
        advance (13)
        #02F0
        #instruction: PUSH PSW
        let:16 a30 = (-1 + (SPH,SPL)) in
        M[a30] := a29;
        let:16 a31 = (-1 + a30) in
        M[a31] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a16[7]),6,is_zero(a16)),4,a17[3]),2,parity(a16)),0,false);
        advance (11)
        #02F1
        #instruction: RRCA
        advance (4)
        #02F2
        #instruction: JP   CY,0332
        if (a29[0]) {
          advance (10)
          #0332
          #instruction: CALL 0209
          let:16 a32 = (-1 + a31) in
          M[a32] := 03;
          let:16 a33 = (-1 + a32) in
          M[a33] := 35;
          #return-to: 0335
          advance (17)
          #0209
          #instruction: LD   A,01
          advance (7)
          #020B
          #instruction: JP   021B
          advance (10)
          #021B
          #instruction: LD   DE,2142
          advance (10)
          #021E
          #instruction: LD   (2081),A
          M[2081] := 01;
          advance (13)
          #0221
          #instruction: LD   BC,1602
          advance (10)
          #0224
          #instruction: LD   HL,2806
          advance (10)
          #0227
          #instruction: LD   A,04
          advance (7)
          #0229
          #instruction: PUSH PSW
          let:16 a34 = (-1 + a33) in
          M[a34] := 04;
          let:16 a35 = (-1 + a34) in
          M[a35] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a16[7]),6,is_zero(a16)),4,a17[3]),2,parity(a16)),0,a29[0]);
          advance (11)
          #022A
          #instruction: PUSH BC
          let:16 a36 = (-1 + a35) in
          M[a36] := 16;
          let:16 a37 = (-1 + a36) in
          M[a37] := 02;
          advance (11)
          #022B
          #instruction: LD   A,(2081)
          let:8 a38 = M[2081] in
          advance (13)
          #022E
          #instruction: AND  A
          let:8 a39 = (a38 & a38) in
          let:8 a40 = (a38 | a38) in
          advance (4)
          #022F
          #instruction: JP   NZ,0242
          if (!is_zero(a39)) {
            advance (10)
            #0242
            #instruction: CALL 147C
            let:16 a41 = (-1 + a37) in
            M[a41] := 02;
            let:16 a42 = (-1 + a41) in
            M[a42] := 45;
            #return-to: 0245
            advance (17)
            #147C
            #instruction: PUSH BC
            let:16 a43 = (-1 + a42) in
            M[a43] := 16;
            let:16 a44 = (-1 + a43) in
            M[a44] := 02;
            advance (11)
            #147D
            #instruction: PUSH HL
            let:16 a45 = (-1 + a44) in
            M[a45] := 28;
            let:16 a46 = (-1 + a45) in
            M[a46] := 06;
            advance (11)
            #147E
            #instruction: LD   A,(HL)
            let:8 a47 = M[2806] in
            advance (7)
            #147F
            #instruction: LD   (DE),A
            M[2142] := a47;
            advance (7)
            #1480
            #instruction: INC  DE
            advance (5)
            #1481
            #instruction: INC  HL
            advance (5)
            #1482
            #instruction: DEC  C
            let:16 a48 = addWithCarry(!true,02,~00) in
            let:8 a49 = (02 & 0F) in
            let:8 a50 = (~00 & 0F) in
            let:16 a51 = addWithCarry(!true,a49,a50) in
            advance (5)
            #1483
            #instruction: JP   NZ,147E
            if (!is_zero(a48[7:0])) {
              advance (10)
              A := a47;
              B := 16;
              C := a48[7:0];
              D := 21;
              E := 43;
              H := 28;
              L := 07;
              SPH := a46[15:8];
              SPL := a46[7:0];
              FlagS := a48[7:0][7];
              FlagZ := is_zero(a48[7:0]);
              FlagA := a51[7:0][4];
              FlagP := parity(a48[7:0]);
              FlagCY := false;
              jump (147E);
            } else {
              advance (10)
              #1486
              #instruction: POP  HL
              let:16 a52 = (1 + a46) in
              let:8 a53 = M[a46] in
              let:16 a54 = (1 + a52) in
              let:8 a55 = M[a52] in
              advance (10)
              #1487
              #instruction: LD   BC,0020
              advance (10)
              #148A
              #instruction: ADD  HL,BC
              let:17 a56 = add17(0020,(a55,a53)) in
              advance (10)
              #148B
              #instruction: POP  BC
              let:16 a57 = (1 + a54) in
              let:8 a58 = M[a54] in
              let:16 a59 = (1 + a57) in
              let:8 a60 = M[a57] in
              advance (10)
              #148C
              #instruction: DEC  B
              let:16 a61 = addWithCarry(!true,a60,~00) in
              let:8 a62 = (a60 & 0F) in
              let:8 a63 = (~00 & 0F) in
              let:16 a64 = addWithCarry(!true,a62,a63) in
              advance (5)
              #148D
              #instruction: JP   NZ,147C
              if (!is_zero(a61[7:0])) {
                advance (10)
                A := a47;
                B := a61[7:0];
                C := a58;
                D := 21;
                E := 43;
                H := a56[15:0][15:8];
                L := a56[15:0][7:0];
                SPH := a59[15:8];
                SPL := a59[7:0];
                FlagS := a61[7:0][7];
                FlagZ := is_zero(a61[7:0]);
                FlagA := a64[7:0][4];
                FlagP := parity(a61[7:0]);
                FlagCY := a56[16];
                jump (147C);
              } else {
                advance (10)
                #1490
                #instruction: RET
                let:16 a65 = (1 + a59) in
                let:8 a66 = M[a59] in
                let:16 a67 = (1 + a65) in
                let:8 a68 = M[a65] in
                advance (10)
                A := a47;
                B := a61[7:0];
                C := a58;
                D := 21;
                E := 43;
                H := a56[15:0][15:8];
                L := a56[15:0][7:0];
                SPH := a67[15:8];
                SPL := a67[7:0];
                FlagS := a61[7:0][7];
                FlagZ := is_zero(a61[7:0]);
                FlagA := a64[7:0][4];
                FlagP := parity(a61[7:0]);
                FlagCY := a56[16];
                jump ((a68,a66));
              }
            }
          } else {
            advance (10)
            #0232
            #instruction: CALL 1A69
            let:16 a69 = (-1 + a37) in
            M[a69] := 02;
            let:16 a70 = (-1 + a69) in
            M[a70] := 35;
            #return-to: 0235
            advance (17)
            #1A69
            #instruction: PUSH BC
            let:16 a71 = (-1 + a70) in
            M[a71] := 16;
            let:16 a72 = (-1 + a71) in
            M[a72] := 02;
            advance (11)
            #1A6A
            #instruction: PUSH HL
            let:16 a73 = (-1 + a72) in
            M[a73] := 28;
            let:16 a74 = (-1 + a73) in
            M[a74] := 06;
            advance (11)
            #1A6B
            #instruction: LD   A,(DE)
            let:8 a75 = M[2142] in
            advance (7)
            #1A6C
            #instruction: OR   (HL)
            let:8 a76 = M[2806] in
            let:8 a77 = (a76 | a75) in
            advance (7)
            #1A6D
            #instruction: LD   (HL),A
            M[2806] := a77;
            advance (7)
            #1A6E
            #instruction: INC  DE
            advance (5)
            #1A6F
            #instruction: INC  HL
            advance (5)
            #1A70
            #instruction: DEC  C
            let:16 a78 = addWithCarry(!true,02,~00) in
            let:8 a79 = (02 & 0F) in
            let:8 a80 = (~00 & 0F) in
            let:16 a81 = addWithCarry(!true,a79,a80) in
            advance (5)
            #1A71
            #instruction: JP   NZ,1A6B
            if (!is_zero(a78[7:0])) {
              advance (10)
              A := a77;
              B := 16;
              C := a78[7:0];
              D := 21;
              E := 43;
              H := 28;
              L := 07;
              SPH := a74[15:8];
              SPL := a74[7:0];
              FlagS := a78[7:0][7];
              FlagZ := is_zero(a78[7:0]);
              FlagA := a81[7:0][4];
              FlagP := parity(a78[7:0]);
              FlagCY := false;
              jump (1A6B);
            } else {
              advance (10)
              #1A74
              #instruction: POP  HL
              let:16 a82 = (1 + a74) in
              let:8 a83 = M[a74] in
              let:16 a84 = (1 + a82) in
              let:8 a85 = M[a82] in
              advance (10)
              #1A75
              #instruction: LD   BC,0020
              advance (10)
              #1A78
              #instruction: ADD  HL,BC
              let:17 a86 = add17(0020,(a85,a83)) in
              advance (10)
              #1A79
              #instruction: POP  BC
              let:16 a87 = (1 + a84) in
              let:8 a88 = M[a84] in
              let:16 a89 = (1 + a87) in
              let:8 a90 = M[a87] in
              advance (10)
              #1A7A
              #instruction: DEC  B
              let:16 a91 = addWithCarry(!true,a90,~00) in
              let:8 a92 = (a90 & 0F) in
              let:8 a93 = (~00 & 0F) in
              let:16 a94 = addWithCarry(!true,a92,a93) in
              advance (5)
              #1A7B
              #instruction: JP   NZ,1A69
              if (!is_zero(a91[7:0])) {
                advance (10)
                A := a77;
                B := a91[7:0];
                C := a88;
                D := 21;
                E := 43;
                H := a86[15:0][15:8];
                L := a86[15:0][7:0];
                SPH := a89[15:8];
                SPL := a89[7:0];
                FlagS := a91[7:0][7];
                FlagZ := is_zero(a91[7:0]);
                FlagA := a94[7:0][4];
                FlagP := parity(a91[7:0]);
                FlagCY := a86[16];
                jump (1A69);
              } else {
                advance (10)
                #1A7E
                #instruction: RET
                let:16 a95 = (1 + a89) in
                let:8 a96 = M[a89] in
                let:16 a97 = (1 + a95) in
                let:8 a98 = M[a95] in
                advance (10)
                A := a77;
                B := a91[7:0];
                C := a88;
                D := 21;
                E := 43;
                H := a86[15:0][15:8];
                L := a86[15:0][7:0];
                SPH := a97[15:8];
                SPL := a97[7:0];
                FlagS := a91[7:0][7];
                FlagZ := is_zero(a91[7:0]);
                FlagA := a94[7:0][4];
                FlagP := parity(a91[7:0]);
                FlagCY := a86[16];
                jump ((a98,a96));
              }
            }
          }
        } else {
          advance (10)
          #02F5
          #instruction: CALL 020E
          let:16 a99 = (-1 + a31) in
          M[a99] := 02;
          let:16 a100 = (-1 + a99) in
          M[a100] := F8;
          #return-to: 02F8
          advance (17)
          #020E
          #instruction: LD   A,01
          advance (7)
          #0210
          #instruction: JP   0214
          advance (10)
          #0214
          #instruction: LD   DE,2242
          advance (10)
          #0217
          #instruction: JP   021E
          advance (10)
          #021E
          #instruction: LD   (2081),A
          M[2081] := 01;
          advance (13)
          #0221
          #instruction: LD   BC,1602
          advance (10)
          #0224
          #instruction: LD   HL,2806
          advance (10)
          #0227
          #instruction: LD   A,04
          advance (7)
          #0229
          #instruction: PUSH PSW
          let:16 a101 = (-1 + a100) in
          M[a101] := 04;
          let:16 a102 = (-1 + a101) in
          M[a102] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a16[7]),6,is_zero(a16)),4,a17[3]),2,parity(a16)),0,a29[0]);
          advance (11)
          #022A
          #instruction: PUSH BC
          let:16 a103 = (-1 + a102) in
          M[a103] := 16;
          let:16 a104 = (-1 + a103) in
          M[a104] := 02;
          advance (11)
          #022B
          #instruction: LD   A,(2081)
          let:8 a105 = M[2081] in
          advance (13)
          #022E
          #instruction: AND  A
          let:8 a106 = (a105 & a105) in
          let:8 a107 = (a105 | a105) in
          advance (4)
          #022F
          #instruction: JP   NZ,0242
          if (!is_zero(a106)) {
            advance (10)
            #0242
            #instruction: CALL 147C
            let:16 a108 = (-1 + a104) in
            M[a108] := 02;
            let:16 a109 = (-1 + a108) in
            M[a109] := 45;
            #return-to: 0245
            advance (17)
            #147C
            #instruction: PUSH BC
            let:16 a110 = (-1 + a109) in
            M[a110] := 16;
            let:16 a111 = (-1 + a110) in
            M[a111] := 02;
            advance (11)
            #147D
            #instruction: PUSH HL
            let:16 a112 = (-1 + a111) in
            M[a112] := 28;
            let:16 a113 = (-1 + a112) in
            M[a113] := 06;
            advance (11)
            #147E
            #instruction: LD   A,(HL)
            let:8 a114 = M[2806] in
            advance (7)
            #147F
            #instruction: LD   (DE),A
            M[2242] := a114;
            advance (7)
            #1480
            #instruction: INC  DE
            advance (5)
            #1481
            #instruction: INC  HL
            advance (5)
            #1482
            #instruction: DEC  C
            let:16 a115 = addWithCarry(!true,02,~00) in
            let:8 a116 = (02 & 0F) in
            let:8 a117 = (~00 & 0F) in
            let:16 a118 = addWithCarry(!true,a116,a117) in
            advance (5)
            #1483
            #instruction: JP   NZ,147E
            if (!is_zero(a115[7:0])) {
              advance (10)
              A := a114;
              B := 16;
              C := a115[7:0];
              D := 22;
              E := 43;
              H := 28;
              L := 07;
              SPH := a113[15:8];
              SPL := a113[7:0];
              FlagS := a115[7:0][7];
              FlagZ := is_zero(a115[7:0]);
              FlagA := a118[7:0][4];
              FlagP := parity(a115[7:0]);
              FlagCY := false;
              jump (147E);
            } else {
              advance (10)
              #1486
              #instruction: POP  HL
              let:16 a119 = (1 + a113) in
              let:8 a120 = M[a113] in
              let:16 a121 = (1 + a119) in
              let:8 a122 = M[a119] in
              advance (10)
              #1487
              #instruction: LD   BC,0020
              advance (10)
              #148A
              #instruction: ADD  HL,BC
              let:17 a123 = add17(0020,(a122,a120)) in
              advance (10)
              #148B
              #instruction: POP  BC
              let:16 a124 = (1 + a121) in
              let:8 a125 = M[a121] in
              let:16 a126 = (1 + a124) in
              let:8 a127 = M[a124] in
              advance (10)
              #148C
              #instruction: DEC  B
              let:16 a128 = addWithCarry(!true,a127,~00) in
              let:8 a129 = (a127 & 0F) in
              let:8 a130 = (~00 & 0F) in
              let:16 a131 = addWithCarry(!true,a129,a130) in
              advance (5)
              #148D
              #instruction: JP   NZ,147C
              if (!is_zero(a128[7:0])) {
                advance (10)
                A := a114;
                B := a128[7:0];
                C := a125;
                D := 22;
                E := 43;
                H := a123[15:0][15:8];
                L := a123[15:0][7:0];
                SPH := a126[15:8];
                SPL := a126[7:0];
                FlagS := a128[7:0][7];
                FlagZ := is_zero(a128[7:0]);
                FlagA := a131[7:0][4];
                FlagP := parity(a128[7:0]);
                FlagCY := a123[16];
                jump (147C);
              } else {
                advance (10)
                #1490
                #instruction: RET
                let:16 a132 = (1 + a126) in
                let:8 a133 = M[a126] in
                let:16 a134 = (1 + a132) in
                let:8 a135 = M[a132] in
                advance (10)
                A := a114;
                B := a128[7:0];
                C := a125;
                D := 22;
                E := 43;
                H := a123[15:0][15:8];
                L := a123[15:0][7:0];
                SPH := a134[15:8];
                SPL := a134[7:0];
                FlagS := a128[7:0][7];
                FlagZ := is_zero(a128[7:0]);
                FlagA := a131[7:0][4];
                FlagP := parity(a128[7:0]);
                FlagCY := a123[16];
                jump ((a135,a133));
              }
            }
          } else {
            advance (10)
            #0232
            #instruction: CALL 1A69
            let:16 a136 = (-1 + a104) in
            M[a136] := 02;
            let:16 a137 = (-1 + a136) in
            M[a137] := 35;
            #return-to: 0235
            advance (17)
            #1A69
            #instruction: PUSH BC
            let:16 a138 = (-1 + a137) in
            M[a138] := 16;
            let:16 a139 = (-1 + a138) in
            M[a139] := 02;
            advance (11)
            #1A6A
            #instruction: PUSH HL
            let:16 a140 = (-1 + a139) in
            M[a140] := 28;
            let:16 a141 = (-1 + a140) in
            M[a141] := 06;
            advance (11)
            #1A6B
            #instruction: LD   A,(DE)
            let:8 a142 = M[2242] in
            advance (7)
            #1A6C
            #instruction: OR   (HL)
            let:8 a143 = M[2806] in
            let:8 a144 = (a143 | a142) in
            advance (7)
            #1A6D
            #instruction: LD   (HL),A
            M[2806] := a144;
            advance (7)
            #1A6E
            #instruction: INC  DE
            advance (5)
            #1A6F
            #instruction: INC  HL
            advance (5)
            #1A70
            #instruction: DEC  C
            let:16 a145 = addWithCarry(!true,02,~00) in
            let:8 a146 = (02 & 0F) in
            let:8 a147 = (~00 & 0F) in
            let:16 a148 = addWithCarry(!true,a146,a147) in
            advance (5)
            #1A71
            #instruction: JP   NZ,1A6B
            if (!is_zero(a145[7:0])) {
              advance (10)
              A := a144;
              B := 16;
              C := a145[7:0];
              D := 22;
              E := 43;
              H := 28;
              L := 07;
              SPH := a141[15:8];
              SPL := a141[7:0];
              FlagS := a145[7:0][7];
              FlagZ := is_zero(a145[7:0]);
              FlagA := a148[7:0][4];
              FlagP := parity(a145[7:0]);
              FlagCY := false;
              jump (1A6B);
            } else {
              advance (10)
              #1A74
              #instruction: POP  HL
              let:16 a149 = (1 + a141) in
              let:8 a150 = M[a141] in
              let:16 a151 = (1 + a149) in
              let:8 a152 = M[a149] in
              advance (10)
              #1A75
              #instruction: LD   BC,0020
              advance (10)
              #1A78
              #instruction: ADD  HL,BC
              let:17 a153 = add17(0020,(a152,a150)) in
              advance (10)
              #1A79
              #instruction: POP  BC
              let:16 a154 = (1 + a151) in
              let:8 a155 = M[a151] in
              let:16 a156 = (1 + a154) in
              let:8 a157 = M[a154] in
              advance (10)
              #1A7A
              #instruction: DEC  B
              let:16 a158 = addWithCarry(!true,a157,~00) in
              let:8 a159 = (a157 & 0F) in
              let:8 a160 = (~00 & 0F) in
              let:16 a161 = addWithCarry(!true,a159,a160) in
              advance (5)
              #1A7B
              #instruction: JP   NZ,1A69
              if (!is_zero(a158[7:0])) {
                advance (10)
                A := a144;
                B := a158[7:0];
                C := a155;
                D := 22;
                E := 43;
                H := a153[15:0][15:8];
                L := a153[15:0][7:0];
                SPH := a156[15:8];
                SPL := a156[7:0];
                FlagS := a158[7:0][7];
                FlagZ := is_zero(a158[7:0]);
                FlagA := a161[7:0][4];
                FlagP := parity(a158[7:0]);
                FlagCY := a153[16];
                jump (1A69);
              } else {
                advance (10)
                #1A7E
                #instruction: RET
                let:16 a162 = (1 + a156) in
                let:8 a163 = M[a156] in
                let:16 a164 = (1 + a162) in
                let:8 a165 = M[a162] in
                advance (10)
                A := a144;
                B := a158[7:0];
                C := a155;
                D := 22;
                E := 43;
                H := a153[15:0][15:8];
                L := a153[15:0][7:0];
                SPH := a164[15:8];
                SPL := a164[7:0];
                FlagS := a158[7:0][7];
                FlagZ := is_zero(a158[7:0]);
                FlagA := a161[7:0][4];
                FlagP := parity(a158[7:0]);
                FlagCY := a153[16];
                jump ((a165,a163));
              }
            }
          }
        }
      }
    }

02F8:

    #02F8
    #instruction: CALL 0878
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := FB;
    #return-to: 02FB
    advance (17)
    #0878
    #instruction: LD   A,(2008)
    let:8 a3 = M[2008] in
    advance (13)
    #087B
    #instruction: LD   B,A
    advance (5)
    #087C
    #instruction: LD   HL,(2009)
    let:8 a4 = M[2009] in
    let:8 a5 = M[200A] in
    advance (16)
    #087F
    #instruction: EX   DE,HL
    advance (4)
    #0880
    #instruction: JP   0886
    advance (10)
    #0886
    #instruction: LD   A,(2067)
    let:8 a6 = M[2067] in
    advance (13)
    #0889
    #instruction: LD   H,A
    advance (5)
    #088A
    #instruction: LD   L,FC
    advance (7)
    #088C
    #instruction: RET
    let:16 a7 = (1 + a2) in
    let:8 a8 = M[a2] in
    let:16 a9 = (1 + a7) in
    let:8 a10 = M[a7] in
    advance (10)
    A := a6;
    B := a3;
    D := a5;
    E := a4;
    H := a6;
    L := FC;
    SPH := a9[15:8];
    SPL := a9[7:0];
    jump ((a10,a8));

02FB:

    #02FB
    #instruction: LD   (HL),E
    M[(H,L)] := E;
    advance (7)
    #02FC
    #instruction: INC  HL
    let:16 a1 = (1 + (H,L)) in
    advance (5)
    #02FD
    #instruction: LD   (HL),D
    M[a1] := D;
    advance (7)
    #02FE
    #instruction: DEC  HL
    let:16 a2 = (-1 + a1) in
    advance (5)
    #02FF
    #instruction: DEC  HL
    let:16 a3 = (-1 + a2) in
    advance (5)
    #0300
    #instruction: LD   (HL),B
    M[a3] := B;
    advance (7)
    #0301
    #instruction: NOP
    advance (4)
    #0302
    #instruction: CALL 01E4
    let:16 a4 = (-1 + (SPH,SPL)) in
    M[a4] := 03;
    let:16 a5 = (-1 + a4) in
    M[a5] := 05;
    #return-to: 0305
    advance (17)
    #01E4
    #instruction: LD   B,C0
    advance (7)
    #01E6
    #instruction: LD   DE,1B00
    advance (10)
    #01E9
    #instruction: LD   HL,2000
    advance (10)
    #01EC
    #instruction: JP   1A32
    advance (10)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2000] := 01;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a6 = addWithCarry(!true,C0,~00) in
    let:8 a7 = (C0 & 0F) in
    let:8 a8 = (~00 & 0F) in
    let:16 a9 = addWithCarry(!true,a7,a8) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a6[7:0])) {
      advance (10)
      A := 01;
      B := a6[7:0];
      D := 1B;
      E := 01;
      H := 20;
      L := 01;
      SPH := a5[15:8];
      SPL := a5[7:0];
      FlagS := a6[7:0][7];
      FlagZ := is_zero(a6[7:0]);
      FlagA := a9[7:0][4];
      FlagP := parity(a6[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a10 = (1 + a5) in
      let:8 a11 = M[a5] in
      let:16 a12 = (1 + a10) in
      let:8 a13 = M[a10] in
      advance (10)
      A := 01;
      B := a6[7:0];
      D := 1B;
      E := 01;
      H := 20;
      L := 01;
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagS := a6[7:0][7];
      FlagZ := is_zero(a6[7:0]);
      FlagA := a9[7:0][4];
      FlagP := parity(a6[7:0]);
      jump ((a13,a11));
    }

0305:

    #0305
    #instruction: POP  PSW
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0306
    #instruction: RRCA
    advance (4)
    #0307
    #instruction: LD   A,21
    advance (7)
    #0309
    #instruction: LD   B,00
    advance (7)
    #030B
    #instruction: JP   NC,0312
    if (!a4[0]) {
      advance (10)
      #0312
      #instruction: LD   (2067),A
      M[2067] := 21;
      advance (13)
      #0315
      #instruction: CALL 0AB6
      let:16 a5 = (-1 + a3) in
      M[a5] := 03;
      let:16 a6 = (-1 + a5) in
      M[a6] := 18;
      #return-to: 0318
      advance (17)
      #0AB6
      #instruction: LD   A,80
      advance (7)
      #0AB8
      #instruction: JP   0AD7
      advance (10)
      #0AD7
      #instruction: LD   (20C0),A
      M[20C0] := 80;
      advance (13)
      #0ADA
      #instruction: LD   A,(20C0)
      let:8 a7 = M[20C0] in
      advance (13)
      #0ADD
      #instruction: AND  A
      let:8 a8 = (a7 & a7) in
      let:8 a9 = (a7 | a7) in
      advance (4)
      #0ADE
      #instruction: JP   NZ,0ADA
      if (!is_zero(a8)) {
        advance (10)
        A := a8;
        B := 00;
        SPH := a6[15:8];
        SPL := a6[7:0];
        FlagS := a8[7];
        FlagZ := is_zero(a8);
        FlagA := a9[3];
        FlagP := parity(a8);
        FlagCY := false;
        jump (0ADA);
      } else {
        advance (10)
        #0AE1
        #instruction: RET
        let:16 a10 = (1 + a6) in
        let:8 a11 = M[a6] in
        let:16 a12 = (1 + a10) in
        let:8 a13 = M[a10] in
        advance (10)
        A := a8;
        B := 00;
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a8[7];
        FlagZ := is_zero(a8);
        FlagA := a9[3];
        FlagP := parity(a8);
        FlagCY := false;
        jump ((a13,a11));
      }
    } else {
      advance (10)
      #030E
      #instruction: LD   B,20
      advance (7)
      #0310
      #instruction: LD   A,22
      advance (7)
      #0312
      #instruction: LD   (2067),A
      M[2067] := 22;
      advance (13)
      #0315
      #instruction: CALL 0AB6
      let:16 a14 = (-1 + a3) in
      M[a14] := 03;
      let:16 a15 = (-1 + a14) in
      M[a15] := 18;
      #return-to: 0318
      advance (17)
      #0AB6
      #instruction: LD   A,80
      advance (7)
      #0AB8
      #instruction: JP   0AD7
      advance (10)
      #0AD7
      #instruction: LD   (20C0),A
      M[20C0] := 80;
      advance (13)
      #0ADA
      #instruction: LD   A,(20C0)
      let:8 a16 = M[20C0] in
      advance (13)
      #0ADD
      #instruction: AND  A
      let:8 a17 = (a16 & a16) in
      let:8 a18 = (a16 | a16) in
      advance (4)
      #0ADE
      #instruction: JP   NZ,0ADA
      if (!is_zero(a17)) {
        advance (10)
        A := a17;
        B := 20;
        SPH := a15[15:8];
        SPL := a15[7:0];
        FlagS := a17[7];
        FlagZ := is_zero(a17);
        FlagA := a18[3];
        FlagP := parity(a17);
        FlagCY := false;
        jump (0ADA);
      } else {
        advance (10)
        #0AE1
        #instruction: RET
        let:16 a19 = (1 + a15) in
        let:8 a20 = M[a15] in
        let:16 a21 = (1 + a19) in
        let:8 a22 = M[a19] in
        advance (10)
        A := a17;
        B := 20;
        SPH := a21[15:8];
        SPL := a21[7:0];
        FlagS := a17[7];
        FlagZ := is_zero(a17);
        FlagA := a18[3];
        FlagP := parity(a17);
        FlagCY := false;
        jump ((a22,a20));
      }
    }

0318:

    #0318
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #0319
    #instruction: LD   (2011),A
    M[2011] := a1;
    advance (13)
    #031C
    #instruction: LD   A,B
    advance (5)
    #031D
    #instruction: OUT  05
    sound_control(FleetMovement1,B[0]);
    sound_control(FleetMovement2,B[1]);
    sound_control(FleetMovement3,B[2]);
    sound_control(FleetMovement4,B[3]);
    sound_control(UfoHit,B[4]);
    advance (10)
    #031F
    #instruction: INC  A
    let:16 a2 = addWithCarry(true,B,00) in
    let:8 a3 = (B & 0F) in
    let:8 a4 = (00 & 0F) in
    let:16 a5 = addWithCarry(true,a3,a4) in
    advance (5)
    #0320
    #instruction: LD   (2098),A
    M[2098] := a2[7:0];
    advance (13)
    #0323
    #instruction: CALL 09D6
    let:16 a6 = (-1 + (SPH,SPL)) in
    M[a6] := 03;
    let:16 a7 = (-1 + a6) in
    M[a7] := 26;
    #return-to: 0326
    advance (17)
    #09D6
    #instruction: LD   HL,2402
    advance (10)
    #09D9
    #instruction: LD   (HL),00
    M[2402] := 00;
    advance (10)
    #09DB
    #instruction: INC  HL
    advance (5)
    #09DC
    #instruction: LD   A,L
    advance (5)
    #09DD
    #instruction: AND  1F
    let:8 a8 = (1F & 03) in
    let:8 a9 = (1F | 03) in
    advance (7)
    #09DF
    #instruction: CP   1C
    let:16 a10 = addWithCarry(!false,a8,~1C) in
    let:8 a11 = (a8 & 0F) in
    let:8 a12 = (~1C & 0F) in
    let:16 a13 = addWithCarry(!false,a11,a12) in
    advance (7)
    #09E1
    #instruction: JP   CY,09E8
    if (!a10[15:8][0]) {
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a14 = addWithCarry(!false,24,~40) in
      let:8 a15 = (24 & 0F) in
      let:8 a16 = (~40 & 0F) in
      let:16 a17 = addWithCarry(!false,a15,a16) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a14[15:8][0]) {
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a7[15:8];
        SPL := a7[7:0];
        FlagS := a14[7:0][7];
        FlagZ := is_zero(a14[7:0]);
        FlagA := a17[7:0][4];
        FlagP := parity(a14[7:0]);
        FlagCY := !a14[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a18 = (1 + a7) in
        let:8 a19 = M[a7] in
        let:16 a20 = (1 + a18) in
        let:8 a21 = M[a18] in
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a20[15:8];
        SPL := a20[7:0];
        FlagS := a14[7:0][7];
        FlagZ := is_zero(a14[7:0]);
        FlagA := a17[7:0][4];
        FlagP := parity(a14[7:0]);
        FlagCY := !a14[15:8][0];
        jump ((a21,a19));
      }
    } else {
      advance (10)
      #09E4
      #instruction: LD   DE,0006
      advance (10)
      #09E7
      #instruction: ADD  HL,DE
      let:17 a22 = add17(0006,2403) in
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a23 = addWithCarry(!false,a22[15:0][15:8],~40) in
      let:8 a24 = (a22[15:0][15:8] & 0F) in
      let:8 a25 = (~40 & 0F) in
      let:16 a26 = addWithCarry(!false,a24,a25) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a23[15:8][0]) {
        advance (10)
        A := a22[15:0][15:8];
        D := 00;
        E := 06;
        H := a22[15:0][15:8];
        L := a22[15:0][7:0];
        SPH := a7[15:8];
        SPL := a7[7:0];
        FlagS := a23[7:0][7];
        FlagZ := is_zero(a23[7:0]);
        FlagA := a26[7:0][4];
        FlagP := parity(a23[7:0]);
        FlagCY := !a23[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a27 = (1 + a7) in
        let:8 a28 = M[a7] in
        let:16 a29 = (1 + a27) in
        let:8 a30 = M[a27] in
        advance (10)
        A := a22[15:0][15:8];
        D := 00;
        E := 06;
        H := a22[15:0][15:8];
        L := a22[15:0][7:0];
        SPH := a29[15:8];
        SPL := a29[7:0];
        FlagS := a23[7:0][7];
        FlagZ := is_zero(a23[7:0]);
        FlagA := a26[7:0][4];
        FlagP := parity(a23[7:0]);
        FlagCY := !a23[15:8][0];
        jump ((a30,a28));
      }
    }

0326:

    #0326
    #instruction: CALL 1A7F
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 29;
    #return-to: 0329
    advance (17)
    #1A7F
    #instruction: CALL 092E
    let:16 a3 = (-1 + a2) in
    M[a3] := 1A;
    let:16 a4 = (-1 + a3) in
    M[a4] := 82;
    #return-to: 1A82
    advance (17)
    #092E
    #instruction: CALL 1611
    let:16 a5 = (-1 + a4) in
    M[a5] := 09;
    let:16 a6 = (-1 + a5) in
    M[a6] := 31;
    #return-to: 0931
    advance (17)
    #1611
    #instruction: LD   L,00
    advance (7)
    #1613
    #instruction: LD   A,(2067)
    let:8 a7 = M[2067] in
    advance (13)
    #1616
    #instruction: LD   H,A
    advance (5)
    #1617
    #instruction: RET
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    let:16 a10 = (1 + a8) in
    let:8 a11 = M[a8] in
    advance (10)
    A := a7;
    H := a7;
    L := 00;
    SPH := a10[15:8];
    SPL := a10[7:0];
    jump ((a11,a9));

0329:

    #0329
    #instruction: JP   07F9
    advance (10)
    jump (07F9);

032F:

    #032F
    #instruction: JP   0817
    advance (10)
    jump (0817);

0335:

    #0335
    #instruction: JP   02F8
    advance (10)
    jump (02F8);

0366:

    #0366
    #instruction: RLCA
    advance (4)
    #0367
    #instruction: RLCA
    advance (4)
    #0368
    #instruction: JP   CY,0381
    if (updateBit((A << 01),0,A[7])[7]) {
      advance (10)
      #0381
      #instruction: LD   A,B
      advance (5)
      #0382
      #instruction: CP   D9
      let:16 a1 = addWithCarry(!false,B,~D9) in
      let:8 a2 = (B & 0F) in
      let:8 a3 = (~D9 & 0F) in
      let:16 a4 = addWithCarry(!false,a2,a3) in
      advance (7)
      #0384
      #instruction: JP   Z,036F
      if (is_zero(a1[7:0])) {
        advance (10)
        #036F
        #instruction: LD   HL,2018
        advance (10)
        #0372
        #instruction: CALL 1A3B
        let:16 a5 = (-1 + (SPH,SPL)) in
        M[a5] := 03;
        let:16 a6 = (-1 + a5) in
        M[a6] := 75;
        #return-to: 0375
        advance (17)
        #1A3B
        #instruction: LD   E,(HL)
        let:8 a7 = M[2018] in
        advance (7)
        #1A3C
        #instruction: INC  HL
        advance (5)
        #1A3D
        #instruction: LD   D,(HL)
        let:8 a8 = M[2019] in
        advance (7)
        #1A3E
        #instruction: INC  HL
        advance (5)
        #1A3F
        #instruction: LD   A,(HL)
        let:8 a9 = M[201A] in
        advance (7)
        #1A40
        #instruction: INC  HL
        advance (5)
        #1A41
        #instruction: LD   C,(HL)
        let:8 a10 = M[201B] in
        advance (7)
        #1A42
        #instruction: INC  HL
        advance (5)
        #1A43
        #instruction: LD   B,(HL)
        let:8 a11 = M[201C] in
        advance (7)
        #1A44
        #instruction: LD   H,C
        advance (5)
        #1A45
        #instruction: LD   L,A
        advance (5)
        #1A46
        #instruction: RET
        let:16 a12 = (1 + a6) in
        let:8 a13 = M[a6] in
        let:16 a14 = (1 + a12) in
        let:8 a15 = M[a12] in
        advance (10)
        A := a9;
        B := a11;
        C := a10;
        D := a8;
        E := a7;
        H := a10;
        L := a9;
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagS := a1[7:0][7];
        FlagZ := is_zero(a1[7:0]);
        FlagA := a4[7:0][4];
        FlagP := parity(a1[7:0]);
        FlagCY := !a1[15:8][0];
        jump ((a15,a13));
      } else {
        advance (10)
        #0387
        #instruction: INC  A
        let:16 a16 = addWithCarry(true,B,00) in
        let:8 a17 = (B & 0F) in
        let:8 a18 = (00 & 0F) in
        let:16 a19 = addWithCarry(true,a17,a18) in
        advance (5)
        #0388
        #instruction: LD   (201B),A
        M[201B] := a16[7:0];
        advance (13)
        #038B
        #instruction: JP   036F
        advance (10)
        #036F
        #instruction: LD   HL,2018
        advance (10)
        #0372
        #instruction: CALL 1A3B
        let:16 a20 = (-1 + (SPH,SPL)) in
        M[a20] := 03;
        let:16 a21 = (-1 + a20) in
        M[a21] := 75;
        #return-to: 0375
        advance (17)
        #1A3B
        #instruction: LD   E,(HL)
        let:8 a22 = M[2018] in
        advance (7)
        #1A3C
        #instruction: INC  HL
        advance (5)
        #1A3D
        #instruction: LD   D,(HL)
        let:8 a23 = M[2019] in
        advance (7)
        #1A3E
        #instruction: INC  HL
        advance (5)
        #1A3F
        #instruction: LD   A,(HL)
        let:8 a24 = M[201A] in
        advance (7)
        #1A40
        #instruction: INC  HL
        advance (5)
        #1A41
        #instruction: LD   C,(HL)
        let:8 a25 = M[201B] in
        advance (7)
        #1A42
        #instruction: INC  HL
        advance (5)
        #1A43
        #instruction: LD   B,(HL)
        let:8 a26 = M[201C] in
        advance (7)
        #1A44
        #instruction: LD   H,C
        advance (5)
        #1A45
        #instruction: LD   L,A
        advance (5)
        #1A46
        #instruction: RET
        let:16 a27 = (1 + a21) in
        let:8 a28 = M[a21] in
        let:16 a29 = (1 + a27) in
        let:8 a30 = M[a27] in
        advance (10)
        A := a24;
        B := a26;
        C := a25;
        D := a23;
        E := a22;
        H := a25;
        L := a24;
        SPH := a29[15:8];
        SPL := a29[7:0];
        FlagS := a16[7:0][7];
        FlagZ := is_zero(a16[7:0]);
        FlagA := a19[7:0][4];
        FlagP := parity(a16[7:0]);
        FlagCY := !a1[15:8][0];
        jump ((a30,a28));
      }
    } else {
      advance (10)
      #036B
      #instruction: RLCA
      advance (4)
      #036C
      #instruction: JP   CY,038E
      if (updateBit((updateBit((A << 01),0,A[7]) << 01),0,updateBit((A << 01),0,A[7])[7])[7]) {
        advance (10)
        #038E
        #instruction: LD   A,B
        advance (5)
        #038F
        #instruction: CP   30
        let:16 a31 = addWithCarry(!false,B,~30) in
        let:8 a32 = (B & 0F) in
        let:8 a33 = (~30 & 0F) in
        let:16 a34 = addWithCarry(!false,a32,a33) in
        advance (7)
        #0391
        #instruction: JP   Z,036F
        if (is_zero(a31[7:0])) {
          advance (10)
          #036F
          #instruction: LD   HL,2018
          advance (10)
          #0372
          #instruction: CALL 1A3B
          let:16 a35 = (-1 + (SPH,SPL)) in
          M[a35] := 03;
          let:16 a36 = (-1 + a35) in
          M[a36] := 75;
          #return-to: 0375
          advance (17)
          #1A3B
          #instruction: LD   E,(HL)
          let:8 a37 = M[2018] in
          advance (7)
          #1A3C
          #instruction: INC  HL
          advance (5)
          #1A3D
          #instruction: LD   D,(HL)
          let:8 a38 = M[2019] in
          advance (7)
          #1A3E
          #instruction: INC  HL
          advance (5)
          #1A3F
          #instruction: LD   A,(HL)
          let:8 a39 = M[201A] in
          advance (7)
          #1A40
          #instruction: INC  HL
          advance (5)
          #1A41
          #instruction: LD   C,(HL)
          let:8 a40 = M[201B] in
          advance (7)
          #1A42
          #instruction: INC  HL
          advance (5)
          #1A43
          #instruction: LD   B,(HL)
          let:8 a41 = M[201C] in
          advance (7)
          #1A44
          #instruction: LD   H,C
          advance (5)
          #1A45
          #instruction: LD   L,A
          advance (5)
          #1A46
          #instruction: RET
          let:16 a42 = (1 + a36) in
          let:8 a43 = M[a36] in
          let:16 a44 = (1 + a42) in
          let:8 a45 = M[a42] in
          advance (10)
          A := a39;
          B := a41;
          C := a40;
          D := a38;
          E := a37;
          H := a40;
          L := a39;
          SPH := a44[15:8];
          SPL := a44[7:0];
          FlagS := a31[7:0][7];
          FlagZ := is_zero(a31[7:0]);
          FlagA := a34[7:0][4];
          FlagP := parity(a31[7:0]);
          FlagCY := !a31[15:8][0];
          jump ((a45,a43));
        } else {
          advance (10)
          #0394
          #instruction: DEC  A
          let:16 a46 = addWithCarry(!true,B,~00) in
          let:8 a47 = (B & 0F) in
          let:8 a48 = (~00 & 0F) in
          let:16 a49 = addWithCarry(!true,a47,a48) in
          advance (5)
          #0395
          #instruction: LD   (201B),A
          M[201B] := a46[7:0];
          advance (13)
          #0398
          #instruction: JP   036F
          advance (10)
          #036F
          #instruction: LD   HL,2018
          advance (10)
          #0372
          #instruction: CALL 1A3B
          let:16 a50 = (-1 + (SPH,SPL)) in
          M[a50] := 03;
          let:16 a51 = (-1 + a50) in
          M[a51] := 75;
          #return-to: 0375
          advance (17)
          #1A3B
          #instruction: LD   E,(HL)
          let:8 a52 = M[2018] in
          advance (7)
          #1A3C
          #instruction: INC  HL
          advance (5)
          #1A3D
          #instruction: LD   D,(HL)
          let:8 a53 = M[2019] in
          advance (7)
          #1A3E
          #instruction: INC  HL
          advance (5)
          #1A3F
          #instruction: LD   A,(HL)
          let:8 a54 = M[201A] in
          advance (7)
          #1A40
          #instruction: INC  HL
          advance (5)
          #1A41
          #instruction: LD   C,(HL)
          let:8 a55 = M[201B] in
          advance (7)
          #1A42
          #instruction: INC  HL
          advance (5)
          #1A43
          #instruction: LD   B,(HL)
          let:8 a56 = M[201C] in
          advance (7)
          #1A44
          #instruction: LD   H,C
          advance (5)
          #1A45
          #instruction: LD   L,A
          advance (5)
          #1A46
          #instruction: RET
          let:16 a57 = (1 + a51) in
          let:8 a58 = M[a51] in
          let:16 a59 = (1 + a57) in
          let:8 a60 = M[a57] in
          advance (10)
          A := a54;
          B := a56;
          C := a55;
          D := a53;
          E := a52;
          H := a55;
          L := a54;
          SPH := a59[15:8];
          SPL := a59[7:0];
          FlagS := a46[7:0][7];
          FlagZ := is_zero(a46[7:0]);
          FlagA := a49[7:0][4];
          FlagP := parity(a46[7:0]);
          FlagCY := !a31[15:8][0];
          jump ((a60,a58));
        }
      } else {
        advance (10)
        #036F
        #instruction: LD   HL,2018
        advance (10)
        #0372
        #instruction: CALL 1A3B
        let:16 a61 = (-1 + (SPH,SPL)) in
        M[a61] := 03;
        let:16 a62 = (-1 + a61) in
        M[a62] := 75;
        #return-to: 0375
        advance (17)
        #1A3B
        #instruction: LD   E,(HL)
        let:8 a63 = M[2018] in
        advance (7)
        #1A3C
        #instruction: INC  HL
        advance (5)
        #1A3D
        #instruction: LD   D,(HL)
        let:8 a64 = M[2019] in
        advance (7)
        #1A3E
        #instruction: INC  HL
        advance (5)
        #1A3F
        #instruction: LD   A,(HL)
        let:8 a65 = M[201A] in
        advance (7)
        #1A40
        #instruction: INC  HL
        advance (5)
        #1A41
        #instruction: LD   C,(HL)
        let:8 a66 = M[201B] in
        advance (7)
        #1A42
        #instruction: INC  HL
        advance (5)
        #1A43
        #instruction: LD   B,(HL)
        let:8 a67 = M[201C] in
        advance (7)
        #1A44
        #instruction: LD   H,C
        advance (5)
        #1A45
        #instruction: LD   L,A
        advance (5)
        #1A46
        #instruction: RET
        let:16 a68 = (1 + a62) in
        let:8 a69 = M[a62] in
        let:16 a70 = (1 + a68) in
        let:8 a71 = M[a68] in
        advance (10)
        A := a65;
        B := a67;
        C := a66;
        D := a64;
        E := a63;
        H := a66;
        L := a65;
        SPH := a70[15:8];
        SPL := a70[7:0];
        FlagCY := updateBit((updateBit((A << 01),0,A[7]) << 01),0,updateBit((A << 01),0,A[7])[7])[7];
        jump ((a71,a69));
      }
    }

0375:

    #0375
    #instruction: CALL 1A47
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 78;
    #return-to: 0378
    advance (17)
    #1A47
    #instruction: PUSH BC
    let:16 a3 = (-1 + a2) in
    M[a3] := B;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a5 = addWithCarry(!true,03,~00) in
    let:8 a6 = (03 & 0F) in
    let:8 a7 = (~00 & 0F) in
    let:16 a8 = addWithCarry(!true,a6,a7) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a5[7:0])) {
      advance (10)
      A := updateBit((L >> 01),7,H[0]);
      B := a5[7:0];
      H := updateBit((H >> 01),7,FlagCY);
      L := updateBit((L >> 01),7,H[0]);
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := L[0];
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a9 = (3F & updateBit((H >> 01),7,FlagCY)) in
      let:8 a10 = (3F | updateBit((H >> 01),7,FlagCY)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a11 = (20 | a9) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a12 = (1 + a4) in
      let:8 a13 = M[a4] in
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      advance (10)
      A := a11;
      B := a15;
      C := a13;
      H := a11;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a18[15:8];
      SPL := a18[7:0];
      FlagS := a11[7];
      FlagZ := is_zero(a11);
      FlagA := false;
      FlagP := parity(a11);
      FlagCY := false;
      jump ((a19,a17));
    }

0378:

    #0378
    #instruction: CALL 1439
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7B;
    #return-to: 037B
    advance (17)
    #1439
    #instruction: PUSH BC
    let:16 a3 = (-1 + a2) in
    M[a3] := B;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a5 = M[(D,E)] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(H,L)] := a5;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a6 = (1 + (D,E)) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a7 = add17(0020,(H,L)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a8 = (1 + a4) in
    let:8 a9 = M[a4] in
    let:16 a10 = (1 + a8) in
    let:8 a11 = M[a8] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a12 = addWithCarry(!true,a11,~00) in
    let:8 a13 = (a11 & 0F) in
    let:8 a14 = (~00 & 0F) in
    let:16 a15 = addWithCarry(!true,a13,a14) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a12[7:0])) {
      advance (10)
      A := a5;
      B := a12[7:0];
      C := a9;
      D := a6[15:8];
      E := a6[7:0];
      H := a7[15:0][15:8];
      L := a7[15:0][7:0];
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a12[7:0][7];
      FlagZ := is_zero(a12[7:0]);
      FlagA := a15[7:0][4];
      FlagP := parity(a12[7:0]);
      FlagCY := a7[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a16 = (1 + a10) in
      let:8 a17 = M[a10] in
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      advance (10)
      A := a5;
      B := a12[7:0];
      C := a9;
      D := a6[15:8];
      E := a6[7:0];
      H := a7[15:0][15:8];
      L := a7[15:0][7:0];
      SPH := a18[15:8];
      SPL := a18[7:0];
      FlagS := a12[7:0][7];
      FlagZ := is_zero(a12[7:0]);
      FlagA := a15[7:0][4];
      FlagP := parity(a12[7:0]);
      FlagCY := a7[16];
      jump ((a19,a17));
    }

037B:

    #037B
    #instruction: LD   A,00
    advance (7)
    #037D
    #instruction: LD   (2012),A
    M[2012] := 00;
    advance (13)
    #0380
    #instruction: RET
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    A := 00;
    SPH := a3[15:8];
    SPL := a3[7:0];
    jump ((a4,a2));

03BB:

    #03BB
    #instruction: LD   DE,202A
    advance (10)
    #03BE
    #instruction: CALL 1A06
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := C1;
    #return-to: 03C1
    advance (17)
    #1A06
    #instruction: LD   HL,2072
    advance (10)
    #1A09
    #instruction: LD   B,(HL)
    let:8 a3 = M[2072] in
    advance (7)
    #1A0A
    #instruction: LD   A,(DE)
    let:8 a4 = M[202A] in
    advance (7)
    #1A0B
    #instruction: AND  80
    let:8 a5 = (80 & a4) in
    let:8 a6 = (80 | a4) in
    advance (7)
    #1A0D
    #instruction: XOR  B
    let:8 a7 = (a3 ^ a5) in
    advance (4)
    #1A0E
    #instruction: RET  NZ
    if (!is_zero(a7)) {
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (11)
      A := a7;
      B := a3;
      D := 20;
      E := 2A;
      H := 20;
      L := 72;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a7[7];
      FlagZ := is_zero(a7);
      FlagA := false;
      FlagP := parity(a7);
      FlagCY := false;
      jump ((a11,a9));
    } else {
      advance (5)
      #1A0F
      #instruction: SCF
      advance (4)
      #1A10
      #instruction: RET
      let:16 a12 = (1 + a2) in
      let:8 a13 = M[a2] in
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      advance (10)
      A := a7;
      B := a3;
      D := 20;
      E := 2A;
      H := 20;
      L := 72;
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a7[7];
      FlagZ := is_zero(a7);
      FlagA := false;
      FlagP := parity(a7);
      FlagCY := true;
      jump ((a15,a13));
    }

03C1:

    #03C1
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #03C2
    #instruction: RET  NC
    if (!FlagCY) {
      let:16 a5 = (1 + a3) in
      let:8 a6 = M[a3] in
      let:16 a7 = (1 + a5) in
      let:8 a8 = M[a5] in
      advance (11)
      H := a4;
      L := a2;
      SPH := a7[15:8];
      SPL := a7[7:0];
      jump ((a8,a6));
    } else {
      advance (5)
      #03C3
      #instruction: INC  HL
      let:16 a9 = (1 + (a4,a2)) in
      advance (5)
      #03C4
      #instruction: LD   A,(HL)
      let:8 a10 = M[a9] in
      advance (7)
      #03C5
      #instruction: AND  A
      let:8 a11 = (a10 & a10) in
      let:8 a12 = (a10 | a10) in
      advance (4)
      #03C6
      #instruction: RET  Z
      if (is_zero(a11)) {
        let:16 a13 = (1 + a3) in
        let:8 a14 = M[a3] in
        let:16 a15 = (1 + a13) in
        let:8 a16 = M[a13] in
        advance (11)
        A := a11;
        H := a9[15:8];
        L := a9[7:0];
        SPH := a15[15:8];
        SPL := a15[7:0];
        FlagS := a11[7];
        FlagZ := is_zero(a11);
        FlagA := a12[3];
        FlagP := parity(a11);
        FlagCY := false;
        jump ((a16,a14));
      } else {
        advance (5)
        #03C7
        #instruction: CP   01
        let:16 a17 = addWithCarry(!false,a11,~01) in
        let:8 a18 = (a11 & 0F) in
        let:8 a19 = (~01 & 0F) in
        let:16 a20 = addWithCarry(!false,a18,a19) in
        advance (7)
        #03C9
        #instruction: JP   Z,03FA
        if (is_zero(a17[7:0])) {
          advance (10)
          #03FA
          #instruction: INC  A
          let:16 a21 = addWithCarry(true,a11,00) in
          let:8 a22 = (a11 & 0F) in
          let:8 a23 = (00 & 0F) in
          let:16 a24 = addWithCarry(true,a22,a23) in
          advance (5)
          #03FB
          #instruction: LD   (HL),A
          M[a9] := a21[7:0];
          advance (7)
          #03FC
          #instruction: LD   A,(201B)
          let:8 a25 = M[201B] in
          advance (13)
          #03FF
          #instruction: ADD  08
          let:16 a26 = addWithCarry(false,08,a25) in
          let:8 a27 = (08 & 0F) in
          let:8 a28 = (a25 & 0F) in
          let:16 a29 = addWithCarry(false,a27,a28) in
          advance (7)
          #0401
          #instruction: LD   (202A),A
          M[202A] := a26[7:0];
          advance (13)
          #0404
          #instruction: CALL 0430
          let:16 a30 = (-1 + a3) in
          M[a30] := 04;
          let:16 a31 = (-1 + a30) in
          M[a31] := 07;
          #return-to: 0407
          advance (17)
          #0430
          #instruction: LD   HL,2027
          advance (10)
          #0433
          #instruction: JP   1A3B
          advance (10)
          #1A3B
          #instruction: LD   E,(HL)
          let:8 a32 = M[2027] in
          advance (7)
          #1A3C
          #instruction: INC  HL
          advance (5)
          #1A3D
          #instruction: LD   D,(HL)
          let:8 a33 = M[2028] in
          advance (7)
          #1A3E
          #instruction: INC  HL
          advance (5)
          #1A3F
          #instruction: LD   A,(HL)
          let:8 a34 = M[2029] in
          advance (7)
          #1A40
          #instruction: INC  HL
          advance (5)
          #1A41
          #instruction: LD   C,(HL)
          let:8 a35 = M[202A] in
          advance (7)
          #1A42
          #instruction: INC  HL
          advance (5)
          #1A43
          #instruction: LD   B,(HL)
          let:8 a36 = M[202B] in
          advance (7)
          #1A44
          #instruction: LD   H,C
          advance (5)
          #1A45
          #instruction: LD   L,A
          advance (5)
          #1A46
          #instruction: RET
          let:16 a37 = (1 + a31) in
          let:8 a38 = M[a31] in
          let:16 a39 = (1 + a37) in
          let:8 a40 = M[a37] in
          advance (10)
          A := a34;
          B := a36;
          C := a35;
          D := a33;
          E := a32;
          H := a35;
          L := a34;
          SPH := a39[15:8];
          SPL := a39[7:0];
          FlagS := a26[7:0][7];
          FlagZ := is_zero(a26[7:0]);
          FlagA := a29[7:0][4];
          FlagP := parity(a26[7:0]);
          FlagCY := a26[15:8][0];
          jump ((a40,a38));
        } else {
          advance (10)
          #03CC
          #instruction: CP   02
          let:16 a41 = addWithCarry(!false,a11,~02) in
          let:8 a42 = (a11 & 0F) in
          let:8 a43 = (~02 & 0F) in
          let:16 a44 = addWithCarry(!false,a42,a43) in
          advance (7)
          #03CE
          #instruction: JP   Z,040A
          if (is_zero(a41[7:0])) {
            advance (10)
            #040A
            #instruction: CALL 0430
            let:16 a45 = (-1 + a3) in
            M[a45] := 04;
            let:16 a46 = (-1 + a45) in
            M[a46] := 0D;
            #return-to: 040D
            advance (17)
            #0430
            #instruction: LD   HL,2027
            advance (10)
            #0433
            #instruction: JP   1A3B
            advance (10)
            #1A3B
            #instruction: LD   E,(HL)
            let:8 a47 = M[2027] in
            advance (7)
            #1A3C
            #instruction: INC  HL
            advance (5)
            #1A3D
            #instruction: LD   D,(HL)
            let:8 a48 = M[2028] in
            advance (7)
            #1A3E
            #instruction: INC  HL
            advance (5)
            #1A3F
            #instruction: LD   A,(HL)
            let:8 a49 = M[2029] in
            advance (7)
            #1A40
            #instruction: INC  HL
            advance (5)
            #1A41
            #instruction: LD   C,(HL)
            let:8 a50 = M[202A] in
            advance (7)
            #1A42
            #instruction: INC  HL
            advance (5)
            #1A43
            #instruction: LD   B,(HL)
            let:8 a51 = M[202B] in
            advance (7)
            #1A44
            #instruction: LD   H,C
            advance (5)
            #1A45
            #instruction: LD   L,A
            advance (5)
            #1A46
            #instruction: RET
            let:16 a52 = (1 + a46) in
            let:8 a53 = M[a46] in
            let:16 a54 = (1 + a52) in
            let:8 a55 = M[a52] in
            advance (10)
            A := a49;
            B := a51;
            C := a50;
            D := a48;
            E := a47;
            H := a50;
            L := a49;
            SPH := a54[15:8];
            SPL := a54[7:0];
            FlagS := a41[7:0][7];
            FlagZ := is_zero(a41[7:0]);
            FlagA := a44[7:0][4];
            FlagP := parity(a41[7:0]);
            FlagCY := !a41[15:8][0];
            jump ((a55,a53));
          } else {
            advance (10)
            #03D1
            #instruction: INC  HL
            let:16 a56 = (1 + a9) in
            advance (5)
            #03D2
            #instruction: CP   03
            let:16 a57 = addWithCarry(!false,a11,~03) in
            let:8 a58 = (a11 & 0F) in
            let:8 a59 = (~03 & 0F) in
            let:16 a60 = addWithCarry(!false,a58,a59) in
            advance (7)
            #03D4
            #instruction: JP   NZ,042A
            if (!is_zero(a57[7:0])) {
              advance (10)
              #042A
              #instruction: CP   05
              let:16 a61 = addWithCarry(!false,a11,~05) in
              let:8 a62 = (a11 & 0F) in
              let:8 a63 = (~05 & 0F) in
              let:16 a64 = addWithCarry(!false,a62,a63) in
              advance (7)
              #042C
              #instruction: RET  Z
              if (is_zero(a61[7:0])) {
                let:16 a65 = (1 + a3) in
                let:8 a66 = M[a3] in
                let:16 a67 = (1 + a65) in
                let:8 a68 = M[a65] in
                advance (11)
                A := a11;
                H := a56[15:8];
                L := a56[7:0];
                SPH := a67[15:8];
                SPL := a67[7:0];
                FlagS := a61[7:0][7];
                FlagZ := is_zero(a61[7:0]);
                FlagA := a64[7:0][4];
                FlagP := parity(a61[7:0]);
                FlagCY := !a61[15:8][0];
                jump ((a68,a66));
              } else {
                advance (5)
                #042D
                #instruction: JP   0436
                advance (10)
                #0436
                #instruction: CALL 0430
                let:16 a69 = (-1 + a3) in
                M[a69] := 04;
                let:16 a70 = (-1 + a69) in
                M[a70] := 39;
                #return-to: 0439
                advance (17)
                #0430
                #instruction: LD   HL,2027
                advance (10)
                #0433
                #instruction: JP   1A3B
                advance (10)
                #1A3B
                #instruction: LD   E,(HL)
                let:8 a71 = M[2027] in
                advance (7)
                #1A3C
                #instruction: INC  HL
                advance (5)
                #1A3D
                #instruction: LD   D,(HL)
                let:8 a72 = M[2028] in
                advance (7)
                #1A3E
                #instruction: INC  HL
                advance (5)
                #1A3F
                #instruction: LD   A,(HL)
                let:8 a73 = M[2029] in
                advance (7)
                #1A40
                #instruction: INC  HL
                advance (5)
                #1A41
                #instruction: LD   C,(HL)
                let:8 a74 = M[202A] in
                advance (7)
                #1A42
                #instruction: INC  HL
                advance (5)
                #1A43
                #instruction: LD   B,(HL)
                let:8 a75 = M[202B] in
                advance (7)
                #1A44
                #instruction: LD   H,C
                advance (5)
                #1A45
                #instruction: LD   L,A
                advance (5)
                #1A46
                #instruction: RET
                let:16 a76 = (1 + a70) in
                let:8 a77 = M[a70] in
                let:16 a78 = (1 + a76) in
                let:8 a79 = M[a76] in
                advance (10)
                A := a73;
                B := a75;
                C := a74;
                D := a72;
                E := a71;
                H := a74;
                L := a73;
                SPH := a78[15:8];
                SPL := a78[7:0];
                FlagS := a61[7:0][7];
                FlagZ := is_zero(a61[7:0]);
                FlagA := a64[7:0][4];
                FlagP := parity(a61[7:0]);
                FlagCY := !a61[15:8][0];
                jump ((a79,a77));
              }
            } else {
              advance (10)
              #03D7
              #instruction: DEC  (HL)
              let:8 a80 = M[a56] in
              let:16 a81 = addWithCarry(!true,a80,~00) in
              let:8 a82 = (a80 & 0F) in
              let:8 a83 = (~00 & 0F) in
              let:16 a84 = addWithCarry(!true,a82,a83) in
              M[a56] := a81[7:0];
              advance (10)
              #03D8
              #instruction: JP   Z,0436
              if (is_zero(a81[7:0])) {
                advance (10)
                #0436
                #instruction: CALL 0430
                let:16 a85 = (-1 + a3) in
                M[a85] := 04;
                let:16 a86 = (-1 + a85) in
                M[a86] := 39;
                #return-to: 0439
                advance (17)
                #0430
                #instruction: LD   HL,2027
                advance (10)
                #0433
                #instruction: JP   1A3B
                advance (10)
                #1A3B
                #instruction: LD   E,(HL)
                let:8 a87 = M[2027] in
                advance (7)
                #1A3C
                #instruction: INC  HL
                advance (5)
                #1A3D
                #instruction: LD   D,(HL)
                let:8 a88 = M[2028] in
                advance (7)
                #1A3E
                #instruction: INC  HL
                advance (5)
                #1A3F
                #instruction: LD   A,(HL)
                let:8 a89 = M[2029] in
                advance (7)
                #1A40
                #instruction: INC  HL
                advance (5)
                #1A41
                #instruction: LD   C,(HL)
                let:8 a90 = M[202A] in
                advance (7)
                #1A42
                #instruction: INC  HL
                advance (5)
                #1A43
                #instruction: LD   B,(HL)
                let:8 a91 = M[202B] in
                advance (7)
                #1A44
                #instruction: LD   H,C
                advance (5)
                #1A45
                #instruction: LD   L,A
                advance (5)
                #1A46
                #instruction: RET
                let:16 a92 = (1 + a86) in
                let:8 a93 = M[a86] in
                let:16 a94 = (1 + a92) in
                let:8 a95 = M[a92] in
                advance (10)
                A := a89;
                B := a91;
                C := a90;
                D := a88;
                E := a87;
                H := a90;
                L := a89;
                SPH := a94[15:8];
                SPL := a94[7:0];
                FlagS := a81[7:0][7];
                FlagZ := is_zero(a81[7:0]);
                FlagA := a84[7:0][4];
                FlagP := parity(a81[7:0]);
                FlagCY := !a57[15:8][0];
                jump ((a95,a93));
              } else {
                advance (10)
                #03DB
                #instruction: LD   A,(HL)
                let:8 a96 = M[a56] in
                advance (7)
                #03DC
                #instruction: CP   0F
                let:16 a97 = addWithCarry(!false,a96,~0F) in
                let:8 a98 = (a96 & 0F) in
                let:8 a99 = (~0F & 0F) in
                let:16 a100 = addWithCarry(!false,a98,a99) in
                advance (7)
                #03DE
                #instruction: RET  NZ
                if (!is_zero(a97[7:0])) {
                  let:16 a101 = (1 + a3) in
                  let:8 a102 = M[a3] in
                  let:16 a103 = (1 + a101) in
                  let:8 a104 = M[a101] in
                  advance (11)
                  A := a96;
                  H := a56[15:8];
                  L := a56[7:0];
                  SPH := a103[15:8];
                  SPL := a103[7:0];
                  FlagS := a97[7:0][7];
                  FlagZ := is_zero(a97[7:0]);
                  FlagA := a100[7:0][4];
                  FlagP := parity(a97[7:0]);
                  FlagCY := !a97[15:8][0];
                  jump ((a104,a102));
                } else {
                  advance (5)
                  #03DF
                  #instruction: PUSH HL
                  let:16 a105 = (-1 + a3) in
                  M[a105] := a56[15:8];
                  let:16 a106 = (-1 + a105) in
                  M[a106] := a56[7:0];
                  advance (11)
                  #03E0
                  #instruction: CALL 0430
                  let:16 a107 = (-1 + a106) in
                  M[a107] := 03;
                  let:16 a108 = (-1 + a107) in
                  M[a108] := E3;
                  #return-to: 03E3
                  advance (17)
                  #0430
                  #instruction: LD   HL,2027
                  advance (10)
                  #0433
                  #instruction: JP   1A3B
                  advance (10)
                  #1A3B
                  #instruction: LD   E,(HL)
                  let:8 a109 = M[2027] in
                  advance (7)
                  #1A3C
                  #instruction: INC  HL
                  advance (5)
                  #1A3D
                  #instruction: LD   D,(HL)
                  let:8 a110 = M[2028] in
                  advance (7)
                  #1A3E
                  #instruction: INC  HL
                  advance (5)
                  #1A3F
                  #instruction: LD   A,(HL)
                  let:8 a111 = M[2029] in
                  advance (7)
                  #1A40
                  #instruction: INC  HL
                  advance (5)
                  #1A41
                  #instruction: LD   C,(HL)
                  let:8 a112 = M[202A] in
                  advance (7)
                  #1A42
                  #instruction: INC  HL
                  advance (5)
                  #1A43
                  #instruction: LD   B,(HL)
                  let:8 a113 = M[202B] in
                  advance (7)
                  #1A44
                  #instruction: LD   H,C
                  advance (5)
                  #1A45
                  #instruction: LD   L,A
                  advance (5)
                  #1A46
                  #instruction: RET
                  let:16 a114 = (1 + a108) in
                  let:8 a115 = M[a108] in
                  let:16 a116 = (1 + a114) in
                  let:8 a117 = M[a114] in
                  advance (10)
                  A := a111;
                  B := a113;
                  C := a112;
                  D := a110;
                  E := a109;
                  H := a112;
                  L := a111;
                  SPH := a116[15:8];
                  SPL := a116[7:0];
                  FlagS := a97[7:0][7];
                  FlagZ := is_zero(a97[7:0]);
                  FlagA := a100[7:0][4];
                  FlagP := parity(a97[7:0]);
                  FlagCY := !a97[15:8][0];
                  jump ((a117,a115));
                }
              }
            }
          }
        }
      }
    }

03E3:

    #03E3
    #instruction: CALL 1452
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := E6;
    #return-to: 03E6
    advance (17)
    #1452
    #instruction: CALL 1474
    let:16 a3 = (-1 + a2) in
    M[a3] := 14;
    let:16 a4 = (-1 + a3) in
    M[a4] := 55;
    #return-to: 1455
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a5 = (07 & L) in
    let:8 a6 = (07 | L) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a7 = (-1 + a4) in
    M[a7] := B;
    let:16 a8 = (-1 + a7) in
    M[a8] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a9 = addWithCarry(!true,03,~00) in
    let:8 a10 = (03 & 0F) in
    let:8 a11 = (~00 & 0F) in
    let:16 a12 = addWithCarry(!true,a10,a11) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a9[7:0])) {
      advance (10)
      A := updateBit((L >> 01),7,H[0]);
      B := a9[7:0];
      H := updateBit((H >> 01),7,false);
      L := updateBit((L >> 01),7,H[0]);
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      FlagCY := L[0];
      Shifter_OFF := a5;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a13 = (3F & updateBit((H >> 01),7,false)) in
      let:8 a14 = (3F | updateBit((H >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a15 = (20 | a13) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a16 = (1 + a8) in
      let:8 a17 = M[a8] in
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      let:16 a22 = (1 + a20) in
      let:8 a23 = M[a20] in
      advance (10)
      A := a15;
      B := a19;
      C := a17;
      H := a15;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a22[15:8];
      SPL := a22[7:0];
      FlagS := a15[7];
      FlagZ := is_zero(a15);
      FlagA := false;
      FlagP := parity(a15);
      FlagCY := false;
      Shifter_OFF := a5;
      jump ((a23,a21));
    }

03E6:

    #03E6
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #03E7
    #instruction: INC  HL
    let:16 a5 = (1 + (a4,a2)) in
    advance (5)
    #03E8
    #instruction: INC  (HL)
    let:8 a6 = M[a5] in
    let:16 a7 = addWithCarry(true,a6,00) in
    let:8 a8 = (a6 & 0F) in
    let:8 a9 = (00 & 0F) in
    let:16 a10 = addWithCarry(true,a8,a9) in
    M[a5] := a7[7:0];
    advance (10)
    #03E9
    #instruction: INC  HL
    let:16 a11 = (1 + a5) in
    advance (5)
    #03EA
    #instruction: INC  HL
    let:16 a12 = (1 + a11) in
    advance (5)
    #03EB
    #instruction: DEC  (HL)
    let:8 a13 = M[a12] in
    let:16 a14 = addWithCarry(!true,a13,~00) in
    let:8 a15 = (a13 & 0F) in
    let:8 a16 = (~00 & 0F) in
    let:16 a17 = addWithCarry(!true,a15,a16) in
    M[a12] := a14[7:0];
    advance (10)
    #03EC
    #instruction: DEC  (HL)
    let:8 a18 = M[a12] in
    let:16 a19 = addWithCarry(!true,a18,~00) in
    let:8 a20 = (a18 & 0F) in
    let:8 a21 = (~00 & 0F) in
    let:16 a22 = addWithCarry(!true,a20,a21) in
    M[a12] := a19[7:0];
    advance (10)
    #03ED
    #instruction: INC  HL
    let:16 a23 = (1 + a12) in
    advance (5)
    #03EE
    #instruction: DEC  (HL)
    let:8 a24 = M[a23] in
    let:16 a25 = addWithCarry(!true,a24,~00) in
    let:8 a26 = (a24 & 0F) in
    let:8 a27 = (~00 & 0F) in
    let:16 a28 = addWithCarry(!true,a26,a27) in
    M[a23] := a25[7:0];
    advance (10)
    #03EF
    #instruction: DEC  (HL)
    let:8 a29 = M[a23] in
    let:16 a30 = addWithCarry(!true,a29,~00) in
    let:8 a31 = (a29 & 0F) in
    let:8 a32 = (~00 & 0F) in
    let:16 a33 = addWithCarry(!true,a31,a32) in
    M[a23] := a30[7:0];
    advance (10)
    #03F0
    #instruction: DEC  (HL)
    let:8 a34 = M[a23] in
    let:16 a35 = addWithCarry(!true,a34,~00) in
    let:8 a36 = (a34 & 0F) in
    let:8 a37 = (~00 & 0F) in
    let:16 a38 = addWithCarry(!true,a36,a37) in
    M[a23] := a35[7:0];
    advance (10)
    #03F1
    #instruction: INC  HL
    let:16 a39 = (1 + a23) in
    advance (5)
    #03F2
    #instruction: LD   (HL),08
    M[a39] := 08;
    advance (10)
    #03F4
    #instruction: CALL 0430
    let:16 a40 = (-1 + a3) in
    M[a40] := 03;
    let:16 a41 = (-1 + a40) in
    M[a41] := F7;
    #return-to: 03F7
    advance (17)
    #0430
    #instruction: LD   HL,2027
    advance (10)
    #0433
    #instruction: JP   1A3B
    advance (10)
    #1A3B
    #instruction: LD   E,(HL)
    let:8 a42 = M[2027] in
    advance (7)
    #1A3C
    #instruction: INC  HL
    advance (5)
    #1A3D
    #instruction: LD   D,(HL)
    let:8 a43 = M[2028] in
    advance (7)
    #1A3E
    #instruction: INC  HL
    advance (5)
    #1A3F
    #instruction: LD   A,(HL)
    let:8 a44 = M[2029] in
    advance (7)
    #1A40
    #instruction: INC  HL
    advance (5)
    #1A41
    #instruction: LD   C,(HL)
    let:8 a45 = M[202A] in
    advance (7)
    #1A42
    #instruction: INC  HL
    advance (5)
    #1A43
    #instruction: LD   B,(HL)
    let:8 a46 = M[202B] in
    advance (7)
    #1A44
    #instruction: LD   H,C
    advance (5)
    #1A45
    #instruction: LD   L,A
    advance (5)
    #1A46
    #instruction: RET
    let:16 a47 = (1 + a41) in
    let:8 a48 = M[a41] in
    let:16 a49 = (1 + a47) in
    let:8 a50 = M[a47] in
    advance (10)
    A := a44;
    B := a46;
    C := a45;
    D := a43;
    E := a42;
    H := a45;
    L := a44;
    SPH := a49[15:8];
    SPL := a49[7:0];
    FlagS := a35[7:0][7];
    FlagZ := is_zero(a35[7:0]);
    FlagA := a38[7:0][4];
    FlagP := parity(a35[7:0]);
    jump ((a50,a48));

03F7:

    #03F7
    #instruction: JP   1400
    advance (10)
    #1400
    #instruction: NOP
    advance (4)
    #1401
    #instruction: CALL 1474
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 04;
    #return-to: 1404
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a3 = (07 & L) in
    let:8 a4 = (07 | L) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a5 = (-1 + a2) in
    M[a5] := B;
    let:16 a6 = (-1 + a5) in
    M[a6] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a7 = addWithCarry(!true,03,~00) in
    let:8 a8 = (03 & 0F) in
    let:8 a9 = (~00 & 0F) in
    let:16 a10 = addWithCarry(!true,a8,a9) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a7[7:0])) {
      advance (10)
      A := updateBit((L >> 01),7,H[0]);
      B := a7[7:0];
      H := updateBit((H >> 01),7,false);
      L := updateBit((L >> 01),7,H[0]);
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      FlagCY := L[0];
      Shifter_OFF := a3;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a11 = (3F & updateBit((H >> 01),7,false)) in
      let:8 a12 = (3F | updateBit((H >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a13 = (20 | a11) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a14 = (1 + a6) in
      let:8 a15 = M[a6] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (10)
      A := a13;
      B := a17;
      C := a15;
      H := a13;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a20[15:8];
      SPL := a20[7:0];
      FlagS := a13[7];
      FlagZ := is_zero(a13);
      FlagA := false;
      FlagP := parity(a13);
      FlagCY := false;
      Shifter_OFF := a3;
      jump ((a21,a19));
    }

0407:

    #0407
    #instruction: JP   1400
    advance (10)
    #1400
    #instruction: NOP
    advance (4)
    #1401
    #instruction: CALL 1474
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 04;
    #return-to: 1404
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a3 = (07 & L) in
    let:8 a4 = (07 | L) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a5 = (-1 + a2) in
    M[a5] := B;
    let:16 a6 = (-1 + a5) in
    M[a6] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a7 = addWithCarry(!true,03,~00) in
    let:8 a8 = (03 & 0F) in
    let:8 a9 = (~00 & 0F) in
    let:16 a10 = addWithCarry(!true,a8,a9) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a7[7:0])) {
      advance (10)
      A := updateBit((L >> 01),7,H[0]);
      B := a7[7:0];
      H := updateBit((H >> 01),7,false);
      L := updateBit((L >> 01),7,H[0]);
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      FlagCY := L[0];
      Shifter_OFF := a3;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a11 = (3F & updateBit((H >> 01),7,false)) in
      let:8 a12 = (3F | updateBit((H >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a13 = (20 | a11) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a14 = (1 + a6) in
      let:8 a15 = M[a6] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (10)
      A := a13;
      B := a17;
      C := a15;
      H := a13;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a20[15:8];
      SPL := a20[7:0];
      FlagS := a13[7];
      FlagZ := is_zero(a13);
      FlagA := false;
      FlagP := parity(a13);
      FlagCY := false;
      Shifter_OFF := a3;
      jump ((a21,a19));
    }

040D:

    #040D
    #instruction: PUSH DE
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    advance (11)
    #040E
    #instruction: PUSH HL
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    advance (11)
    #040F
    #instruction: PUSH BC
    let:16 a5 = (-1 + a4) in
    M[a5] := B;
    let:16 a6 = (-1 + a5) in
    M[a6] := C;
    advance (11)
    #0410
    #instruction: CALL 1452
    let:16 a7 = (-1 + a6) in
    M[a7] := 04;
    let:16 a8 = (-1 + a7) in
    M[a8] := 13;
    #return-to: 0413
    advance (17)
    #1452
    #instruction: CALL 1474
    let:16 a9 = (-1 + a8) in
    M[a9] := 14;
    let:16 a10 = (-1 + a9) in
    M[a10] := 55;
    #return-to: 1455
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a11 = (07 & L) in
    let:8 a12 = (07 | L) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a13 = (-1 + a10) in
    M[a13] := B;
    let:16 a14 = (-1 + a13) in
    M[a14] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a15 = addWithCarry(!true,03,~00) in
    let:8 a16 = (03 & 0F) in
    let:8 a17 = (~00 & 0F) in
    let:16 a18 = addWithCarry(!true,a16,a17) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a15[7:0])) {
      advance (10)
      A := updateBit((L >> 01),7,H[0]);
      B := a15[7:0];
      H := updateBit((H >> 01),7,false);
      L := updateBit((L >> 01),7,H[0]);
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a15[7:0][7];
      FlagZ := is_zero(a15[7:0]);
      FlagA := a18[7:0][4];
      FlagP := parity(a15[7:0]);
      FlagCY := L[0];
      Shifter_OFF := a11;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a19 = (3F & updateBit((H >> 01),7,false)) in
      let:8 a20 = (3F | updateBit((H >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a21 = (20 | a19) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a22 = (1 + a14) in
      let:8 a23 = M[a14] in
      let:16 a24 = (1 + a22) in
      let:8 a25 = M[a22] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a26 = (1 + a24) in
      let:8 a27 = M[a24] in
      let:16 a28 = (1 + a26) in
      let:8 a29 = M[a26] in
      advance (10)
      A := a21;
      B := a25;
      C := a23;
      H := a21;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a28[15:8];
      SPL := a28[7:0];
      FlagS := a21[7];
      FlagZ := is_zero(a21);
      FlagA := false;
      FlagP := parity(a21);
      FlagCY := false;
      Shifter_OFF := a11;
      jump ((a29,a27));
    }

0413:

    #0413
    #instruction: POP  BC
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0414
    #instruction: POP  HL
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    #0415
    #instruction: POP  DE
    let:16 a9 = (1 + a7) in
    let:8 a10 = M[a7] in
    let:16 a11 = (1 + a9) in
    let:8 a12 = M[a9] in
    advance (10)
    #0416
    #instruction: LD   A,(202C)
    let:8 a13 = M[202C] in
    advance (13)
    #0419
    #instruction: ADD  L
    let:16 a14 = addWithCarry(false,a6,a13) in
    let:8 a15 = (a6 & 0F) in
    let:8 a16 = (a13 & 0F) in
    let:16 a17 = addWithCarry(false,a15,a16) in
    advance (4)
    #041A
    #instruction: LD   L,A
    advance (5)
    #041B
    #instruction: LD   (2029),A
    M[2029] := a14[7:0];
    advance (13)
    #041E
    #instruction: CALL 1491
    let:16 a18 = (-1 + a11) in
    M[a18] := 04;
    let:16 a19 = (-1 + a18) in
    M[a19] := 21;
    #return-to: 0421
    advance (17)
    #1491
    #instruction: CALL 1474
    let:16 a20 = (-1 + a19) in
    M[a20] := 14;
    let:16 a21 = (-1 + a20) in
    M[a21] := 94;
    #return-to: 1494
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a22 = (07 & a14[7:0]) in
    let:8 a23 = (07 | a14[7:0]) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a24 = (-1 + a21) in
    M[a24] := a4;
    let:16 a25 = (-1 + a24) in
    M[a25] := a2;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a26 = addWithCarry(!true,03,~00) in
    let:8 a27 = (03 & 0F) in
    let:8 a28 = (~00 & 0F) in
    let:16 a29 = addWithCarry(!true,a27,a28) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a26[7:0])) {
      advance (10)
      A := updateBit((a14[7:0] >> 01),7,a8[0]);
      B := a26[7:0];
      C := a2;
      D := a12;
      E := a10;
      H := updateBit((a8 >> 01),7,false);
      L := updateBit((a14[7:0] >> 01),7,a8[0]);
      SPH := a25[15:8];
      SPL := a25[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a14[7:0][0];
      Shifter_OFF := a22;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a30 = (3F & updateBit((a8 >> 01),7,false)) in
      let:8 a31 = (3F | updateBit((a8 >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a32 = (20 | a30) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a33 = (1 + a25) in
      let:8 a34 = M[a25] in
      let:16 a35 = (1 + a33) in
      let:8 a36 = M[a33] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a37 = (1 + a35) in
      let:8 a38 = M[a35] in
      let:16 a39 = (1 + a37) in
      let:8 a40 = M[a37] in
      advance (10)
      A := a32;
      B := a36;
      C := a34;
      D := a12;
      E := a10;
      H := a32;
      L := updateBit((a14[7:0] >> 01),7,a8[0]);
      SPH := a39[15:8];
      SPL := a39[7:0];
      FlagS := a32[7];
      FlagZ := is_zero(a32);
      FlagA := false;
      FlagP := parity(a32);
      FlagCY := false;
      Shifter_OFF := a22;
      jump ((a40,a38));
    }

0421:

    #0421
    #instruction: LD   A,(2061)
    let:8 a1 = M[2061] in
    advance (13)
    #0424
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #0425
    #instruction: RET  Z
    if (is_zero(a2)) {
      let:16 a4 = (1 + (SPH,SPL)) in
      let:8 a5 = M[(SPH,SPL)] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (11)
      A := a2;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump ((a7,a5));
    } else {
      advance (5)
      #0426
      #instruction: LD   (2002),A
      M[2002] := a2;
      advance (13)
      #0429
      #instruction: RET
      let:16 a8 = (1 + (SPH,SPL)) in
      let:8 a9 = M[(SPH,SPL)] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := a2;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump ((a11,a9));
    }

0439:

    #0439
    #instruction: CALL 1452
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3C;
    #return-to: 043C
    advance (17)
    #1452
    #instruction: CALL 1474
    let:16 a3 = (-1 + a2) in
    M[a3] := 14;
    let:16 a4 = (-1 + a3) in
    M[a4] := 55;
    #return-to: 1455
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a5 = (07 & L) in
    let:8 a6 = (07 | L) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a7 = (-1 + a4) in
    M[a7] := B;
    let:16 a8 = (-1 + a7) in
    M[a8] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a9 = addWithCarry(!true,03,~00) in
    let:8 a10 = (03 & 0F) in
    let:8 a11 = (~00 & 0F) in
    let:16 a12 = addWithCarry(!true,a10,a11) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a9[7:0])) {
      advance (10)
      A := updateBit((L >> 01),7,H[0]);
      B := a9[7:0];
      H := updateBit((H >> 01),7,false);
      L := updateBit((L >> 01),7,H[0]);
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      FlagCY := L[0];
      Shifter_OFF := a5;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a13 = (3F & updateBit((H >> 01),7,false)) in
      let:8 a14 = (3F | updateBit((H >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a15 = (20 | a13) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a16 = (1 + a8) in
      let:8 a17 = M[a8] in
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      let:16 a22 = (1 + a20) in
      let:8 a23 = M[a20] in
      advance (10)
      A := a15;
      B := a19;
      C := a17;
      H := a15;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a22[15:8];
      SPL := a22[7:0];
      FlagS := a15[7];
      FlagZ := is_zero(a15);
      FlagA := false;
      FlagP := parity(a15);
      FlagCY := false;
      Shifter_OFF := a5;
      jump ((a23,a21));
    }

043C:

    #043C
    #instruction: LD   HL,2025
    advance (10)
    #043F
    #instruction: LD   DE,1B25
    advance (10)
    #0442
    #instruction: LD   B,07
    advance (7)
    #0444
    #instruction: CALL 1A32
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 47;
    #return-to: 0447
    advance (17)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2025] := 00;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,07,~00) in
    let:8 a4 = (07 & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a3[7:0])) {
      advance (10)
      A := 00;
      B := a3[7:0];
      D := 1B;
      E := 26;
      H := 20;
      L := 26;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := 00;
      B := a3[7:0];
      D := 1B;
      E := 26;
      H := 20;
      L := 26;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

0447:

    #0447
    #instruction: LD   HL,(208D)
    let:8 a1 = M[208D] in
    let:8 a2 = M[208E] in
    advance (16)
    #044A
    #instruction: INC  L
    let:16 a3 = addWithCarry(true,a1,00) in
    let:8 a4 = (a1 & 0F) in
    let:8 a5 = (00 & 0F) in
    let:16 a6 = addWithCarry(true,a4,a5) in
    advance (5)
    #044B
    #instruction: LD   A,L
    advance (5)
    #044C
    #instruction: CP   63
    let:16 a7 = addWithCarry(!false,a3[7:0],~63) in
    let:8 a8 = (a3[7:0] & 0F) in
    let:8 a9 = (~63 & 0F) in
    let:16 a10 = addWithCarry(!false,a8,a9) in
    advance (7)
    #044E
    #instruction: JP   CY,0453
    if (!a7[15:8][0]) {
      advance (10)
      #0453
      #instruction: LD   (208D),HL
      M[208D] := a3[7:0];
      M[208E] := a2;
      advance (16)
      #0456
      #instruction: LD   HL,(208F)
      let:8 a11 = M[208F] in
      let:8 a12 = M[2090] in
      advance (16)
      #0459
      #instruction: INC  L
      let:16 a13 = addWithCarry(true,a11,00) in
      let:8 a14 = (a11 & 0F) in
      let:8 a15 = (00 & 0F) in
      let:16 a16 = addWithCarry(true,a14,a15) in
      advance (5)
      #045A
      #instruction: LD   (208F),HL
      M[208F] := a13[7:0];
      M[2090] := a12;
      advance (16)
      #045D
      #instruction: LD   A,(2084)
      let:8 a17 = M[2084] in
      advance (13)
      #0460
      #instruction: AND  A
      let:8 a18 = (a17 & a17) in
      let:8 a19 = (a17 | a17) in
      advance (4)
      #0461
      #instruction: RET  NZ
      if (!is_zero(a18)) {
        let:16 a20 = (1 + (SPH,SPL)) in
        let:8 a21 = M[(SPH,SPL)] in
        let:16 a22 = (1 + a20) in
        let:8 a23 = M[a20] in
        advance (11)
        A := a18;
        H := a12;
        L := a13[7:0];
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a18[7];
        FlagZ := is_zero(a18);
        FlagA := a19[3];
        FlagP := parity(a18);
        FlagCY := false;
        jump ((a23,a21));
      } else {
        advance (5)
        #0462
        #instruction: LD   A,(HL)
        let:8 a24 = M[(a12,a13[7:0])] in
        advance (7)
        #0463
        #instruction: AND  01
        let:8 a25 = (01 & a24) in
        let:8 a26 = (01 | a24) in
        advance (7)
        #0465
        #instruction: LD   BC,0229
        advance (10)
        #0468
        #instruction: JP   NZ,046E
        if (!is_zero(a25)) {
          advance (10)
          #046E
          #instruction: LD   HL,208A
          advance (10)
          #0471
          #instruction: LD   (HL),C
          M[208A] := 29;
          advance (7)
          #0472
          #instruction: INC  HL
          advance (5)
          #0473
          #instruction: INC  HL
          advance (5)
          #0474
          #instruction: LD   (HL),B
          M[208C] := 02;
          advance (7)
          #0475
          #instruction: RET
          let:16 a27 = (1 + (SPH,SPL)) in
          let:8 a28 = M[(SPH,SPL)] in
          let:16 a29 = (1 + a27) in
          let:8 a30 = M[a27] in
          advance (10)
          A := a25;
          B := 02;
          C := 29;
          H := 20;
          L := 8C;
          SPH := a29[15:8];
          SPL := a29[7:0];
          FlagS := a25[7];
          FlagZ := is_zero(a25);
          FlagA := a26[3];
          FlagP := parity(a25);
          FlagCY := false;
          jump ((a30,a28));
        } else {
          advance (10)
          #046B
          #instruction: LD   BC,FEE0
          advance (10)
          #046E
          #instruction: LD   HL,208A
          advance (10)
          #0471
          #instruction: LD   (HL),C
          M[208A] := E0;
          advance (7)
          #0472
          #instruction: INC  HL
          advance (5)
          #0473
          #instruction: INC  HL
          advance (5)
          #0474
          #instruction: LD   (HL),B
          M[208C] := FE;
          advance (7)
          #0475
          #instruction: RET
          let:16 a31 = (1 + (SPH,SPL)) in
          let:8 a32 = M[(SPH,SPL)] in
          let:16 a33 = (1 + a31) in
          let:8 a34 = M[a31] in
          advance (10)
          A := a25;
          B := FE;
          C := E0;
          H := 20;
          L := 8C;
          SPH := a33[15:8];
          SPL := a33[7:0];
          FlagS := a25[7];
          FlagZ := is_zero(a25);
          FlagA := a26[3];
          FlagP := parity(a25);
          FlagCY := false;
          jump ((a34,a32));
        }
      }
    } else {
      advance (10)
      #0451
      #instruction: LD   L,54
      advance (7)
      #0453
      #instruction: LD   (208D),HL
      M[208D] := 54;
      M[208E] := a2;
      advance (16)
      #0456
      #instruction: LD   HL,(208F)
      let:8 a35 = M[208F] in
      let:8 a36 = M[2090] in
      advance (16)
      #0459
      #instruction: INC  L
      let:16 a37 = addWithCarry(true,a35,00) in
      let:8 a38 = (a35 & 0F) in
      let:8 a39 = (00 & 0F) in
      let:16 a40 = addWithCarry(true,a38,a39) in
      advance (5)
      #045A
      #instruction: LD   (208F),HL
      M[208F] := a37[7:0];
      M[2090] := a36;
      advance (16)
      #045D
      #instruction: LD   A,(2084)
      let:8 a41 = M[2084] in
      advance (13)
      #0460
      #instruction: AND  A
      let:8 a42 = (a41 & a41) in
      let:8 a43 = (a41 | a41) in
      advance (4)
      #0461
      #instruction: RET  NZ
      if (!is_zero(a42)) {
        let:16 a44 = (1 + (SPH,SPL)) in
        let:8 a45 = M[(SPH,SPL)] in
        let:16 a46 = (1 + a44) in
        let:8 a47 = M[a44] in
        advance (11)
        A := a42;
        H := a36;
        L := a37[7:0];
        SPH := a46[15:8];
        SPL := a46[7:0];
        FlagS := a42[7];
        FlagZ := is_zero(a42);
        FlagA := a43[3];
        FlagP := parity(a42);
        FlagCY := false;
        jump ((a47,a45));
      } else {
        advance (5)
        #0462
        #instruction: LD   A,(HL)
        let:8 a48 = M[(a36,a37[7:0])] in
        advance (7)
        #0463
        #instruction: AND  01
        let:8 a49 = (01 & a48) in
        let:8 a50 = (01 | a48) in
        advance (7)
        #0465
        #instruction: LD   BC,0229
        advance (10)
        #0468
        #instruction: JP   NZ,046E
        if (!is_zero(a49)) {
          advance (10)
          #046E
          #instruction: LD   HL,208A
          advance (10)
          #0471
          #instruction: LD   (HL),C
          M[208A] := 29;
          advance (7)
          #0472
          #instruction: INC  HL
          advance (5)
          #0473
          #instruction: INC  HL
          advance (5)
          #0474
          #instruction: LD   (HL),B
          M[208C] := 02;
          advance (7)
          #0475
          #instruction: RET
          let:16 a51 = (1 + (SPH,SPL)) in
          let:8 a52 = M[(SPH,SPL)] in
          let:16 a53 = (1 + a51) in
          let:8 a54 = M[a51] in
          advance (10)
          A := a49;
          B := 02;
          C := 29;
          H := 20;
          L := 8C;
          SPH := a53[15:8];
          SPL := a53[7:0];
          FlagS := a49[7];
          FlagZ := is_zero(a49);
          FlagA := a50[3];
          FlagP := parity(a49);
          FlagCY := false;
          jump ((a54,a52));
        } else {
          advance (10)
          #046B
          #instruction: LD   BC,FEE0
          advance (10)
          #046E
          #instruction: LD   HL,208A
          advance (10)
          #0471
          #instruction: LD   (HL),C
          M[208A] := E0;
          advance (7)
          #0472
          #instruction: INC  HL
          advance (5)
          #0473
          #instruction: INC  HL
          advance (5)
          #0474
          #instruction: LD   (HL),B
          M[208C] := FE;
          advance (7)
          #0475
          #instruction: RET
          let:16 a55 = (1 + (SPH,SPL)) in
          let:8 a56 = M[(SPH,SPL)] in
          let:16 a57 = (1 + a55) in
          let:8 a58 = M[a55] in
          advance (10)
          A := a49;
          B := FE;
          C := E0;
          H := 20;
          L := 8C;
          SPH := a57[15:8];
          SPL := a57[7:0];
          FlagS := a49[7];
          FlagZ := is_zero(a49);
          FlagA := a50[3];
          FlagP := parity(a49);
          FlagCY := false;
          jump ((a58,a56));
        }
      }
    }

0476:

    #0476
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0477
    #instruction: LD   A,(1B32)
    advance (13)
    #047A
    #instruction: LD   (2032),A
    M[2032] := 02;
    advance (13)
    #047D
    #instruction: LD   HL,(2038)
    let:8 a5 = M[2038] in
    let:8 a6 = M[2039] in
    advance (16)
    #0480
    #instruction: LD   A,L
    advance (5)
    #0481
    #instruction: OR   H
    let:8 a7 = (a6 | a5) in
    advance (4)
    #0482
    #instruction: JP   NZ,048A
    if (!is_zero(a7)) {
      advance (10)
      #048A
      #instruction: LD   DE,2035
      advance (10)
      #048D
      #instruction: LD   A,F9
      advance (7)
      #048F
      #instruction: CALL 0550
      let:16 a8 = (-1 + a3) in
      M[a8] := 04;
      let:16 a9 = (-1 + a8) in
      M[a9] := 92;
      #return-to: 0492
      advance (17)
      #0550
      #instruction: LD   (207F),A
      M[207F] := F9;
      advance (13)
      #0553
      #instruction: LD   HL,2073
      advance (10)
      #0556
      #instruction: LD   B,0B
      advance (7)
      #0558
      #instruction: JP   1A32
      advance (10)
      #1A32
      #instruction: LD   A,(DE)
      let:8 a10 = M[2035] in
      advance (7)
      #1A33
      #instruction: LD   (HL),A
      M[2073] := a10;
      advance (7)
      #1A34
      #instruction: INC  HL
      advance (5)
      #1A35
      #instruction: INC  DE
      advance (5)
      #1A36
      #instruction: DEC  B
      let:16 a11 = addWithCarry(!true,0B,~00) in
      let:8 a12 = (0B & 0F) in
      let:8 a13 = (~00 & 0F) in
      let:16 a14 = addWithCarry(!true,a12,a13) in
      advance (5)
      #1A37
      #instruction: JP   NZ,1A32
      if (!is_zero(a11[7:0])) {
        advance (10)
        A := a10;
        B := a11[7:0];
        D := 20;
        E := 36;
        H := 20;
        L := 74;
        SPH := a9[15:8];
        SPL := a9[7:0];
        FlagS := a11[7:0][7];
        FlagZ := is_zero(a11[7:0]);
        FlagA := a14[7:0][4];
        FlagP := parity(a11[7:0]);
        FlagCY := false;
        jump (1A32);
      } else {
        advance (10)
        #1A3A
        #instruction: RET
        let:16 a15 = (1 + a9) in
        let:8 a16 = M[a9] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (10)
        A := a10;
        B := a11[7:0];
        D := 20;
        E := 36;
        H := 20;
        L := 74;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a11[7:0][7];
        FlagZ := is_zero(a11[7:0]);
        FlagA := a14[7:0][4];
        FlagP := parity(a11[7:0]);
        FlagCY := false;
        jump ((a18,a16));
      }
    } else {
      advance (10)
      #0485
      #instruction: DEC  HL
      let:16 a19 = (-1 + (a6,a5)) in
      advance (5)
      #0486
      #instruction: LD   (2038),HL
      M[2038] := a19[7:0];
      M[2039] := a19[15:8];
      advance (16)
      #0489
      #instruction: RET
      let:16 a20 = (1 + a3) in
      let:8 a21 = M[a3] in
      let:16 a22 = (1 + a20) in
      let:8 a23 = M[a20] in
      advance (10)
      A := a7;
      H := a19[15:8];
      L := a19[7:0];
      SPH := a22[15:8];
      SPL := a22[7:0];
      FlagS := a7[7];
      FlagZ := is_zero(a7);
      FlagA := false;
      FlagP := parity(a7);
      FlagCY := false;
      jump ((a23,a21));
    }

0492:

    #0492
    #instruction: LD   A,(2046)
    let:8 a1 = M[2046] in
    advance (13)
    #0495
    #instruction: LD   (2070),A
    M[2070] := a1;
    advance (13)
    #0498
    #instruction: LD   A,(2056)
    let:8 a2 = M[2056] in
    advance (13)
    #049B
    #instruction: LD   (2071),A
    M[2071] := a2;
    advance (13)
    #049E
    #instruction: CALL 0563
    let:16 a3 = (-1 + (SPH,SPL)) in
    M[a3] := 04;
    let:16 a4 = (-1 + a3) in
    M[a4] := A1;
    #return-to: 04A1
    advance (17)
    #0563
    #instruction: LD   HL,2073
    advance (10)
    #0566
    #instruction: LD   A,(HL)
    let:8 a5 = M[2073] in
    advance (7)
    #0567
    #instruction: AND  80
    let:8 a6 = (80 & a5) in
    let:8 a7 = (80 | a5) in
    advance (7)
    #0569
    #instruction: JP   NZ,05C1
    if (!is_zero(a6)) {
      advance (10)
      #05C1
      #instruction: LD   DE,207C
      advance (10)
      #05C4
      #instruction: CALL 1A06
      let:16 a8 = (-1 + a4) in
      M[a8] := 05;
      let:16 a9 = (-1 + a8) in
      M[a9] := C7;
      #return-to: 05C7
      advance (17)
      #1A06
      #instruction: LD   HL,2072
      advance (10)
      #1A09
      #instruction: LD   B,(HL)
      let:8 a10 = M[2072] in
      advance (7)
      #1A0A
      #instruction: LD   A,(DE)
      let:8 a11 = M[207C] in
      advance (7)
      #1A0B
      #instruction: AND  80
      let:8 a12 = (80 & a11) in
      let:8 a13 = (80 | a11) in
      advance (7)
      #1A0D
      #instruction: XOR  B
      let:8 a14 = (a10 ^ a12) in
      advance (4)
      #1A0E
      #instruction: RET  NZ
      if (!is_zero(a14)) {
        let:16 a15 = (1 + a9) in
        let:8 a16 = M[a9] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (11)
        A := a14;
        B := a10;
        D := 20;
        E := 7C;
        H := 20;
        L := 72;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := false;
        jump ((a18,a16));
      } else {
        advance (5)
        #1A0F
        #instruction: SCF
        advance (4)
        #1A10
        #instruction: RET
        let:16 a19 = (1 + a9) in
        let:8 a20 = M[a9] in
        let:16 a21 = (1 + a19) in
        let:8 a22 = M[a19] in
        advance (10)
        A := a14;
        B := a10;
        D := 20;
        E := 7C;
        H := 20;
        L := 72;
        SPH := a21[15:8];
        SPL := a21[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := true;
        jump ((a22,a20));
      }
    } else {
      advance (10)
      #056C
      #instruction: LD   A,(20C1)
      let:8 a23 = M[20C1] in
      advance (13)
      #056F
      #instruction: CP   04
      let:16 a24 = addWithCarry(!false,a23,~04) in
      let:8 a25 = (a23 & 0F) in
      let:8 a26 = (~04 & 0F) in
      let:16 a27 = addWithCarry(!false,a25,a26) in
      advance (7)
      #0571
      #instruction: LD   A,(2069)
      let:8 a28 = M[2069] in
      advance (13)
      #0574
      #instruction: JP   Z,05B7
      if (is_zero(a24[7:0])) {
        advance (10)
        #05B7
        #instruction: LD   HL,2073
        advance (10)
        #05BA
        #instruction: LD   A,(HL)
        let:8 a29 = M[2073] in
        advance (7)
        #05BB
        #instruction: OR   80
        let:8 a30 = (80 | a29) in
        advance (7)
        #05BD
        #instruction: LD   (HL),A
        M[2073] := a30;
        advance (7)
        #05BE
        #instruction: INC  HL
        advance (5)
        #05BF
        #instruction: INC  (HL)
        let:8 a31 = M[2074] in
        let:16 a32 = addWithCarry(true,a31,00) in
        let:8 a33 = (a31 & 0F) in
        let:8 a34 = (00 & 0F) in
        let:16 a35 = addWithCarry(true,a33,a34) in
        M[2074] := a32[7:0];
        advance (10)
        #05C0
        #instruction: RET
        let:16 a36 = (1 + a4) in
        let:8 a37 = M[a4] in
        let:16 a38 = (1 + a36) in
        let:8 a39 = M[a36] in
        advance (10)
        A := a30;
        H := 20;
        L := 74;
        SPH := a38[15:8];
        SPL := a38[7:0];
        FlagS := a32[7:0][7];
        FlagZ := is_zero(a32[7:0]);
        FlagA := a35[7:0][4];
        FlagP := parity(a32[7:0]);
        FlagCY := false;
        jump ((a39,a37));
      } else {
        advance (10)
        #0577
        #instruction: AND  A
        let:8 a40 = (a28 & a28) in
        let:8 a41 = (a28 | a28) in
        advance (4)
        #0578
        #instruction: RET  Z
        if (is_zero(a40)) {
          let:16 a42 = (1 + a4) in
          let:8 a43 = M[a4] in
          let:16 a44 = (1 + a42) in
          let:8 a45 = M[a42] in
          advance (11)
          A := a40;
          H := 20;
          L := 73;
          SPH := a44[15:8];
          SPL := a44[7:0];
          FlagS := a40[7];
          FlagZ := is_zero(a40);
          FlagA := a41[3];
          FlagP := parity(a40);
          FlagCY := false;
          jump ((a45,a43));
        } else {
          advance (5)
          #0579
          #instruction: INC  HL
          advance (5)
          #057A
          #instruction: LD   (HL),00
          M[2074] := 00;
          advance (10)
          #057C
          #instruction: LD   A,(2070)
          let:8 a46 = M[2070] in
          advance (13)
          #057F
          #instruction: AND  A
          let:8 a47 = (a46 & a46) in
          let:8 a48 = (a46 | a46) in
          advance (4)
          #0580
          #instruction: JP   Z,0589
          if (is_zero(a47)) {
            advance (10)
            #0589
            #instruction: LD   A,(2071)
            let:8 a49 = M[2071] in
            advance (13)
            #058C
            #instruction: AND  A
            let:8 a50 = (a49 & a49) in
            let:8 a51 = (a49 | a49) in
            advance (4)
            #058D
            #instruction: JP   Z,0596
            if (is_zero(a50)) {
              advance (10)
              #0596
              #instruction: INC  HL
              advance (5)
              #0597
              #instruction: LD   A,(HL)
              let:8 a52 = M[2075] in
              advance (7)
              #0598
              #instruction: AND  A
              let:8 a53 = (a52 & a52) in
              let:8 a54 = (a52 | a52) in
              advance (4)
              #0599
              #instruction: JP   Z,061B
              if (is_zero(a53)) {
                advance (10)
                #061B
                #instruction: LD   A,(201B)
                let:8 a55 = M[201B] in
                advance (13)
                #061E
                #instruction: ADD  08
                let:16 a56 = addWithCarry(false,08,a55) in
                let:8 a57 = (08 & 0F) in
                let:8 a58 = (a55 & 0F) in
                let:16 a59 = addWithCarry(false,a57,a58) in
                advance (7)
                #0620
                #instruction: LD   H,A
                advance (5)
                #0621
                #instruction: CALL 156F
                let:16 a60 = (-1 + a4) in
                M[a60] := 06;
                let:16 a61 = (-1 + a60) in
                M[a61] := 24;
                #return-to: 0624
                advance (17)
                #156F
                #instruction: LD   A,(200A)
                let:8 a62 = M[200A] in
                advance (13)
                #1572
                #instruction: CALL 1554
                let:16 a63 = (-1 + a61) in
                M[a63] := 15;
                let:16 a64 = (-1 + a63) in
                M[a64] := 75;
                #return-to: 1575
                advance (17)
                #1554
                #instruction: LD   C,00
                advance (7)
                #1556
                #instruction: CP   H
                let:16 a65 = addWithCarry(!false,a62,~a56[7:0]) in
                let:8 a66 = (a62 & 0F) in
                let:8 a67 = (~a56[7:0] & 0F) in
                let:16 a68 = addWithCarry(!false,a66,a67) in
                advance (4)
                #1557
                #instruction: CALL NC,1590
                if (!!a65[15:8][0]) {
                  let:16 a69 = (-1 + a64) in
                  M[a69] := 15;
                  let:16 a70 = (-1 + a69) in
                  M[a70] := 5A;
                  #return-to: 155A
                  advance (17)
                  #1590
                  #instruction: INC  C
                  let:16 a71 = addWithCarry(true,00,00) in
                  let:8 a72 = (00 & 0F) in
                  let:8 a73 = (00 & 0F) in
                  let:16 a74 = addWithCarry(true,a72,a73) in
                  advance (5)
                  #1591
                  #instruction: ADD  10
                  let:16 a75 = addWithCarry(false,10,a62) in
                  let:8 a76 = (10 & 0F) in
                  let:8 a77 = (a62 & 0F) in
                  let:16 a78 = addWithCarry(false,a76,a77) in
                  advance (7)
                  #1593
                  #instruction: JP   MI,1590
                  if (a75[7:0][7]) {
                    advance (10)
                    A := a75[7:0];
                    C := a71[7:0];
                    H := a56[7:0];
                    L := 75;
                    SPH := a70[15:8];
                    SPL := a70[7:0];
                    FlagS := a75[7:0][7];
                    FlagZ := is_zero(a75[7:0]);
                    FlagA := a78[7:0][4];
                    FlagP := parity(a75[7:0]);
                    FlagCY := a75[15:8][0];
                    jump (1590);
                  } else {
                    advance (10)
                    #1596
                    #instruction: RET
                    let:16 a79 = (1 + a70) in
                    let:8 a80 = M[a70] in
                    let:16 a81 = (1 + a79) in
                    let:8 a82 = M[a79] in
                    advance (10)
                    A := a75[7:0];
                    C := a71[7:0];
                    H := a56[7:0];
                    L := 75;
                    SPH := a81[15:8];
                    SPL := a81[7:0];
                    FlagS := a75[7:0][7];
                    FlagZ := is_zero(a75[7:0]);
                    FlagA := a78[7:0][4];
                    FlagP := parity(a75[7:0]);
                    FlagCY := a75[15:8][0];
                    jump ((a82,a80));
                  }
                } else {
                  advance (11)
                  A := a62;
                  C := 00;
                  H := a56[7:0];
                  L := 75;
                  SPH := a64[15:8];
                  SPL := a64[7:0];
                  FlagS := a65[7:0][7];
                  FlagZ := is_zero(a65[7:0]);
                  FlagA := a68[7:0][4];
                  FlagP := parity(a65[7:0]);
                  FlagCY := !a65[15:8][0];
                  jump (155A);
                }
              } else {
                advance (10)
                #059C
                #instruction: LD   HL,(2076)
                let:8 a83 = M[2076] in
                let:8 a84 = M[2077] in
                advance (16)
                #059F
                #instruction: LD   C,(HL)
                let:8 a85 = M[(a84,a83)] in
                advance (7)
                #05A0
                #instruction: INC  HL
                let:16 a86 = (1 + (a84,a83)) in
                advance (5)
                #05A1
                #instruction: NOP
                advance (4)
                #05A2
                #instruction: LD   (2076),HL
                M[2076] := a86[7:0];
                M[2077] := a86[15:8];
                advance (16)
                #05A5
                #instruction: CALL 062F
                let:16 a87 = (-1 + a4) in
                M[a87] := 05;
                let:16 a88 = (-1 + a87) in
                M[a88] := A8;
                #return-to: 05A8
                advance (17)
                #062F
                #instruction: DEC  C
                let:16 a89 = addWithCarry(!true,a85,~00) in
                let:8 a90 = (a85 & 0F) in
                let:8 a91 = (~00 & 0F) in
                let:16 a92 = addWithCarry(!true,a90,a91) in
                advance (5)
                #0630
                #instruction: LD   A,(2067)
                let:8 a93 = M[2067] in
                advance (13)
                #0633
                #instruction: LD   H,A
                advance (5)
                #0634
                #instruction: LD   L,C
                advance (5)
                #0635
                #instruction: LD   D,05
                advance (7)
                #0637
                #instruction: LD   A,(HL)
                let:8 a94 = M[(a93,a89[7:0])] in
                advance (7)
                #0638
                #instruction: AND  A
                let:8 a95 = (a94 & a94) in
                let:8 a96 = (a94 | a94) in
                advance (4)
                #0639
                #instruction: SCF
                advance (4)
                #063A
                #instruction: RET  NZ
                if (!is_zero(a95)) {
                  let:16 a97 = (1 + a88) in
                  let:8 a98 = M[a88] in
                  let:16 a99 = (1 + a97) in
                  let:8 a100 = M[a97] in
                  advance (11)
                  A := a95;
                  C := a89[7:0];
                  D := 05;
                  H := a93;
                  L := a89[7:0];
                  SPH := a99[15:8];
                  SPL := a99[7:0];
                  FlagS := a95[7];
                  FlagZ := is_zero(a95);
                  FlagA := a96[3];
                  FlagP := parity(a95);
                  FlagCY := true;
                  jump ((a100,a98));
                } else {
                  advance (5)
                  #063B
                  #instruction: LD   A,L
                  advance (5)
                  #063C
                  #instruction: ADD  0B
                  let:16 a101 = addWithCarry(false,0B,a89[7:0]) in
                  let:8 a102 = (0B & 0F) in
                  let:8 a103 = (a89[7:0] & 0F) in
                  let:16 a104 = addWithCarry(false,a102,a103) in
                  advance (7)
                  #063E
                  #instruction: LD   L,A
                  advance (5)
                  #063F
                  #instruction: DEC  D
                  let:16 a105 = addWithCarry(!true,05,~00) in
                  let:8 a106 = (05 & 0F) in
                  let:8 a107 = (~00 & 0F) in
                  let:16 a108 = addWithCarry(!true,a106,a107) in
                  advance (5)
                  #0640
                  #instruction: JP   NZ,0637
                  if (!is_zero(a105[7:0])) {
                    advance (10)
                    A := a101[7:0];
                    C := a89[7:0];
                    D := a105[7:0];
                    H := a93;
                    L := a101[7:0];
                    SPH := a88[15:8];
                    SPL := a88[7:0];
                    FlagS := a105[7:0][7];
                    FlagZ := is_zero(a105[7:0]);
                    FlagA := a108[7:0][4];
                    FlagP := parity(a105[7:0]);
                    FlagCY := a101[15:8][0];
                    jump (0637);
                  } else {
                    advance (10)
                    #0643
                    #instruction: RET
                    let:16 a109 = (1 + a88) in
                    let:8 a110 = M[a88] in
                    let:16 a111 = (1 + a109) in
                    let:8 a112 = M[a109] in
                    advance (10)
                    A := a101[7:0];
                    C := a89[7:0];
                    D := a105[7:0];
                    H := a93;
                    L := a101[7:0];
                    SPH := a111[15:8];
                    SPL := a111[7:0];
                    FlagS := a105[7:0][7];
                    FlagZ := is_zero(a105[7:0]);
                    FlagA := a108[7:0][4];
                    FlagP := parity(a105[7:0]);
                    FlagCY := a101[15:8][0];
                    jump ((a112,a110));
                  }
                }
              }
            } else {
              advance (10)
              #0590
              #instruction: LD   B,A
              advance (5)
              #0591
              #instruction: LD   A,(20CF)
              let:8 a113 = M[20CF] in
              advance (13)
              #0594
              #instruction: CP   B
              let:16 a114 = addWithCarry(!false,a113,~a50) in
              let:8 a115 = (a113 & 0F) in
              let:8 a116 = (~a50 & 0F) in
              let:16 a117 = addWithCarry(!false,a115,a116) in
              advance (4)
              #0595
              #instruction: RET  NC
              if (!!a114[15:8][0]) {
                let:16 a118 = (1 + a4) in
                let:8 a119 = M[a4] in
                let:16 a120 = (1 + a118) in
                let:8 a121 = M[a118] in
                advance (11)
                A := a113;
                B := a50;
                H := 20;
                L := 74;
                SPH := a120[15:8];
                SPL := a120[7:0];
                FlagS := a114[7:0][7];
                FlagZ := is_zero(a114[7:0]);
                FlagA := a117[7:0][4];
                FlagP := parity(a114[7:0]);
                FlagCY := !a114[15:8][0];
                jump ((a121,a119));
              } else {
                advance (5)
                #0596
                #instruction: INC  HL
                advance (5)
                #0597
                #instruction: LD   A,(HL)
                let:8 a122 = M[2075] in
                advance (7)
                #0598
                #instruction: AND  A
                let:8 a123 = (a122 & a122) in
                let:8 a124 = (a122 | a122) in
                advance (4)
                #0599
                #instruction: JP   Z,061B
                if (is_zero(a123)) {
                  advance (10)
                  #061B
                  #instruction: LD   A,(201B)
                  let:8 a125 = M[201B] in
                  advance (13)
                  #061E
                  #instruction: ADD  08
                  let:16 a126 = addWithCarry(false,08,a125) in
                  let:8 a127 = (08 & 0F) in
                  let:8 a128 = (a125 & 0F) in
                  let:16 a129 = addWithCarry(false,a127,a128) in
                  advance (7)
                  #0620
                  #instruction: LD   H,A
                  advance (5)
                  #0621
                  #instruction: CALL 156F
                  let:16 a130 = (-1 + a4) in
                  M[a130] := 06;
                  let:16 a131 = (-1 + a130) in
                  M[a131] := 24;
                  #return-to: 0624
                  advance (17)
                  #156F
                  #instruction: LD   A,(200A)
                  let:8 a132 = M[200A] in
                  advance (13)
                  #1572
                  #instruction: CALL 1554
                  let:16 a133 = (-1 + a131) in
                  M[a133] := 15;
                  let:16 a134 = (-1 + a133) in
                  M[a134] := 75;
                  #return-to: 1575
                  advance (17)
                  #1554
                  #instruction: LD   C,00
                  advance (7)
                  #1556
                  #instruction: CP   H
                  let:16 a135 = addWithCarry(!false,a132,~a126[7:0]) in
                  let:8 a136 = (a132 & 0F) in
                  let:8 a137 = (~a126[7:0] & 0F) in
                  let:16 a138 = addWithCarry(!false,a136,a137) in
                  advance (4)
                  #1557
                  #instruction: CALL NC,1590
                  if (!!a135[15:8][0]) {
                    let:16 a139 = (-1 + a134) in
                    M[a139] := 15;
                    let:16 a140 = (-1 + a139) in
                    M[a140] := 5A;
                    #return-to: 155A
                    advance (17)
                    #1590
                    #instruction: INC  C
                    let:16 a141 = addWithCarry(true,00,00) in
                    let:8 a142 = (00 & 0F) in
                    let:8 a143 = (00 & 0F) in
                    let:16 a144 = addWithCarry(true,a142,a143) in
                    advance (5)
                    #1591
                    #instruction: ADD  10
                    let:16 a145 = addWithCarry(false,10,a132) in
                    let:8 a146 = (10 & 0F) in
                    let:8 a147 = (a132 & 0F) in
                    let:16 a148 = addWithCarry(false,a146,a147) in
                    advance (7)
                    #1593
                    #instruction: JP   MI,1590
                    if (a145[7:0][7]) {
                      advance (10)
                      A := a145[7:0];
                      B := a50;
                      C := a141[7:0];
                      H := a126[7:0];
                      L := 75;
                      SPH := a140[15:8];
                      SPL := a140[7:0];
                      FlagS := a145[7:0][7];
                      FlagZ := is_zero(a145[7:0]);
                      FlagA := a148[7:0][4];
                      FlagP := parity(a145[7:0]);
                      FlagCY := a145[15:8][0];
                      jump (1590);
                    } else {
                      advance (10)
                      #1596
                      #instruction: RET
                      let:16 a149 = (1 + a140) in
                      let:8 a150 = M[a140] in
                      let:16 a151 = (1 + a149) in
                      let:8 a152 = M[a149] in
                      advance (10)
                      A := a145[7:0];
                      B := a50;
                      C := a141[7:0];
                      H := a126[7:0];
                      L := 75;
                      SPH := a151[15:8];
                      SPL := a151[7:0];
                      FlagS := a145[7:0][7];
                      FlagZ := is_zero(a145[7:0]);
                      FlagA := a148[7:0][4];
                      FlagP := parity(a145[7:0]);
                      FlagCY := a145[15:8][0];
                      jump ((a152,a150));
                    }
                  } else {
                    advance (11)
                    A := a132;
                    B := a50;
                    C := 00;
                    H := a126[7:0];
                    L := 75;
                    SPH := a134[15:8];
                    SPL := a134[7:0];
                    FlagS := a135[7:0][7];
                    FlagZ := is_zero(a135[7:0]);
                    FlagA := a138[7:0][4];
                    FlagP := parity(a135[7:0]);
                    FlagCY := !a135[15:8][0];
                    jump (155A);
                  }
                } else {
                  advance (10)
                  #059C
                  #instruction: LD   HL,(2076)
                  let:8 a153 = M[2076] in
                  let:8 a154 = M[2077] in
                  advance (16)
                  #059F
                  #instruction: LD   C,(HL)
                  let:8 a155 = M[(a154,a153)] in
                  advance (7)
                  #05A0
                  #instruction: INC  HL
                  let:16 a156 = (1 + (a154,a153)) in
                  advance (5)
                  #05A1
                  #instruction: NOP
                  advance (4)
                  #05A2
                  #instruction: LD   (2076),HL
                  M[2076] := a156[7:0];
                  M[2077] := a156[15:8];
                  advance (16)
                  #05A5
                  #instruction: CALL 062F
                  let:16 a157 = (-1 + a4) in
                  M[a157] := 05;
                  let:16 a158 = (-1 + a157) in
                  M[a158] := A8;
                  #return-to: 05A8
                  advance (17)
                  #062F
                  #instruction: DEC  C
                  let:16 a159 = addWithCarry(!true,a155,~00) in
                  let:8 a160 = (a155 & 0F) in
                  let:8 a161 = (~00 & 0F) in
                  let:16 a162 = addWithCarry(!true,a160,a161) in
                  advance (5)
                  #0630
                  #instruction: LD   A,(2067)
                  let:8 a163 = M[2067] in
                  advance (13)
                  #0633
                  #instruction: LD   H,A
                  advance (5)
                  #0634
                  #instruction: LD   L,C
                  advance (5)
                  #0635
                  #instruction: LD   D,05
                  advance (7)
                  #0637
                  #instruction: LD   A,(HL)
                  let:8 a164 = M[(a163,a159[7:0])] in
                  advance (7)
                  #0638
                  #instruction: AND  A
                  let:8 a165 = (a164 & a164) in
                  let:8 a166 = (a164 | a164) in
                  advance (4)
                  #0639
                  #instruction: SCF
                  advance (4)
                  #063A
                  #instruction: RET  NZ
                  if (!is_zero(a165)) {
                    let:16 a167 = (1 + a158) in
                    let:8 a168 = M[a158] in
                    let:16 a169 = (1 + a167) in
                    let:8 a170 = M[a167] in
                    advance (11)
                    A := a165;
                    B := a50;
                    C := a159[7:0];
                    D := 05;
                    H := a163;
                    L := a159[7:0];
                    SPH := a169[15:8];
                    SPL := a169[7:0];
                    FlagS := a165[7];
                    FlagZ := is_zero(a165);
                    FlagA := a166[3];
                    FlagP := parity(a165);
                    FlagCY := true;
                    jump ((a170,a168));
                  } else {
                    advance (5)
                    #063B
                    #instruction: LD   A,L
                    advance (5)
                    #063C
                    #instruction: ADD  0B
                    let:16 a171 = addWithCarry(false,0B,a159[7:0]) in
                    let:8 a172 = (0B & 0F) in
                    let:8 a173 = (a159[7:0] & 0F) in
                    let:16 a174 = addWithCarry(false,a172,a173) in
                    advance (7)
                    #063E
                    #instruction: LD   L,A
                    advance (5)
                    #063F
                    #instruction: DEC  D
                    let:16 a175 = addWithCarry(!true,05,~00) in
                    let:8 a176 = (05 & 0F) in
                    let:8 a177 = (~00 & 0F) in
                    let:16 a178 = addWithCarry(!true,a176,a177) in
                    advance (5)
                    #0640
                    #instruction: JP   NZ,0637
                    if (!is_zero(a175[7:0])) {
                      advance (10)
                      A := a171[7:0];
                      B := a50;
                      C := a159[7:0];
                      D := a175[7:0];
                      H := a163;
                      L := a171[7:0];
                      SPH := a158[15:8];
                      SPL := a158[7:0];
                      FlagS := a175[7:0][7];
                      FlagZ := is_zero(a175[7:0]);
                      FlagA := a178[7:0][4];
                      FlagP := parity(a175[7:0]);
                      FlagCY := a171[15:8][0];
                      jump (0637);
                    } else {
                      advance (10)
                      #0643
                      #instruction: RET
                      let:16 a179 = (1 + a158) in
                      let:8 a180 = M[a158] in
                      let:16 a181 = (1 + a179) in
                      let:8 a182 = M[a179] in
                      advance (10)
                      A := a171[7:0];
                      B := a50;
                      C := a159[7:0];
                      D := a175[7:0];
                      H := a163;
                      L := a171[7:0];
                      SPH := a181[15:8];
                      SPL := a181[7:0];
                      FlagS := a175[7:0][7];
                      FlagZ := is_zero(a175[7:0]);
                      FlagA := a178[7:0][4];
                      FlagP := parity(a175[7:0]);
                      FlagCY := a171[15:8][0];
                      jump ((a182,a180));
                    }
                  }
                }
              }
            }
          } else {
            advance (10)
            #0583
            #instruction: LD   B,A
            advance (5)
            #0584
            #instruction: LD   A,(20CF)
            let:8 a183 = M[20CF] in
            advance (13)
            #0587
            #instruction: CP   B
            let:16 a184 = addWithCarry(!false,a183,~a47) in
            let:8 a185 = (a183 & 0F) in
            let:8 a186 = (~a47 & 0F) in
            let:16 a187 = addWithCarry(!false,a185,a186) in
            advance (4)
            #0588
            #instruction: RET  NC
            if (!!a184[15:8][0]) {
              let:16 a188 = (1 + a4) in
              let:8 a189 = M[a4] in
              let:16 a190 = (1 + a188) in
              let:8 a191 = M[a188] in
              advance (11)
              A := a183;
              B := a47;
              H := 20;
              L := 74;
              SPH := a190[15:8];
              SPL := a190[7:0];
              FlagS := a184[7:0][7];
              FlagZ := is_zero(a184[7:0]);
              FlagA := a187[7:0][4];
              FlagP := parity(a184[7:0]);
              FlagCY := !a184[15:8][0];
              jump ((a191,a189));
            } else {
              advance (5)
              #0589
              #instruction: LD   A,(2071)
              let:8 a192 = M[2071] in
              advance (13)
              #058C
              #instruction: AND  A
              let:8 a193 = (a192 & a192) in
              let:8 a194 = (a192 | a192) in
              advance (4)
              #058D
              #instruction: JP   Z,0596
              if (is_zero(a193)) {
                advance (10)
                #0596
                #instruction: INC  HL
                advance (5)
                #0597
                #instruction: LD   A,(HL)
                let:8 a195 = M[2075] in
                advance (7)
                #0598
                #instruction: AND  A
                let:8 a196 = (a195 & a195) in
                let:8 a197 = (a195 | a195) in
                advance (4)
                #0599
                #instruction: JP   Z,061B
                if (is_zero(a196)) {
                  advance (10)
                  #061B
                  #instruction: LD   A,(201B)
                  let:8 a198 = M[201B] in
                  advance (13)
                  #061E
                  #instruction: ADD  08
                  let:16 a199 = addWithCarry(false,08,a198) in
                  let:8 a200 = (08 & 0F) in
                  let:8 a201 = (a198 & 0F) in
                  let:16 a202 = addWithCarry(false,a200,a201) in
                  advance (7)
                  #0620
                  #instruction: LD   H,A
                  advance (5)
                  #0621
                  #instruction: CALL 156F
                  let:16 a203 = (-1 + a4) in
                  M[a203] := 06;
                  let:16 a204 = (-1 + a203) in
                  M[a204] := 24;
                  #return-to: 0624
                  advance (17)
                  #156F
                  #instruction: LD   A,(200A)
                  let:8 a205 = M[200A] in
                  advance (13)
                  #1572
                  #instruction: CALL 1554
                  let:16 a206 = (-1 + a204) in
                  M[a206] := 15;
                  let:16 a207 = (-1 + a206) in
                  M[a207] := 75;
                  #return-to: 1575
                  advance (17)
                  #1554
                  #instruction: LD   C,00
                  advance (7)
                  #1556
                  #instruction: CP   H
                  let:16 a208 = addWithCarry(!false,a205,~a199[7:0]) in
                  let:8 a209 = (a205 & 0F) in
                  let:8 a210 = (~a199[7:0] & 0F) in
                  let:16 a211 = addWithCarry(!false,a209,a210) in
                  advance (4)
                  #1557
                  #instruction: CALL NC,1590
                  if (!!a208[15:8][0]) {
                    let:16 a212 = (-1 + a207) in
                    M[a212] := 15;
                    let:16 a213 = (-1 + a212) in
                    M[a213] := 5A;
                    #return-to: 155A
                    advance (17)
                    #1590
                    #instruction: INC  C
                    let:16 a214 = addWithCarry(true,00,00) in
                    let:8 a215 = (00 & 0F) in
                    let:8 a216 = (00 & 0F) in
                    let:16 a217 = addWithCarry(true,a215,a216) in
                    advance (5)
                    #1591
                    #instruction: ADD  10
                    let:16 a218 = addWithCarry(false,10,a205) in
                    let:8 a219 = (10 & 0F) in
                    let:8 a220 = (a205 & 0F) in
                    let:16 a221 = addWithCarry(false,a219,a220) in
                    advance (7)
                    #1593
                    #instruction: JP   MI,1590
                    if (a218[7:0][7]) {
                      advance (10)
                      A := a218[7:0];
                      B := a47;
                      C := a214[7:0];
                      H := a199[7:0];
                      L := 75;
                      SPH := a213[15:8];
                      SPL := a213[7:0];
                      FlagS := a218[7:0][7];
                      FlagZ := is_zero(a218[7:0]);
                      FlagA := a221[7:0][4];
                      FlagP := parity(a218[7:0]);
                      FlagCY := a218[15:8][0];
                      jump (1590);
                    } else {
                      advance (10)
                      #1596
                      #instruction: RET
                      let:16 a222 = (1 + a213) in
                      let:8 a223 = M[a213] in
                      let:16 a224 = (1 + a222) in
                      let:8 a225 = M[a222] in
                      advance (10)
                      A := a218[7:0];
                      B := a47;
                      C := a214[7:0];
                      H := a199[7:0];
                      L := 75;
                      SPH := a224[15:8];
                      SPL := a224[7:0];
                      FlagS := a218[7:0][7];
                      FlagZ := is_zero(a218[7:0]);
                      FlagA := a221[7:0][4];
                      FlagP := parity(a218[7:0]);
                      FlagCY := a218[15:8][0];
                      jump ((a225,a223));
                    }
                  } else {
                    advance (11)
                    A := a205;
                    B := a47;
                    C := 00;
                    H := a199[7:0];
                    L := 75;
                    SPH := a207[15:8];
                    SPL := a207[7:0];
                    FlagS := a208[7:0][7];
                    FlagZ := is_zero(a208[7:0]);
                    FlagA := a211[7:0][4];
                    FlagP := parity(a208[7:0]);
                    FlagCY := !a208[15:8][0];
                    jump (155A);
                  }
                } else {
                  advance (10)
                  #059C
                  #instruction: LD   HL,(2076)
                  let:8 a226 = M[2076] in
                  let:8 a227 = M[2077] in
                  advance (16)
                  #059F
                  #instruction: LD   C,(HL)
                  let:8 a228 = M[(a227,a226)] in
                  advance (7)
                  #05A0
                  #instruction: INC  HL
                  let:16 a229 = (1 + (a227,a226)) in
                  advance (5)
                  #05A1
                  #instruction: NOP
                  advance (4)
                  #05A2
                  #instruction: LD   (2076),HL
                  M[2076] := a229[7:0];
                  M[2077] := a229[15:8];
                  advance (16)
                  #05A5
                  #instruction: CALL 062F
                  let:16 a230 = (-1 + a4) in
                  M[a230] := 05;
                  let:16 a231 = (-1 + a230) in
                  M[a231] := A8;
                  #return-to: 05A8
                  advance (17)
                  #062F
                  #instruction: DEC  C
                  let:16 a232 = addWithCarry(!true,a228,~00) in
                  let:8 a233 = (a228 & 0F) in
                  let:8 a234 = (~00 & 0F) in
                  let:16 a235 = addWithCarry(!true,a233,a234) in
                  advance (5)
                  #0630
                  #instruction: LD   A,(2067)
                  let:8 a236 = M[2067] in
                  advance (13)
                  #0633
                  #instruction: LD   H,A
                  advance (5)
                  #0634
                  #instruction: LD   L,C
                  advance (5)
                  #0635
                  #instruction: LD   D,05
                  advance (7)
                  #0637
                  #instruction: LD   A,(HL)
                  let:8 a237 = M[(a236,a232[7:0])] in
                  advance (7)
                  #0638
                  #instruction: AND  A
                  let:8 a238 = (a237 & a237) in
                  let:8 a239 = (a237 | a237) in
                  advance (4)
                  #0639
                  #instruction: SCF
                  advance (4)
                  #063A
                  #instruction: RET  NZ
                  if (!is_zero(a238)) {
                    let:16 a240 = (1 + a231) in
                    let:8 a241 = M[a231] in
                    let:16 a242 = (1 + a240) in
                    let:8 a243 = M[a240] in
                    advance (11)
                    A := a238;
                    B := a47;
                    C := a232[7:0];
                    D := 05;
                    H := a236;
                    L := a232[7:0];
                    SPH := a242[15:8];
                    SPL := a242[7:0];
                    FlagS := a238[7];
                    FlagZ := is_zero(a238);
                    FlagA := a239[3];
                    FlagP := parity(a238);
                    FlagCY := true;
                    jump ((a243,a241));
                  } else {
                    advance (5)
                    #063B
                    #instruction: LD   A,L
                    advance (5)
                    #063C
                    #instruction: ADD  0B
                    let:16 a244 = addWithCarry(false,0B,a232[7:0]) in
                    let:8 a245 = (0B & 0F) in
                    let:8 a246 = (a232[7:0] & 0F) in
                    let:16 a247 = addWithCarry(false,a245,a246) in
                    advance (7)
                    #063E
                    #instruction: LD   L,A
                    advance (5)
                    #063F
                    #instruction: DEC  D
                    let:16 a248 = addWithCarry(!true,05,~00) in
                    let:8 a249 = (05 & 0F) in
                    let:8 a250 = (~00 & 0F) in
                    let:16 a251 = addWithCarry(!true,a249,a250) in
                    advance (5)
                    #0640
                    #instruction: JP   NZ,0637
                    if (!is_zero(a248[7:0])) {
                      advance (10)
                      A := a244[7:0];
                      B := a47;
                      C := a232[7:0];
                      D := a248[7:0];
                      H := a236;
                      L := a244[7:0];
                      SPH := a231[15:8];
                      SPL := a231[7:0];
                      FlagS := a248[7:0][7];
                      FlagZ := is_zero(a248[7:0]);
                      FlagA := a251[7:0][4];
                      FlagP := parity(a248[7:0]);
                      FlagCY := a244[15:8][0];
                      jump (0637);
                    } else {
                      advance (10)
                      #0643
                      #instruction: RET
                      let:16 a252 = (1 + a231) in
                      let:8 a253 = M[a231] in
                      let:16 a254 = (1 + a252) in
                      let:8 a255 = M[a252] in
                      advance (10)
                      A := a244[7:0];
                      B := a47;
                      C := a232[7:0];
                      D := a248[7:0];
                      H := a236;
                      L := a244[7:0];
                      SPH := a254[15:8];
                      SPL := a254[7:0];
                      FlagS := a248[7:0][7];
                      FlagZ := is_zero(a248[7:0]);
                      FlagA := a251[7:0][4];
                      FlagP := parity(a248[7:0]);
                      FlagCY := a244[15:8][0];
                      jump ((a255,a253));
                    }
                  }
                }
              } else {
                advance (10)
                #0590
                #instruction: LD   B,A
                advance (5)
                #0591
                #instruction: LD   A,(20CF)
                let:8 a256 = M[20CF] in
                advance (13)
                #0594
                #instruction: CP   B
                let:16 a257 = addWithCarry(!false,a256,~a193) in
                let:8 a258 = (a256 & 0F) in
                let:8 a259 = (~a193 & 0F) in
                let:16 a260 = addWithCarry(!false,a258,a259) in
                advance (4)
                #0595
                #instruction: RET  NC
                if (!!a257[15:8][0]) {
                  let:16 a261 = (1 + a4) in
                  let:8 a262 = M[a4] in
                  let:16 a263 = (1 + a261) in
                  let:8 a264 = M[a261] in
                  advance (11)
                  A := a256;
                  B := a193;
                  H := 20;
                  L := 74;
                  SPH := a263[15:8];
                  SPL := a263[7:0];
                  FlagS := a257[7:0][7];
                  FlagZ := is_zero(a257[7:0]);
                  FlagA := a260[7:0][4];
                  FlagP := parity(a257[7:0]);
                  FlagCY := !a257[15:8][0];
                  jump ((a264,a262));
                } else {
                  advance (5)
                  #0596
                  #instruction: INC  HL
                  advance (5)
                  #0597
                  #instruction: LD   A,(HL)
                  let:8 a265 = M[2075] in
                  advance (7)
                  #0598
                  #instruction: AND  A
                  let:8 a266 = (a265 & a265) in
                  let:8 a267 = (a265 | a265) in
                  advance (4)
                  #0599
                  #instruction: JP   Z,061B
                  if (is_zero(a266)) {
                    advance (10)
                    #061B
                    #instruction: LD   A,(201B)
                    let:8 a268 = M[201B] in
                    advance (13)
                    #061E
                    #instruction: ADD  08
                    let:16 a269 = addWithCarry(false,08,a268) in
                    let:8 a270 = (08 & 0F) in
                    let:8 a271 = (a268 & 0F) in
                    let:16 a272 = addWithCarry(false,a270,a271) in
                    advance (7)
                    #0620
                    #instruction: LD   H,A
                    advance (5)
                    #0621
                    #instruction: CALL 156F
                    let:16 a273 = (-1 + a4) in
                    M[a273] := 06;
                    let:16 a274 = (-1 + a273) in
                    M[a274] := 24;
                    #return-to: 0624
                    advance (17)
                    #156F
                    #instruction: LD   A,(200A)
                    let:8 a275 = M[200A] in
                    advance (13)
                    #1572
                    #instruction: CALL 1554
                    let:16 a276 = (-1 + a274) in
                    M[a276] := 15;
                    let:16 a277 = (-1 + a276) in
                    M[a277] := 75;
                    #return-to: 1575
                    advance (17)
                    #1554
                    #instruction: LD   C,00
                    advance (7)
                    #1556
                    #instruction: CP   H
                    let:16 a278 = addWithCarry(!false,a275,~a269[7:0]) in
                    let:8 a279 = (a275 & 0F) in
                    let:8 a280 = (~a269[7:0] & 0F) in
                    let:16 a281 = addWithCarry(!false,a279,a280) in
                    advance (4)
                    #1557
                    #instruction: CALL NC,1590
                    if (!!a278[15:8][0]) {
                      let:16 a282 = (-1 + a277) in
                      M[a282] := 15;
                      let:16 a283 = (-1 + a282) in
                      M[a283] := 5A;
                      #return-to: 155A
                      advance (17)
                      #1590
                      #instruction: INC  C
                      let:16 a284 = addWithCarry(true,00,00) in
                      let:8 a285 = (00 & 0F) in
                      let:8 a286 = (00 & 0F) in
                      let:16 a287 = addWithCarry(true,a285,a286) in
                      advance (5)
                      #1591
                      #instruction: ADD  10
                      let:16 a288 = addWithCarry(false,10,a275) in
                      let:8 a289 = (10 & 0F) in
                      let:8 a290 = (a275 & 0F) in
                      let:16 a291 = addWithCarry(false,a289,a290) in
                      advance (7)
                      #1593
                      #instruction: JP   MI,1590
                      if (a288[7:0][7]) {
                        advance (10)
                        A := a288[7:0];
                        B := a193;
                        C := a284[7:0];
                        H := a269[7:0];
                        L := 75;
                        SPH := a283[15:8];
                        SPL := a283[7:0];
                        FlagS := a288[7:0][7];
                        FlagZ := is_zero(a288[7:0]);
                        FlagA := a291[7:0][4];
                        FlagP := parity(a288[7:0]);
                        FlagCY := a288[15:8][0];
                        jump (1590);
                      } else {
                        advance (10)
                        #1596
                        #instruction: RET
                        let:16 a292 = (1 + a283) in
                        let:8 a293 = M[a283] in
                        let:16 a294 = (1 + a292) in
                        let:8 a295 = M[a292] in
                        advance (10)
                        A := a288[7:0];
                        B := a193;
                        C := a284[7:0];
                        H := a269[7:0];
                        L := 75;
                        SPH := a294[15:8];
                        SPL := a294[7:0];
                        FlagS := a288[7:0][7];
                        FlagZ := is_zero(a288[7:0]);
                        FlagA := a291[7:0][4];
                        FlagP := parity(a288[7:0]);
                        FlagCY := a288[15:8][0];
                        jump ((a295,a293));
                      }
                    } else {
                      advance (11)
                      A := a275;
                      B := a193;
                      C := 00;
                      H := a269[7:0];
                      L := 75;
                      SPH := a277[15:8];
                      SPL := a277[7:0];
                      FlagS := a278[7:0][7];
                      FlagZ := is_zero(a278[7:0]);
                      FlagA := a281[7:0][4];
                      FlagP := parity(a278[7:0]);
                      FlagCY := !a278[15:8][0];
                      jump (155A);
                    }
                  } else {
                    advance (10)
                    #059C
                    #instruction: LD   HL,(2076)
                    let:8 a296 = M[2076] in
                    let:8 a297 = M[2077] in
                    advance (16)
                    #059F
                    #instruction: LD   C,(HL)
                    let:8 a298 = M[(a297,a296)] in
                    advance (7)
                    #05A0
                    #instruction: INC  HL
                    let:16 a299 = (1 + (a297,a296)) in
                    advance (5)
                    #05A1
                    #instruction: NOP
                    advance (4)
                    #05A2
                    #instruction: LD   (2076),HL
                    M[2076] := a299[7:0];
                    M[2077] := a299[15:8];
                    advance (16)
                    #05A5
                    #instruction: CALL 062F
                    let:16 a300 = (-1 + a4) in
                    M[a300] := 05;
                    let:16 a301 = (-1 + a300) in
                    M[a301] := A8;
                    #return-to: 05A8
                    advance (17)
                    #062F
                    #instruction: DEC  C
                    let:16 a302 = addWithCarry(!true,a298,~00) in
                    let:8 a303 = (a298 & 0F) in
                    let:8 a304 = (~00 & 0F) in
                    let:16 a305 = addWithCarry(!true,a303,a304) in
                    advance (5)
                    #0630
                    #instruction: LD   A,(2067)
                    let:8 a306 = M[2067] in
                    advance (13)
                    #0633
                    #instruction: LD   H,A
                    advance (5)
                    #0634
                    #instruction: LD   L,C
                    advance (5)
                    #0635
                    #instruction: LD   D,05
                    advance (7)
                    #0637
                    #instruction: LD   A,(HL)
                    let:8 a307 = M[(a306,a302[7:0])] in
                    advance (7)
                    #0638
                    #instruction: AND  A
                    let:8 a308 = (a307 & a307) in
                    let:8 a309 = (a307 | a307) in
                    advance (4)
                    #0639
                    #instruction: SCF
                    advance (4)
                    #063A
                    #instruction: RET  NZ
                    if (!is_zero(a308)) {
                      let:16 a310 = (1 + a301) in
                      let:8 a311 = M[a301] in
                      let:16 a312 = (1 + a310) in
                      let:8 a313 = M[a310] in
                      advance (11)
                      A := a308;
                      B := a193;
                      C := a302[7:0];
                      D := 05;
                      H := a306;
                      L := a302[7:0];
                      SPH := a312[15:8];
                      SPL := a312[7:0];
                      FlagS := a308[7];
                      FlagZ := is_zero(a308);
                      FlagA := a309[3];
                      FlagP := parity(a308);
                      FlagCY := true;
                      jump ((a313,a311));
                    } else {
                      advance (5)
                      #063B
                      #instruction: LD   A,L
                      advance (5)
                      #063C
                      #instruction: ADD  0B
                      let:16 a314 = addWithCarry(false,0B,a302[7:0]) in
                      let:8 a315 = (0B & 0F) in
                      let:8 a316 = (a302[7:0] & 0F) in
                      let:16 a317 = addWithCarry(false,a315,a316) in
                      advance (7)
                      #063E
                      #instruction: LD   L,A
                      advance (5)
                      #063F
                      #instruction: DEC  D
                      let:16 a318 = addWithCarry(!true,05,~00) in
                      let:8 a319 = (05 & 0F) in
                      let:8 a320 = (~00 & 0F) in
                      let:16 a321 = addWithCarry(!true,a319,a320) in
                      advance (5)
                      #0640
                      #instruction: JP   NZ,0637
                      if (!is_zero(a318[7:0])) {
                        advance (10)
                        A := a314[7:0];
                        B := a193;
                        C := a302[7:0];
                        D := a318[7:0];
                        H := a306;
                        L := a314[7:0];
                        SPH := a301[15:8];
                        SPL := a301[7:0];
                        FlagS := a318[7:0][7];
                        FlagZ := is_zero(a318[7:0]);
                        FlagA := a321[7:0][4];
                        FlagP := parity(a318[7:0]);
                        FlagCY := a314[15:8][0];
                        jump (0637);
                      } else {
                        advance (10)
                        #0643
                        #instruction: RET
                        let:16 a322 = (1 + a301) in
                        let:8 a323 = M[a301] in
                        let:16 a324 = (1 + a322) in
                        let:8 a325 = M[a322] in
                        advance (10)
                        A := a314[7:0];
                        B := a193;
                        C := a302[7:0];
                        D := a318[7:0];
                        H := a306;
                        L := a314[7:0];
                        SPH := a324[15:8];
                        SPL := a324[7:0];
                        FlagS := a318[7:0][7];
                        FlagZ := is_zero(a318[7:0]);
                        FlagA := a321[7:0][4];
                        FlagP := parity(a318[7:0]);
                        FlagCY := a314[15:8][0];
                        jump ((a325,a323));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

04A1:

    #04A1
    #instruction: LD   A,(2078)
    let:8 a1 = M[2078] in
    advance (13)
    #04A4
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #04A5
    #instruction: LD   HL,2035
    advance (10)
    #04A8
    #instruction: JP   NZ,055B
    if (!is_zero(a2)) {
      advance (10)
      #055B
      #instruction: LD   DE,2073
      advance (10)
      #055E
      #instruction: LD   B,0B
      advance (7)
      #0560
      #instruction: JP   1A32
      advance (10)
      #1A32
      #instruction: LD   A,(DE)
      let:8 a4 = M[2073] in
      advance (7)
      #1A33
      #instruction: LD   (HL),A
      M[2035] := a4;
      advance (7)
      #1A34
      #instruction: INC  HL
      advance (5)
      #1A35
      #instruction: INC  DE
      advance (5)
      #1A36
      #instruction: DEC  B
      let:16 a5 = addWithCarry(!true,0B,~00) in
      let:8 a6 = (0B & 0F) in
      let:8 a7 = (~00 & 0F) in
      let:16 a8 = addWithCarry(!true,a6,a7) in
      advance (5)
      #1A37
      #instruction: JP   NZ,1A32
      if (!is_zero(a5[7:0])) {
        advance (10)
        A := a4;
        B := a5[7:0];
        D := 20;
        E := 74;
        H := 20;
        L := 36;
        FlagS := a5[7:0][7];
        FlagZ := is_zero(a5[7:0]);
        FlagA := a8[7:0][4];
        FlagP := parity(a5[7:0]);
        FlagCY := false;
        jump (1A32);
      } else {
        advance (10)
        #1A3A
        #instruction: RET
        let:16 a9 = (1 + (SPH,SPL)) in
        let:8 a10 = M[(SPH,SPL)] in
        let:16 a11 = (1 + a9) in
        let:8 a12 = M[a9] in
        advance (10)
        A := a4;
        B := a5[7:0];
        D := 20;
        E := 74;
        H := 20;
        L := 36;
        SPH := a11[15:8];
        SPL := a11[7:0];
        FlagS := a5[7:0][7];
        FlagZ := is_zero(a5[7:0]);
        FlagA := a8[7:0][4];
        FlagP := parity(a5[7:0]);
        FlagCY := false;
        jump ((a12,a10));
      }
    } else {
      advance (10)
      #04AB
      #instruction: LD   DE,1B30
      advance (10)
      #04AE
      #instruction: LD   HL,2030
      advance (10)
      #04B1
      #instruction: LD   B,10
      advance (7)
      #04B3
      #instruction: JP   1A32
      advance (10)
      #1A32
      #instruction: LD   A,(DE)
      advance (7)
      #1A33
      #instruction: LD   (HL),A
      M[2030] := 00;
      advance (7)
      #1A34
      #instruction: INC  HL
      advance (5)
      #1A35
      #instruction: INC  DE
      advance (5)
      #1A36
      #instruction: DEC  B
      let:16 a13 = addWithCarry(!true,10,~00) in
      let:8 a14 = (10 & 0F) in
      let:8 a15 = (~00 & 0F) in
      let:16 a16 = addWithCarry(!true,a14,a15) in
      advance (5)
      #1A37
      #instruction: JP   NZ,1A32
      if (!is_zero(a13[7:0])) {
        advance (10)
        A := 00;
        B := a13[7:0];
        D := 1B;
        E := 31;
        H := 20;
        L := 31;
        FlagS := a13[7:0][7];
        FlagZ := is_zero(a13[7:0]);
        FlagA := a16[7:0][4];
        FlagP := parity(a13[7:0]);
        FlagCY := false;
        jump (1A32);
      } else {
        advance (10)
        #1A3A
        #instruction: RET
        let:16 a17 = (1 + (SPH,SPL)) in
        let:8 a18 = M[(SPH,SPL)] in
        let:16 a19 = (1 + a17) in
        let:8 a20 = M[a17] in
        advance (10)
        A := 00;
        B := a13[7:0];
        D := 1B;
        E := 31;
        H := 20;
        L := 31;
        SPH := a19[15:8];
        SPL := a19[7:0];
        FlagS := a13[7:0][7];
        FlagZ := is_zero(a13[7:0]);
        FlagA := a16[7:0][4];
        FlagP := parity(a13[7:0]);
        FlagCY := false;
        jump ((a20,a18));
      }
    }

04B6:

    #04B6
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #04B7
    #instruction: LD   A,(206E)
    let:8 a5 = M[206E] in
    advance (13)
    #04BA
    #instruction: AND  A
    let:8 a6 = (a5 & a5) in
    let:8 a7 = (a5 | a5) in
    advance (4)
    #04BB
    #instruction: RET  NZ
    if (!is_zero(a6)) {
      let:16 a8 = (1 + a3) in
      let:8 a9 = M[a3] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (11)
      A := a6;
      H := a4;
      L := a2;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a6[7];
      FlagZ := is_zero(a6);
      FlagA := a7[3];
      FlagP := parity(a6);
      FlagCY := false;
      jump ((a11,a9));
    } else {
      advance (5)
      #04BC
      #instruction: LD   A,(2080)
      let:8 a12 = M[2080] in
      advance (13)
      #04BF
      #instruction: CP   01
      let:16 a13 = addWithCarry(!false,a12,~01) in
      let:8 a14 = (a12 & 0F) in
      let:8 a15 = (~01 & 0F) in
      let:16 a16 = addWithCarry(!false,a14,a15) in
      advance (7)
      #04C1
      #instruction: RET  NZ
      if (!is_zero(a13[7:0])) {
        let:16 a17 = (1 + a3) in
        let:8 a18 = M[a3] in
        let:16 a19 = (1 + a17) in
        let:8 a20 = M[a17] in
        advance (11)
        A := a12;
        H := a4;
        L := a2;
        SPH := a19[15:8];
        SPL := a19[7:0];
        FlagS := a13[7:0][7];
        FlagZ := is_zero(a13[7:0]);
        FlagA := a16[7:0][4];
        FlagP := parity(a13[7:0]);
        FlagCY := !a13[15:8][0];
        jump ((a20,a18));
      } else {
        advance (5)
        #04C2
        #instruction: LD   DE,2045
        advance (10)
        #04C5
        #instruction: LD   A,ED
        advance (7)
        #04C7
        #instruction: CALL 0550
        let:16 a21 = (-1 + a3) in
        M[a21] := 04;
        let:16 a22 = (-1 + a21) in
        M[a22] := CA;
        #return-to: 04CA
        advance (17)
        #0550
        #instruction: LD   (207F),A
        M[207F] := ED;
        advance (13)
        #0553
        #instruction: LD   HL,2073
        advance (10)
        #0556
        #instruction: LD   B,0B
        advance (7)
        #0558
        #instruction: JP   1A32
        advance (10)
        #1A32
        #instruction: LD   A,(DE)
        let:8 a23 = M[2045] in
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2073] := a23;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a24 = addWithCarry(!true,0B,~00) in
        let:8 a25 = (0B & 0F) in
        let:8 a26 = (~00 & 0F) in
        let:16 a27 = addWithCarry(!true,a25,a26) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a24[7:0])) {
          advance (10)
          A := a23;
          B := a24[7:0];
          D := 20;
          E := 46;
          H := 20;
          L := 74;
          SPH := a22[15:8];
          SPL := a22[7:0];
          FlagS := a24[7:0][7];
          FlagZ := is_zero(a24[7:0]);
          FlagA := a27[7:0][4];
          FlagP := parity(a24[7:0]);
          FlagCY := !a13[15:8][0];
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a28 = (1 + a22) in
          let:8 a29 = M[a22] in
          let:16 a30 = (1 + a28) in
          let:8 a31 = M[a28] in
          advance (10)
          A := a23;
          B := a24[7:0];
          D := 20;
          E := 46;
          H := 20;
          L := 74;
          SPH := a30[15:8];
          SPL := a30[7:0];
          FlagS := a24[7:0][7];
          FlagZ := is_zero(a24[7:0]);
          FlagA := a27[7:0][4];
          FlagP := parity(a24[7:0]);
          FlagCY := !a13[15:8][0];
          jump ((a31,a29));
        }
      }
    }

04CA:

    #04CA
    #instruction: LD   A,(2036)
    let:8 a1 = M[2036] in
    advance (13)
    #04CD
    #instruction: LD   (2070),A
    M[2070] := a1;
    advance (13)
    #04D0
    #instruction: LD   A,(2056)
    let:8 a2 = M[2056] in
    advance (13)
    #04D3
    #instruction: LD   (2071),A
    M[2071] := a2;
    advance (13)
    #04D6
    #instruction: CALL 0563
    let:16 a3 = (-1 + (SPH,SPL)) in
    M[a3] := 04;
    let:16 a4 = (-1 + a3) in
    M[a4] := D9;
    #return-to: 04D9
    advance (17)
    #0563
    #instruction: LD   HL,2073
    advance (10)
    #0566
    #instruction: LD   A,(HL)
    let:8 a5 = M[2073] in
    advance (7)
    #0567
    #instruction: AND  80
    let:8 a6 = (80 & a5) in
    let:8 a7 = (80 | a5) in
    advance (7)
    #0569
    #instruction: JP   NZ,05C1
    if (!is_zero(a6)) {
      advance (10)
      #05C1
      #instruction: LD   DE,207C
      advance (10)
      #05C4
      #instruction: CALL 1A06
      let:16 a8 = (-1 + a4) in
      M[a8] := 05;
      let:16 a9 = (-1 + a8) in
      M[a9] := C7;
      #return-to: 05C7
      advance (17)
      #1A06
      #instruction: LD   HL,2072
      advance (10)
      #1A09
      #instruction: LD   B,(HL)
      let:8 a10 = M[2072] in
      advance (7)
      #1A0A
      #instruction: LD   A,(DE)
      let:8 a11 = M[207C] in
      advance (7)
      #1A0B
      #instruction: AND  80
      let:8 a12 = (80 & a11) in
      let:8 a13 = (80 | a11) in
      advance (7)
      #1A0D
      #instruction: XOR  B
      let:8 a14 = (a10 ^ a12) in
      advance (4)
      #1A0E
      #instruction: RET  NZ
      if (!is_zero(a14)) {
        let:16 a15 = (1 + a9) in
        let:8 a16 = M[a9] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (11)
        A := a14;
        B := a10;
        D := 20;
        E := 7C;
        H := 20;
        L := 72;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := false;
        jump ((a18,a16));
      } else {
        advance (5)
        #1A0F
        #instruction: SCF
        advance (4)
        #1A10
        #instruction: RET
        let:16 a19 = (1 + a9) in
        let:8 a20 = M[a9] in
        let:16 a21 = (1 + a19) in
        let:8 a22 = M[a19] in
        advance (10)
        A := a14;
        B := a10;
        D := 20;
        E := 7C;
        H := 20;
        L := 72;
        SPH := a21[15:8];
        SPL := a21[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := true;
        jump ((a22,a20));
      }
    } else {
      advance (10)
      #056C
      #instruction: LD   A,(20C1)
      let:8 a23 = M[20C1] in
      advance (13)
      #056F
      #instruction: CP   04
      let:16 a24 = addWithCarry(!false,a23,~04) in
      let:8 a25 = (a23 & 0F) in
      let:8 a26 = (~04 & 0F) in
      let:16 a27 = addWithCarry(!false,a25,a26) in
      advance (7)
      #0571
      #instruction: LD   A,(2069)
      let:8 a28 = M[2069] in
      advance (13)
      #0574
      #instruction: JP   Z,05B7
      if (is_zero(a24[7:0])) {
        advance (10)
        #05B7
        #instruction: LD   HL,2073
        advance (10)
        #05BA
        #instruction: LD   A,(HL)
        let:8 a29 = M[2073] in
        advance (7)
        #05BB
        #instruction: OR   80
        let:8 a30 = (80 | a29) in
        advance (7)
        #05BD
        #instruction: LD   (HL),A
        M[2073] := a30;
        advance (7)
        #05BE
        #instruction: INC  HL
        advance (5)
        #05BF
        #instruction: INC  (HL)
        let:8 a31 = M[2074] in
        let:16 a32 = addWithCarry(true,a31,00) in
        let:8 a33 = (a31 & 0F) in
        let:8 a34 = (00 & 0F) in
        let:16 a35 = addWithCarry(true,a33,a34) in
        M[2074] := a32[7:0];
        advance (10)
        #05C0
        #instruction: RET
        let:16 a36 = (1 + a4) in
        let:8 a37 = M[a4] in
        let:16 a38 = (1 + a36) in
        let:8 a39 = M[a36] in
        advance (10)
        A := a30;
        H := 20;
        L := 74;
        SPH := a38[15:8];
        SPL := a38[7:0];
        FlagS := a32[7:0][7];
        FlagZ := is_zero(a32[7:0]);
        FlagA := a35[7:0][4];
        FlagP := parity(a32[7:0]);
        FlagCY := false;
        jump ((a39,a37));
      } else {
        advance (10)
        #0577
        #instruction: AND  A
        let:8 a40 = (a28 & a28) in
        let:8 a41 = (a28 | a28) in
        advance (4)
        #0578
        #instruction: RET  Z
        if (is_zero(a40)) {
          let:16 a42 = (1 + a4) in
          let:8 a43 = M[a4] in
          let:16 a44 = (1 + a42) in
          let:8 a45 = M[a42] in
          advance (11)
          A := a40;
          H := 20;
          L := 73;
          SPH := a44[15:8];
          SPL := a44[7:0];
          FlagS := a40[7];
          FlagZ := is_zero(a40);
          FlagA := a41[3];
          FlagP := parity(a40);
          FlagCY := false;
          jump ((a45,a43));
        } else {
          advance (5)
          #0579
          #instruction: INC  HL
          advance (5)
          #057A
          #instruction: LD   (HL),00
          M[2074] := 00;
          advance (10)
          #057C
          #instruction: LD   A,(2070)
          let:8 a46 = M[2070] in
          advance (13)
          #057F
          #instruction: AND  A
          let:8 a47 = (a46 & a46) in
          let:8 a48 = (a46 | a46) in
          advance (4)
          #0580
          #instruction: JP   Z,0589
          if (is_zero(a47)) {
            advance (10)
            #0589
            #instruction: LD   A,(2071)
            let:8 a49 = M[2071] in
            advance (13)
            #058C
            #instruction: AND  A
            let:8 a50 = (a49 & a49) in
            let:8 a51 = (a49 | a49) in
            advance (4)
            #058D
            #instruction: JP   Z,0596
            if (is_zero(a50)) {
              advance (10)
              #0596
              #instruction: INC  HL
              advance (5)
              #0597
              #instruction: LD   A,(HL)
              let:8 a52 = M[2075] in
              advance (7)
              #0598
              #instruction: AND  A
              let:8 a53 = (a52 & a52) in
              let:8 a54 = (a52 | a52) in
              advance (4)
              #0599
              #instruction: JP   Z,061B
              if (is_zero(a53)) {
                advance (10)
                #061B
                #instruction: LD   A,(201B)
                let:8 a55 = M[201B] in
                advance (13)
                #061E
                #instruction: ADD  08
                let:16 a56 = addWithCarry(false,08,a55) in
                let:8 a57 = (08 & 0F) in
                let:8 a58 = (a55 & 0F) in
                let:16 a59 = addWithCarry(false,a57,a58) in
                advance (7)
                #0620
                #instruction: LD   H,A
                advance (5)
                #0621
                #instruction: CALL 156F
                let:16 a60 = (-1 + a4) in
                M[a60] := 06;
                let:16 a61 = (-1 + a60) in
                M[a61] := 24;
                #return-to: 0624
                advance (17)
                #156F
                #instruction: LD   A,(200A)
                let:8 a62 = M[200A] in
                advance (13)
                #1572
                #instruction: CALL 1554
                let:16 a63 = (-1 + a61) in
                M[a63] := 15;
                let:16 a64 = (-1 + a63) in
                M[a64] := 75;
                #return-to: 1575
                advance (17)
                #1554
                #instruction: LD   C,00
                advance (7)
                #1556
                #instruction: CP   H
                let:16 a65 = addWithCarry(!false,a62,~a56[7:0]) in
                let:8 a66 = (a62 & 0F) in
                let:8 a67 = (~a56[7:0] & 0F) in
                let:16 a68 = addWithCarry(!false,a66,a67) in
                advance (4)
                #1557
                #instruction: CALL NC,1590
                if (!!a65[15:8][0]) {
                  let:16 a69 = (-1 + a64) in
                  M[a69] := 15;
                  let:16 a70 = (-1 + a69) in
                  M[a70] := 5A;
                  #return-to: 155A
                  advance (17)
                  #1590
                  #instruction: INC  C
                  let:16 a71 = addWithCarry(true,00,00) in
                  let:8 a72 = (00 & 0F) in
                  let:8 a73 = (00 & 0F) in
                  let:16 a74 = addWithCarry(true,a72,a73) in
                  advance (5)
                  #1591
                  #instruction: ADD  10
                  let:16 a75 = addWithCarry(false,10,a62) in
                  let:8 a76 = (10 & 0F) in
                  let:8 a77 = (a62 & 0F) in
                  let:16 a78 = addWithCarry(false,a76,a77) in
                  advance (7)
                  #1593
                  #instruction: JP   MI,1590
                  if (a75[7:0][7]) {
                    advance (10)
                    A := a75[7:0];
                    C := a71[7:0];
                    H := a56[7:0];
                    L := 75;
                    SPH := a70[15:8];
                    SPL := a70[7:0];
                    FlagS := a75[7:0][7];
                    FlagZ := is_zero(a75[7:0]);
                    FlagA := a78[7:0][4];
                    FlagP := parity(a75[7:0]);
                    FlagCY := a75[15:8][0];
                    jump (1590);
                  } else {
                    advance (10)
                    #1596
                    #instruction: RET
                    let:16 a79 = (1 + a70) in
                    let:8 a80 = M[a70] in
                    let:16 a81 = (1 + a79) in
                    let:8 a82 = M[a79] in
                    advance (10)
                    A := a75[7:0];
                    C := a71[7:0];
                    H := a56[7:0];
                    L := 75;
                    SPH := a81[15:8];
                    SPL := a81[7:0];
                    FlagS := a75[7:0][7];
                    FlagZ := is_zero(a75[7:0]);
                    FlagA := a78[7:0][4];
                    FlagP := parity(a75[7:0]);
                    FlagCY := a75[15:8][0];
                    jump ((a82,a80));
                  }
                } else {
                  advance (11)
                  A := a62;
                  C := 00;
                  H := a56[7:0];
                  L := 75;
                  SPH := a64[15:8];
                  SPL := a64[7:0];
                  FlagS := a65[7:0][7];
                  FlagZ := is_zero(a65[7:0]);
                  FlagA := a68[7:0][4];
                  FlagP := parity(a65[7:0]);
                  FlagCY := !a65[15:8][0];
                  jump (155A);
                }
              } else {
                advance (10)
                #059C
                #instruction: LD   HL,(2076)
                let:8 a83 = M[2076] in
                let:8 a84 = M[2077] in
                advance (16)
                #059F
                #instruction: LD   C,(HL)
                let:8 a85 = M[(a84,a83)] in
                advance (7)
                #05A0
                #instruction: INC  HL
                let:16 a86 = (1 + (a84,a83)) in
                advance (5)
                #05A1
                #instruction: NOP
                advance (4)
                #05A2
                #instruction: LD   (2076),HL
                M[2076] := a86[7:0];
                M[2077] := a86[15:8];
                advance (16)
                #05A5
                #instruction: CALL 062F
                let:16 a87 = (-1 + a4) in
                M[a87] := 05;
                let:16 a88 = (-1 + a87) in
                M[a88] := A8;
                #return-to: 05A8
                advance (17)
                #062F
                #instruction: DEC  C
                let:16 a89 = addWithCarry(!true,a85,~00) in
                let:8 a90 = (a85 & 0F) in
                let:8 a91 = (~00 & 0F) in
                let:16 a92 = addWithCarry(!true,a90,a91) in
                advance (5)
                #0630
                #instruction: LD   A,(2067)
                let:8 a93 = M[2067] in
                advance (13)
                #0633
                #instruction: LD   H,A
                advance (5)
                #0634
                #instruction: LD   L,C
                advance (5)
                #0635
                #instruction: LD   D,05
                advance (7)
                #0637
                #instruction: LD   A,(HL)
                let:8 a94 = M[(a93,a89[7:0])] in
                advance (7)
                #0638
                #instruction: AND  A
                let:8 a95 = (a94 & a94) in
                let:8 a96 = (a94 | a94) in
                advance (4)
                #0639
                #instruction: SCF
                advance (4)
                #063A
                #instruction: RET  NZ
                if (!is_zero(a95)) {
                  let:16 a97 = (1 + a88) in
                  let:8 a98 = M[a88] in
                  let:16 a99 = (1 + a97) in
                  let:8 a100 = M[a97] in
                  advance (11)
                  A := a95;
                  C := a89[7:0];
                  D := 05;
                  H := a93;
                  L := a89[7:0];
                  SPH := a99[15:8];
                  SPL := a99[7:0];
                  FlagS := a95[7];
                  FlagZ := is_zero(a95);
                  FlagA := a96[3];
                  FlagP := parity(a95);
                  FlagCY := true;
                  jump ((a100,a98));
                } else {
                  advance (5)
                  #063B
                  #instruction: LD   A,L
                  advance (5)
                  #063C
                  #instruction: ADD  0B
                  let:16 a101 = addWithCarry(false,0B,a89[7:0]) in
                  let:8 a102 = (0B & 0F) in
                  let:8 a103 = (a89[7:0] & 0F) in
                  let:16 a104 = addWithCarry(false,a102,a103) in
                  advance (7)
                  #063E
                  #instruction: LD   L,A
                  advance (5)
                  #063F
                  #instruction: DEC  D
                  let:16 a105 = addWithCarry(!true,05,~00) in
                  let:8 a106 = (05 & 0F) in
                  let:8 a107 = (~00 & 0F) in
                  let:16 a108 = addWithCarry(!true,a106,a107) in
                  advance (5)
                  #0640
                  #instruction: JP   NZ,0637
                  if (!is_zero(a105[7:0])) {
                    advance (10)
                    A := a101[7:0];
                    C := a89[7:0];
                    D := a105[7:0];
                    H := a93;
                    L := a101[7:0];
                    SPH := a88[15:8];
                    SPL := a88[7:0];
                    FlagS := a105[7:0][7];
                    FlagZ := is_zero(a105[7:0]);
                    FlagA := a108[7:0][4];
                    FlagP := parity(a105[7:0]);
                    FlagCY := a101[15:8][0];
                    jump (0637);
                  } else {
                    advance (10)
                    #0643
                    #instruction: RET
                    let:16 a109 = (1 + a88) in
                    let:8 a110 = M[a88] in
                    let:16 a111 = (1 + a109) in
                    let:8 a112 = M[a109] in
                    advance (10)
                    A := a101[7:0];
                    C := a89[7:0];
                    D := a105[7:0];
                    H := a93;
                    L := a101[7:0];
                    SPH := a111[15:8];
                    SPL := a111[7:0];
                    FlagS := a105[7:0][7];
                    FlagZ := is_zero(a105[7:0]);
                    FlagA := a108[7:0][4];
                    FlagP := parity(a105[7:0]);
                    FlagCY := a101[15:8][0];
                    jump ((a112,a110));
                  }
                }
              }
            } else {
              advance (10)
              #0590
              #instruction: LD   B,A
              advance (5)
              #0591
              #instruction: LD   A,(20CF)
              let:8 a113 = M[20CF] in
              advance (13)
              #0594
              #instruction: CP   B
              let:16 a114 = addWithCarry(!false,a113,~a50) in
              let:8 a115 = (a113 & 0F) in
              let:8 a116 = (~a50 & 0F) in
              let:16 a117 = addWithCarry(!false,a115,a116) in
              advance (4)
              #0595
              #instruction: RET  NC
              if (!!a114[15:8][0]) {
                let:16 a118 = (1 + a4) in
                let:8 a119 = M[a4] in
                let:16 a120 = (1 + a118) in
                let:8 a121 = M[a118] in
                advance (11)
                A := a113;
                B := a50;
                H := 20;
                L := 74;
                SPH := a120[15:8];
                SPL := a120[7:0];
                FlagS := a114[7:0][7];
                FlagZ := is_zero(a114[7:0]);
                FlagA := a117[7:0][4];
                FlagP := parity(a114[7:0]);
                FlagCY := !a114[15:8][0];
                jump ((a121,a119));
              } else {
                advance (5)
                #0596
                #instruction: INC  HL
                advance (5)
                #0597
                #instruction: LD   A,(HL)
                let:8 a122 = M[2075] in
                advance (7)
                #0598
                #instruction: AND  A
                let:8 a123 = (a122 & a122) in
                let:8 a124 = (a122 | a122) in
                advance (4)
                #0599
                #instruction: JP   Z,061B
                if (is_zero(a123)) {
                  advance (10)
                  #061B
                  #instruction: LD   A,(201B)
                  let:8 a125 = M[201B] in
                  advance (13)
                  #061E
                  #instruction: ADD  08
                  let:16 a126 = addWithCarry(false,08,a125) in
                  let:8 a127 = (08 & 0F) in
                  let:8 a128 = (a125 & 0F) in
                  let:16 a129 = addWithCarry(false,a127,a128) in
                  advance (7)
                  #0620
                  #instruction: LD   H,A
                  advance (5)
                  #0621
                  #instruction: CALL 156F
                  let:16 a130 = (-1 + a4) in
                  M[a130] := 06;
                  let:16 a131 = (-1 + a130) in
                  M[a131] := 24;
                  #return-to: 0624
                  advance (17)
                  #156F
                  #instruction: LD   A,(200A)
                  let:8 a132 = M[200A] in
                  advance (13)
                  #1572
                  #instruction: CALL 1554
                  let:16 a133 = (-1 + a131) in
                  M[a133] := 15;
                  let:16 a134 = (-1 + a133) in
                  M[a134] := 75;
                  #return-to: 1575
                  advance (17)
                  #1554
                  #instruction: LD   C,00
                  advance (7)
                  #1556
                  #instruction: CP   H
                  let:16 a135 = addWithCarry(!false,a132,~a126[7:0]) in
                  let:8 a136 = (a132 & 0F) in
                  let:8 a137 = (~a126[7:0] & 0F) in
                  let:16 a138 = addWithCarry(!false,a136,a137) in
                  advance (4)
                  #1557
                  #instruction: CALL NC,1590
                  if (!!a135[15:8][0]) {
                    let:16 a139 = (-1 + a134) in
                    M[a139] := 15;
                    let:16 a140 = (-1 + a139) in
                    M[a140] := 5A;
                    #return-to: 155A
                    advance (17)
                    #1590
                    #instruction: INC  C
                    let:16 a141 = addWithCarry(true,00,00) in
                    let:8 a142 = (00 & 0F) in
                    let:8 a143 = (00 & 0F) in
                    let:16 a144 = addWithCarry(true,a142,a143) in
                    advance (5)
                    #1591
                    #instruction: ADD  10
                    let:16 a145 = addWithCarry(false,10,a132) in
                    let:8 a146 = (10 & 0F) in
                    let:8 a147 = (a132 & 0F) in
                    let:16 a148 = addWithCarry(false,a146,a147) in
                    advance (7)
                    #1593
                    #instruction: JP   MI,1590
                    if (a145[7:0][7]) {
                      advance (10)
                      A := a145[7:0];
                      B := a50;
                      C := a141[7:0];
                      H := a126[7:0];
                      L := 75;
                      SPH := a140[15:8];
                      SPL := a140[7:0];
                      FlagS := a145[7:0][7];
                      FlagZ := is_zero(a145[7:0]);
                      FlagA := a148[7:0][4];
                      FlagP := parity(a145[7:0]);
                      FlagCY := a145[15:8][0];
                      jump (1590);
                    } else {
                      advance (10)
                      #1596
                      #instruction: RET
                      let:16 a149 = (1 + a140) in
                      let:8 a150 = M[a140] in
                      let:16 a151 = (1 + a149) in
                      let:8 a152 = M[a149] in
                      advance (10)
                      A := a145[7:0];
                      B := a50;
                      C := a141[7:0];
                      H := a126[7:0];
                      L := 75;
                      SPH := a151[15:8];
                      SPL := a151[7:0];
                      FlagS := a145[7:0][7];
                      FlagZ := is_zero(a145[7:0]);
                      FlagA := a148[7:0][4];
                      FlagP := parity(a145[7:0]);
                      FlagCY := a145[15:8][0];
                      jump ((a152,a150));
                    }
                  } else {
                    advance (11)
                    A := a132;
                    B := a50;
                    C := 00;
                    H := a126[7:0];
                    L := 75;
                    SPH := a134[15:8];
                    SPL := a134[7:0];
                    FlagS := a135[7:0][7];
                    FlagZ := is_zero(a135[7:0]);
                    FlagA := a138[7:0][4];
                    FlagP := parity(a135[7:0]);
                    FlagCY := !a135[15:8][0];
                    jump (155A);
                  }
                } else {
                  advance (10)
                  #059C
                  #instruction: LD   HL,(2076)
                  let:8 a153 = M[2076] in
                  let:8 a154 = M[2077] in
                  advance (16)
                  #059F
                  #instruction: LD   C,(HL)
                  let:8 a155 = M[(a154,a153)] in
                  advance (7)
                  #05A0
                  #instruction: INC  HL
                  let:16 a156 = (1 + (a154,a153)) in
                  advance (5)
                  #05A1
                  #instruction: NOP
                  advance (4)
                  #05A2
                  #instruction: LD   (2076),HL
                  M[2076] := a156[7:0];
                  M[2077] := a156[15:8];
                  advance (16)
                  #05A5
                  #instruction: CALL 062F
                  let:16 a157 = (-1 + a4) in
                  M[a157] := 05;
                  let:16 a158 = (-1 + a157) in
                  M[a158] := A8;
                  #return-to: 05A8
                  advance (17)
                  #062F
                  #instruction: DEC  C
                  let:16 a159 = addWithCarry(!true,a155,~00) in
                  let:8 a160 = (a155 & 0F) in
                  let:8 a161 = (~00 & 0F) in
                  let:16 a162 = addWithCarry(!true,a160,a161) in
                  advance (5)
                  #0630
                  #instruction: LD   A,(2067)
                  let:8 a163 = M[2067] in
                  advance (13)
                  #0633
                  #instruction: LD   H,A
                  advance (5)
                  #0634
                  #instruction: LD   L,C
                  advance (5)
                  #0635
                  #instruction: LD   D,05
                  advance (7)
                  #0637
                  #instruction: LD   A,(HL)
                  let:8 a164 = M[(a163,a159[7:0])] in
                  advance (7)
                  #0638
                  #instruction: AND  A
                  let:8 a165 = (a164 & a164) in
                  let:8 a166 = (a164 | a164) in
                  advance (4)
                  #0639
                  #instruction: SCF
                  advance (4)
                  #063A
                  #instruction: RET  NZ
                  if (!is_zero(a165)) {
                    let:16 a167 = (1 + a158) in
                    let:8 a168 = M[a158] in
                    let:16 a169 = (1 + a167) in
                    let:8 a170 = M[a167] in
                    advance (11)
                    A := a165;
                    B := a50;
                    C := a159[7:0];
                    D := 05;
                    H := a163;
                    L := a159[7:0];
                    SPH := a169[15:8];
                    SPL := a169[7:0];
                    FlagS := a165[7];
                    FlagZ := is_zero(a165);
                    FlagA := a166[3];
                    FlagP := parity(a165);
                    FlagCY := true;
                    jump ((a170,a168));
                  } else {
                    advance (5)
                    #063B
                    #instruction: LD   A,L
                    advance (5)
                    #063C
                    #instruction: ADD  0B
                    let:16 a171 = addWithCarry(false,0B,a159[7:0]) in
                    let:8 a172 = (0B & 0F) in
                    let:8 a173 = (a159[7:0] & 0F) in
                    let:16 a174 = addWithCarry(false,a172,a173) in
                    advance (7)
                    #063E
                    #instruction: LD   L,A
                    advance (5)
                    #063F
                    #instruction: DEC  D
                    let:16 a175 = addWithCarry(!true,05,~00) in
                    let:8 a176 = (05 & 0F) in
                    let:8 a177 = (~00 & 0F) in
                    let:16 a178 = addWithCarry(!true,a176,a177) in
                    advance (5)
                    #0640
                    #instruction: JP   NZ,0637
                    if (!is_zero(a175[7:0])) {
                      advance (10)
                      A := a171[7:0];
                      B := a50;
                      C := a159[7:0];
                      D := a175[7:0];
                      H := a163;
                      L := a171[7:0];
                      SPH := a158[15:8];
                      SPL := a158[7:0];
                      FlagS := a175[7:0][7];
                      FlagZ := is_zero(a175[7:0]);
                      FlagA := a178[7:0][4];
                      FlagP := parity(a175[7:0]);
                      FlagCY := a171[15:8][0];
                      jump (0637);
                    } else {
                      advance (10)
                      #0643
                      #instruction: RET
                      let:16 a179 = (1 + a158) in
                      let:8 a180 = M[a158] in
                      let:16 a181 = (1 + a179) in
                      let:8 a182 = M[a179] in
                      advance (10)
                      A := a171[7:0];
                      B := a50;
                      C := a159[7:0];
                      D := a175[7:0];
                      H := a163;
                      L := a171[7:0];
                      SPH := a181[15:8];
                      SPL := a181[7:0];
                      FlagS := a175[7:0][7];
                      FlagZ := is_zero(a175[7:0]);
                      FlagA := a178[7:0][4];
                      FlagP := parity(a175[7:0]);
                      FlagCY := a171[15:8][0];
                      jump ((a182,a180));
                    }
                  }
                }
              }
            }
          } else {
            advance (10)
            #0583
            #instruction: LD   B,A
            advance (5)
            #0584
            #instruction: LD   A,(20CF)
            let:8 a183 = M[20CF] in
            advance (13)
            #0587
            #instruction: CP   B
            let:16 a184 = addWithCarry(!false,a183,~a47) in
            let:8 a185 = (a183 & 0F) in
            let:8 a186 = (~a47 & 0F) in
            let:16 a187 = addWithCarry(!false,a185,a186) in
            advance (4)
            #0588
            #instruction: RET  NC
            if (!!a184[15:8][0]) {
              let:16 a188 = (1 + a4) in
              let:8 a189 = M[a4] in
              let:16 a190 = (1 + a188) in
              let:8 a191 = M[a188] in
              advance (11)
              A := a183;
              B := a47;
              H := 20;
              L := 74;
              SPH := a190[15:8];
              SPL := a190[7:0];
              FlagS := a184[7:0][7];
              FlagZ := is_zero(a184[7:0]);
              FlagA := a187[7:0][4];
              FlagP := parity(a184[7:0]);
              FlagCY := !a184[15:8][0];
              jump ((a191,a189));
            } else {
              advance (5)
              #0589
              #instruction: LD   A,(2071)
              let:8 a192 = M[2071] in
              advance (13)
              #058C
              #instruction: AND  A
              let:8 a193 = (a192 & a192) in
              let:8 a194 = (a192 | a192) in
              advance (4)
              #058D
              #instruction: JP   Z,0596
              if (is_zero(a193)) {
                advance (10)
                #0596
                #instruction: INC  HL
                advance (5)
                #0597
                #instruction: LD   A,(HL)
                let:8 a195 = M[2075] in
                advance (7)
                #0598
                #instruction: AND  A
                let:8 a196 = (a195 & a195) in
                let:8 a197 = (a195 | a195) in
                advance (4)
                #0599
                #instruction: JP   Z,061B
                if (is_zero(a196)) {
                  advance (10)
                  #061B
                  #instruction: LD   A,(201B)
                  let:8 a198 = M[201B] in
                  advance (13)
                  #061E
                  #instruction: ADD  08
                  let:16 a199 = addWithCarry(false,08,a198) in
                  let:8 a200 = (08 & 0F) in
                  let:8 a201 = (a198 & 0F) in
                  let:16 a202 = addWithCarry(false,a200,a201) in
                  advance (7)
                  #0620
                  #instruction: LD   H,A
                  advance (5)
                  #0621
                  #instruction: CALL 156F
                  let:16 a203 = (-1 + a4) in
                  M[a203] := 06;
                  let:16 a204 = (-1 + a203) in
                  M[a204] := 24;
                  #return-to: 0624
                  advance (17)
                  #156F
                  #instruction: LD   A,(200A)
                  let:8 a205 = M[200A] in
                  advance (13)
                  #1572
                  #instruction: CALL 1554
                  let:16 a206 = (-1 + a204) in
                  M[a206] := 15;
                  let:16 a207 = (-1 + a206) in
                  M[a207] := 75;
                  #return-to: 1575
                  advance (17)
                  #1554
                  #instruction: LD   C,00
                  advance (7)
                  #1556
                  #instruction: CP   H
                  let:16 a208 = addWithCarry(!false,a205,~a199[7:0]) in
                  let:8 a209 = (a205 & 0F) in
                  let:8 a210 = (~a199[7:0] & 0F) in
                  let:16 a211 = addWithCarry(!false,a209,a210) in
                  advance (4)
                  #1557
                  #instruction: CALL NC,1590
                  if (!!a208[15:8][0]) {
                    let:16 a212 = (-1 + a207) in
                    M[a212] := 15;
                    let:16 a213 = (-1 + a212) in
                    M[a213] := 5A;
                    #return-to: 155A
                    advance (17)
                    #1590
                    #instruction: INC  C
                    let:16 a214 = addWithCarry(true,00,00) in
                    let:8 a215 = (00 & 0F) in
                    let:8 a216 = (00 & 0F) in
                    let:16 a217 = addWithCarry(true,a215,a216) in
                    advance (5)
                    #1591
                    #instruction: ADD  10
                    let:16 a218 = addWithCarry(false,10,a205) in
                    let:8 a219 = (10 & 0F) in
                    let:8 a220 = (a205 & 0F) in
                    let:16 a221 = addWithCarry(false,a219,a220) in
                    advance (7)
                    #1593
                    #instruction: JP   MI,1590
                    if (a218[7:0][7]) {
                      advance (10)
                      A := a218[7:0];
                      B := a47;
                      C := a214[7:0];
                      H := a199[7:0];
                      L := 75;
                      SPH := a213[15:8];
                      SPL := a213[7:0];
                      FlagS := a218[7:0][7];
                      FlagZ := is_zero(a218[7:0]);
                      FlagA := a221[7:0][4];
                      FlagP := parity(a218[7:0]);
                      FlagCY := a218[15:8][0];
                      jump (1590);
                    } else {
                      advance (10)
                      #1596
                      #instruction: RET
                      let:16 a222 = (1 + a213) in
                      let:8 a223 = M[a213] in
                      let:16 a224 = (1 + a222) in
                      let:8 a225 = M[a222] in
                      advance (10)
                      A := a218[7:0];
                      B := a47;
                      C := a214[7:0];
                      H := a199[7:0];
                      L := 75;
                      SPH := a224[15:8];
                      SPL := a224[7:0];
                      FlagS := a218[7:0][7];
                      FlagZ := is_zero(a218[7:0]);
                      FlagA := a221[7:0][4];
                      FlagP := parity(a218[7:0]);
                      FlagCY := a218[15:8][0];
                      jump ((a225,a223));
                    }
                  } else {
                    advance (11)
                    A := a205;
                    B := a47;
                    C := 00;
                    H := a199[7:0];
                    L := 75;
                    SPH := a207[15:8];
                    SPL := a207[7:0];
                    FlagS := a208[7:0][7];
                    FlagZ := is_zero(a208[7:0]);
                    FlagA := a211[7:0][4];
                    FlagP := parity(a208[7:0]);
                    FlagCY := !a208[15:8][0];
                    jump (155A);
                  }
                } else {
                  advance (10)
                  #059C
                  #instruction: LD   HL,(2076)
                  let:8 a226 = M[2076] in
                  let:8 a227 = M[2077] in
                  advance (16)
                  #059F
                  #instruction: LD   C,(HL)
                  let:8 a228 = M[(a227,a226)] in
                  advance (7)
                  #05A0
                  #instruction: INC  HL
                  let:16 a229 = (1 + (a227,a226)) in
                  advance (5)
                  #05A1
                  #instruction: NOP
                  advance (4)
                  #05A2
                  #instruction: LD   (2076),HL
                  M[2076] := a229[7:0];
                  M[2077] := a229[15:8];
                  advance (16)
                  #05A5
                  #instruction: CALL 062F
                  let:16 a230 = (-1 + a4) in
                  M[a230] := 05;
                  let:16 a231 = (-1 + a230) in
                  M[a231] := A8;
                  #return-to: 05A8
                  advance (17)
                  #062F
                  #instruction: DEC  C
                  let:16 a232 = addWithCarry(!true,a228,~00) in
                  let:8 a233 = (a228 & 0F) in
                  let:8 a234 = (~00 & 0F) in
                  let:16 a235 = addWithCarry(!true,a233,a234) in
                  advance (5)
                  #0630
                  #instruction: LD   A,(2067)
                  let:8 a236 = M[2067] in
                  advance (13)
                  #0633
                  #instruction: LD   H,A
                  advance (5)
                  #0634
                  #instruction: LD   L,C
                  advance (5)
                  #0635
                  #instruction: LD   D,05
                  advance (7)
                  #0637
                  #instruction: LD   A,(HL)
                  let:8 a237 = M[(a236,a232[7:0])] in
                  advance (7)
                  #0638
                  #instruction: AND  A
                  let:8 a238 = (a237 & a237) in
                  let:8 a239 = (a237 | a237) in
                  advance (4)
                  #0639
                  #instruction: SCF
                  advance (4)
                  #063A
                  #instruction: RET  NZ
                  if (!is_zero(a238)) {
                    let:16 a240 = (1 + a231) in
                    let:8 a241 = M[a231] in
                    let:16 a242 = (1 + a240) in
                    let:8 a243 = M[a240] in
                    advance (11)
                    A := a238;
                    B := a47;
                    C := a232[7:0];
                    D := 05;
                    H := a236;
                    L := a232[7:0];
                    SPH := a242[15:8];
                    SPL := a242[7:0];
                    FlagS := a238[7];
                    FlagZ := is_zero(a238);
                    FlagA := a239[3];
                    FlagP := parity(a238);
                    FlagCY := true;
                    jump ((a243,a241));
                  } else {
                    advance (5)
                    #063B
                    #instruction: LD   A,L
                    advance (5)
                    #063C
                    #instruction: ADD  0B
                    let:16 a244 = addWithCarry(false,0B,a232[7:0]) in
                    let:8 a245 = (0B & 0F) in
                    let:8 a246 = (a232[7:0] & 0F) in
                    let:16 a247 = addWithCarry(false,a245,a246) in
                    advance (7)
                    #063E
                    #instruction: LD   L,A
                    advance (5)
                    #063F
                    #instruction: DEC  D
                    let:16 a248 = addWithCarry(!true,05,~00) in
                    let:8 a249 = (05 & 0F) in
                    let:8 a250 = (~00 & 0F) in
                    let:16 a251 = addWithCarry(!true,a249,a250) in
                    advance (5)
                    #0640
                    #instruction: JP   NZ,0637
                    if (!is_zero(a248[7:0])) {
                      advance (10)
                      A := a244[7:0];
                      B := a47;
                      C := a232[7:0];
                      D := a248[7:0];
                      H := a236;
                      L := a244[7:0];
                      SPH := a231[15:8];
                      SPL := a231[7:0];
                      FlagS := a248[7:0][7];
                      FlagZ := is_zero(a248[7:0]);
                      FlagA := a251[7:0][4];
                      FlagP := parity(a248[7:0]);
                      FlagCY := a244[15:8][0];
                      jump (0637);
                    } else {
                      advance (10)
                      #0643
                      #instruction: RET
                      let:16 a252 = (1 + a231) in
                      let:8 a253 = M[a231] in
                      let:16 a254 = (1 + a252) in
                      let:8 a255 = M[a252] in
                      advance (10)
                      A := a244[7:0];
                      B := a47;
                      C := a232[7:0];
                      D := a248[7:0];
                      H := a236;
                      L := a244[7:0];
                      SPH := a254[15:8];
                      SPL := a254[7:0];
                      FlagS := a248[7:0][7];
                      FlagZ := is_zero(a248[7:0]);
                      FlagA := a251[7:0][4];
                      FlagP := parity(a248[7:0]);
                      FlagCY := a244[15:8][0];
                      jump ((a255,a253));
                    }
                  }
                }
              } else {
                advance (10)
                #0590
                #instruction: LD   B,A
                advance (5)
                #0591
                #instruction: LD   A,(20CF)
                let:8 a256 = M[20CF] in
                advance (13)
                #0594
                #instruction: CP   B
                let:16 a257 = addWithCarry(!false,a256,~a193) in
                let:8 a258 = (a256 & 0F) in
                let:8 a259 = (~a193 & 0F) in
                let:16 a260 = addWithCarry(!false,a258,a259) in
                advance (4)
                #0595
                #instruction: RET  NC
                if (!!a257[15:8][0]) {
                  let:16 a261 = (1 + a4) in
                  let:8 a262 = M[a4] in
                  let:16 a263 = (1 + a261) in
                  let:8 a264 = M[a261] in
                  advance (11)
                  A := a256;
                  B := a193;
                  H := 20;
                  L := 74;
                  SPH := a263[15:8];
                  SPL := a263[7:0];
                  FlagS := a257[7:0][7];
                  FlagZ := is_zero(a257[7:0]);
                  FlagA := a260[7:0][4];
                  FlagP := parity(a257[7:0]);
                  FlagCY := !a257[15:8][0];
                  jump ((a264,a262));
                } else {
                  advance (5)
                  #0596
                  #instruction: INC  HL
                  advance (5)
                  #0597
                  #instruction: LD   A,(HL)
                  let:8 a265 = M[2075] in
                  advance (7)
                  #0598
                  #instruction: AND  A
                  let:8 a266 = (a265 & a265) in
                  let:8 a267 = (a265 | a265) in
                  advance (4)
                  #0599
                  #instruction: JP   Z,061B
                  if (is_zero(a266)) {
                    advance (10)
                    #061B
                    #instruction: LD   A,(201B)
                    let:8 a268 = M[201B] in
                    advance (13)
                    #061E
                    #instruction: ADD  08
                    let:16 a269 = addWithCarry(false,08,a268) in
                    let:8 a270 = (08 & 0F) in
                    let:8 a271 = (a268 & 0F) in
                    let:16 a272 = addWithCarry(false,a270,a271) in
                    advance (7)
                    #0620
                    #instruction: LD   H,A
                    advance (5)
                    #0621
                    #instruction: CALL 156F
                    let:16 a273 = (-1 + a4) in
                    M[a273] := 06;
                    let:16 a274 = (-1 + a273) in
                    M[a274] := 24;
                    #return-to: 0624
                    advance (17)
                    #156F
                    #instruction: LD   A,(200A)
                    let:8 a275 = M[200A] in
                    advance (13)
                    #1572
                    #instruction: CALL 1554
                    let:16 a276 = (-1 + a274) in
                    M[a276] := 15;
                    let:16 a277 = (-1 + a276) in
                    M[a277] := 75;
                    #return-to: 1575
                    advance (17)
                    #1554
                    #instruction: LD   C,00
                    advance (7)
                    #1556
                    #instruction: CP   H
                    let:16 a278 = addWithCarry(!false,a275,~a269[7:0]) in
                    let:8 a279 = (a275 & 0F) in
                    let:8 a280 = (~a269[7:0] & 0F) in
                    let:16 a281 = addWithCarry(!false,a279,a280) in
                    advance (4)
                    #1557
                    #instruction: CALL NC,1590
                    if (!!a278[15:8][0]) {
                      let:16 a282 = (-1 + a277) in
                      M[a282] := 15;
                      let:16 a283 = (-1 + a282) in
                      M[a283] := 5A;
                      #return-to: 155A
                      advance (17)
                      #1590
                      #instruction: INC  C
                      let:16 a284 = addWithCarry(true,00,00) in
                      let:8 a285 = (00 & 0F) in
                      let:8 a286 = (00 & 0F) in
                      let:16 a287 = addWithCarry(true,a285,a286) in
                      advance (5)
                      #1591
                      #instruction: ADD  10
                      let:16 a288 = addWithCarry(false,10,a275) in
                      let:8 a289 = (10 & 0F) in
                      let:8 a290 = (a275 & 0F) in
                      let:16 a291 = addWithCarry(false,a289,a290) in
                      advance (7)
                      #1593
                      #instruction: JP   MI,1590
                      if (a288[7:0][7]) {
                        advance (10)
                        A := a288[7:0];
                        B := a193;
                        C := a284[7:0];
                        H := a269[7:0];
                        L := 75;
                        SPH := a283[15:8];
                        SPL := a283[7:0];
                        FlagS := a288[7:0][7];
                        FlagZ := is_zero(a288[7:0]);
                        FlagA := a291[7:0][4];
                        FlagP := parity(a288[7:0]);
                        FlagCY := a288[15:8][0];
                        jump (1590);
                      } else {
                        advance (10)
                        #1596
                        #instruction: RET
                        let:16 a292 = (1 + a283) in
                        let:8 a293 = M[a283] in
                        let:16 a294 = (1 + a292) in
                        let:8 a295 = M[a292] in
                        advance (10)
                        A := a288[7:0];
                        B := a193;
                        C := a284[7:0];
                        H := a269[7:0];
                        L := 75;
                        SPH := a294[15:8];
                        SPL := a294[7:0];
                        FlagS := a288[7:0][7];
                        FlagZ := is_zero(a288[7:0]);
                        FlagA := a291[7:0][4];
                        FlagP := parity(a288[7:0]);
                        FlagCY := a288[15:8][0];
                        jump ((a295,a293));
                      }
                    } else {
                      advance (11)
                      A := a275;
                      B := a193;
                      C := 00;
                      H := a269[7:0];
                      L := 75;
                      SPH := a277[15:8];
                      SPL := a277[7:0];
                      FlagS := a278[7:0][7];
                      FlagZ := is_zero(a278[7:0]);
                      FlagA := a281[7:0][4];
                      FlagP := parity(a278[7:0]);
                      FlagCY := !a278[15:8][0];
                      jump (155A);
                    }
                  } else {
                    advance (10)
                    #059C
                    #instruction: LD   HL,(2076)
                    let:8 a296 = M[2076] in
                    let:8 a297 = M[2077] in
                    advance (16)
                    #059F
                    #instruction: LD   C,(HL)
                    let:8 a298 = M[(a297,a296)] in
                    advance (7)
                    #05A0
                    #instruction: INC  HL
                    let:16 a299 = (1 + (a297,a296)) in
                    advance (5)
                    #05A1
                    #instruction: NOP
                    advance (4)
                    #05A2
                    #instruction: LD   (2076),HL
                    M[2076] := a299[7:0];
                    M[2077] := a299[15:8];
                    advance (16)
                    #05A5
                    #instruction: CALL 062F
                    let:16 a300 = (-1 + a4) in
                    M[a300] := 05;
                    let:16 a301 = (-1 + a300) in
                    M[a301] := A8;
                    #return-to: 05A8
                    advance (17)
                    #062F
                    #instruction: DEC  C
                    let:16 a302 = addWithCarry(!true,a298,~00) in
                    let:8 a303 = (a298 & 0F) in
                    let:8 a304 = (~00 & 0F) in
                    let:16 a305 = addWithCarry(!true,a303,a304) in
                    advance (5)
                    #0630
                    #instruction: LD   A,(2067)
                    let:8 a306 = M[2067] in
                    advance (13)
                    #0633
                    #instruction: LD   H,A
                    advance (5)
                    #0634
                    #instruction: LD   L,C
                    advance (5)
                    #0635
                    #instruction: LD   D,05
                    advance (7)
                    #0637
                    #instruction: LD   A,(HL)
                    let:8 a307 = M[(a306,a302[7:0])] in
                    advance (7)
                    #0638
                    #instruction: AND  A
                    let:8 a308 = (a307 & a307) in
                    let:8 a309 = (a307 | a307) in
                    advance (4)
                    #0639
                    #instruction: SCF
                    advance (4)
                    #063A
                    #instruction: RET  NZ
                    if (!is_zero(a308)) {
                      let:16 a310 = (1 + a301) in
                      let:8 a311 = M[a301] in
                      let:16 a312 = (1 + a310) in
                      let:8 a313 = M[a310] in
                      advance (11)
                      A := a308;
                      B := a193;
                      C := a302[7:0];
                      D := 05;
                      H := a306;
                      L := a302[7:0];
                      SPH := a312[15:8];
                      SPL := a312[7:0];
                      FlagS := a308[7];
                      FlagZ := is_zero(a308);
                      FlagA := a309[3];
                      FlagP := parity(a308);
                      FlagCY := true;
                      jump ((a313,a311));
                    } else {
                      advance (5)
                      #063B
                      #instruction: LD   A,L
                      advance (5)
                      #063C
                      #instruction: ADD  0B
                      let:16 a314 = addWithCarry(false,0B,a302[7:0]) in
                      let:8 a315 = (0B & 0F) in
                      let:8 a316 = (a302[7:0] & 0F) in
                      let:16 a317 = addWithCarry(false,a315,a316) in
                      advance (7)
                      #063E
                      #instruction: LD   L,A
                      advance (5)
                      #063F
                      #instruction: DEC  D
                      let:16 a318 = addWithCarry(!true,05,~00) in
                      let:8 a319 = (05 & 0F) in
                      let:8 a320 = (~00 & 0F) in
                      let:16 a321 = addWithCarry(!true,a319,a320) in
                      advance (5)
                      #0640
                      #instruction: JP   NZ,0637
                      if (!is_zero(a318[7:0])) {
                        advance (10)
                        A := a314[7:0];
                        B := a193;
                        C := a302[7:0];
                        D := a318[7:0];
                        H := a306;
                        L := a314[7:0];
                        SPH := a301[15:8];
                        SPL := a301[7:0];
                        FlagS := a318[7:0][7];
                        FlagZ := is_zero(a318[7:0]);
                        FlagA := a321[7:0][4];
                        FlagP := parity(a318[7:0]);
                        FlagCY := a314[15:8][0];
                        jump (0637);
                      } else {
                        advance (10)
                        #0643
                        #instruction: RET
                        let:16 a322 = (1 + a301) in
                        let:8 a323 = M[a301] in
                        let:16 a324 = (1 + a322) in
                        let:8 a325 = M[a322] in
                        advance (10)
                        A := a314[7:0];
                        B := a193;
                        C := a302[7:0];
                        D := a318[7:0];
                        H := a306;
                        L := a314[7:0];
                        SPH := a324[15:8];
                        SPL := a324[7:0];
                        FlagS := a318[7:0][7];
                        FlagZ := is_zero(a318[7:0]);
                        FlagA := a321[7:0][4];
                        FlagP := parity(a318[7:0]);
                        FlagCY := a314[15:8][0];
                        jump ((a325,a323));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

04D9:

    #04D9
    #instruction: LD   A,(2076)
    let:8 a1 = M[2076] in
    advance (13)
    #04DC
    #instruction: CP   10
    let:16 a2 = addWithCarry(!false,a1,~10) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~10 & 0F) in
    let:16 a5 = addWithCarry(!false,a3,a4) in
    advance (7)
    #04DE
    #instruction: JP   CY,04E7
    if (!a2[15:8][0]) {
      advance (10)
      #04E7
      #instruction: LD   A,(2078)
      let:8 a6 = M[2078] in
      advance (13)
      #04EA
      #instruction: AND  A
      let:8 a7 = (a6 & a6) in
      let:8 a8 = (a6 | a6) in
      advance (4)
      #04EB
      #instruction: LD   HL,2045
      advance (10)
      #04EE
      #instruction: JP   NZ,055B
      if (!is_zero(a7)) {
        advance (10)
        #055B
        #instruction: LD   DE,2073
        advance (10)
        #055E
        #instruction: LD   B,0B
        advance (7)
        #0560
        #instruction: JP   1A32
        advance (10)
        #1A32
        #instruction: LD   A,(DE)
        let:8 a9 = M[2073] in
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2045] := a9;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a10 = addWithCarry(!true,0B,~00) in
        let:8 a11 = (0B & 0F) in
        let:8 a12 = (~00 & 0F) in
        let:16 a13 = addWithCarry(!true,a11,a12) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a10[7:0])) {
          advance (10)
          A := a9;
          B := a10[7:0];
          D := 20;
          E := 74;
          H := 20;
          L := 46;
          FlagS := a10[7:0][7];
          FlagZ := is_zero(a10[7:0]);
          FlagA := a13[7:0][4];
          FlagP := parity(a10[7:0]);
          FlagCY := false;
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a14 = (1 + (SPH,SPL)) in
          let:8 a15 = M[(SPH,SPL)] in
          let:16 a16 = (1 + a14) in
          let:8 a17 = M[a14] in
          advance (10)
          A := a9;
          B := a10[7:0];
          D := 20;
          E := 74;
          H := 20;
          L := 46;
          SPH := a16[15:8];
          SPL := a16[7:0];
          FlagS := a10[7:0][7];
          FlagZ := is_zero(a10[7:0]);
          FlagA := a13[7:0][4];
          FlagP := parity(a10[7:0]);
          FlagCY := false;
          jump ((a17,a15));
        }
      } else {
        advance (10)
        #04F1
        #instruction: LD   DE,1B40
        advance (10)
        #04F4
        #instruction: LD   HL,2040
        advance (10)
        #04F7
        #instruction: LD   B,10
        advance (7)
        #04F9
        #instruction: CALL 1A32
        let:16 a18 = (-1 + (SPH,SPL)) in
        M[a18] := 04;
        let:16 a19 = (-1 + a18) in
        M[a19] := FC;
        #return-to: 04FC
        advance (17)
        #1A32
        #instruction: LD   A,(DE)
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2040] := 00;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a20 = addWithCarry(!true,10,~00) in
        let:8 a21 = (10 & 0F) in
        let:8 a22 = (~00 & 0F) in
        let:16 a23 = addWithCarry(!true,a21,a22) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a20[7:0])) {
          advance (10)
          A := 00;
          B := a20[7:0];
          D := 1B;
          E := 41;
          H := 20;
          L := 41;
          SPH := a19[15:8];
          SPL := a19[7:0];
          FlagS := a20[7:0][7];
          FlagZ := is_zero(a20[7:0]);
          FlagA := a23[7:0][4];
          FlagP := parity(a20[7:0]);
          FlagCY := false;
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a24 = (1 + a19) in
          let:8 a25 = M[a19] in
          let:16 a26 = (1 + a24) in
          let:8 a27 = M[a24] in
          advance (10)
          A := 00;
          B := a20[7:0];
          D := 1B;
          E := 41;
          H := 20;
          L := 41;
          SPH := a26[15:8];
          SPL := a26[7:0];
          FlagS := a20[7:0][7];
          FlagZ := is_zero(a20[7:0]);
          FlagA := a23[7:0][4];
          FlagP := parity(a20[7:0]);
          FlagCY := false;
          jump ((a27,a25));
        }
      }
    } else {
      advance (10)
      #04E1
      #instruction: LD   A,(1B48)
      advance (13)
      #04E4
      #instruction: LD   (2076),A
      M[2076] := 00;
      advance (13)
      #04E7
      #instruction: LD   A,(2078)
      let:8 a28 = M[2078] in
      advance (13)
      #04EA
      #instruction: AND  A
      let:8 a29 = (a28 & a28) in
      let:8 a30 = (a28 | a28) in
      advance (4)
      #04EB
      #instruction: LD   HL,2045
      advance (10)
      #04EE
      #instruction: JP   NZ,055B
      if (!is_zero(a29)) {
        advance (10)
        #055B
        #instruction: LD   DE,2073
        advance (10)
        #055E
        #instruction: LD   B,0B
        advance (7)
        #0560
        #instruction: JP   1A32
        advance (10)
        #1A32
        #instruction: LD   A,(DE)
        let:8 a31 = M[2073] in
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2045] := a31;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a32 = addWithCarry(!true,0B,~00) in
        let:8 a33 = (0B & 0F) in
        let:8 a34 = (~00 & 0F) in
        let:16 a35 = addWithCarry(!true,a33,a34) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a32[7:0])) {
          advance (10)
          A := a31;
          B := a32[7:0];
          D := 20;
          E := 74;
          H := 20;
          L := 46;
          FlagS := a32[7:0][7];
          FlagZ := is_zero(a32[7:0]);
          FlagA := a35[7:0][4];
          FlagP := parity(a32[7:0]);
          FlagCY := false;
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a36 = (1 + (SPH,SPL)) in
          let:8 a37 = M[(SPH,SPL)] in
          let:16 a38 = (1 + a36) in
          let:8 a39 = M[a36] in
          advance (10)
          A := a31;
          B := a32[7:0];
          D := 20;
          E := 74;
          H := 20;
          L := 46;
          SPH := a38[15:8];
          SPL := a38[7:0];
          FlagS := a32[7:0][7];
          FlagZ := is_zero(a32[7:0]);
          FlagA := a35[7:0][4];
          FlagP := parity(a32[7:0]);
          FlagCY := false;
          jump ((a39,a37));
        }
      } else {
        advance (10)
        #04F1
        #instruction: LD   DE,1B40
        advance (10)
        #04F4
        #instruction: LD   HL,2040
        advance (10)
        #04F7
        #instruction: LD   B,10
        advance (7)
        #04F9
        #instruction: CALL 1A32
        let:16 a40 = (-1 + (SPH,SPL)) in
        M[a40] := 04;
        let:16 a41 = (-1 + a40) in
        M[a41] := FC;
        #return-to: 04FC
        advance (17)
        #1A32
        #instruction: LD   A,(DE)
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2040] := 00;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a42 = addWithCarry(!true,10,~00) in
        let:8 a43 = (10 & 0F) in
        let:8 a44 = (~00 & 0F) in
        let:16 a45 = addWithCarry(!true,a43,a44) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a42[7:0])) {
          advance (10)
          A := 00;
          B := a42[7:0];
          D := 1B;
          E := 41;
          H := 20;
          L := 41;
          SPH := a41[15:8];
          SPL := a41[7:0];
          FlagS := a42[7:0][7];
          FlagZ := is_zero(a42[7:0]);
          FlagA := a45[7:0][4];
          FlagP := parity(a42[7:0]);
          FlagCY := false;
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a46 = (1 + a41) in
          let:8 a47 = M[a41] in
          let:16 a48 = (1 + a46) in
          let:8 a49 = M[a46] in
          advance (10)
          A := 00;
          B := a42[7:0];
          D := 1B;
          E := 41;
          H := 20;
          L := 41;
          SPH := a48[15:8];
          SPL := a48[7:0];
          FlagS := a42[7:0][7];
          FlagZ := is_zero(a42[7:0]);
          FlagA := a45[7:0][4];
          FlagP := parity(a42[7:0]);
          FlagCY := false;
          jump ((a49,a47));
        }
      }
    }

04FC:

    #04FC
    #instruction: LD   A,(2082)
    let:8 a1 = M[2082] in
    advance (13)
    #04FF
    #instruction: DEC  A
    let:16 a2 = addWithCarry(!true,a1,~00) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~00 & 0F) in
    let:16 a5 = addWithCarry(!true,a3,a4) in
    advance (5)
    #0500
    #instruction: JP   NZ,0508
    if (!is_zero(a2[7:0])) {
      advance (10)
      #0508
      #instruction: LD   HL,(2076)
      let:8 a6 = M[2076] in
      let:8 a7 = M[2077] in
      advance (16)
      #050B
      #instruction: JP   067E
      advance (10)
      #067E
      #instruction: LD   (2048),HL
      M[2048] := a6;
      M[2049] := a7;
      advance (16)
      #0681
      #instruction: RET
      let:16 a8 = (1 + (SPH,SPL)) in
      let:8 a9 = M[(SPH,SPL)] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := a2[7:0];
      H := a7;
      L := a6;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      jump ((a11,a9));
    } else {
      advance (10)
      #0503
      #instruction: LD   A,01
      advance (7)
      #0505
      #instruction: LD   (206E),A
      M[206E] := 01;
      advance (13)
      #0508
      #instruction: LD   HL,(2076)
      let:8 a12 = M[2076] in
      let:8 a13 = M[2077] in
      advance (16)
      #050B
      #instruction: JP   067E
      advance (10)
      #067E
      #instruction: LD   (2048),HL
      M[2048] := a12;
      M[2049] := a13;
      advance (16)
      #0681
      #instruction: RET
      let:16 a14 = (1 + (SPH,SPL)) in
      let:8 a15 = M[(SPH,SPL)] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      A := 01;
      H := a13;
      L := a12;
      SPH := a16[15:8];
      SPL := a16[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      jump ((a17,a15));
    }

050E:

    #050E
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #050F
    #instruction: LD   DE,2055
    advance (10)
    #0512
    #instruction: LD   A,DB
    advance (7)
    #0514
    #instruction: CALL 0550
    let:16 a5 = (-1 + a3) in
    M[a5] := 05;
    let:16 a6 = (-1 + a5) in
    M[a6] := 17;
    #return-to: 0517
    advance (17)
    #0550
    #instruction: LD   (207F),A
    M[207F] := DB;
    advance (13)
    #0553
    #instruction: LD   HL,2073
    advance (10)
    #0556
    #instruction: LD   B,0B
    advance (7)
    #0558
    #instruction: JP   1A32
    advance (10)
    #1A32
    #instruction: LD   A,(DE)
    let:8 a7 = M[2055] in
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2073] := a7;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a8 = addWithCarry(!true,0B,~00) in
    let:8 a9 = (0B & 0F) in
    let:8 a10 = (~00 & 0F) in
    let:16 a11 = addWithCarry(!true,a9,a10) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a8[7:0])) {
      advance (10)
      A := a7;
      B := a8[7:0];
      D := 20;
      E := 56;
      H := 20;
      L := 74;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a8[7:0][7];
      FlagZ := is_zero(a8[7:0]);
      FlagA := a11[7:0][4];
      FlagP := parity(a8[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a12 = (1 + a6) in
      let:8 a13 = M[a6] in
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      advance (10)
      A := a7;
      B := a8[7:0];
      D := 20;
      E := 56;
      H := 20;
      L := 74;
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a8[7:0][7];
      FlagZ := is_zero(a8[7:0]);
      FlagA := a11[7:0][4];
      FlagP := parity(a8[7:0]);
      jump ((a15,a13));
    }

0517:

    #0517
    #instruction: LD   A,(2046)
    let:8 a1 = M[2046] in
    advance (13)
    #051A
    #instruction: LD   (2070),A
    M[2070] := a1;
    advance (13)
    #051D
    #instruction: LD   A,(2036)
    let:8 a2 = M[2036] in
    advance (13)
    #0520
    #instruction: LD   (2071),A
    M[2071] := a2;
    advance (13)
    #0523
    #instruction: CALL 0563
    let:16 a3 = (-1 + (SPH,SPL)) in
    M[a3] := 05;
    let:16 a4 = (-1 + a3) in
    M[a4] := 26;
    #return-to: 0526
    advance (17)
    #0563
    #instruction: LD   HL,2073
    advance (10)
    #0566
    #instruction: LD   A,(HL)
    let:8 a5 = M[2073] in
    advance (7)
    #0567
    #instruction: AND  80
    let:8 a6 = (80 & a5) in
    let:8 a7 = (80 | a5) in
    advance (7)
    #0569
    #instruction: JP   NZ,05C1
    if (!is_zero(a6)) {
      advance (10)
      #05C1
      #instruction: LD   DE,207C
      advance (10)
      #05C4
      #instruction: CALL 1A06
      let:16 a8 = (-1 + a4) in
      M[a8] := 05;
      let:16 a9 = (-1 + a8) in
      M[a9] := C7;
      #return-to: 05C7
      advance (17)
      #1A06
      #instruction: LD   HL,2072
      advance (10)
      #1A09
      #instruction: LD   B,(HL)
      let:8 a10 = M[2072] in
      advance (7)
      #1A0A
      #instruction: LD   A,(DE)
      let:8 a11 = M[207C] in
      advance (7)
      #1A0B
      #instruction: AND  80
      let:8 a12 = (80 & a11) in
      let:8 a13 = (80 | a11) in
      advance (7)
      #1A0D
      #instruction: XOR  B
      let:8 a14 = (a10 ^ a12) in
      advance (4)
      #1A0E
      #instruction: RET  NZ
      if (!is_zero(a14)) {
        let:16 a15 = (1 + a9) in
        let:8 a16 = M[a9] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (11)
        A := a14;
        B := a10;
        D := 20;
        E := 7C;
        H := 20;
        L := 72;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := false;
        jump ((a18,a16));
      } else {
        advance (5)
        #1A0F
        #instruction: SCF
        advance (4)
        #1A10
        #instruction: RET
        let:16 a19 = (1 + a9) in
        let:8 a20 = M[a9] in
        let:16 a21 = (1 + a19) in
        let:8 a22 = M[a19] in
        advance (10)
        A := a14;
        B := a10;
        D := 20;
        E := 7C;
        H := 20;
        L := 72;
        SPH := a21[15:8];
        SPL := a21[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := true;
        jump ((a22,a20));
      }
    } else {
      advance (10)
      #056C
      #instruction: LD   A,(20C1)
      let:8 a23 = M[20C1] in
      advance (13)
      #056F
      #instruction: CP   04
      let:16 a24 = addWithCarry(!false,a23,~04) in
      let:8 a25 = (a23 & 0F) in
      let:8 a26 = (~04 & 0F) in
      let:16 a27 = addWithCarry(!false,a25,a26) in
      advance (7)
      #0571
      #instruction: LD   A,(2069)
      let:8 a28 = M[2069] in
      advance (13)
      #0574
      #instruction: JP   Z,05B7
      if (is_zero(a24[7:0])) {
        advance (10)
        #05B7
        #instruction: LD   HL,2073
        advance (10)
        #05BA
        #instruction: LD   A,(HL)
        let:8 a29 = M[2073] in
        advance (7)
        #05BB
        #instruction: OR   80
        let:8 a30 = (80 | a29) in
        advance (7)
        #05BD
        #instruction: LD   (HL),A
        M[2073] := a30;
        advance (7)
        #05BE
        #instruction: INC  HL
        advance (5)
        #05BF
        #instruction: INC  (HL)
        let:8 a31 = M[2074] in
        let:16 a32 = addWithCarry(true,a31,00) in
        let:8 a33 = (a31 & 0F) in
        let:8 a34 = (00 & 0F) in
        let:16 a35 = addWithCarry(true,a33,a34) in
        M[2074] := a32[7:0];
        advance (10)
        #05C0
        #instruction: RET
        let:16 a36 = (1 + a4) in
        let:8 a37 = M[a4] in
        let:16 a38 = (1 + a36) in
        let:8 a39 = M[a36] in
        advance (10)
        A := a30;
        H := 20;
        L := 74;
        SPH := a38[15:8];
        SPL := a38[7:0];
        FlagS := a32[7:0][7];
        FlagZ := is_zero(a32[7:0]);
        FlagA := a35[7:0][4];
        FlagP := parity(a32[7:0]);
        FlagCY := false;
        jump ((a39,a37));
      } else {
        advance (10)
        #0577
        #instruction: AND  A
        let:8 a40 = (a28 & a28) in
        let:8 a41 = (a28 | a28) in
        advance (4)
        #0578
        #instruction: RET  Z
        if (is_zero(a40)) {
          let:16 a42 = (1 + a4) in
          let:8 a43 = M[a4] in
          let:16 a44 = (1 + a42) in
          let:8 a45 = M[a42] in
          advance (11)
          A := a40;
          H := 20;
          L := 73;
          SPH := a44[15:8];
          SPL := a44[7:0];
          FlagS := a40[7];
          FlagZ := is_zero(a40);
          FlagA := a41[3];
          FlagP := parity(a40);
          FlagCY := false;
          jump ((a45,a43));
        } else {
          advance (5)
          #0579
          #instruction: INC  HL
          advance (5)
          #057A
          #instruction: LD   (HL),00
          M[2074] := 00;
          advance (10)
          #057C
          #instruction: LD   A,(2070)
          let:8 a46 = M[2070] in
          advance (13)
          #057F
          #instruction: AND  A
          let:8 a47 = (a46 & a46) in
          let:8 a48 = (a46 | a46) in
          advance (4)
          #0580
          #instruction: JP   Z,0589
          if (is_zero(a47)) {
            advance (10)
            #0589
            #instruction: LD   A,(2071)
            let:8 a49 = M[2071] in
            advance (13)
            #058C
            #instruction: AND  A
            let:8 a50 = (a49 & a49) in
            let:8 a51 = (a49 | a49) in
            advance (4)
            #058D
            #instruction: JP   Z,0596
            if (is_zero(a50)) {
              advance (10)
              #0596
              #instruction: INC  HL
              advance (5)
              #0597
              #instruction: LD   A,(HL)
              let:8 a52 = M[2075] in
              advance (7)
              #0598
              #instruction: AND  A
              let:8 a53 = (a52 & a52) in
              let:8 a54 = (a52 | a52) in
              advance (4)
              #0599
              #instruction: JP   Z,061B
              if (is_zero(a53)) {
                advance (10)
                #061B
                #instruction: LD   A,(201B)
                let:8 a55 = M[201B] in
                advance (13)
                #061E
                #instruction: ADD  08
                let:16 a56 = addWithCarry(false,08,a55) in
                let:8 a57 = (08 & 0F) in
                let:8 a58 = (a55 & 0F) in
                let:16 a59 = addWithCarry(false,a57,a58) in
                advance (7)
                #0620
                #instruction: LD   H,A
                advance (5)
                #0621
                #instruction: CALL 156F
                let:16 a60 = (-1 + a4) in
                M[a60] := 06;
                let:16 a61 = (-1 + a60) in
                M[a61] := 24;
                #return-to: 0624
                advance (17)
                #156F
                #instruction: LD   A,(200A)
                let:8 a62 = M[200A] in
                advance (13)
                #1572
                #instruction: CALL 1554
                let:16 a63 = (-1 + a61) in
                M[a63] := 15;
                let:16 a64 = (-1 + a63) in
                M[a64] := 75;
                #return-to: 1575
                advance (17)
                #1554
                #instruction: LD   C,00
                advance (7)
                #1556
                #instruction: CP   H
                let:16 a65 = addWithCarry(!false,a62,~a56[7:0]) in
                let:8 a66 = (a62 & 0F) in
                let:8 a67 = (~a56[7:0] & 0F) in
                let:16 a68 = addWithCarry(!false,a66,a67) in
                advance (4)
                #1557
                #instruction: CALL NC,1590
                if (!!a65[15:8][0]) {
                  let:16 a69 = (-1 + a64) in
                  M[a69] := 15;
                  let:16 a70 = (-1 + a69) in
                  M[a70] := 5A;
                  #return-to: 155A
                  advance (17)
                  #1590
                  #instruction: INC  C
                  let:16 a71 = addWithCarry(true,00,00) in
                  let:8 a72 = (00 & 0F) in
                  let:8 a73 = (00 & 0F) in
                  let:16 a74 = addWithCarry(true,a72,a73) in
                  advance (5)
                  #1591
                  #instruction: ADD  10
                  let:16 a75 = addWithCarry(false,10,a62) in
                  let:8 a76 = (10 & 0F) in
                  let:8 a77 = (a62 & 0F) in
                  let:16 a78 = addWithCarry(false,a76,a77) in
                  advance (7)
                  #1593
                  #instruction: JP   MI,1590
                  if (a75[7:0][7]) {
                    advance (10)
                    A := a75[7:0];
                    C := a71[7:0];
                    H := a56[7:0];
                    L := 75;
                    SPH := a70[15:8];
                    SPL := a70[7:0];
                    FlagS := a75[7:0][7];
                    FlagZ := is_zero(a75[7:0]);
                    FlagA := a78[7:0][4];
                    FlagP := parity(a75[7:0]);
                    FlagCY := a75[15:8][0];
                    jump (1590);
                  } else {
                    advance (10)
                    #1596
                    #instruction: RET
                    let:16 a79 = (1 + a70) in
                    let:8 a80 = M[a70] in
                    let:16 a81 = (1 + a79) in
                    let:8 a82 = M[a79] in
                    advance (10)
                    A := a75[7:0];
                    C := a71[7:0];
                    H := a56[7:0];
                    L := 75;
                    SPH := a81[15:8];
                    SPL := a81[7:0];
                    FlagS := a75[7:0][7];
                    FlagZ := is_zero(a75[7:0]);
                    FlagA := a78[7:0][4];
                    FlagP := parity(a75[7:0]);
                    FlagCY := a75[15:8][0];
                    jump ((a82,a80));
                  }
                } else {
                  advance (11)
                  A := a62;
                  C := 00;
                  H := a56[7:0];
                  L := 75;
                  SPH := a64[15:8];
                  SPL := a64[7:0];
                  FlagS := a65[7:0][7];
                  FlagZ := is_zero(a65[7:0]);
                  FlagA := a68[7:0][4];
                  FlagP := parity(a65[7:0]);
                  FlagCY := !a65[15:8][0];
                  jump (155A);
                }
              } else {
                advance (10)
                #059C
                #instruction: LD   HL,(2076)
                let:8 a83 = M[2076] in
                let:8 a84 = M[2077] in
                advance (16)
                #059F
                #instruction: LD   C,(HL)
                let:8 a85 = M[(a84,a83)] in
                advance (7)
                #05A0
                #instruction: INC  HL
                let:16 a86 = (1 + (a84,a83)) in
                advance (5)
                #05A1
                #instruction: NOP
                advance (4)
                #05A2
                #instruction: LD   (2076),HL
                M[2076] := a86[7:0];
                M[2077] := a86[15:8];
                advance (16)
                #05A5
                #instruction: CALL 062F
                let:16 a87 = (-1 + a4) in
                M[a87] := 05;
                let:16 a88 = (-1 + a87) in
                M[a88] := A8;
                #return-to: 05A8
                advance (17)
                #062F
                #instruction: DEC  C
                let:16 a89 = addWithCarry(!true,a85,~00) in
                let:8 a90 = (a85 & 0F) in
                let:8 a91 = (~00 & 0F) in
                let:16 a92 = addWithCarry(!true,a90,a91) in
                advance (5)
                #0630
                #instruction: LD   A,(2067)
                let:8 a93 = M[2067] in
                advance (13)
                #0633
                #instruction: LD   H,A
                advance (5)
                #0634
                #instruction: LD   L,C
                advance (5)
                #0635
                #instruction: LD   D,05
                advance (7)
                #0637
                #instruction: LD   A,(HL)
                let:8 a94 = M[(a93,a89[7:0])] in
                advance (7)
                #0638
                #instruction: AND  A
                let:8 a95 = (a94 & a94) in
                let:8 a96 = (a94 | a94) in
                advance (4)
                #0639
                #instruction: SCF
                advance (4)
                #063A
                #instruction: RET  NZ
                if (!is_zero(a95)) {
                  let:16 a97 = (1 + a88) in
                  let:8 a98 = M[a88] in
                  let:16 a99 = (1 + a97) in
                  let:8 a100 = M[a97] in
                  advance (11)
                  A := a95;
                  C := a89[7:0];
                  D := 05;
                  H := a93;
                  L := a89[7:0];
                  SPH := a99[15:8];
                  SPL := a99[7:0];
                  FlagS := a95[7];
                  FlagZ := is_zero(a95);
                  FlagA := a96[3];
                  FlagP := parity(a95);
                  FlagCY := true;
                  jump ((a100,a98));
                } else {
                  advance (5)
                  #063B
                  #instruction: LD   A,L
                  advance (5)
                  #063C
                  #instruction: ADD  0B
                  let:16 a101 = addWithCarry(false,0B,a89[7:0]) in
                  let:8 a102 = (0B & 0F) in
                  let:8 a103 = (a89[7:0] & 0F) in
                  let:16 a104 = addWithCarry(false,a102,a103) in
                  advance (7)
                  #063E
                  #instruction: LD   L,A
                  advance (5)
                  #063F
                  #instruction: DEC  D
                  let:16 a105 = addWithCarry(!true,05,~00) in
                  let:8 a106 = (05 & 0F) in
                  let:8 a107 = (~00 & 0F) in
                  let:16 a108 = addWithCarry(!true,a106,a107) in
                  advance (5)
                  #0640
                  #instruction: JP   NZ,0637
                  if (!is_zero(a105[7:0])) {
                    advance (10)
                    A := a101[7:0];
                    C := a89[7:0];
                    D := a105[7:0];
                    H := a93;
                    L := a101[7:0];
                    SPH := a88[15:8];
                    SPL := a88[7:0];
                    FlagS := a105[7:0][7];
                    FlagZ := is_zero(a105[7:0]);
                    FlagA := a108[7:0][4];
                    FlagP := parity(a105[7:0]);
                    FlagCY := a101[15:8][0];
                    jump (0637);
                  } else {
                    advance (10)
                    #0643
                    #instruction: RET
                    let:16 a109 = (1 + a88) in
                    let:8 a110 = M[a88] in
                    let:16 a111 = (1 + a109) in
                    let:8 a112 = M[a109] in
                    advance (10)
                    A := a101[7:0];
                    C := a89[7:0];
                    D := a105[7:0];
                    H := a93;
                    L := a101[7:0];
                    SPH := a111[15:8];
                    SPL := a111[7:0];
                    FlagS := a105[7:0][7];
                    FlagZ := is_zero(a105[7:0]);
                    FlagA := a108[7:0][4];
                    FlagP := parity(a105[7:0]);
                    FlagCY := a101[15:8][0];
                    jump ((a112,a110));
                  }
                }
              }
            } else {
              advance (10)
              #0590
              #instruction: LD   B,A
              advance (5)
              #0591
              #instruction: LD   A,(20CF)
              let:8 a113 = M[20CF] in
              advance (13)
              #0594
              #instruction: CP   B
              let:16 a114 = addWithCarry(!false,a113,~a50) in
              let:8 a115 = (a113 & 0F) in
              let:8 a116 = (~a50 & 0F) in
              let:16 a117 = addWithCarry(!false,a115,a116) in
              advance (4)
              #0595
              #instruction: RET  NC
              if (!!a114[15:8][0]) {
                let:16 a118 = (1 + a4) in
                let:8 a119 = M[a4] in
                let:16 a120 = (1 + a118) in
                let:8 a121 = M[a118] in
                advance (11)
                A := a113;
                B := a50;
                H := 20;
                L := 74;
                SPH := a120[15:8];
                SPL := a120[7:0];
                FlagS := a114[7:0][7];
                FlagZ := is_zero(a114[7:0]);
                FlagA := a117[7:0][4];
                FlagP := parity(a114[7:0]);
                FlagCY := !a114[15:8][0];
                jump ((a121,a119));
              } else {
                advance (5)
                #0596
                #instruction: INC  HL
                advance (5)
                #0597
                #instruction: LD   A,(HL)
                let:8 a122 = M[2075] in
                advance (7)
                #0598
                #instruction: AND  A
                let:8 a123 = (a122 & a122) in
                let:8 a124 = (a122 | a122) in
                advance (4)
                #0599
                #instruction: JP   Z,061B
                if (is_zero(a123)) {
                  advance (10)
                  #061B
                  #instruction: LD   A,(201B)
                  let:8 a125 = M[201B] in
                  advance (13)
                  #061E
                  #instruction: ADD  08
                  let:16 a126 = addWithCarry(false,08,a125) in
                  let:8 a127 = (08 & 0F) in
                  let:8 a128 = (a125 & 0F) in
                  let:16 a129 = addWithCarry(false,a127,a128) in
                  advance (7)
                  #0620
                  #instruction: LD   H,A
                  advance (5)
                  #0621
                  #instruction: CALL 156F
                  let:16 a130 = (-1 + a4) in
                  M[a130] := 06;
                  let:16 a131 = (-1 + a130) in
                  M[a131] := 24;
                  #return-to: 0624
                  advance (17)
                  #156F
                  #instruction: LD   A,(200A)
                  let:8 a132 = M[200A] in
                  advance (13)
                  #1572
                  #instruction: CALL 1554
                  let:16 a133 = (-1 + a131) in
                  M[a133] := 15;
                  let:16 a134 = (-1 + a133) in
                  M[a134] := 75;
                  #return-to: 1575
                  advance (17)
                  #1554
                  #instruction: LD   C,00
                  advance (7)
                  #1556
                  #instruction: CP   H
                  let:16 a135 = addWithCarry(!false,a132,~a126[7:0]) in
                  let:8 a136 = (a132 & 0F) in
                  let:8 a137 = (~a126[7:0] & 0F) in
                  let:16 a138 = addWithCarry(!false,a136,a137) in
                  advance (4)
                  #1557
                  #instruction: CALL NC,1590
                  if (!!a135[15:8][0]) {
                    let:16 a139 = (-1 + a134) in
                    M[a139] := 15;
                    let:16 a140 = (-1 + a139) in
                    M[a140] := 5A;
                    #return-to: 155A
                    advance (17)
                    #1590
                    #instruction: INC  C
                    let:16 a141 = addWithCarry(true,00,00) in
                    let:8 a142 = (00 & 0F) in
                    let:8 a143 = (00 & 0F) in
                    let:16 a144 = addWithCarry(true,a142,a143) in
                    advance (5)
                    #1591
                    #instruction: ADD  10
                    let:16 a145 = addWithCarry(false,10,a132) in
                    let:8 a146 = (10 & 0F) in
                    let:8 a147 = (a132 & 0F) in
                    let:16 a148 = addWithCarry(false,a146,a147) in
                    advance (7)
                    #1593
                    #instruction: JP   MI,1590
                    if (a145[7:0][7]) {
                      advance (10)
                      A := a145[7:0];
                      B := a50;
                      C := a141[7:0];
                      H := a126[7:0];
                      L := 75;
                      SPH := a140[15:8];
                      SPL := a140[7:0];
                      FlagS := a145[7:0][7];
                      FlagZ := is_zero(a145[7:0]);
                      FlagA := a148[7:0][4];
                      FlagP := parity(a145[7:0]);
                      FlagCY := a145[15:8][0];
                      jump (1590);
                    } else {
                      advance (10)
                      #1596
                      #instruction: RET
                      let:16 a149 = (1 + a140) in
                      let:8 a150 = M[a140] in
                      let:16 a151 = (1 + a149) in
                      let:8 a152 = M[a149] in
                      advance (10)
                      A := a145[7:0];
                      B := a50;
                      C := a141[7:0];
                      H := a126[7:0];
                      L := 75;
                      SPH := a151[15:8];
                      SPL := a151[7:0];
                      FlagS := a145[7:0][7];
                      FlagZ := is_zero(a145[7:0]);
                      FlagA := a148[7:0][4];
                      FlagP := parity(a145[7:0]);
                      FlagCY := a145[15:8][0];
                      jump ((a152,a150));
                    }
                  } else {
                    advance (11)
                    A := a132;
                    B := a50;
                    C := 00;
                    H := a126[7:0];
                    L := 75;
                    SPH := a134[15:8];
                    SPL := a134[7:0];
                    FlagS := a135[7:0][7];
                    FlagZ := is_zero(a135[7:0]);
                    FlagA := a138[7:0][4];
                    FlagP := parity(a135[7:0]);
                    FlagCY := !a135[15:8][0];
                    jump (155A);
                  }
                } else {
                  advance (10)
                  #059C
                  #instruction: LD   HL,(2076)
                  let:8 a153 = M[2076] in
                  let:8 a154 = M[2077] in
                  advance (16)
                  #059F
                  #instruction: LD   C,(HL)
                  let:8 a155 = M[(a154,a153)] in
                  advance (7)
                  #05A0
                  #instruction: INC  HL
                  let:16 a156 = (1 + (a154,a153)) in
                  advance (5)
                  #05A1
                  #instruction: NOP
                  advance (4)
                  #05A2
                  #instruction: LD   (2076),HL
                  M[2076] := a156[7:0];
                  M[2077] := a156[15:8];
                  advance (16)
                  #05A5
                  #instruction: CALL 062F
                  let:16 a157 = (-1 + a4) in
                  M[a157] := 05;
                  let:16 a158 = (-1 + a157) in
                  M[a158] := A8;
                  #return-to: 05A8
                  advance (17)
                  #062F
                  #instruction: DEC  C
                  let:16 a159 = addWithCarry(!true,a155,~00) in
                  let:8 a160 = (a155 & 0F) in
                  let:8 a161 = (~00 & 0F) in
                  let:16 a162 = addWithCarry(!true,a160,a161) in
                  advance (5)
                  #0630
                  #instruction: LD   A,(2067)
                  let:8 a163 = M[2067] in
                  advance (13)
                  #0633
                  #instruction: LD   H,A
                  advance (5)
                  #0634
                  #instruction: LD   L,C
                  advance (5)
                  #0635
                  #instruction: LD   D,05
                  advance (7)
                  #0637
                  #instruction: LD   A,(HL)
                  let:8 a164 = M[(a163,a159[7:0])] in
                  advance (7)
                  #0638
                  #instruction: AND  A
                  let:8 a165 = (a164 & a164) in
                  let:8 a166 = (a164 | a164) in
                  advance (4)
                  #0639
                  #instruction: SCF
                  advance (4)
                  #063A
                  #instruction: RET  NZ
                  if (!is_zero(a165)) {
                    let:16 a167 = (1 + a158) in
                    let:8 a168 = M[a158] in
                    let:16 a169 = (1 + a167) in
                    let:8 a170 = M[a167] in
                    advance (11)
                    A := a165;
                    B := a50;
                    C := a159[7:0];
                    D := 05;
                    H := a163;
                    L := a159[7:0];
                    SPH := a169[15:8];
                    SPL := a169[7:0];
                    FlagS := a165[7];
                    FlagZ := is_zero(a165);
                    FlagA := a166[3];
                    FlagP := parity(a165);
                    FlagCY := true;
                    jump ((a170,a168));
                  } else {
                    advance (5)
                    #063B
                    #instruction: LD   A,L
                    advance (5)
                    #063C
                    #instruction: ADD  0B
                    let:16 a171 = addWithCarry(false,0B,a159[7:0]) in
                    let:8 a172 = (0B & 0F) in
                    let:8 a173 = (a159[7:0] & 0F) in
                    let:16 a174 = addWithCarry(false,a172,a173) in
                    advance (7)
                    #063E
                    #instruction: LD   L,A
                    advance (5)
                    #063F
                    #instruction: DEC  D
                    let:16 a175 = addWithCarry(!true,05,~00) in
                    let:8 a176 = (05 & 0F) in
                    let:8 a177 = (~00 & 0F) in
                    let:16 a178 = addWithCarry(!true,a176,a177) in
                    advance (5)
                    #0640
                    #instruction: JP   NZ,0637
                    if (!is_zero(a175[7:0])) {
                      advance (10)
                      A := a171[7:0];
                      B := a50;
                      C := a159[7:0];
                      D := a175[7:0];
                      H := a163;
                      L := a171[7:0];
                      SPH := a158[15:8];
                      SPL := a158[7:0];
                      FlagS := a175[7:0][7];
                      FlagZ := is_zero(a175[7:0]);
                      FlagA := a178[7:0][4];
                      FlagP := parity(a175[7:0]);
                      FlagCY := a171[15:8][0];
                      jump (0637);
                    } else {
                      advance (10)
                      #0643
                      #instruction: RET
                      let:16 a179 = (1 + a158) in
                      let:8 a180 = M[a158] in
                      let:16 a181 = (1 + a179) in
                      let:8 a182 = M[a179] in
                      advance (10)
                      A := a171[7:0];
                      B := a50;
                      C := a159[7:0];
                      D := a175[7:0];
                      H := a163;
                      L := a171[7:0];
                      SPH := a181[15:8];
                      SPL := a181[7:0];
                      FlagS := a175[7:0][7];
                      FlagZ := is_zero(a175[7:0]);
                      FlagA := a178[7:0][4];
                      FlagP := parity(a175[7:0]);
                      FlagCY := a171[15:8][0];
                      jump ((a182,a180));
                    }
                  }
                }
              }
            }
          } else {
            advance (10)
            #0583
            #instruction: LD   B,A
            advance (5)
            #0584
            #instruction: LD   A,(20CF)
            let:8 a183 = M[20CF] in
            advance (13)
            #0587
            #instruction: CP   B
            let:16 a184 = addWithCarry(!false,a183,~a47) in
            let:8 a185 = (a183 & 0F) in
            let:8 a186 = (~a47 & 0F) in
            let:16 a187 = addWithCarry(!false,a185,a186) in
            advance (4)
            #0588
            #instruction: RET  NC
            if (!!a184[15:8][0]) {
              let:16 a188 = (1 + a4) in
              let:8 a189 = M[a4] in
              let:16 a190 = (1 + a188) in
              let:8 a191 = M[a188] in
              advance (11)
              A := a183;
              B := a47;
              H := 20;
              L := 74;
              SPH := a190[15:8];
              SPL := a190[7:0];
              FlagS := a184[7:0][7];
              FlagZ := is_zero(a184[7:0]);
              FlagA := a187[7:0][4];
              FlagP := parity(a184[7:0]);
              FlagCY := !a184[15:8][0];
              jump ((a191,a189));
            } else {
              advance (5)
              #0589
              #instruction: LD   A,(2071)
              let:8 a192 = M[2071] in
              advance (13)
              #058C
              #instruction: AND  A
              let:8 a193 = (a192 & a192) in
              let:8 a194 = (a192 | a192) in
              advance (4)
              #058D
              #instruction: JP   Z,0596
              if (is_zero(a193)) {
                advance (10)
                #0596
                #instruction: INC  HL
                advance (5)
                #0597
                #instruction: LD   A,(HL)
                let:8 a195 = M[2075] in
                advance (7)
                #0598
                #instruction: AND  A
                let:8 a196 = (a195 & a195) in
                let:8 a197 = (a195 | a195) in
                advance (4)
                #0599
                #instruction: JP   Z,061B
                if (is_zero(a196)) {
                  advance (10)
                  #061B
                  #instruction: LD   A,(201B)
                  let:8 a198 = M[201B] in
                  advance (13)
                  #061E
                  #instruction: ADD  08
                  let:16 a199 = addWithCarry(false,08,a198) in
                  let:8 a200 = (08 & 0F) in
                  let:8 a201 = (a198 & 0F) in
                  let:16 a202 = addWithCarry(false,a200,a201) in
                  advance (7)
                  #0620
                  #instruction: LD   H,A
                  advance (5)
                  #0621
                  #instruction: CALL 156F
                  let:16 a203 = (-1 + a4) in
                  M[a203] := 06;
                  let:16 a204 = (-1 + a203) in
                  M[a204] := 24;
                  #return-to: 0624
                  advance (17)
                  #156F
                  #instruction: LD   A,(200A)
                  let:8 a205 = M[200A] in
                  advance (13)
                  #1572
                  #instruction: CALL 1554
                  let:16 a206 = (-1 + a204) in
                  M[a206] := 15;
                  let:16 a207 = (-1 + a206) in
                  M[a207] := 75;
                  #return-to: 1575
                  advance (17)
                  #1554
                  #instruction: LD   C,00
                  advance (7)
                  #1556
                  #instruction: CP   H
                  let:16 a208 = addWithCarry(!false,a205,~a199[7:0]) in
                  let:8 a209 = (a205 & 0F) in
                  let:8 a210 = (~a199[7:0] & 0F) in
                  let:16 a211 = addWithCarry(!false,a209,a210) in
                  advance (4)
                  #1557
                  #instruction: CALL NC,1590
                  if (!!a208[15:8][0]) {
                    let:16 a212 = (-1 + a207) in
                    M[a212] := 15;
                    let:16 a213 = (-1 + a212) in
                    M[a213] := 5A;
                    #return-to: 155A
                    advance (17)
                    #1590
                    #instruction: INC  C
                    let:16 a214 = addWithCarry(true,00,00) in
                    let:8 a215 = (00 & 0F) in
                    let:8 a216 = (00 & 0F) in
                    let:16 a217 = addWithCarry(true,a215,a216) in
                    advance (5)
                    #1591
                    #instruction: ADD  10
                    let:16 a218 = addWithCarry(false,10,a205) in
                    let:8 a219 = (10 & 0F) in
                    let:8 a220 = (a205 & 0F) in
                    let:16 a221 = addWithCarry(false,a219,a220) in
                    advance (7)
                    #1593
                    #instruction: JP   MI,1590
                    if (a218[7:0][7]) {
                      advance (10)
                      A := a218[7:0];
                      B := a47;
                      C := a214[7:0];
                      H := a199[7:0];
                      L := 75;
                      SPH := a213[15:8];
                      SPL := a213[7:0];
                      FlagS := a218[7:0][7];
                      FlagZ := is_zero(a218[7:0]);
                      FlagA := a221[7:0][4];
                      FlagP := parity(a218[7:0]);
                      FlagCY := a218[15:8][0];
                      jump (1590);
                    } else {
                      advance (10)
                      #1596
                      #instruction: RET
                      let:16 a222 = (1 + a213) in
                      let:8 a223 = M[a213] in
                      let:16 a224 = (1 + a222) in
                      let:8 a225 = M[a222] in
                      advance (10)
                      A := a218[7:0];
                      B := a47;
                      C := a214[7:0];
                      H := a199[7:0];
                      L := 75;
                      SPH := a224[15:8];
                      SPL := a224[7:0];
                      FlagS := a218[7:0][7];
                      FlagZ := is_zero(a218[7:0]);
                      FlagA := a221[7:0][4];
                      FlagP := parity(a218[7:0]);
                      FlagCY := a218[15:8][0];
                      jump ((a225,a223));
                    }
                  } else {
                    advance (11)
                    A := a205;
                    B := a47;
                    C := 00;
                    H := a199[7:0];
                    L := 75;
                    SPH := a207[15:8];
                    SPL := a207[7:0];
                    FlagS := a208[7:0][7];
                    FlagZ := is_zero(a208[7:0]);
                    FlagA := a211[7:0][4];
                    FlagP := parity(a208[7:0]);
                    FlagCY := !a208[15:8][0];
                    jump (155A);
                  }
                } else {
                  advance (10)
                  #059C
                  #instruction: LD   HL,(2076)
                  let:8 a226 = M[2076] in
                  let:8 a227 = M[2077] in
                  advance (16)
                  #059F
                  #instruction: LD   C,(HL)
                  let:8 a228 = M[(a227,a226)] in
                  advance (7)
                  #05A0
                  #instruction: INC  HL
                  let:16 a229 = (1 + (a227,a226)) in
                  advance (5)
                  #05A1
                  #instruction: NOP
                  advance (4)
                  #05A2
                  #instruction: LD   (2076),HL
                  M[2076] := a229[7:0];
                  M[2077] := a229[15:8];
                  advance (16)
                  #05A5
                  #instruction: CALL 062F
                  let:16 a230 = (-1 + a4) in
                  M[a230] := 05;
                  let:16 a231 = (-1 + a230) in
                  M[a231] := A8;
                  #return-to: 05A8
                  advance (17)
                  #062F
                  #instruction: DEC  C
                  let:16 a232 = addWithCarry(!true,a228,~00) in
                  let:8 a233 = (a228 & 0F) in
                  let:8 a234 = (~00 & 0F) in
                  let:16 a235 = addWithCarry(!true,a233,a234) in
                  advance (5)
                  #0630
                  #instruction: LD   A,(2067)
                  let:8 a236 = M[2067] in
                  advance (13)
                  #0633
                  #instruction: LD   H,A
                  advance (5)
                  #0634
                  #instruction: LD   L,C
                  advance (5)
                  #0635
                  #instruction: LD   D,05
                  advance (7)
                  #0637
                  #instruction: LD   A,(HL)
                  let:8 a237 = M[(a236,a232[7:0])] in
                  advance (7)
                  #0638
                  #instruction: AND  A
                  let:8 a238 = (a237 & a237) in
                  let:8 a239 = (a237 | a237) in
                  advance (4)
                  #0639
                  #instruction: SCF
                  advance (4)
                  #063A
                  #instruction: RET  NZ
                  if (!is_zero(a238)) {
                    let:16 a240 = (1 + a231) in
                    let:8 a241 = M[a231] in
                    let:16 a242 = (1 + a240) in
                    let:8 a243 = M[a240] in
                    advance (11)
                    A := a238;
                    B := a47;
                    C := a232[7:0];
                    D := 05;
                    H := a236;
                    L := a232[7:0];
                    SPH := a242[15:8];
                    SPL := a242[7:0];
                    FlagS := a238[7];
                    FlagZ := is_zero(a238);
                    FlagA := a239[3];
                    FlagP := parity(a238);
                    FlagCY := true;
                    jump ((a243,a241));
                  } else {
                    advance (5)
                    #063B
                    #instruction: LD   A,L
                    advance (5)
                    #063C
                    #instruction: ADD  0B
                    let:16 a244 = addWithCarry(false,0B,a232[7:0]) in
                    let:8 a245 = (0B & 0F) in
                    let:8 a246 = (a232[7:0] & 0F) in
                    let:16 a247 = addWithCarry(false,a245,a246) in
                    advance (7)
                    #063E
                    #instruction: LD   L,A
                    advance (5)
                    #063F
                    #instruction: DEC  D
                    let:16 a248 = addWithCarry(!true,05,~00) in
                    let:8 a249 = (05 & 0F) in
                    let:8 a250 = (~00 & 0F) in
                    let:16 a251 = addWithCarry(!true,a249,a250) in
                    advance (5)
                    #0640
                    #instruction: JP   NZ,0637
                    if (!is_zero(a248[7:0])) {
                      advance (10)
                      A := a244[7:0];
                      B := a47;
                      C := a232[7:0];
                      D := a248[7:0];
                      H := a236;
                      L := a244[7:0];
                      SPH := a231[15:8];
                      SPL := a231[7:0];
                      FlagS := a248[7:0][7];
                      FlagZ := is_zero(a248[7:0]);
                      FlagA := a251[7:0][4];
                      FlagP := parity(a248[7:0]);
                      FlagCY := a244[15:8][0];
                      jump (0637);
                    } else {
                      advance (10)
                      #0643
                      #instruction: RET
                      let:16 a252 = (1 + a231) in
                      let:8 a253 = M[a231] in
                      let:16 a254 = (1 + a252) in
                      let:8 a255 = M[a252] in
                      advance (10)
                      A := a244[7:0];
                      B := a47;
                      C := a232[7:0];
                      D := a248[7:0];
                      H := a236;
                      L := a244[7:0];
                      SPH := a254[15:8];
                      SPL := a254[7:0];
                      FlagS := a248[7:0][7];
                      FlagZ := is_zero(a248[7:0]);
                      FlagA := a251[7:0][4];
                      FlagP := parity(a248[7:0]);
                      FlagCY := a244[15:8][0];
                      jump ((a255,a253));
                    }
                  }
                }
              } else {
                advance (10)
                #0590
                #instruction: LD   B,A
                advance (5)
                #0591
                #instruction: LD   A,(20CF)
                let:8 a256 = M[20CF] in
                advance (13)
                #0594
                #instruction: CP   B
                let:16 a257 = addWithCarry(!false,a256,~a193) in
                let:8 a258 = (a256 & 0F) in
                let:8 a259 = (~a193 & 0F) in
                let:16 a260 = addWithCarry(!false,a258,a259) in
                advance (4)
                #0595
                #instruction: RET  NC
                if (!!a257[15:8][0]) {
                  let:16 a261 = (1 + a4) in
                  let:8 a262 = M[a4] in
                  let:16 a263 = (1 + a261) in
                  let:8 a264 = M[a261] in
                  advance (11)
                  A := a256;
                  B := a193;
                  H := 20;
                  L := 74;
                  SPH := a263[15:8];
                  SPL := a263[7:0];
                  FlagS := a257[7:0][7];
                  FlagZ := is_zero(a257[7:0]);
                  FlagA := a260[7:0][4];
                  FlagP := parity(a257[7:0]);
                  FlagCY := !a257[15:8][0];
                  jump ((a264,a262));
                } else {
                  advance (5)
                  #0596
                  #instruction: INC  HL
                  advance (5)
                  #0597
                  #instruction: LD   A,(HL)
                  let:8 a265 = M[2075] in
                  advance (7)
                  #0598
                  #instruction: AND  A
                  let:8 a266 = (a265 & a265) in
                  let:8 a267 = (a265 | a265) in
                  advance (4)
                  #0599
                  #instruction: JP   Z,061B
                  if (is_zero(a266)) {
                    advance (10)
                    #061B
                    #instruction: LD   A,(201B)
                    let:8 a268 = M[201B] in
                    advance (13)
                    #061E
                    #instruction: ADD  08
                    let:16 a269 = addWithCarry(false,08,a268) in
                    let:8 a270 = (08 & 0F) in
                    let:8 a271 = (a268 & 0F) in
                    let:16 a272 = addWithCarry(false,a270,a271) in
                    advance (7)
                    #0620
                    #instruction: LD   H,A
                    advance (5)
                    #0621
                    #instruction: CALL 156F
                    let:16 a273 = (-1 + a4) in
                    M[a273] := 06;
                    let:16 a274 = (-1 + a273) in
                    M[a274] := 24;
                    #return-to: 0624
                    advance (17)
                    #156F
                    #instruction: LD   A,(200A)
                    let:8 a275 = M[200A] in
                    advance (13)
                    #1572
                    #instruction: CALL 1554
                    let:16 a276 = (-1 + a274) in
                    M[a276] := 15;
                    let:16 a277 = (-1 + a276) in
                    M[a277] := 75;
                    #return-to: 1575
                    advance (17)
                    #1554
                    #instruction: LD   C,00
                    advance (7)
                    #1556
                    #instruction: CP   H
                    let:16 a278 = addWithCarry(!false,a275,~a269[7:0]) in
                    let:8 a279 = (a275 & 0F) in
                    let:8 a280 = (~a269[7:0] & 0F) in
                    let:16 a281 = addWithCarry(!false,a279,a280) in
                    advance (4)
                    #1557
                    #instruction: CALL NC,1590
                    if (!!a278[15:8][0]) {
                      let:16 a282 = (-1 + a277) in
                      M[a282] := 15;
                      let:16 a283 = (-1 + a282) in
                      M[a283] := 5A;
                      #return-to: 155A
                      advance (17)
                      #1590
                      #instruction: INC  C
                      let:16 a284 = addWithCarry(true,00,00) in
                      let:8 a285 = (00 & 0F) in
                      let:8 a286 = (00 & 0F) in
                      let:16 a287 = addWithCarry(true,a285,a286) in
                      advance (5)
                      #1591
                      #instruction: ADD  10
                      let:16 a288 = addWithCarry(false,10,a275) in
                      let:8 a289 = (10 & 0F) in
                      let:8 a290 = (a275 & 0F) in
                      let:16 a291 = addWithCarry(false,a289,a290) in
                      advance (7)
                      #1593
                      #instruction: JP   MI,1590
                      if (a288[7:0][7]) {
                        advance (10)
                        A := a288[7:0];
                        B := a193;
                        C := a284[7:0];
                        H := a269[7:0];
                        L := 75;
                        SPH := a283[15:8];
                        SPL := a283[7:0];
                        FlagS := a288[7:0][7];
                        FlagZ := is_zero(a288[7:0]);
                        FlagA := a291[7:0][4];
                        FlagP := parity(a288[7:0]);
                        FlagCY := a288[15:8][0];
                        jump (1590);
                      } else {
                        advance (10)
                        #1596
                        #instruction: RET
                        let:16 a292 = (1 + a283) in
                        let:8 a293 = M[a283] in
                        let:16 a294 = (1 + a292) in
                        let:8 a295 = M[a292] in
                        advance (10)
                        A := a288[7:0];
                        B := a193;
                        C := a284[7:0];
                        H := a269[7:0];
                        L := 75;
                        SPH := a294[15:8];
                        SPL := a294[7:0];
                        FlagS := a288[7:0][7];
                        FlagZ := is_zero(a288[7:0]);
                        FlagA := a291[7:0][4];
                        FlagP := parity(a288[7:0]);
                        FlagCY := a288[15:8][0];
                        jump ((a295,a293));
                      }
                    } else {
                      advance (11)
                      A := a275;
                      B := a193;
                      C := 00;
                      H := a269[7:0];
                      L := 75;
                      SPH := a277[15:8];
                      SPL := a277[7:0];
                      FlagS := a278[7:0][7];
                      FlagZ := is_zero(a278[7:0]);
                      FlagA := a281[7:0][4];
                      FlagP := parity(a278[7:0]);
                      FlagCY := !a278[15:8][0];
                      jump (155A);
                    }
                  } else {
                    advance (10)
                    #059C
                    #instruction: LD   HL,(2076)
                    let:8 a296 = M[2076] in
                    let:8 a297 = M[2077] in
                    advance (16)
                    #059F
                    #instruction: LD   C,(HL)
                    let:8 a298 = M[(a297,a296)] in
                    advance (7)
                    #05A0
                    #instruction: INC  HL
                    let:16 a299 = (1 + (a297,a296)) in
                    advance (5)
                    #05A1
                    #instruction: NOP
                    advance (4)
                    #05A2
                    #instruction: LD   (2076),HL
                    M[2076] := a299[7:0];
                    M[2077] := a299[15:8];
                    advance (16)
                    #05A5
                    #instruction: CALL 062F
                    let:16 a300 = (-1 + a4) in
                    M[a300] := 05;
                    let:16 a301 = (-1 + a300) in
                    M[a301] := A8;
                    #return-to: 05A8
                    advance (17)
                    #062F
                    #instruction: DEC  C
                    let:16 a302 = addWithCarry(!true,a298,~00) in
                    let:8 a303 = (a298 & 0F) in
                    let:8 a304 = (~00 & 0F) in
                    let:16 a305 = addWithCarry(!true,a303,a304) in
                    advance (5)
                    #0630
                    #instruction: LD   A,(2067)
                    let:8 a306 = M[2067] in
                    advance (13)
                    #0633
                    #instruction: LD   H,A
                    advance (5)
                    #0634
                    #instruction: LD   L,C
                    advance (5)
                    #0635
                    #instruction: LD   D,05
                    advance (7)
                    #0637
                    #instruction: LD   A,(HL)
                    let:8 a307 = M[(a306,a302[7:0])] in
                    advance (7)
                    #0638
                    #instruction: AND  A
                    let:8 a308 = (a307 & a307) in
                    let:8 a309 = (a307 | a307) in
                    advance (4)
                    #0639
                    #instruction: SCF
                    advance (4)
                    #063A
                    #instruction: RET  NZ
                    if (!is_zero(a308)) {
                      let:16 a310 = (1 + a301) in
                      let:8 a311 = M[a301] in
                      let:16 a312 = (1 + a310) in
                      let:8 a313 = M[a310] in
                      advance (11)
                      A := a308;
                      B := a193;
                      C := a302[7:0];
                      D := 05;
                      H := a306;
                      L := a302[7:0];
                      SPH := a312[15:8];
                      SPL := a312[7:0];
                      FlagS := a308[7];
                      FlagZ := is_zero(a308);
                      FlagA := a309[3];
                      FlagP := parity(a308);
                      FlagCY := true;
                      jump ((a313,a311));
                    } else {
                      advance (5)
                      #063B
                      #instruction: LD   A,L
                      advance (5)
                      #063C
                      #instruction: ADD  0B
                      let:16 a314 = addWithCarry(false,0B,a302[7:0]) in
                      let:8 a315 = (0B & 0F) in
                      let:8 a316 = (a302[7:0] & 0F) in
                      let:16 a317 = addWithCarry(false,a315,a316) in
                      advance (7)
                      #063E
                      #instruction: LD   L,A
                      advance (5)
                      #063F
                      #instruction: DEC  D
                      let:16 a318 = addWithCarry(!true,05,~00) in
                      let:8 a319 = (05 & 0F) in
                      let:8 a320 = (~00 & 0F) in
                      let:16 a321 = addWithCarry(!true,a319,a320) in
                      advance (5)
                      #0640
                      #instruction: JP   NZ,0637
                      if (!is_zero(a318[7:0])) {
                        advance (10)
                        A := a314[7:0];
                        B := a193;
                        C := a302[7:0];
                        D := a318[7:0];
                        H := a306;
                        L := a314[7:0];
                        SPH := a301[15:8];
                        SPL := a301[7:0];
                        FlagS := a318[7:0][7];
                        FlagZ := is_zero(a318[7:0]);
                        FlagA := a321[7:0][4];
                        FlagP := parity(a318[7:0]);
                        FlagCY := a314[15:8][0];
                        jump (0637);
                      } else {
                        advance (10)
                        #0643
                        #instruction: RET
                        let:16 a322 = (1 + a301) in
                        let:8 a323 = M[a301] in
                        let:16 a324 = (1 + a322) in
                        let:8 a325 = M[a322] in
                        advance (10)
                        A := a314[7:0];
                        B := a193;
                        C := a302[7:0];
                        D := a318[7:0];
                        H := a306;
                        L := a314[7:0];
                        SPH := a324[15:8];
                        SPL := a324[7:0];
                        FlagS := a318[7:0][7];
                        FlagZ := is_zero(a318[7:0]);
                        FlagA := a321[7:0][4];
                        FlagP := parity(a318[7:0]);
                        FlagCY := a314[15:8][0];
                        jump ((a325,a323));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

0526:

    #0526
    #instruction: LD   A,(2076)
    let:8 a1 = M[2076] in
    advance (13)
    #0529
    #instruction: CP   15
    let:16 a2 = addWithCarry(!false,a1,~15) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~15 & 0F) in
    let:16 a5 = addWithCarry(!false,a3,a4) in
    advance (7)
    #052B
    #instruction: JP   CY,0534
    if (!a2[15:8][0]) {
      advance (10)
      #0534
      #instruction: LD   A,(2078)
      let:8 a6 = M[2078] in
      advance (13)
      #0537
      #instruction: AND  A
      let:8 a7 = (a6 & a6) in
      let:8 a8 = (a6 | a6) in
      advance (4)
      #0538
      #instruction: LD   HL,2055
      advance (10)
      #053B
      #instruction: JP   NZ,055B
      if (!is_zero(a7)) {
        advance (10)
        #055B
        #instruction: LD   DE,2073
        advance (10)
        #055E
        #instruction: LD   B,0B
        advance (7)
        #0560
        #instruction: JP   1A32
        advance (10)
        #1A32
        #instruction: LD   A,(DE)
        let:8 a9 = M[2073] in
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2055] := a9;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a10 = addWithCarry(!true,0B,~00) in
        let:8 a11 = (0B & 0F) in
        let:8 a12 = (~00 & 0F) in
        let:16 a13 = addWithCarry(!true,a11,a12) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a10[7:0])) {
          advance (10)
          A := a9;
          B := a10[7:0];
          D := 20;
          E := 74;
          H := 20;
          L := 56;
          FlagS := a10[7:0][7];
          FlagZ := is_zero(a10[7:0]);
          FlagA := a13[7:0][4];
          FlagP := parity(a10[7:0]);
          FlagCY := false;
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a14 = (1 + (SPH,SPL)) in
          let:8 a15 = M[(SPH,SPL)] in
          let:16 a16 = (1 + a14) in
          let:8 a17 = M[a14] in
          advance (10)
          A := a9;
          B := a10[7:0];
          D := 20;
          E := 74;
          H := 20;
          L := 56;
          SPH := a16[15:8];
          SPL := a16[7:0];
          FlagS := a10[7:0][7];
          FlagZ := is_zero(a10[7:0]);
          FlagA := a13[7:0][4];
          FlagP := parity(a10[7:0]);
          FlagCY := false;
          jump ((a17,a15));
        }
      } else {
        advance (10)
        #053E
        #instruction: LD   DE,1B50
        advance (10)
        #0541
        #instruction: LD   HL,2050
        advance (10)
        #0544
        #instruction: LD   B,10
        advance (7)
        #0546
        #instruction: CALL 1A32
        let:16 a18 = (-1 + (SPH,SPL)) in
        M[a18] := 05;
        let:16 a19 = (-1 + a18) in
        M[a19] := 49;
        #return-to: 0549
        advance (17)
        #1A32
        #instruction: LD   A,(DE)
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2050] := 00;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a20 = addWithCarry(!true,10,~00) in
        let:8 a21 = (10 & 0F) in
        let:8 a22 = (~00 & 0F) in
        let:16 a23 = addWithCarry(!true,a21,a22) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a20[7:0])) {
          advance (10)
          A := 00;
          B := a20[7:0];
          D := 1B;
          E := 51;
          H := 20;
          L := 51;
          SPH := a19[15:8];
          SPL := a19[7:0];
          FlagS := a20[7:0][7];
          FlagZ := is_zero(a20[7:0]);
          FlagA := a23[7:0][4];
          FlagP := parity(a20[7:0]);
          FlagCY := false;
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a24 = (1 + a19) in
          let:8 a25 = M[a19] in
          let:16 a26 = (1 + a24) in
          let:8 a27 = M[a24] in
          advance (10)
          A := 00;
          B := a20[7:0];
          D := 1B;
          E := 51;
          H := 20;
          L := 51;
          SPH := a26[15:8];
          SPL := a26[7:0];
          FlagS := a20[7:0][7];
          FlagZ := is_zero(a20[7:0]);
          FlagA := a23[7:0][4];
          FlagP := parity(a20[7:0]);
          FlagCY := false;
          jump ((a27,a25));
        }
      }
    } else {
      advance (10)
      #052E
      #instruction: LD   A,(1B58)
      advance (13)
      #0531
      #instruction: LD   (2076),A
      M[2076] := 06;
      advance (13)
      #0534
      #instruction: LD   A,(2078)
      let:8 a28 = M[2078] in
      advance (13)
      #0537
      #instruction: AND  A
      let:8 a29 = (a28 & a28) in
      let:8 a30 = (a28 | a28) in
      advance (4)
      #0538
      #instruction: LD   HL,2055
      advance (10)
      #053B
      #instruction: JP   NZ,055B
      if (!is_zero(a29)) {
        advance (10)
        #055B
        #instruction: LD   DE,2073
        advance (10)
        #055E
        #instruction: LD   B,0B
        advance (7)
        #0560
        #instruction: JP   1A32
        advance (10)
        #1A32
        #instruction: LD   A,(DE)
        let:8 a31 = M[2073] in
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2055] := a31;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a32 = addWithCarry(!true,0B,~00) in
        let:8 a33 = (0B & 0F) in
        let:8 a34 = (~00 & 0F) in
        let:16 a35 = addWithCarry(!true,a33,a34) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a32[7:0])) {
          advance (10)
          A := a31;
          B := a32[7:0];
          D := 20;
          E := 74;
          H := 20;
          L := 56;
          FlagS := a32[7:0][7];
          FlagZ := is_zero(a32[7:0]);
          FlagA := a35[7:0][4];
          FlagP := parity(a32[7:0]);
          FlagCY := false;
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a36 = (1 + (SPH,SPL)) in
          let:8 a37 = M[(SPH,SPL)] in
          let:16 a38 = (1 + a36) in
          let:8 a39 = M[a36] in
          advance (10)
          A := a31;
          B := a32[7:0];
          D := 20;
          E := 74;
          H := 20;
          L := 56;
          SPH := a38[15:8];
          SPL := a38[7:0];
          FlagS := a32[7:0][7];
          FlagZ := is_zero(a32[7:0]);
          FlagA := a35[7:0][4];
          FlagP := parity(a32[7:0]);
          FlagCY := false;
          jump ((a39,a37));
        }
      } else {
        advance (10)
        #053E
        #instruction: LD   DE,1B50
        advance (10)
        #0541
        #instruction: LD   HL,2050
        advance (10)
        #0544
        #instruction: LD   B,10
        advance (7)
        #0546
        #instruction: CALL 1A32
        let:16 a40 = (-1 + (SPH,SPL)) in
        M[a40] := 05;
        let:16 a41 = (-1 + a40) in
        M[a41] := 49;
        #return-to: 0549
        advance (17)
        #1A32
        #instruction: LD   A,(DE)
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2050] := 00;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a42 = addWithCarry(!true,10,~00) in
        let:8 a43 = (10 & 0F) in
        let:8 a44 = (~00 & 0F) in
        let:16 a45 = addWithCarry(!true,a43,a44) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a42[7:0])) {
          advance (10)
          A := 00;
          B := a42[7:0];
          D := 1B;
          E := 51;
          H := 20;
          L := 51;
          SPH := a41[15:8];
          SPL := a41[7:0];
          FlagS := a42[7:0][7];
          FlagZ := is_zero(a42[7:0]);
          FlagA := a45[7:0][4];
          FlagP := parity(a42[7:0]);
          FlagCY := false;
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a46 = (1 + a41) in
          let:8 a47 = M[a41] in
          let:16 a48 = (1 + a46) in
          let:8 a49 = M[a46] in
          advance (10)
          A := 00;
          B := a42[7:0];
          D := 1B;
          E := 51;
          H := 20;
          L := 51;
          SPH := a48[15:8];
          SPL := a48[7:0];
          FlagS := a42[7:0][7];
          FlagZ := is_zero(a42[7:0]);
          FlagA := a45[7:0][4];
          FlagP := parity(a42[7:0]);
          FlagCY := false;
          jump ((a49,a47));
        }
      }
    }

0549:

    #0549
    #instruction: LD   HL,(2076)
    let:8 a1 = M[2076] in
    let:8 a2 = M[2077] in
    advance (16)
    #054C
    #instruction: LD   (2058),HL
    M[2058] := a1;
    M[2059] := a2;
    advance (16)
    #054F
    #instruction: RET
    let:16 a3 = (1 + (SPH,SPL)) in
    let:8 a4 = M[(SPH,SPL)] in
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    advance (10)
    H := a2;
    L := a1;
    SPH := a5[15:8];
    SPL := a5[7:0];
    jump ((a6,a4));

05A8:

    #05A8
    #instruction: RET  NC
    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:8 a2 = M[(SPH,SPL)] in
      let:16 a3 = (1 + a1) in
      let:8 a4 = M[a1] in
      advance (11)
      SPH := a3[15:8];
      SPL := a3[7:0];
      jump ((a4,a2));
    } else {
      advance (5)
      #05A9
      #instruction: CALL 017A
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 05;
      let:16 a6 = (-1 + a5) in
      M[a6] := AC;
      #return-to: 05AC
      advance (17)
      #017A
      #instruction: LD   D,00
      advance (7)
      #017C
      #instruction: LD   A,L
      advance (5)
      #017D
      #instruction: LD   HL,2009
      advance (10)
      #0180
      #instruction: LD   B,(HL)
      let:8 a7 = M[2009] in
      advance (7)
      #0181
      #instruction: INC  HL
      advance (5)
      #0182
      #instruction: LD   C,(HL)
      let:8 a8 = M[200A] in
      advance (7)
      #0183
      #instruction: CP   0B
      let:16 a9 = addWithCarry(!false,L,~0B) in
      let:8 a10 = (L & 0F) in
      let:8 a11 = (~0B & 0F) in
      let:16 a12 = addWithCarry(!false,a10,a11) in
      advance (7)
      #0185
      #instruction: JP   MI,0194
      if (a9[7:0][7]) {
        advance (10)
        #0194
        #instruction: LD   L,B
        advance (5)
        #0195
        #instruction: AND  A
        let:8 a13 = (L & L) in
        let:8 a14 = (L | L) in
        advance (4)
        #0196
        #instruction: RET  Z
        if (is_zero(a13)) {
          let:16 a15 = (1 + a6) in
          let:8 a16 = M[a6] in
          let:16 a17 = (1 + a15) in
          let:8 a18 = M[a15] in
          advance (11)
          A := a13;
          B := a7;
          C := a8;
          D := 00;
          H := 20;
          L := a7;
          SPH := a17[15:8];
          SPL := a17[7:0];
          FlagS := a13[7];
          FlagZ := is_zero(a13);
          FlagA := a14[3];
          FlagP := parity(a13);
          FlagCY := false;
          jump ((a18,a16));
        } else {
          advance (5)
          #0197
          #instruction: LD   E,A
          advance (5)
          #0198
          #instruction: LD   A,C
          advance (5)
          #0199
          #instruction: ADD  10
          let:16 a19 = addWithCarry(false,10,a8) in
          let:8 a20 = (10 & 0F) in
          let:8 a21 = (a8 & 0F) in
          let:16 a22 = addWithCarry(false,a20,a21) in
          advance (7)
          #019B
          #instruction: LD   C,A
          advance (5)
          #019C
          #instruction: LD   A,E
          advance (5)
          #019D
          #instruction: DEC  A
          let:16 a23 = addWithCarry(!true,a13,~00) in
          let:8 a24 = (a13 & 0F) in
          let:8 a25 = (~00 & 0F) in
          let:16 a26 = addWithCarry(!true,a24,a25) in
          advance (5)
          #019E
          #instruction: JP   0195
          advance (10)
          A := a23[7:0];
          B := a7;
          C := a19[7:0];
          D := 00;
          E := a13;
          H := 20;
          L := a7;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a23[7:0][7];
          FlagZ := is_zero(a23[7:0]);
          FlagA := a26[7:0][4];
          FlagP := parity(a23[7:0]);
          FlagCY := a19[15:8][0];
          jump (0195);
        }
      } else {
        advance (10)
        #0188
        #instruction: SBC  0B
        let:16 a27 = addWithCarry(!!a9[15:8][0],L,~0B) in
        let:8 a28 = (L & 0F) in
        let:8 a29 = (~0B & 0F) in
        let:16 a30 = addWithCarry(!!a9[15:8][0],a28,a29) in
        advance (7)
        #018A
        #instruction: LD   E,A
        advance (5)
        #018B
        #instruction: LD   A,B
        advance (5)
        #018C
        #instruction: ADD  10
        let:16 a31 = addWithCarry(false,10,a7) in
        let:8 a32 = (10 & 0F) in
        let:8 a33 = (a7 & 0F) in
        let:16 a34 = addWithCarry(false,a32,a33) in
        advance (7)
        #018E
        #instruction: LD   B,A
        advance (5)
        #018F
        #instruction: LD   A,E
        advance (5)
        #0190
        #instruction: INC  D
        let:16 a35 = addWithCarry(true,00,00) in
        let:8 a36 = (00 & 0F) in
        let:8 a37 = (00 & 0F) in
        let:16 a38 = addWithCarry(true,a36,a37) in
        advance (5)
        #0191
        #instruction: JP   0183
        advance (10)
        A := a27[7:0];
        B := a31[7:0];
        C := a8;
        D := a35[7:0];
        E := a27[7:0];
        H := 20;
        L := 0A;
        SPH := a6[15:8];
        SPL := a6[7:0];
        FlagS := a35[7:0][7];
        FlagZ := is_zero(a35[7:0]);
        FlagA := a38[7:0][4];
        FlagP := parity(a35[7:0]);
        FlagCY := a31[15:8][0];
        jump (0183);
      }
    }

05AC:

    #05AC
    #instruction: LD   A,C
    advance (5)
    #05AD
    #instruction: ADD  07
    let:16 a1 = addWithCarry(false,07,C) in
    let:8 a2 = (07 & 0F) in
    let:8 a3 = (C & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    advance (7)
    #05AF
    #instruction: LD   H,A
    advance (5)
    #05B0
    #instruction: LD   A,L
    advance (5)
    #05B1
    #instruction: SUB  0A
    let:16 a5 = addWithCarry(!false,L,~0A) in
    let:8 a6 = (L & 0F) in
    let:8 a7 = (~0A & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    advance (7)
    #05B3
    #instruction: LD   L,A
    advance (5)
    #05B4
    #instruction: LD   (207B),HL
    M[207B] := a5[7:0];
    M[207C] := a1[7:0];
    advance (16)
    #05B7
    #instruction: LD   HL,2073
    advance (10)
    #05BA
    #instruction: LD   A,(HL)
    let:8 a9 = M[2073] in
    advance (7)
    #05BB
    #instruction: OR   80
    let:8 a10 = (80 | a9) in
    advance (7)
    #05BD
    #instruction: LD   (HL),A
    M[2073] := a10;
    advance (7)
    #05BE
    #instruction: INC  HL
    advance (5)
    #05BF
    #instruction: INC  (HL)
    let:8 a11 = M[2074] in
    let:16 a12 = addWithCarry(true,a11,00) in
    let:8 a13 = (a11 & 0F) in
    let:8 a14 = (00 & 0F) in
    let:16 a15 = addWithCarry(true,a13,a14) in
    M[2074] := a12[7:0];
    advance (10)
    #05C0
    #instruction: RET
    let:16 a16 = (1 + (SPH,SPL)) in
    let:8 a17 = M[(SPH,SPL)] in
    let:16 a18 = (1 + a16) in
    let:8 a19 = M[a16] in
    advance (10)
    A := a10;
    H := 20;
    L := 74;
    SPH := a18[15:8];
    SPL := a18[7:0];
    FlagS := a12[7:0][7];
    FlagZ := is_zero(a12[7:0]);
    FlagA := a15[7:0][4];
    FlagP := parity(a12[7:0]);
    FlagCY := false;
    jump ((a19,a17));

05C7:

    #05C7
    #instruction: RET  NC
    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:8 a2 = M[(SPH,SPL)] in
      let:16 a3 = (1 + a1) in
      let:8 a4 = M[a1] in
      advance (11)
      SPH := a3[15:8];
      SPL := a3[7:0];
      jump ((a4,a2));
    } else {
      advance (5)
      #05C8
      #instruction: INC  HL
      let:16 a5 = (1 + (H,L)) in
      advance (5)
      #05C9
      #instruction: LD   A,(HL)
      let:8 a6 = M[a5] in
      advance (7)
      #05CA
      #instruction: AND  01
      let:8 a7 = (01 & a6) in
      let:8 a8 = (01 | a6) in
      advance (7)
      #05CC
      #instruction: JP   NZ,0644
      if (!is_zero(a7)) {
        advance (10)
        #0644
        #instruction: LD   HL,2078
        advance (10)
        #0647
        #instruction: DEC  (HL)
        let:8 a9 = M[2078] in
        let:16 a10 = addWithCarry(!true,a9,~00) in
        let:8 a11 = (a9 & 0F) in
        let:8 a12 = (~00 & 0F) in
        let:16 a13 = addWithCarry(!true,a11,a12) in
        M[2078] := a10[7:0];
        advance (10)
        #0648
        #instruction: LD   A,(HL)
        let:8 a14 = M[2078] in
        advance (7)
        #0649
        #instruction: CP   03
        let:16 a15 = addWithCarry(!false,a14,~03) in
        let:8 a16 = (a14 & 0F) in
        let:8 a17 = (~03 & 0F) in
        let:16 a18 = addWithCarry(!false,a16,a17) in
        advance (7)
        #064B
        #instruction: JP   NZ,0667
        if (!is_zero(a15[7:0])) {
          advance (10)
          #0667
          #instruction: AND  A
          let:8 a19 = (a14 & a14) in
          let:8 a20 = (a14 | a14) in
          advance (4)
          #0668
          #instruction: RET  NZ
          if (!is_zero(a19)) {
            let:16 a21 = (1 + (SPH,SPL)) in
            let:8 a22 = M[(SPH,SPL)] in
            let:16 a23 = (1 + a21) in
            let:8 a24 = M[a21] in
            advance (11)
            A := a19;
            H := 20;
            L := 78;
            SPH := a23[15:8];
            SPL := a23[7:0];
            FlagS := a19[7];
            FlagZ := is_zero(a19);
            FlagA := a20[3];
            FlagP := parity(a19);
            FlagCY := false;
            jump ((a24,a22));
          } else {
            advance (5)
            #0669
            #instruction: JP   0675
            advance (10)
            #0675
            #instruction: LD   HL,2079
            advance (10)
            #0678
            #instruction: CALL 1A3B
            let:16 a25 = (-1 + (SPH,SPL)) in
            M[a25] := 06;
            let:16 a26 = (-1 + a25) in
            M[a26] := 7B;
            #return-to: 067B
            advance (17)
            #1A3B
            #instruction: LD   E,(HL)
            let:8 a27 = M[2079] in
            advance (7)
            #1A3C
            #instruction: INC  HL
            advance (5)
            #1A3D
            #instruction: LD   D,(HL)
            let:8 a28 = M[207A] in
            advance (7)
            #1A3E
            #instruction: INC  HL
            advance (5)
            #1A3F
            #instruction: LD   A,(HL)
            let:8 a29 = M[207B] in
            advance (7)
            #1A40
            #instruction: INC  HL
            advance (5)
            #1A41
            #instruction: LD   C,(HL)
            let:8 a30 = M[207C] in
            advance (7)
            #1A42
            #instruction: INC  HL
            advance (5)
            #1A43
            #instruction: LD   B,(HL)
            let:8 a31 = M[207D] in
            advance (7)
            #1A44
            #instruction: LD   H,C
            advance (5)
            #1A45
            #instruction: LD   L,A
            advance (5)
            #1A46
            #instruction: RET
            let:16 a32 = (1 + a26) in
            let:8 a33 = M[a26] in
            let:16 a34 = (1 + a32) in
            let:8 a35 = M[a32] in
            advance (10)
            A := a29;
            B := a31;
            C := a30;
            D := a28;
            E := a27;
            H := a30;
            L := a29;
            SPH := a34[15:8];
            SPL := a34[7:0];
            FlagS := a19[7];
            FlagZ := is_zero(a19);
            FlagA := a20[3];
            FlagP := parity(a19);
            FlagCY := false;
            jump ((a35,a33));
          }
        } else {
          advance (10)
          #064E
          #instruction: CALL 0675
          let:16 a36 = (-1 + (SPH,SPL)) in
          M[a36] := 06;
          let:16 a37 = (-1 + a36) in
          M[a37] := 51;
          #return-to: 0651
          advance (17)
          #0675
          #instruction: LD   HL,2079
          advance (10)
          #0678
          #instruction: CALL 1A3B
          let:16 a38 = (-1 + a37) in
          M[a38] := 06;
          let:16 a39 = (-1 + a38) in
          M[a39] := 7B;
          #return-to: 067B
          advance (17)
          #1A3B
          #instruction: LD   E,(HL)
          let:8 a40 = M[2079] in
          advance (7)
          #1A3C
          #instruction: INC  HL
          advance (5)
          #1A3D
          #instruction: LD   D,(HL)
          let:8 a41 = M[207A] in
          advance (7)
          #1A3E
          #instruction: INC  HL
          advance (5)
          #1A3F
          #instruction: LD   A,(HL)
          let:8 a42 = M[207B] in
          advance (7)
          #1A40
          #instruction: INC  HL
          advance (5)
          #1A41
          #instruction: LD   C,(HL)
          let:8 a43 = M[207C] in
          advance (7)
          #1A42
          #instruction: INC  HL
          advance (5)
          #1A43
          #instruction: LD   B,(HL)
          let:8 a44 = M[207D] in
          advance (7)
          #1A44
          #instruction: LD   H,C
          advance (5)
          #1A45
          #instruction: LD   L,A
          advance (5)
          #1A46
          #instruction: RET
          let:16 a45 = (1 + a39) in
          let:8 a46 = M[a39] in
          let:16 a47 = (1 + a45) in
          let:8 a48 = M[a45] in
          advance (10)
          A := a42;
          B := a44;
          C := a43;
          D := a41;
          E := a40;
          H := a43;
          L := a42;
          SPH := a47[15:8];
          SPL := a47[7:0];
          FlagS := a15[7:0][7];
          FlagZ := is_zero(a15[7:0]);
          FlagA := a18[7:0][4];
          FlagP := parity(a15[7:0]);
          FlagCY := !a15[15:8][0];
          jump ((a48,a46));
        }
      } else {
        advance (10)
        #05CF
        #instruction: INC  HL
        let:16 a49 = (1 + a5) in
        advance (5)
        #05D0
        #instruction: INC  (HL)
        let:8 a50 = M[a49] in
        let:16 a51 = addWithCarry(true,a50,00) in
        let:8 a52 = (a50 & 0F) in
        let:8 a53 = (00 & 0F) in
        let:16 a54 = addWithCarry(true,a52,a53) in
        M[a49] := a51[7:0];
        advance (10)
        #05D1
        #instruction: CALL 0675
        let:16 a55 = (-1 + (SPH,SPL)) in
        M[a55] := 05;
        let:16 a56 = (-1 + a55) in
        M[a56] := D4;
        #return-to: 05D4
        advance (17)
        #0675
        #instruction: LD   HL,2079
        advance (10)
        #0678
        #instruction: CALL 1A3B
        let:16 a57 = (-1 + a56) in
        M[a57] := 06;
        let:16 a58 = (-1 + a57) in
        M[a58] := 7B;
        #return-to: 067B
        advance (17)
        #1A3B
        #instruction: LD   E,(HL)
        let:8 a59 = M[2079] in
        advance (7)
        #1A3C
        #instruction: INC  HL
        advance (5)
        #1A3D
        #instruction: LD   D,(HL)
        let:8 a60 = M[207A] in
        advance (7)
        #1A3E
        #instruction: INC  HL
        advance (5)
        #1A3F
        #instruction: LD   A,(HL)
        let:8 a61 = M[207B] in
        advance (7)
        #1A40
        #instruction: INC  HL
        advance (5)
        #1A41
        #instruction: LD   C,(HL)
        let:8 a62 = M[207C] in
        advance (7)
        #1A42
        #instruction: INC  HL
        advance (5)
        #1A43
        #instruction: LD   B,(HL)
        let:8 a63 = M[207D] in
        advance (7)
        #1A44
        #instruction: LD   H,C
        advance (5)
        #1A45
        #instruction: LD   L,A
        advance (5)
        #1A46
        #instruction: RET
        let:16 a64 = (1 + a58) in
        let:8 a65 = M[a58] in
        let:16 a66 = (1 + a64) in
        let:8 a67 = M[a64] in
        advance (10)
        A := a61;
        B := a63;
        C := a62;
        D := a60;
        E := a59;
        H := a62;
        L := a61;
        SPH := a66[15:8];
        SPL := a66[7:0];
        FlagS := a51[7:0][7];
        FlagZ := is_zero(a51[7:0]);
        FlagA := a54[7:0][4];
        FlagP := parity(a51[7:0]);
        FlagCY := false;
        jump ((a67,a65));
      }
    }

05D4:

    #05D4
    #instruction: LD   A,(2079)
    let:8 a1 = M[2079] in
    advance (13)
    #05D7
    #instruction: ADD  03
    let:16 a2 = addWithCarry(false,03,a1) in
    let:8 a3 = (03 & 0F) in
    let:8 a4 = (a1 & 0F) in
    let:16 a5 = addWithCarry(false,a3,a4) in
    advance (7)
    #05D9
    #instruction: LD   HL,207F
    advance (10)
    #05DC
    #instruction: CP   (HL)
    let:8 a6 = M[207F] in
    let:16 a7 = addWithCarry(!false,a2[7:0],~a6) in
    let:8 a8 = (a2[7:0] & 0F) in
    let:8 a9 = (~a6 & 0F) in
    let:16 a10 = addWithCarry(!false,a8,a9) in
    advance (7)
    #05DD
    #instruction: JP   CY,05E2
    if (!a7[15:8][0]) {
      advance (10)
      #05E2
      #instruction: LD   (2079),A
      M[2079] := a2[7:0];
      advance (13)
      #05E5
      #instruction: LD   A,(207B)
      let:8 a11 = M[207B] in
      advance (13)
      #05E8
      #instruction: LD   B,A
      advance (5)
      #05E9
      #instruction: LD   A,(207E)
      let:8 a12 = M[207E] in
      advance (13)
      #05EC
      #instruction: ADD  B
      let:16 a13 = addWithCarry(false,a11,a12) in
      let:8 a14 = (a11 & 0F) in
      let:8 a15 = (a12 & 0F) in
      let:16 a16 = addWithCarry(false,a14,a15) in
      advance (4)
      #05ED
      #instruction: LD   (207B),A
      M[207B] := a13[7:0];
      advance (13)
      #05F0
      #instruction: CALL 066C
      let:16 a17 = (-1 + (SPH,SPL)) in
      M[a17] := 05;
      let:16 a18 = (-1 + a17) in
      M[a18] := F3;
      #return-to: 05F3
      advance (17)
      #066C
      #instruction: LD   HL,2079
      advance (10)
      #066F
      #instruction: CALL 1A3B
      let:16 a19 = (-1 + a18) in
      M[a19] := 06;
      let:16 a20 = (-1 + a19) in
      M[a20] := 72;
      #return-to: 0672
      advance (17)
      #1A3B
      #instruction: LD   E,(HL)
      let:8 a21 = M[2079] in
      advance (7)
      #1A3C
      #instruction: INC  HL
      advance (5)
      #1A3D
      #instruction: LD   D,(HL)
      let:8 a22 = M[207A] in
      advance (7)
      #1A3E
      #instruction: INC  HL
      advance (5)
      #1A3F
      #instruction: LD   A,(HL)
      let:8 a23 = M[207B] in
      advance (7)
      #1A40
      #instruction: INC  HL
      advance (5)
      #1A41
      #instruction: LD   C,(HL)
      let:8 a24 = M[207C] in
      advance (7)
      #1A42
      #instruction: INC  HL
      advance (5)
      #1A43
      #instruction: LD   B,(HL)
      let:8 a25 = M[207D] in
      advance (7)
      #1A44
      #instruction: LD   H,C
      advance (5)
      #1A45
      #instruction: LD   L,A
      advance (5)
      #1A46
      #instruction: RET
      let:16 a26 = (1 + a20) in
      let:8 a27 = M[a20] in
      let:16 a28 = (1 + a26) in
      let:8 a29 = M[a26] in
      advance (10)
      A := a23;
      B := a25;
      C := a24;
      D := a22;
      E := a21;
      H := a24;
      L := a23;
      SPH := a28[15:8];
      SPL := a28[7:0];
      FlagS := a13[7:0][7];
      FlagZ := is_zero(a13[7:0]);
      FlagA := a16[7:0][4];
      FlagP := parity(a13[7:0]);
      FlagCY := a13[15:8][0];
      jump ((a29,a27));
    } else {
      advance (10)
      #05E0
      #instruction: SUB  0C
      let:16 a30 = addWithCarry(!false,a2[7:0],~0C) in
      let:8 a31 = (a2[7:0] & 0F) in
      let:8 a32 = (~0C & 0F) in
      let:16 a33 = addWithCarry(!false,a31,a32) in
      advance (7)
      #05E2
      #instruction: LD   (2079),A
      M[2079] := a30[7:0];
      advance (13)
      #05E5
      #instruction: LD   A,(207B)
      let:8 a34 = M[207B] in
      advance (13)
      #05E8
      #instruction: LD   B,A
      advance (5)
      #05E9
      #instruction: LD   A,(207E)
      let:8 a35 = M[207E] in
      advance (13)
      #05EC
      #instruction: ADD  B
      let:16 a36 = addWithCarry(false,a34,a35) in
      let:8 a37 = (a34 & 0F) in
      let:8 a38 = (a35 & 0F) in
      let:16 a39 = addWithCarry(false,a37,a38) in
      advance (4)
      #05ED
      #instruction: LD   (207B),A
      M[207B] := a36[7:0];
      advance (13)
      #05F0
      #instruction: CALL 066C
      let:16 a40 = (-1 + (SPH,SPL)) in
      M[a40] := 05;
      let:16 a41 = (-1 + a40) in
      M[a41] := F3;
      #return-to: 05F3
      advance (17)
      #066C
      #instruction: LD   HL,2079
      advance (10)
      #066F
      #instruction: CALL 1A3B
      let:16 a42 = (-1 + a41) in
      M[a42] := 06;
      let:16 a43 = (-1 + a42) in
      M[a43] := 72;
      #return-to: 0672
      advance (17)
      #1A3B
      #instruction: LD   E,(HL)
      let:8 a44 = M[2079] in
      advance (7)
      #1A3C
      #instruction: INC  HL
      advance (5)
      #1A3D
      #instruction: LD   D,(HL)
      let:8 a45 = M[207A] in
      advance (7)
      #1A3E
      #instruction: INC  HL
      advance (5)
      #1A3F
      #instruction: LD   A,(HL)
      let:8 a46 = M[207B] in
      advance (7)
      #1A40
      #instruction: INC  HL
      advance (5)
      #1A41
      #instruction: LD   C,(HL)
      let:8 a47 = M[207C] in
      advance (7)
      #1A42
      #instruction: INC  HL
      advance (5)
      #1A43
      #instruction: LD   B,(HL)
      let:8 a48 = M[207D] in
      advance (7)
      #1A44
      #instruction: LD   H,C
      advance (5)
      #1A45
      #instruction: LD   L,A
      advance (5)
      #1A46
      #instruction: RET
      let:16 a49 = (1 + a43) in
      let:8 a50 = M[a43] in
      let:16 a51 = (1 + a49) in
      let:8 a52 = M[a49] in
      advance (10)
      A := a46;
      B := a48;
      C := a47;
      D := a45;
      E := a44;
      H := a47;
      L := a46;
      SPH := a51[15:8];
      SPL := a51[7:0];
      FlagS := a36[7:0][7];
      FlagZ := is_zero(a36[7:0]);
      FlagA := a39[7:0][4];
      FlagP := parity(a36[7:0]);
      FlagCY := a36[15:8][0];
      jump ((a52,a50));
    }

05F3:

    #05F3
    #instruction: LD   A,(207B)
    let:8 a1 = M[207B] in
    advance (13)
    #05F6
    #instruction: CP   15
    let:16 a2 = addWithCarry(!false,a1,~15) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~15 & 0F) in
    let:16 a5 = addWithCarry(!false,a3,a4) in
    advance (7)
    #05F8
    #instruction: JP   CY,0612
    if (!a2[15:8][0]) {
      advance (10)
      #0612
      #instruction: LD   A,(2073)
      let:8 a6 = M[2073] in
      advance (13)
      #0615
      #instruction: OR   01
      let:8 a7 = (01 | a6) in
      advance (7)
      #0617
      #instruction: LD   (2073),A
      M[2073] := a7;
      advance (13)
      #061A
      #instruction: RET
      let:16 a8 = (1 + (SPH,SPL)) in
      let:8 a9 = M[(SPH,SPL)] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := a7;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a7[7];
      FlagZ := is_zero(a7);
      FlagA := false;
      FlagP := parity(a7);
      FlagCY := false;
      jump ((a11,a9));
    } else {
      advance (10)
      #05FB
      #instruction: LD   A,(2061)
      let:8 a12 = M[2061] in
      advance (13)
      #05FE
      #instruction: AND  A
      let:8 a13 = (a12 & a12) in
      let:8 a14 = (a12 | a12) in
      advance (4)
      #05FF
      #instruction: RET  Z
      if (is_zero(a13)) {
        let:16 a15 = (1 + (SPH,SPL)) in
        let:8 a16 = M[(SPH,SPL)] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (11)
        A := a13;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a13[7];
        FlagZ := is_zero(a13);
        FlagA := a14[3];
        FlagP := parity(a13);
        FlagCY := false;
        jump ((a18,a16));
      } else {
        advance (5)
        #0600
        #instruction: LD   A,(207B)
        let:8 a19 = M[207B] in
        advance (13)
        #0603
        #instruction: CP   1E
        let:16 a20 = addWithCarry(!false,a19,~1E) in
        let:8 a21 = (a19 & 0F) in
        let:8 a22 = (~1E & 0F) in
        let:16 a23 = addWithCarry(!false,a21,a22) in
        advance (7)
        #0605
        #instruction: JP   CY,0612
        if (!a20[15:8][0]) {
          advance (10)
          #0612
          #instruction: LD   A,(2073)
          let:8 a24 = M[2073] in
          advance (13)
          #0615
          #instruction: OR   01
          let:8 a25 = (01 | a24) in
          advance (7)
          #0617
          #instruction: LD   (2073),A
          M[2073] := a25;
          advance (13)
          #061A
          #instruction: RET
          let:16 a26 = (1 + (SPH,SPL)) in
          let:8 a27 = M[(SPH,SPL)] in
          let:16 a28 = (1 + a26) in
          let:8 a29 = M[a26] in
          advance (10)
          A := a25;
          SPH := a28[15:8];
          SPL := a28[7:0];
          FlagS := a25[7];
          FlagZ := is_zero(a25);
          FlagA := false;
          FlagP := parity(a25);
          FlagCY := false;
          jump ((a29,a27));
        } else {
          advance (10)
          #0608
          #instruction: CP   27
          let:16 a30 = addWithCarry(!false,a19,~27) in
          let:8 a31 = (a19 & 0F) in
          let:8 a32 = (~27 & 0F) in
          let:16 a33 = addWithCarry(!false,a31,a32) in
          advance (7)
          #060A
          #instruction: NOP
          advance (4)
          #060B
          #instruction: JP   NC,0612
          if (!!a30[15:8][0]) {
            advance (10)
            #0612
            #instruction: LD   A,(2073)
            let:8 a34 = M[2073] in
            advance (13)
            #0615
            #instruction: OR   01
            let:8 a35 = (01 | a34) in
            advance (7)
            #0617
            #instruction: LD   (2073),A
            M[2073] := a35;
            advance (13)
            #061A
            #instruction: RET
            let:16 a36 = (1 + (SPH,SPL)) in
            let:8 a37 = M[(SPH,SPL)] in
            let:16 a38 = (1 + a36) in
            let:8 a39 = M[a36] in
            advance (10)
            A := a35;
            SPH := a38[15:8];
            SPL := a38[7:0];
            FlagS := a35[7];
            FlagZ := is_zero(a35);
            FlagA := false;
            FlagP := parity(a35);
            FlagCY := false;
            jump ((a39,a37));
          } else {
            advance (10)
            #060E
            #instruction: SUB  A
            let:16 a40 = addWithCarry(!false,a19,~a19) in
            let:8 a41 = (a19 & 0F) in
            let:8 a42 = (~a19 & 0F) in
            let:16 a43 = addWithCarry(!false,a41,a42) in
            advance (4)
            #060F
            #instruction: LD   (2015),A
            M[2015] := a40[7:0];
            advance (13)
            #0612
            #instruction: LD   A,(2073)
            let:8 a44 = M[2073] in
            advance (13)
            #0615
            #instruction: OR   01
            let:8 a45 = (01 | a44) in
            advance (7)
            #0617
            #instruction: LD   (2073),A
            M[2073] := a45;
            advance (13)
            #061A
            #instruction: RET
            let:16 a46 = (1 + (SPH,SPL)) in
            let:8 a47 = M[(SPH,SPL)] in
            let:16 a48 = (1 + a46) in
            let:8 a49 = M[a46] in
            advance (10)
            A := a45;
            SPH := a48[15:8];
            SPL := a48[7:0];
            FlagS := a45[7];
            FlagZ := is_zero(a45);
            FlagA := false;
            FlagP := parity(a45);
            FlagCY := false;
            jump ((a49,a47));
          }
        }
      }
    }

0624:

    #0624
    #instruction: LD   A,C
    advance (5)
    #0625
    #instruction: CP   0C
    let:16 a1 = addWithCarry(!false,C,~0C) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~0C & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    advance (7)
    #0627
    #instruction: JP   CY,05A5
    if (!a1[15:8][0]) {
      advance (10)
      #05A5
      #instruction: CALL 062F
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 05;
      let:16 a6 = (-1 + a5) in
      M[a6] := A8;
      #return-to: 05A8
      advance (17)
      #062F
      #instruction: DEC  C
      let:16 a7 = addWithCarry(!true,C,~00) in
      let:8 a8 = (C & 0F) in
      let:8 a9 = (~00 & 0F) in
      let:16 a10 = addWithCarry(!true,a8,a9) in
      advance (5)
      #0630
      #instruction: LD   A,(2067)
      let:8 a11 = M[2067] in
      advance (13)
      #0633
      #instruction: LD   H,A
      advance (5)
      #0634
      #instruction: LD   L,C
      advance (5)
      #0635
      #instruction: LD   D,05
      advance (7)
      #0637
      #instruction: LD   A,(HL)
      let:8 a12 = M[(a11,a7[7:0])] in
      advance (7)
      #0638
      #instruction: AND  A
      let:8 a13 = (a12 & a12) in
      let:8 a14 = (a12 | a12) in
      advance (4)
      #0639
      #instruction: SCF
      advance (4)
      #063A
      #instruction: RET  NZ
      if (!is_zero(a13)) {
        let:16 a15 = (1 + a6) in
        let:8 a16 = M[a6] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (11)
        A := a13;
        C := a7[7:0];
        D := 05;
        H := a11;
        L := a7[7:0];
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a13[7];
        FlagZ := is_zero(a13);
        FlagA := a14[3];
        FlagP := parity(a13);
        FlagCY := true;
        jump ((a18,a16));
      } else {
        advance (5)
        #063B
        #instruction: LD   A,L
        advance (5)
        #063C
        #instruction: ADD  0B
        let:16 a19 = addWithCarry(false,0B,a7[7:0]) in
        let:8 a20 = (0B & 0F) in
        let:8 a21 = (a7[7:0] & 0F) in
        let:16 a22 = addWithCarry(false,a20,a21) in
        advance (7)
        #063E
        #instruction: LD   L,A
        advance (5)
        #063F
        #instruction: DEC  D
        let:16 a23 = addWithCarry(!true,05,~00) in
        let:8 a24 = (05 & 0F) in
        let:8 a25 = (~00 & 0F) in
        let:16 a26 = addWithCarry(!true,a24,a25) in
        advance (5)
        #0640
        #instruction: JP   NZ,0637
        if (!is_zero(a23[7:0])) {
          advance (10)
          A := a19[7:0];
          C := a7[7:0];
          D := a23[7:0];
          H := a11;
          L := a19[7:0];
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a23[7:0][7];
          FlagZ := is_zero(a23[7:0]);
          FlagA := a26[7:0][4];
          FlagP := parity(a23[7:0]);
          FlagCY := a19[15:8][0];
          jump (0637);
        } else {
          advance (10)
          #0643
          #instruction: RET
          let:16 a27 = (1 + a6) in
          let:8 a28 = M[a6] in
          let:16 a29 = (1 + a27) in
          let:8 a30 = M[a27] in
          advance (10)
          A := a19[7:0];
          C := a7[7:0];
          D := a23[7:0];
          H := a11;
          L := a19[7:0];
          SPH := a29[15:8];
          SPL := a29[7:0];
          FlagS := a23[7:0][7];
          FlagZ := is_zero(a23[7:0]);
          FlagA := a26[7:0][4];
          FlagP := parity(a23[7:0]);
          FlagCY := a19[15:8][0];
          jump ((a30,a28));
        }
      }
    } else {
      advance (10)
      #062A
      #instruction: LD   C,0B
      advance (7)
      #062C
      #instruction: JP   05A5
      advance (10)
      #05A5
      #instruction: CALL 062F
      let:16 a31 = (-1 + (SPH,SPL)) in
      M[a31] := 05;
      let:16 a32 = (-1 + a31) in
      M[a32] := A8;
      #return-to: 05A8
      advance (17)
      #062F
      #instruction: DEC  C
      let:16 a33 = addWithCarry(!true,0B,~00) in
      let:8 a34 = (0B & 0F) in
      let:8 a35 = (~00 & 0F) in
      let:16 a36 = addWithCarry(!true,a34,a35) in
      advance (5)
      #0630
      #instruction: LD   A,(2067)
      let:8 a37 = M[2067] in
      advance (13)
      #0633
      #instruction: LD   H,A
      advance (5)
      #0634
      #instruction: LD   L,C
      advance (5)
      #0635
      #instruction: LD   D,05
      advance (7)
      #0637
      #instruction: LD   A,(HL)
      let:8 a38 = M[(a37,a33[7:0])] in
      advance (7)
      #0638
      #instruction: AND  A
      let:8 a39 = (a38 & a38) in
      let:8 a40 = (a38 | a38) in
      advance (4)
      #0639
      #instruction: SCF
      advance (4)
      #063A
      #instruction: RET  NZ
      if (!is_zero(a39)) {
        let:16 a41 = (1 + a32) in
        let:8 a42 = M[a32] in
        let:16 a43 = (1 + a41) in
        let:8 a44 = M[a41] in
        advance (11)
        A := a39;
        C := a33[7:0];
        D := 05;
        H := a37;
        L := a33[7:0];
        SPH := a43[15:8];
        SPL := a43[7:0];
        FlagS := a39[7];
        FlagZ := is_zero(a39);
        FlagA := a40[3];
        FlagP := parity(a39);
        FlagCY := true;
        jump ((a44,a42));
      } else {
        advance (5)
        #063B
        #instruction: LD   A,L
        advance (5)
        #063C
        #instruction: ADD  0B
        let:16 a45 = addWithCarry(false,0B,a33[7:0]) in
        let:8 a46 = (0B & 0F) in
        let:8 a47 = (a33[7:0] & 0F) in
        let:16 a48 = addWithCarry(false,a46,a47) in
        advance (7)
        #063E
        #instruction: LD   L,A
        advance (5)
        #063F
        #instruction: DEC  D
        let:16 a49 = addWithCarry(!true,05,~00) in
        let:8 a50 = (05 & 0F) in
        let:8 a51 = (~00 & 0F) in
        let:16 a52 = addWithCarry(!true,a50,a51) in
        advance (5)
        #0640
        #instruction: JP   NZ,0637
        if (!is_zero(a49[7:0])) {
          advance (10)
          A := a45[7:0];
          C := a33[7:0];
          D := a49[7:0];
          H := a37;
          L := a45[7:0];
          SPH := a32[15:8];
          SPL := a32[7:0];
          FlagS := a49[7:0][7];
          FlagZ := is_zero(a49[7:0]);
          FlagA := a52[7:0][4];
          FlagP := parity(a49[7:0]);
          FlagCY := a45[15:8][0];
          jump (0637);
        } else {
          advance (10)
          #0643
          #instruction: RET
          let:16 a53 = (1 + a32) in
          let:8 a54 = M[a32] in
          let:16 a55 = (1 + a53) in
          let:8 a56 = M[a53] in
          advance (10)
          A := a45[7:0];
          C := a33[7:0];
          D := a49[7:0];
          H := a37;
          L := a45[7:0];
          SPH := a55[15:8];
          SPL := a55[7:0];
          FlagS := a49[7:0][7];
          FlagZ := is_zero(a49[7:0]);
          FlagA := a52[7:0][4];
          FlagP := parity(a49[7:0]);
          FlagCY := a45[15:8][0];
          jump ((a56,a54));
        }
      }
    }

0651:

    #0651
    #instruction: LD   HL,1CDC
    advance (10)
    #0654
    #instruction: LD   (2079),HL
    M[2079] := DC;
    M[207A] := 1C;
    advance (16)
    #0657
    #instruction: LD   HL,207C
    advance (10)
    #065A
    #instruction: DEC  (HL)
    let:8 a1 = M[207C] in
    let:16 a2 = addWithCarry(!true,a1,~00) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~00 & 0F) in
    let:16 a5 = addWithCarry(!true,a3,a4) in
    M[207C] := a2[7:0];
    advance (10)
    #065B
    #instruction: DEC  (HL)
    let:8 a6 = M[207C] in
    let:16 a7 = addWithCarry(!true,a6,~00) in
    let:8 a8 = (a6 & 0F) in
    let:8 a9 = (~00 & 0F) in
    let:16 a10 = addWithCarry(!true,a8,a9) in
    M[207C] := a7[7:0];
    advance (10)
    #065C
    #instruction: DEC  HL
    advance (5)
    #065D
    #instruction: DEC  (HL)
    let:8 a11 = M[207B] in
    let:16 a12 = addWithCarry(!true,a11,~00) in
    let:8 a13 = (a11 & 0F) in
    let:8 a14 = (~00 & 0F) in
    let:16 a15 = addWithCarry(!true,a13,a14) in
    M[207B] := a12[7:0];
    advance (10)
    #065E
    #instruction: DEC  (HL)
    let:8 a16 = M[207B] in
    let:16 a17 = addWithCarry(!true,a16,~00) in
    let:8 a18 = (a16 & 0F) in
    let:8 a19 = (~00 & 0F) in
    let:16 a20 = addWithCarry(!true,a18,a19) in
    M[207B] := a17[7:0];
    advance (10)
    #065F
    #instruction: LD   A,06
    advance (7)
    #0661
    #instruction: LD   (207D),A
    M[207D] := 06;
    advance (13)
    #0664
    #instruction: JP   066C
    advance (10)
    #066C
    #instruction: LD   HL,2079
    advance (10)
    #066F
    #instruction: CALL 1A3B
    let:16 a21 = (-1 + (SPH,SPL)) in
    M[a21] := 06;
    let:16 a22 = (-1 + a21) in
    M[a22] := 72;
    #return-to: 0672
    advance (17)
    #1A3B
    #instruction: LD   E,(HL)
    let:8 a23 = M[2079] in
    advance (7)
    #1A3C
    #instruction: INC  HL
    advance (5)
    #1A3D
    #instruction: LD   D,(HL)
    let:8 a24 = M[207A] in
    advance (7)
    #1A3E
    #instruction: INC  HL
    advance (5)
    #1A3F
    #instruction: LD   A,(HL)
    let:8 a25 = M[207B] in
    advance (7)
    #1A40
    #instruction: INC  HL
    advance (5)
    #1A41
    #instruction: LD   C,(HL)
    let:8 a26 = M[207C] in
    advance (7)
    #1A42
    #instruction: INC  HL
    advance (5)
    #1A43
    #instruction: LD   B,(HL)
    let:8 a27 = M[207D] in
    advance (7)
    #1A44
    #instruction: LD   H,C
    advance (5)
    #1A45
    #instruction: LD   L,A
    advance (5)
    #1A46
    #instruction: RET
    let:16 a28 = (1 + a22) in
    let:8 a29 = M[a22] in
    let:16 a30 = (1 + a28) in
    let:8 a31 = M[a28] in
    advance (10)
    A := a25;
    B := a27;
    C := a26;
    D := a24;
    E := a23;
    H := a26;
    L := a25;
    SPH := a30[15:8];
    SPL := a30[7:0];
    FlagS := a17[7:0][7];
    FlagZ := is_zero(a17[7:0]);
    FlagA := a20[7:0][4];
    FlagP := parity(a17[7:0]);
    jump ((a31,a29));

0672:

    #0672
    #instruction: JP   1491
    advance (10)
    #1491
    #instruction: CALL 1474
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 94;
    #return-to: 1494
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a3 = (07 & L) in
    let:8 a4 = (07 | L) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a5 = (-1 + a2) in
    M[a5] := B;
    let:16 a6 = (-1 + a5) in
    M[a6] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a7 = addWithCarry(!true,03,~00) in
    let:8 a8 = (03 & 0F) in
    let:8 a9 = (~00 & 0F) in
    let:16 a10 = addWithCarry(!true,a8,a9) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a7[7:0])) {
      advance (10)
      A := updateBit((L >> 01),7,H[0]);
      B := a7[7:0];
      H := updateBit((H >> 01),7,false);
      L := updateBit((L >> 01),7,H[0]);
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      FlagCY := L[0];
      Shifter_OFF := a3;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a11 = (3F & updateBit((H >> 01),7,false)) in
      let:8 a12 = (3F | updateBit((H >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a13 = (20 | a11) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a14 = (1 + a6) in
      let:8 a15 = M[a6] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (10)
      A := a13;
      B := a17;
      C := a15;
      H := a13;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a20[15:8];
      SPL := a20[7:0];
      FlagS := a13[7];
      FlagZ := is_zero(a13);
      FlagA := false;
      FlagP := parity(a13);
      FlagCY := false;
      Shifter_OFF := a3;
      jump ((a21,a19));
    }

067B:

    #067B
    #instruction: JP   1452
    advance (10)
    #1452
    #instruction: CALL 1474
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 55;
    #return-to: 1455
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a3 = (07 & L) in
    let:8 a4 = (07 | L) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a5 = (-1 + a2) in
    M[a5] := B;
    let:16 a6 = (-1 + a5) in
    M[a6] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a7 = addWithCarry(!true,03,~00) in
    let:8 a8 = (03 & 0F) in
    let:8 a9 = (~00 & 0F) in
    let:16 a10 = addWithCarry(!true,a8,a9) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a7[7:0])) {
      advance (10)
      A := updateBit((L >> 01),7,H[0]);
      B := a7[7:0];
      H := updateBit((H >> 01),7,false);
      L := updateBit((L >> 01),7,H[0]);
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      FlagCY := L[0];
      Shifter_OFF := a3;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a11 = (3F & updateBit((H >> 01),7,false)) in
      let:8 a12 = (3F | updateBit((H >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a13 = (20 | a11) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a14 = (1 + a6) in
      let:8 a15 = M[a6] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (10)
      A := a13;
      B := a17;
      C := a15;
      H := a13;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a20[15:8];
      SPL := a20[7:0];
      FlagS := a13[7];
      FlagZ := is_zero(a13);
      FlagA := false;
      FlagP := parity(a13);
      FlagCY := false;
      Shifter_OFF := a3;
      jump ((a21,a19));
    }

0682:

    #0682
    #instruction: POP  HL
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0683
    #instruction: LD   A,(2080)
    let:8 a5 = M[2080] in
    advance (13)
    #0686
    #instruction: CP   02
    let:16 a6 = addWithCarry(!false,a5,~02) in
    let:8 a7 = (a5 & 0F) in
    let:8 a8 = (~02 & 0F) in
    let:16 a9 = addWithCarry(!false,a7,a8) in
    advance (7)
    #0688
    #instruction: RET  NZ
    if (!is_zero(a6[7:0])) {
      let:16 a10 = (1 + a3) in
      let:8 a11 = M[a3] in
      let:16 a12 = (1 + a10) in
      let:8 a13 = M[a10] in
      advance (11)
      A := a5;
      H := a4;
      L := a2;
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagS := a6[7:0][7];
      FlagZ := is_zero(a6[7:0]);
      FlagA := a9[7:0][4];
      FlagP := parity(a6[7:0]);
      FlagCY := !a6[15:8][0];
      jump ((a13,a11));
    } else {
      advance (5)
      #0689
      #instruction: LD   HL,2083
      advance (10)
      #068C
      #instruction: LD   A,(HL)
      let:8 a14 = M[2083] in
      advance (7)
      #068D
      #instruction: AND  A
      let:8 a15 = (a14 & a14) in
      let:8 a16 = (a14 | a14) in
      advance (4)
      #068E
      #instruction: JP   Z,050F
      if (is_zero(a15)) {
        advance (10)
        #050F
        #instruction: LD   DE,2055
        advance (10)
        #0512
        #instruction: LD   A,DB
        advance (7)
        #0514
        #instruction: CALL 0550
        let:16 a17 = (-1 + a3) in
        M[a17] := 05;
        let:16 a18 = (-1 + a17) in
        M[a18] := 17;
        #return-to: 0517
        advance (17)
        #0550
        #instruction: LD   (207F),A
        M[207F] := DB;
        advance (13)
        #0553
        #instruction: LD   HL,2073
        advance (10)
        #0556
        #instruction: LD   B,0B
        advance (7)
        #0558
        #instruction: JP   1A32
        advance (10)
        #1A32
        #instruction: LD   A,(DE)
        let:8 a19 = M[2055] in
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2073] := a19;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a20 = addWithCarry(!true,0B,~00) in
        let:8 a21 = (0B & 0F) in
        let:8 a22 = (~00 & 0F) in
        let:16 a23 = addWithCarry(!true,a21,a22) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a20[7:0])) {
          advance (10)
          A := a19;
          B := a20[7:0];
          D := 20;
          E := 56;
          H := 20;
          L := 74;
          SPH := a18[15:8];
          SPL := a18[7:0];
          FlagS := a20[7:0][7];
          FlagZ := is_zero(a20[7:0]);
          FlagA := a23[7:0][4];
          FlagP := parity(a20[7:0]);
          FlagCY := false;
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a24 = (1 + a18) in
          let:8 a25 = M[a18] in
          let:16 a26 = (1 + a24) in
          let:8 a27 = M[a24] in
          advance (10)
          A := a19;
          B := a20[7:0];
          D := 20;
          E := 56;
          H := 20;
          L := 74;
          SPH := a26[15:8];
          SPL := a26[7:0];
          FlagS := a20[7:0][7];
          FlagZ := is_zero(a20[7:0]);
          FlagA := a23[7:0][4];
          FlagP := parity(a20[7:0]);
          FlagCY := false;
          jump ((a27,a25));
        }
      } else {
        advance (10)
        #0691
        #instruction: LD   A,(2056)
        let:8 a28 = M[2056] in
        advance (13)
        #0694
        #instruction: AND  A
        let:8 a29 = (a28 & a28) in
        let:8 a30 = (a28 | a28) in
        advance (4)
        #0695
        #instruction: JP   NZ,050F
        if (!is_zero(a29)) {
          advance (10)
          #050F
          #instruction: LD   DE,2055
          advance (10)
          #0512
          #instruction: LD   A,DB
          advance (7)
          #0514
          #instruction: CALL 0550
          let:16 a31 = (-1 + a3) in
          M[a31] := 05;
          let:16 a32 = (-1 + a31) in
          M[a32] := 17;
          #return-to: 0517
          advance (17)
          #0550
          #instruction: LD   (207F),A
          M[207F] := DB;
          advance (13)
          #0553
          #instruction: LD   HL,2073
          advance (10)
          #0556
          #instruction: LD   B,0B
          advance (7)
          #0558
          #instruction: JP   1A32
          advance (10)
          #1A32
          #instruction: LD   A,(DE)
          let:8 a33 = M[2055] in
          advance (7)
          #1A33
          #instruction: LD   (HL),A
          M[2073] := a33;
          advance (7)
          #1A34
          #instruction: INC  HL
          advance (5)
          #1A35
          #instruction: INC  DE
          advance (5)
          #1A36
          #instruction: DEC  B
          let:16 a34 = addWithCarry(!true,0B,~00) in
          let:8 a35 = (0B & 0F) in
          let:8 a36 = (~00 & 0F) in
          let:16 a37 = addWithCarry(!true,a35,a36) in
          advance (5)
          #1A37
          #instruction: JP   NZ,1A32
          if (!is_zero(a34[7:0])) {
            advance (10)
            A := a33;
            B := a34[7:0];
            D := 20;
            E := 56;
            H := 20;
            L := 74;
            SPH := a32[15:8];
            SPL := a32[7:0];
            FlagS := a34[7:0][7];
            FlagZ := is_zero(a34[7:0]);
            FlagA := a37[7:0][4];
            FlagP := parity(a34[7:0]);
            FlagCY := false;
            jump (1A32);
          } else {
            advance (10)
            #1A3A
            #instruction: RET
            let:16 a38 = (1 + a32) in
            let:8 a39 = M[a32] in
            let:16 a40 = (1 + a38) in
            let:8 a41 = M[a38] in
            advance (10)
            A := a33;
            B := a34[7:0];
            D := 20;
            E := 56;
            H := 20;
            L := 74;
            SPH := a40[15:8];
            SPL := a40[7:0];
            FlagS := a34[7:0][7];
            FlagZ := is_zero(a34[7:0]);
            FlagA := a37[7:0][4];
            FlagP := parity(a34[7:0]);
            FlagCY := false;
            jump ((a41,a39));
          }
        } else {
          advance (10)
          #0698
          #instruction: INC  HL
          advance (5)
          #0699
          #instruction: LD   A,(HL)
          let:8 a42 = M[2084] in
          advance (7)
          #069A
          #instruction: AND  A
          let:8 a43 = (a42 & a42) in
          let:8 a44 = (a42 | a42) in
          advance (4)
          #069B
          #instruction: JP   NZ,06AB
          if (!is_zero(a43)) {
            advance (10)
            A := a43;
            H := 20;
            L := 84;
            SPH := a3[15:8];
            SPL := a3[7:0];
            FlagS := a43[7];
            FlagZ := is_zero(a43);
            FlagA := a44[3];
            FlagP := parity(a43);
            FlagCY := false;
            jump (06AB);
          } else {
            advance (10)
            #069E
            #instruction: LD   A,(2082)
            let:8 a45 = M[2082] in
            advance (13)
            #06A1
            #instruction: CP   08
            let:16 a46 = addWithCarry(!false,a45,~08) in
            let:8 a47 = (a45 & 0F) in
            let:8 a48 = (~08 & 0F) in
            let:16 a49 = addWithCarry(!false,a47,a48) in
            advance (7)
            #06A3
            #instruction: JP   CY,050F
            if (!a46[15:8][0]) {
              advance (10)
              #050F
              #instruction: LD   DE,2055
              advance (10)
              #0512
              #instruction: LD   A,DB
              advance (7)
              #0514
              #instruction: CALL 0550
              let:16 a50 = (-1 + a3) in
              M[a50] := 05;
              let:16 a51 = (-1 + a50) in
              M[a51] := 17;
              #return-to: 0517
              advance (17)
              #0550
              #instruction: LD   (207F),A
              M[207F] := DB;
              advance (13)
              #0553
              #instruction: LD   HL,2073
              advance (10)
              #0556
              #instruction: LD   B,0B
              advance (7)
              #0558
              #instruction: JP   1A32
              advance (10)
              #1A32
              #instruction: LD   A,(DE)
              let:8 a52 = M[2055] in
              advance (7)
              #1A33
              #instruction: LD   (HL),A
              M[2073] := a52;
              advance (7)
              #1A34
              #instruction: INC  HL
              advance (5)
              #1A35
              #instruction: INC  DE
              advance (5)
              #1A36
              #instruction: DEC  B
              let:16 a53 = addWithCarry(!true,0B,~00) in
              let:8 a54 = (0B & 0F) in
              let:8 a55 = (~00 & 0F) in
              let:16 a56 = addWithCarry(!true,a54,a55) in
              advance (5)
              #1A37
              #instruction: JP   NZ,1A32
              if (!is_zero(a53[7:0])) {
                advance (10)
                A := a52;
                B := a53[7:0];
                D := 20;
                E := 56;
                H := 20;
                L := 74;
                SPH := a51[15:8];
                SPL := a51[7:0];
                FlagS := a53[7:0][7];
                FlagZ := is_zero(a53[7:0]);
                FlagA := a56[7:0][4];
                FlagP := parity(a53[7:0]);
                FlagCY := !a46[15:8][0];
                jump (1A32);
              } else {
                advance (10)
                #1A3A
                #instruction: RET
                let:16 a57 = (1 + a51) in
                let:8 a58 = M[a51] in
                let:16 a59 = (1 + a57) in
                let:8 a60 = M[a57] in
                advance (10)
                A := a52;
                B := a53[7:0];
                D := 20;
                E := 56;
                H := 20;
                L := 74;
                SPH := a59[15:8];
                SPL := a59[7:0];
                FlagS := a53[7:0][7];
                FlagZ := is_zero(a53[7:0]);
                FlagA := a56[7:0][4];
                FlagP := parity(a53[7:0]);
                FlagCY := !a46[15:8][0];
                jump ((a60,a58));
              }
            } else {
              advance (10)
              #06A6
              #instruction: LD   (HL),01
              M[2084] := 01;
              advance (10)
              #06A8
              #instruction: CALL 073C
              let:16 a61 = (-1 + a3) in
              M[a61] := 06;
              let:16 a62 = (-1 + a61) in
              M[a62] := AB;
              #return-to: 06AB
              advance (17)
              #073C
              #instruction: CALL 0742
              let:16 a63 = (-1 + a62) in
              M[a63] := 07;
              let:16 a64 = (-1 + a63) in
              M[a64] := 3F;
              #return-to: 073F
              advance (17)
              #0742
              #instruction: LD   HL,2087
              advance (10)
              #0745
              #instruction: CALL 1A3B
              let:16 a65 = (-1 + a64) in
              M[a65] := 07;
              let:16 a66 = (-1 + a65) in
              M[a66] := 48;
              #return-to: 0748
              advance (17)
              #1A3B
              #instruction: LD   E,(HL)
              let:8 a67 = M[2087] in
              advance (7)
              #1A3C
              #instruction: INC  HL
              advance (5)
              #1A3D
              #instruction: LD   D,(HL)
              let:8 a68 = M[2088] in
              advance (7)
              #1A3E
              #instruction: INC  HL
              advance (5)
              #1A3F
              #instruction: LD   A,(HL)
              let:8 a69 = M[2089] in
              advance (7)
              #1A40
              #instruction: INC  HL
              advance (5)
              #1A41
              #instruction: LD   C,(HL)
              let:8 a70 = M[208A] in
              advance (7)
              #1A42
              #instruction: INC  HL
              advance (5)
              #1A43
              #instruction: LD   B,(HL)
              let:8 a71 = M[208B] in
              advance (7)
              #1A44
              #instruction: LD   H,C
              advance (5)
              #1A45
              #instruction: LD   L,A
              advance (5)
              #1A46
              #instruction: RET
              let:16 a72 = (1 + a66) in
              let:8 a73 = M[a66] in
              let:16 a74 = (1 + a72) in
              let:8 a75 = M[a72] in
              advance (10)
              A := a69;
              B := a71;
              C := a70;
              D := a68;
              E := a67;
              H := a70;
              L := a69;
              SPH := a74[15:8];
              SPL := a74[7:0];
              FlagS := a46[7:0][7];
              FlagZ := is_zero(a46[7:0]);
              FlagA := a49[7:0][4];
              FlagP := parity(a46[7:0]);
              FlagCY := !a46[15:8][0];
              jump ((a75,a73));
            }
          }
        }
      }
    }

06AB:

    #06AB
    #instruction: LD   DE,208A
    advance (10)
    #06AE
    #instruction: CALL 1A06
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := B1;
    #return-to: 06B1
    advance (17)
    #1A06
    #instruction: LD   HL,2072
    advance (10)
    #1A09
    #instruction: LD   B,(HL)
    let:8 a3 = M[2072] in
    advance (7)
    #1A0A
    #instruction: LD   A,(DE)
    let:8 a4 = M[208A] in
    advance (7)
    #1A0B
    #instruction: AND  80
    let:8 a5 = (80 & a4) in
    let:8 a6 = (80 | a4) in
    advance (7)
    #1A0D
    #instruction: XOR  B
    let:8 a7 = (a3 ^ a5) in
    advance (4)
    #1A0E
    #instruction: RET  NZ
    if (!is_zero(a7)) {
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (11)
      A := a7;
      B := a3;
      D := 20;
      E := 8A;
      H := 20;
      L := 72;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a7[7];
      FlagZ := is_zero(a7);
      FlagA := false;
      FlagP := parity(a7);
      FlagCY := false;
      jump ((a11,a9));
    } else {
      advance (5)
      #1A0F
      #instruction: SCF
      advance (4)
      #1A10
      #instruction: RET
      let:16 a12 = (1 + a2) in
      let:8 a13 = M[a2] in
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      advance (10)
      A := a7;
      B := a3;
      D := 20;
      E := 8A;
      H := 20;
      L := 72;
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a7[7];
      FlagZ := is_zero(a7);
      FlagA := false;
      FlagP := parity(a7);
      FlagCY := true;
      jump ((a15,a13));
    }

06B1:

    #06B1
    #instruction: RET  NC
    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:8 a2 = M[(SPH,SPL)] in
      let:16 a3 = (1 + a1) in
      let:8 a4 = M[a1] in
      advance (11)
      SPH := a3[15:8];
      SPL := a3[7:0];
      jump ((a4,a2));
    } else {
      advance (5)
      #06B2
      #instruction: LD   HL,2085
      advance (10)
      #06B5
      #instruction: LD   A,(HL)
      let:8 a5 = M[2085] in
      advance (7)
      #06B6
      #instruction: AND  A
      let:8 a6 = (a5 & a5) in
      let:8 a7 = (a5 | a5) in
      advance (4)
      #06B7
      #instruction: JP   NZ,06D6
      if (!is_zero(a6)) {
        advance (10)
        #06D6
        #instruction: LD   B,FE
        advance (7)
        #06D8
        #instruction: CALL 19DC
        let:16 a8 = (-1 + (SPH,SPL)) in
        M[a8] := 06;
        let:16 a9 = (-1 + a8) in
        M[a9] := DB;
        #return-to: 06DB
        advance (17)
        #19DC
        #instruction: LD   A,(2094)
        let:8 a10 = M[2094] in
        advance (13)
        #19DF
        #instruction: AND  B
        let:8 a11 = (FE & a10) in
        let:8 a12 = (FE | a10) in
        advance (4)
        #19E0
        #instruction: LD   (2094),A
        M[2094] := a11;
        advance (13)
        #19E3
        #instruction: OUT  03
        sound_control(Ufo,a11[0]);
        sound_control(Shot,a11[1]);
        sound_control(PlayerDie,a11[2]);
        sound_control(InvaderDie,a11[3]);
        sound_control(ExtraLife,a11[4]);
        advance (10)
        #19E5
        #instruction: RET
        let:16 a13 = (1 + a9) in
        let:8 a14 = M[a9] in
        let:16 a15 = (1 + a13) in
        let:8 a16 = M[a13] in
        advance (10)
        A := a11;
        B := FE;
        H := 20;
        L := 85;
        SPH := a15[15:8];
        SPL := a15[7:0];
        FlagS := a11[7];
        FlagZ := is_zero(a11);
        FlagA := a12[3];
        FlagP := parity(a11);
        FlagCY := false;
        jump ((a16,a14));
      } else {
        advance (10)
        #06BA
        #instruction: LD   HL,208A
        advance (10)
        #06BD
        #instruction: LD   A,(HL)
        let:8 a17 = M[208A] in
        advance (7)
        #06BE
        #instruction: INC  HL
        advance (5)
        #06BF
        #instruction: INC  HL
        advance (5)
        #06C0
        #instruction: ADD  (HL)
        let:8 a18 = M[208C] in
        let:16 a19 = addWithCarry(false,a18,a17) in
        let:8 a20 = (a18 & 0F) in
        let:8 a21 = (a17 & 0F) in
        let:16 a22 = addWithCarry(false,a20,a21) in
        advance (7)
        #06C1
        #instruction: LD   (208A),A
        M[208A] := a19[7:0];
        advance (13)
        #06C4
        #instruction: CALL 073C
        let:16 a23 = (-1 + (SPH,SPL)) in
        M[a23] := 06;
        let:16 a24 = (-1 + a23) in
        M[a24] := C7;
        #return-to: 06C7
        advance (17)
        #073C
        #instruction: CALL 0742
        let:16 a25 = (-1 + a24) in
        M[a25] := 07;
        let:16 a26 = (-1 + a25) in
        M[a26] := 3F;
        #return-to: 073F
        advance (17)
        #0742
        #instruction: LD   HL,2087
        advance (10)
        #0745
        #instruction: CALL 1A3B
        let:16 a27 = (-1 + a26) in
        M[a27] := 07;
        let:16 a28 = (-1 + a27) in
        M[a28] := 48;
        #return-to: 0748
        advance (17)
        #1A3B
        #instruction: LD   E,(HL)
        let:8 a29 = M[2087] in
        advance (7)
        #1A3C
        #instruction: INC  HL
        advance (5)
        #1A3D
        #instruction: LD   D,(HL)
        let:8 a30 = M[2088] in
        advance (7)
        #1A3E
        #instruction: INC  HL
        advance (5)
        #1A3F
        #instruction: LD   A,(HL)
        let:8 a31 = M[2089] in
        advance (7)
        #1A40
        #instruction: INC  HL
        advance (5)
        #1A41
        #instruction: LD   C,(HL)
        let:8 a32 = M[208A] in
        advance (7)
        #1A42
        #instruction: INC  HL
        advance (5)
        #1A43
        #instruction: LD   B,(HL)
        let:8 a33 = M[208B] in
        advance (7)
        #1A44
        #instruction: LD   H,C
        advance (5)
        #1A45
        #instruction: LD   L,A
        advance (5)
        #1A46
        #instruction: RET
        let:16 a34 = (1 + a28) in
        let:8 a35 = M[a28] in
        let:16 a36 = (1 + a34) in
        let:8 a37 = M[a34] in
        advance (10)
        A := a31;
        B := a33;
        C := a32;
        D := a30;
        E := a29;
        H := a32;
        L := a31;
        SPH := a36[15:8];
        SPL := a36[7:0];
        FlagS := a19[7:0][7];
        FlagZ := is_zero(a19[7:0]);
        FlagA := a22[7:0][4];
        FlagP := parity(a19[7:0]);
        FlagCY := a19[15:8][0];
        jump ((a37,a35));
      }
    }

06C7:

    #06C7
    #instruction: LD   HL,208A
    advance (10)
    #06CA
    #instruction: LD   A,(HL)
    let:8 a1 = M[208A] in
    advance (7)
    #06CB
    #instruction: CP   28
    let:16 a2 = addWithCarry(!false,a1,~28) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~28 & 0F) in
    let:16 a5 = addWithCarry(!false,a3,a4) in
    advance (7)
    #06CD
    #instruction: JP   CY,06F9
    if (!a2[15:8][0]) {
      advance (10)
      #06F9
      #instruction: CALL 0742
      let:16 a6 = (-1 + (SPH,SPL)) in
      M[a6] := 06;
      let:16 a7 = (-1 + a6) in
      M[a7] := FC;
      #return-to: 06FC
      advance (17)
      #0742
      #instruction: LD   HL,2087
      advance (10)
      #0745
      #instruction: CALL 1A3B
      let:16 a8 = (-1 + a7) in
      M[a8] := 07;
      let:16 a9 = (-1 + a8) in
      M[a9] := 48;
      #return-to: 0748
      advance (17)
      #1A3B
      #instruction: LD   E,(HL)
      let:8 a10 = M[2087] in
      advance (7)
      #1A3C
      #instruction: INC  HL
      advance (5)
      #1A3D
      #instruction: LD   D,(HL)
      let:8 a11 = M[2088] in
      advance (7)
      #1A3E
      #instruction: INC  HL
      advance (5)
      #1A3F
      #instruction: LD   A,(HL)
      let:8 a12 = M[2089] in
      advance (7)
      #1A40
      #instruction: INC  HL
      advance (5)
      #1A41
      #instruction: LD   C,(HL)
      let:8 a13 = M[208A] in
      advance (7)
      #1A42
      #instruction: INC  HL
      advance (5)
      #1A43
      #instruction: LD   B,(HL)
      let:8 a14 = M[208B] in
      advance (7)
      #1A44
      #instruction: LD   H,C
      advance (5)
      #1A45
      #instruction: LD   L,A
      advance (5)
      #1A46
      #instruction: RET
      let:16 a15 = (1 + a9) in
      let:8 a16 = M[a9] in
      let:16 a17 = (1 + a15) in
      let:8 a18 = M[a15] in
      advance (10)
      A := a12;
      B := a14;
      C := a13;
      D := a11;
      E := a10;
      H := a13;
      L := a12;
      SPH := a17[15:8];
      SPL := a17[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      FlagCY := !a2[15:8][0];
      jump ((a18,a16));
    } else {
      advance (10)
      #06D0
      #instruction: CP   E1
      let:16 a19 = addWithCarry(!false,a1,~E1) in
      let:8 a20 = (a1 & 0F) in
      let:8 a21 = (~E1 & 0F) in
      let:16 a22 = addWithCarry(!false,a20,a21) in
      advance (7)
      #06D2
      #instruction: JP   NC,06F9
      if (!!a19[15:8][0]) {
        advance (10)
        #06F9
        #instruction: CALL 0742
        let:16 a23 = (-1 + (SPH,SPL)) in
        M[a23] := 06;
        let:16 a24 = (-1 + a23) in
        M[a24] := FC;
        #return-to: 06FC
        advance (17)
        #0742
        #instruction: LD   HL,2087
        advance (10)
        #0745
        #instruction: CALL 1A3B
        let:16 a25 = (-1 + a24) in
        M[a25] := 07;
        let:16 a26 = (-1 + a25) in
        M[a26] := 48;
        #return-to: 0748
        advance (17)
        #1A3B
        #instruction: LD   E,(HL)
        let:8 a27 = M[2087] in
        advance (7)
        #1A3C
        #instruction: INC  HL
        advance (5)
        #1A3D
        #instruction: LD   D,(HL)
        let:8 a28 = M[2088] in
        advance (7)
        #1A3E
        #instruction: INC  HL
        advance (5)
        #1A3F
        #instruction: LD   A,(HL)
        let:8 a29 = M[2089] in
        advance (7)
        #1A40
        #instruction: INC  HL
        advance (5)
        #1A41
        #instruction: LD   C,(HL)
        let:8 a30 = M[208A] in
        advance (7)
        #1A42
        #instruction: INC  HL
        advance (5)
        #1A43
        #instruction: LD   B,(HL)
        let:8 a31 = M[208B] in
        advance (7)
        #1A44
        #instruction: LD   H,C
        advance (5)
        #1A45
        #instruction: LD   L,A
        advance (5)
        #1A46
        #instruction: RET
        let:16 a32 = (1 + a26) in
        let:8 a33 = M[a26] in
        let:16 a34 = (1 + a32) in
        let:8 a35 = M[a32] in
        advance (10)
        A := a29;
        B := a31;
        C := a30;
        D := a28;
        E := a27;
        H := a30;
        L := a29;
        SPH := a34[15:8];
        SPL := a34[7:0];
        FlagS := a19[7:0][7];
        FlagZ := is_zero(a19[7:0]);
        FlagA := a22[7:0][4];
        FlagP := parity(a19[7:0]);
        FlagCY := !a19[15:8][0];
        jump ((a35,a33));
      } else {
        advance (10)
        #06D5
        #instruction: RET
        let:16 a36 = (1 + (SPH,SPL)) in
        let:8 a37 = M[(SPH,SPL)] in
        let:16 a38 = (1 + a36) in
        let:8 a39 = M[a36] in
        advance (10)
        A := a1;
        H := 20;
        L := 8A;
        SPH := a38[15:8];
        SPL := a38[7:0];
        FlagS := a19[7:0][7];
        FlagZ := is_zero(a19[7:0]);
        FlagA := a22[7:0][4];
        FlagP := parity(a19[7:0]);
        FlagCY := !a19[15:8][0];
        jump ((a39,a37));
      }
    }

06DB:

    #06DB
    #instruction: INC  HL
    let:16 a1 = (1 + (H,L)) in
    advance (5)
    #06DC
    #instruction: DEC  (HL)
    let:8 a2 = M[a1] in
    let:16 a3 = addWithCarry(!true,a2,~00) in
    let:8 a4 = (a2 & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    M[a1] := a3[7:0];
    advance (10)
    #06DD
    #instruction: LD   A,(HL)
    let:8 a7 = M[a1] in
    advance (7)
    #06DE
    #instruction: CP   1F
    let:16 a8 = addWithCarry(!false,a7,~1F) in
    let:8 a9 = (a7 & 0F) in
    let:8 a10 = (~1F & 0F) in
    let:16 a11 = addWithCarry(!false,a9,a10) in
    advance (7)
    #06E0
    #instruction: JP   Z,074B
    if (is_zero(a8[7:0])) {
      advance (10)
      #074B
      #instruction: LD   B,10
      advance (7)
      #074D
      #instruction: LD   HL,2098
      advance (10)
      #0750
      #instruction: LD   A,(HL)
      let:8 a12 = M[2098] in
      advance (7)
      #0751
      #instruction: OR   B
      let:8 a13 = (10 | a12) in
      advance (4)
      #0752
      #instruction: LD   (HL),A
      M[2098] := a13;
      advance (7)
      #0753
      #instruction: CALL 1770
      let:16 a14 = (-1 + (SPH,SPL)) in
      M[a14] := 07;
      let:16 a15 = (-1 + a14) in
      M[a15] := 56;
      #return-to: 0756
      advance (17)
      #1770
      #instruction: AND  30
      let:8 a16 = (30 & a13) in
      let:8 a17 = (30 | a13) in
      advance (7)
      #1772
      #instruction: OUT  05
      sound_control(FleetMovement1,a16[0]);
      sound_control(FleetMovement2,a16[1]);
      sound_control(FleetMovement3,a16[2]);
      sound_control(FleetMovement4,a16[3]);
      sound_control(UfoHit,a16[4]);
      advance (10)
      #1774
      #instruction: RET
      let:16 a18 = (1 + a15) in
      let:8 a19 = M[a15] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (10)
      A := a16;
      B := 10;
      H := 20;
      L := 98;
      SPH := a20[15:8];
      SPL := a20[7:0];
      FlagS := a16[7];
      FlagZ := is_zero(a16);
      FlagA := a17[3];
      FlagP := parity(a16);
      FlagCY := false;
      jump ((a21,a19));
    } else {
      advance (10)
      #06E3
      #instruction: CP   18
      let:16 a22 = addWithCarry(!false,a7,~18) in
      let:8 a23 = (a7 & 0F) in
      let:8 a24 = (~18 & 0F) in
      let:16 a25 = addWithCarry(!false,a23,a24) in
      advance (7)
      #06E5
      #instruction: JP   Z,070C
      if (is_zero(a22[7:0])) {
        advance (10)
        #070C
        #instruction: LD   A,01
        advance (7)
        #070E
        #instruction: LD   (20F1),A
        M[20F1] := 01;
        advance (13)
        #0711
        #instruction: LD   HL,(208D)
        let:8 a26 = M[208D] in
        let:8 a27 = M[208E] in
        advance (16)
        #0714
        #instruction: LD   B,(HL)
        let:8 a28 = M[(a27,a26)] in
        advance (7)
        #0715
        #instruction: LD   C,04
        advance (7)
        #0717
        #instruction: LD   HL,1D50
        advance (10)
        #071A
        #instruction: LD   DE,1D4C
        advance (10)
        #071D
        #instruction: LD   A,(DE)
        advance (7)
        #071E
        #instruction: CP   B
        let:16 a29 = addWithCarry(!false,05,~a28) in
        let:8 a30 = (05 & 0F) in
        let:8 a31 = (~a28 & 0F) in
        let:16 a32 = addWithCarry(!false,a30,a31) in
        advance (4)
        #071F
        #instruction: JP   Z,0728
        if (is_zero(a29[7:0])) {
          advance (10)
          #0728
          #instruction: LD   A,(HL)
          advance (7)
          #0729
          #instruction: LD   (2087),A
          M[2087] := 94;
          advance (13)
          #072C
          #instruction: LD   H,00
          advance (7)
          #072E
          #instruction: LD   L,B
          advance (5)
          #072F
          #instruction: ADD  HL,HL
          let:17 a33 = add17((00,a28),(00,a28)) in
          advance (10)
          #0730
          #instruction: ADD  HL,HL
          let:17 a34 = add17(a33[15:0],a33[15:0]) in
          advance (10)
          #0731
          #instruction: ADD  HL,HL
          let:17 a35 = add17(a34[15:0],a34[15:0]) in
          advance (10)
          #0732
          #instruction: ADD  HL,HL
          let:17 a36 = add17(a35[15:0],a35[15:0]) in
          advance (10)
          #0733
          #instruction: LD   (20F2),HL
          M[20F2] := a36[15:0][7:0];
          M[20F3] := a36[15:0][15:8];
          advance (16)
          #0736
          #instruction: CALL 0742
          let:16 a37 = (-1 + (SPH,SPL)) in
          M[a37] := 07;
          let:16 a38 = (-1 + a37) in
          M[a38] := 39;
          #return-to: 0739
          advance (17)
          #0742
          #instruction: LD   HL,2087
          advance (10)
          #0745
          #instruction: CALL 1A3B
          let:16 a39 = (-1 + a38) in
          M[a39] := 07;
          let:16 a40 = (-1 + a39) in
          M[a40] := 48;
          #return-to: 0748
          advance (17)
          #1A3B
          #instruction: LD   E,(HL)
          let:8 a41 = M[2087] in
          advance (7)
          #1A3C
          #instruction: INC  HL
          advance (5)
          #1A3D
          #instruction: LD   D,(HL)
          let:8 a42 = M[2088] in
          advance (7)
          #1A3E
          #instruction: INC  HL
          advance (5)
          #1A3F
          #instruction: LD   A,(HL)
          let:8 a43 = M[2089] in
          advance (7)
          #1A40
          #instruction: INC  HL
          advance (5)
          #1A41
          #instruction: LD   C,(HL)
          let:8 a44 = M[208A] in
          advance (7)
          #1A42
          #instruction: INC  HL
          advance (5)
          #1A43
          #instruction: LD   B,(HL)
          let:8 a45 = M[208B] in
          advance (7)
          #1A44
          #instruction: LD   H,C
          advance (5)
          #1A45
          #instruction: LD   L,A
          advance (5)
          #1A46
          #instruction: RET
          let:16 a46 = (1 + a40) in
          let:8 a47 = M[a40] in
          let:16 a48 = (1 + a46) in
          let:8 a49 = M[a46] in
          advance (10)
          A := a43;
          B := a45;
          C := a44;
          D := a42;
          E := a41;
          H := a44;
          L := a43;
          SPH := a48[15:8];
          SPL := a48[7:0];
          FlagS := a29[7:0][7];
          FlagZ := is_zero(a29[7:0]);
          FlagA := a32[7:0][4];
          FlagP := parity(a29[7:0]);
          FlagCY := a36[16];
          jump ((a49,a47));
        } else {
          advance (10)
          #0722
          #instruction: INC  HL
          advance (5)
          #0723
          #instruction: INC  DE
          advance (5)
          #0724
          #instruction: DEC  C
          let:16 a50 = addWithCarry(!true,04,~00) in
          let:8 a51 = (04 & 0F) in
          let:8 a52 = (~00 & 0F) in
          let:16 a53 = addWithCarry(!true,a51,a52) in
          advance (5)
          #0725
          #instruction: JP   NZ,071D
          if (!is_zero(a50[7:0])) {
            advance (10)
            A := 05;
            B := a28;
            C := a50[7:0];
            D := 1D;
            E := 4D;
            H := 1D;
            L := 51;
            FlagS := a50[7:0][7];
            FlagZ := is_zero(a50[7:0]);
            FlagA := a53[7:0][4];
            FlagP := parity(a50[7:0]);
            FlagCY := !a29[15:8][0];
            jump (071D);
          } else {
            advance (10)
            #0728
            #instruction: LD   A,(HL)
            advance (7)
            #0729
            #instruction: LD   (2087),A
            M[2087] := 97;
            advance (13)
            #072C
            #instruction: LD   H,00
            advance (7)
            #072E
            #instruction: LD   L,B
            advance (5)
            #072F
            #instruction: ADD  HL,HL
            let:17 a54 = add17((00,a28),(00,a28)) in
            advance (10)
            #0730
            #instruction: ADD  HL,HL
            let:17 a55 = add17(a54[15:0],a54[15:0]) in
            advance (10)
            #0731
            #instruction: ADD  HL,HL
            let:17 a56 = add17(a55[15:0],a55[15:0]) in
            advance (10)
            #0732
            #instruction: ADD  HL,HL
            let:17 a57 = add17(a56[15:0],a56[15:0]) in
            advance (10)
            #0733
            #instruction: LD   (20F2),HL
            M[20F2] := a57[15:0][7:0];
            M[20F3] := a57[15:0][15:8];
            advance (16)
            #0736
            #instruction: CALL 0742
            let:16 a58 = (-1 + (SPH,SPL)) in
            M[a58] := 07;
            let:16 a59 = (-1 + a58) in
            M[a59] := 39;
            #return-to: 0739
            advance (17)
            #0742
            #instruction: LD   HL,2087
            advance (10)
            #0745
            #instruction: CALL 1A3B
            let:16 a60 = (-1 + a59) in
            M[a60] := 07;
            let:16 a61 = (-1 + a60) in
            M[a61] := 48;
            #return-to: 0748
            advance (17)
            #1A3B
            #instruction: LD   E,(HL)
            let:8 a62 = M[2087] in
            advance (7)
            #1A3C
            #instruction: INC  HL
            advance (5)
            #1A3D
            #instruction: LD   D,(HL)
            let:8 a63 = M[2088] in
            advance (7)
            #1A3E
            #instruction: INC  HL
            advance (5)
            #1A3F
            #instruction: LD   A,(HL)
            let:8 a64 = M[2089] in
            advance (7)
            #1A40
            #instruction: INC  HL
            advance (5)
            #1A41
            #instruction: LD   C,(HL)
            let:8 a65 = M[208A] in
            advance (7)
            #1A42
            #instruction: INC  HL
            advance (5)
            #1A43
            #instruction: LD   B,(HL)
            let:8 a66 = M[208B] in
            advance (7)
            #1A44
            #instruction: LD   H,C
            advance (5)
            #1A45
            #instruction: LD   L,A
            advance (5)
            #1A46
            #instruction: RET
            let:16 a67 = (1 + a61) in
            let:8 a68 = M[a61] in
            let:16 a69 = (1 + a67) in
            let:8 a70 = M[a67] in
            advance (10)
            A := a64;
            B := a66;
            C := a65;
            D := a63;
            E := a62;
            H := a65;
            L := a64;
            SPH := a69[15:8];
            SPL := a69[7:0];
            FlagS := a50[7:0][7];
            FlagZ := is_zero(a50[7:0]);
            FlagA := a53[7:0][4];
            FlagP := parity(a50[7:0]);
            FlagCY := a57[16];
            jump ((a70,a68));
          }
        }
      } else {
        advance (10)
        #06E8
        #instruction: AND  A
        let:8 a71 = (a7 & a7) in
        let:8 a72 = (a7 | a7) in
        advance (4)
        #06E9
        #instruction: RET  NZ
        if (!is_zero(a71)) {
          let:16 a73 = (1 + (SPH,SPL)) in
          let:8 a74 = M[(SPH,SPL)] in
          let:16 a75 = (1 + a73) in
          let:8 a76 = M[a73] in
          advance (11)
          A := a71;
          H := a1[15:8];
          L := a1[7:0];
          SPH := a75[15:8];
          SPL := a75[7:0];
          FlagS := a71[7];
          FlagZ := is_zero(a71);
          FlagA := a72[3];
          FlagP := parity(a71);
          FlagCY := false;
          jump ((a76,a74));
        } else {
          advance (5)
          #06EA
          #instruction: LD   B,EF
          advance (7)
          #06EC
          #instruction: LD   HL,2098
          advance (10)
          #06EF
          #instruction: LD   A,(HL)
          let:8 a77 = M[2098] in
          advance (7)
          #06F0
          #instruction: AND  B
          let:8 a78 = (EF & a77) in
          let:8 a79 = (EF | a77) in
          advance (4)
          #06F1
          #instruction: LD   (HL),A
          M[2098] := a78;
          advance (7)
          #06F2
          #instruction: AND  20
          let:8 a80 = (20 & a78) in
          let:8 a81 = (20 | a78) in
          advance (7)
          #06F4
          #instruction: OUT  05
          sound_control(FleetMovement1,a80[0]);
          sound_control(FleetMovement2,a80[1]);
          sound_control(FleetMovement3,a80[2]);
          sound_control(FleetMovement4,a80[3]);
          sound_control(UfoHit,a80[4]);
          advance (10)
          #06F6
          #instruction: NOP
          advance (4)
          #06F7
          #instruction: NOP
          advance (4)
          #06F8
          #instruction: NOP
          advance (4)
          #06F9
          #instruction: CALL 0742
          let:16 a82 = (-1 + (SPH,SPL)) in
          M[a82] := 06;
          let:16 a83 = (-1 + a82) in
          M[a83] := FC;
          #return-to: 06FC
          advance (17)
          #0742
          #instruction: LD   HL,2087
          advance (10)
          #0745
          #instruction: CALL 1A3B
          let:16 a84 = (-1 + a83) in
          M[a84] := 07;
          let:16 a85 = (-1 + a84) in
          M[a85] := 48;
          #return-to: 0748
          advance (17)
          #1A3B
          #instruction: LD   E,(HL)
          let:8 a86 = M[2087] in
          advance (7)
          #1A3C
          #instruction: INC  HL
          advance (5)
          #1A3D
          #instruction: LD   D,(HL)
          let:8 a87 = M[2088] in
          advance (7)
          #1A3E
          #instruction: INC  HL
          advance (5)
          #1A3F
          #instruction: LD   A,(HL)
          let:8 a88 = M[2089] in
          advance (7)
          #1A40
          #instruction: INC  HL
          advance (5)
          #1A41
          #instruction: LD   C,(HL)
          let:8 a89 = M[208A] in
          advance (7)
          #1A42
          #instruction: INC  HL
          advance (5)
          #1A43
          #instruction: LD   B,(HL)
          let:8 a90 = M[208B] in
          advance (7)
          #1A44
          #instruction: LD   H,C
          advance (5)
          #1A45
          #instruction: LD   L,A
          advance (5)
          #1A46
          #instruction: RET
          let:16 a91 = (1 + a85) in
          let:8 a92 = M[a85] in
          let:16 a93 = (1 + a91) in
          let:8 a94 = M[a91] in
          advance (10)
          A := a88;
          B := a90;
          C := a89;
          D := a87;
          E := a86;
          H := a89;
          L := a88;
          SPH := a93[15:8];
          SPL := a93[7:0];
          FlagS := a80[7];
          FlagZ := is_zero(a80);
          FlagA := a81[3];
          FlagP := parity(a80);
          FlagCY := false;
          jump ((a94,a92));
        }
      }
    }

06FC:

    #06FC
    #instruction: CALL 14CB
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := FF;
    #return-to: 06FF
    advance (17)
    #14CB
    #instruction: XOR  A
    let:8 a3 = (A ^ A) in
    advance (4)
    #14CC
    #instruction: PUSH BC
    let:16 a4 = (-1 + a2) in
    M[a4] := B;
    let:16 a5 = (-1 + a4) in
    M[a5] := C;
    advance (11)
    #14CD
    #instruction: LD   (HL),A
    M[(H,L)] := a3;
    advance (7)
    #14CE
    #instruction: LD   BC,0020
    advance (10)
    #14D1
    #instruction: ADD  HL,BC
    let:17 a6 = add17(0020,(H,L)) in
    advance (10)
    #14D2
    #instruction: POP  BC
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    let:16 a9 = (1 + a7) in
    let:8 a10 = M[a7] in
    advance (10)
    #14D3
    #instruction: DEC  B
    let:16 a11 = addWithCarry(!true,a10,~00) in
    let:8 a12 = (a10 & 0F) in
    let:8 a13 = (~00 & 0F) in
    let:16 a14 = addWithCarry(!true,a12,a13) in
    advance (5)
    #14D4
    #instruction: JP   NZ,14CC
    if (!is_zero(a11[7:0])) {
      advance (10)
      A := a3;
      B := a11[7:0];
      C := a8;
      H := a6[15:0][15:8];
      L := a6[15:0][7:0];
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a11[7:0][7];
      FlagZ := is_zero(a11[7:0]);
      FlagA := a14[7:0][4];
      FlagP := parity(a11[7:0]);
      FlagCY := a6[16];
      jump (14CC);
    } else {
      advance (10)
      #14D7
      #instruction: RET
      let:16 a15 = (1 + a9) in
      let:8 a16 = M[a9] in
      let:16 a17 = (1 + a15) in
      let:8 a18 = M[a15] in
      advance (10)
      A := a3;
      B := a11[7:0];
      C := a8;
      H := a6[15:0][15:8];
      L := a6[15:0][7:0];
      SPH := a17[15:8];
      SPL := a17[7:0];
      FlagS := a11[7:0][7];
      FlagZ := is_zero(a11[7:0]);
      FlagA := a14[7:0][4];
      FlagP := parity(a11[7:0]);
      FlagCY := a6[16];
      jump ((a18,a16));
    }

06FF:

    #06FF
    #instruction: LD   HL,2083
    advance (10)
    #0702
    #instruction: LD   B,0A
    advance (7)
    #0704
    #instruction: CALL 075F
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 07;
    #return-to: 0707
    advance (17)
    #075F
    #instruction: LD   DE,1B83
    advance (10)
    #0762
    #instruction: JP   1A32
    advance (10)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2083] := 00;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,0A,~00) in
    let:8 a4 = (0A & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a3[7:0])) {
      advance (10)
      A := 00;
      B := a3[7:0];
      D := 1B;
      E := 84;
      H := 20;
      L := 84;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := 00;
      B := a3[7:0];
      D := 1B;
      E := 84;
      H := 20;
      L := 84;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

0707:

    #0707
    #instruction: LD   B,FE
    advance (7)
    #0709
    #instruction: JP   19DC
    advance (10)
    #19DC
    #instruction: LD   A,(2094)
    let:8 a1 = M[2094] in
    advance (13)
    #19DF
    #instruction: AND  B
    let:8 a2 = (FE & a1) in
    let:8 a3 = (FE | a1) in
    advance (4)
    #19E0
    #instruction: LD   (2094),A
    M[2094] := a2;
    advance (13)
    #19E3
    #instruction: OUT  03
    sound_control(Ufo,a2[0]);
    sound_control(Shot,a2[1]);
    sound_control(PlayerDie,a2[2]);
    sound_control(InvaderDie,a2[3]);
    sound_control(ExtraLife,a2[4]);
    advance (10)
    #19E5
    #instruction: RET
    let:16 a4 = (1 + (SPH,SPL)) in
    let:8 a5 = M[(SPH,SPL)] in
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    advance (10)
    A := a2;
    B := FE;
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagS := a2[7];
    FlagZ := is_zero(a2);
    FlagA := a3[3];
    FlagP := parity(a2);
    FlagCY := false;
    jump ((a7,a5));

0739:

    #0739
    #instruction: JP   08F1
    advance (10)
    #08F1
    #instruction: LD   C,03
    advance (7)
    #08F3
    #instruction: LD   A,(DE)
    let:8 a1 = M[(D,E)] in
    advance (7)
    #08F4
    #instruction: PUSH DE
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := D;
    let:16 a3 = (-1 + a2) in
    M[a3] := E;
    advance (11)
    #08F5
    #instruction: CALL 08FF
    let:16 a4 = (-1 + a3) in
    M[a4] := 08;
    let:16 a5 = (-1 + a4) in
    M[a5] := F8;
    #return-to: 08F8
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a6 = (-1 + a5) in
    M[a6] := H;
    let:16 a7 = (-1 + a6) in
    M[a7] := L;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a8 = add17((00,a1),(00,a1)) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a9 = add17(a8[15:0],a8[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a10 = add17(a9[15:0],a9[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a11 = add17(1E00,a10[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a12 = (1 + a7) in
    let:8 a13 = M[a7] in
    let:16 a14 = (1 + a12) in
    let:8 a15 = M[a12] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a16 = (-1 + a14) in
    M[a16] := 08;
    let:16 a17 = (-1 + a16) in
    M[a17] := 03;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a18 = M[a11[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a15,a13)] := a18;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a19 = (1 + a11[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a20 = add17(0020,(a15,a13)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a21 = (1 + a17) in
    let:8 a22 = M[a17] in
    let:16 a23 = (1 + a21) in
    let:8 a24 = M[a21] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a25 = addWithCarry(!true,a24,~00) in
    let:8 a26 = (a24 & 0F) in
    let:8 a27 = (~00 & 0F) in
    let:16 a28 = addWithCarry(!true,a26,a27) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a25[7:0])) {
      advance (10)
      A := a18;
      B := a25[7:0];
      C := a22;
      D := a19[15:8];
      E := a19[7:0];
      H := a20[15:0][15:8];
      L := a20[15:0][7:0];
      SPH := a23[15:8];
      SPL := a23[7:0];
      FlagS := a25[7:0][7];
      FlagZ := is_zero(a25[7:0]);
      FlagA := a28[7:0][4];
      FlagP := parity(a25[7:0]);
      FlagCY := a20[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a29 = (1 + a23) in
      let:8 a30 = M[a23] in
      let:16 a31 = (1 + a29) in
      let:8 a32 = M[a29] in
      advance (10)
      A := a18;
      B := a25[7:0];
      C := a22;
      D := a19[15:8];
      E := a19[7:0];
      H := a20[15:0][15:8];
      L := a20[15:0][7:0];
      SPH := a31[15:8];
      SPL := a31[7:0];
      FlagS := a25[7:0][7];
      FlagZ := is_zero(a25[7:0]);
      FlagA := a28[7:0][4];
      FlagP := parity(a25[7:0]);
      FlagCY := a20[16];
      jump ((a32,a30));
    }

073F:

    #073F
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a3 = M[(D,E)] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(H,L)] := a3;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a4 = (1 + (D,E)) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a5 = add17(0020,(H,L)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a6 = (1 + a2) in
    let:8 a7 = M[a2] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a10 = addWithCarry(!true,a9,~00) in
    let:8 a11 = (a9 & 0F) in
    let:8 a12 = (~00 & 0F) in
    let:16 a13 = addWithCarry(!true,a11,a12) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a10[7:0])) {
      advance (10)
      A := a3;
      B := a10[7:0];
      C := a7;
      D := a4[15:8];
      E := a4[7:0];
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a10[7:0][7];
      FlagZ := is_zero(a10[7:0]);
      FlagA := a13[7:0][4];
      FlagP := parity(a10[7:0]);
      FlagCY := a5[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a14 = (1 + a8) in
      let:8 a15 = M[a8] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      A := a3;
      B := a10[7:0];
      C := a7;
      D := a4[15:8];
      E := a4[7:0];
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a16[15:8];
      SPL := a16[7:0];
      FlagS := a10[7:0][7];
      FlagZ := is_zero(a10[7:0]);
      FlagA := a13[7:0][4];
      FlagP := parity(a10[7:0]);
      FlagCY := a5[16];
      jump ((a17,a15));
    }

0748:

    #0748
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,03,~00) in
    let:8 a4 = (03 & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a3[7:0])) {
      advance (10)
      A := updateBit((L >> 01),7,H[0]);
      B := a3[7:0];
      H := updateBit((H >> 01),7,FlagCY);
      L := updateBit((L >> 01),7,H[0]);
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := L[0];
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a7 = (3F & updateBit((H >> 01),7,FlagCY)) in
      let:8 a8 = (3F | updateBit((H >> 01),7,FlagCY)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a9 = (20 | a7) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a10 = (1 + a2) in
      let:8 a11 = M[a2] in
      let:16 a12 = (1 + a10) in
      let:8 a13 = M[a10] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      A := a9;
      B := a13;
      C := a11;
      H := a9;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a16[15:8];
      SPL := a16[7:0];
      FlagS := a9[7];
      FlagZ := is_zero(a9);
      FlagA := false;
      FlagP := parity(a9);
      FlagCY := false;
      jump ((a17,a15));
    }

0756:

    #0756
    #instruction: LD   HL,1D7C
    advance (10)
    #0759
    #instruction: LD   (2087),HL
    M[2087] := 7C;
    M[2088] := 1D;
    advance (16)
    #075C
    #instruction: JP   073C
    advance (10)
    #073C
    #instruction: CALL 0742
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3F;
    #return-to: 073F
    advance (17)
    #0742
    #instruction: LD   HL,2087
    advance (10)
    #0745
    #instruction: CALL 1A3B
    let:16 a3 = (-1 + a2) in
    M[a3] := 07;
    let:16 a4 = (-1 + a3) in
    M[a4] := 48;
    #return-to: 0748
    advance (17)
    #1A3B
    #instruction: LD   E,(HL)
    let:8 a5 = M[2087] in
    advance (7)
    #1A3C
    #instruction: INC  HL
    advance (5)
    #1A3D
    #instruction: LD   D,(HL)
    let:8 a6 = M[2088] in
    advance (7)
    #1A3E
    #instruction: INC  HL
    advance (5)
    #1A3F
    #instruction: LD   A,(HL)
    let:8 a7 = M[2089] in
    advance (7)
    #1A40
    #instruction: INC  HL
    advance (5)
    #1A41
    #instruction: LD   C,(HL)
    let:8 a8 = M[208A] in
    advance (7)
    #1A42
    #instruction: INC  HL
    advance (5)
    #1A43
    #instruction: LD   B,(HL)
    let:8 a9 = M[208B] in
    advance (7)
    #1A44
    #instruction: LD   H,C
    advance (5)
    #1A45
    #instruction: LD   L,A
    advance (5)
    #1A46
    #instruction: RET
    let:16 a10 = (1 + a4) in
    let:8 a11 = M[a4] in
    let:16 a12 = (1 + a10) in
    let:8 a13 = M[a10] in
    advance (10)
    A := a7;
    B := a9;
    C := a8;
    D := a6;
    E := a5;
    H := a8;
    L := a7;
    SPH := a12[15:8];
    SPL := a12[7:0];
    jump ((a13,a11));

0771:

    #0771
    #instruction: CALL 09D6
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 74;
    #return-to: 0774
    advance (17)
    #09D6
    #instruction: LD   HL,2402
    advance (10)
    #09D9
    #instruction: LD   (HL),00
    M[2402] := 00;
    advance (10)
    #09DB
    #instruction: INC  HL
    advance (5)
    #09DC
    #instruction: LD   A,L
    advance (5)
    #09DD
    #instruction: AND  1F
    let:8 a3 = (1F & 03) in
    let:8 a4 = (1F | 03) in
    advance (7)
    #09DF
    #instruction: CP   1C
    let:16 a5 = addWithCarry(!false,a3,~1C) in
    let:8 a6 = (a3 & 0F) in
    let:8 a7 = (~1C & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    advance (7)
    #09E1
    #instruction: JP   CY,09E8
    if (!a5[15:8][0]) {
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a9 = addWithCarry(!false,24,~40) in
      let:8 a10 = (24 & 0F) in
      let:8 a11 = (~40 & 0F) in
      let:16 a12 = addWithCarry(!false,a10,a11) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a9[15:8][0]) {
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a13 = (1 + a2) in
        let:8 a14 = M[a2] in
        let:16 a15 = (1 + a13) in
        let:8 a16 = M[a13] in
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a15[15:8];
        SPL := a15[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump ((a16,a14));
      }
    } else {
      advance (10)
      #09E4
      #instruction: LD   DE,0006
      advance (10)
      #09E7
      #instruction: ADD  HL,DE
      let:17 a17 = add17(0006,2403) in
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a18 = addWithCarry(!false,a17[15:0][15:8],~40) in
      let:8 a19 = (a17[15:0][15:8] & 0F) in
      let:8 a20 = (~40 & 0F) in
      let:16 a21 = addWithCarry(!false,a19,a20) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a18[15:8][0]) {
        advance (10)
        A := a17[15:0][15:8];
        D := 00;
        E := 06;
        H := a17[15:0][15:8];
        L := a17[15:0][7:0];
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := !a18[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a22 = (1 + a2) in
        let:8 a23 = M[a2] in
        let:16 a24 = (1 + a22) in
        let:8 a25 = M[a22] in
        advance (10)
        A := a17[15:0][15:8];
        D := 00;
        E := 06;
        H := a17[15:0][15:8];
        L := a17[15:0][7:0];
        SPH := a24[15:8];
        SPL := a24[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := !a18[15:8][0];
        jump ((a25,a23));
      }
    }

0774:

    #0774
    #instruction: LD   HL,3013
    advance (10)
    #0777
    #instruction: LD   DE,1FF3
    advance (10)
    #077A
    #instruction: LD   C,04
    advance (7)
    #077C
    #instruction: CALL 08F3
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7F;
    #return-to: 077F
    advance (17)
    #08F3
    #instruction: LD   A,(DE)
    advance (7)
    #08F4
    #instruction: PUSH DE
    let:16 a3 = (-1 + a2) in
    M[a3] := 1F;
    let:16 a4 = (-1 + a3) in
    M[a4] := F3;
    advance (11)
    #08F5
    #instruction: CALL 08FF
    let:16 a5 = (-1 + a4) in
    M[a5] := 08;
    let:16 a6 = (-1 + a5) in
    M[a6] := F8;
    #return-to: 08F8
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a7 = (-1 + a6) in
    M[a7] := 30;
    let:16 a8 = (-1 + a7) in
    M[a8] := 13;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a9 = add17(000F,000F) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a10 = add17(a9[15:0],a9[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a11 = add17(a10[15:0],a10[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a12 = add17(1E00,a11[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a13 = (1 + a8) in
    let:8 a14 = M[a8] in
    let:16 a15 = (1 + a13) in
    let:8 a16 = M[a13] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a17 = (-1 + a15) in
    M[a17] := 08;
    let:16 a18 = (-1 + a17) in
    M[a18] := 04;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a19 = M[a12[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a16,a14)] := a19;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a20 = (1 + a12[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a21 = add17(0020,(a16,a14)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a22 = (1 + a18) in
    let:8 a23 = M[a18] in
    let:16 a24 = (1 + a22) in
    let:8 a25 = M[a22] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a26 = addWithCarry(!true,a25,~00) in
    let:8 a27 = (a25 & 0F) in
    let:8 a28 = (~00 & 0F) in
    let:16 a29 = addWithCarry(!true,a27,a28) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a26[7:0])) {
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a24[15:8];
      SPL := a24[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a30 = (1 + a24) in
      let:8 a31 = M[a24] in
      let:16 a32 = (1 + a30) in
      let:8 a33 = M[a30] in
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a32[15:8];
      SPL := a32[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump ((a33,a31));
    }

077F:

    #077F
    #instruction: LD   A,(20EB)
    let:8 a1 = M[20EB] in
    advance (13)
    #0782
    #instruction: DEC  A
    let:16 a2 = addWithCarry(!true,a1,~00) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~00 & 0F) in
    let:16 a5 = addWithCarry(!true,a3,a4) in
    advance (5)
    #0783
    #instruction: LD   HL,2810
    advance (10)
    #0786
    #instruction: LD   C,14
    advance (7)
    #0788
    #instruction: JP   NZ,0857
    if (!is_zero(a2[7:0])) {
      advance (10)
      #0857
      #instruction: LD   DE,1ABA
      advance (10)
      #085A
      #instruction: CALL 08F3
      let:16 a6 = (-1 + (SPH,SPL)) in
      M[a6] := 08;
      let:16 a7 = (-1 + a6) in
      M[a7] := 5D;
      #return-to: 085D
      advance (17)
      #08F3
      #instruction: LD   A,(DE)
      advance (7)
      #08F4
      #instruction: PUSH DE
      let:16 a8 = (-1 + a7) in
      M[a8] := 1A;
      let:16 a9 = (-1 + a8) in
      M[a9] := BA;
      advance (11)
      #08F5
      #instruction: CALL 08FF
      let:16 a10 = (-1 + a9) in
      M[a10] := 08;
      let:16 a11 = (-1 + a10) in
      M[a11] := F8;
      #return-to: 08F8
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a12 = (-1 + a11) in
      M[a12] := 28;
      let:16 a13 = (-1 + a12) in
      M[a13] := 10;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a14 = add17(001B,001B) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a15 = add17(a14[15:0],a14[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a16 = add17(a15[15:0],a15[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a17 = add17(1E00,a16[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a18 = (1 + a13) in
      let:8 a19 = M[a13] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a22 = (-1 + a20) in
      M[a22] := 08;
      let:16 a23 = (-1 + a22) in
      M[a23] := 14;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a24 = M[a17[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a21,a19)] := a24;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a25 = (1 + a17[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a26 = add17(0020,(a21,a19)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a27 = (1 + a23) in
      let:8 a28 = M[a23] in
      let:16 a29 = (1 + a27) in
      let:8 a30 = M[a27] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a31 = addWithCarry(!true,a30,~00) in
      let:8 a32 = (a30 & 0F) in
      let:8 a33 = (~00 & 0F) in
      let:16 a34 = addWithCarry(!true,a32,a33) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a31[7:0])) {
        advance (10)
        A := a24;
        B := a31[7:0];
        C := a28;
        D := a25[15:8];
        E := a25[7:0];
        H := a26[15:0][15:8];
        L := a26[15:0][7:0];
        SPH := a29[15:8];
        SPL := a29[7:0];
        FlagS := a31[7:0][7];
        FlagZ := is_zero(a31[7:0]);
        FlagA := a34[7:0][4];
        FlagP := parity(a31[7:0]);
        FlagCY := a26[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a35 = (1 + a29) in
        let:8 a36 = M[a29] in
        let:16 a37 = (1 + a35) in
        let:8 a38 = M[a35] in
        advance (10)
        A := a24;
        B := a31[7:0];
        C := a28;
        D := a25[15:8];
        E := a25[7:0];
        H := a26[15:0][15:8];
        L := a26[15:0][7:0];
        SPH := a37[15:8];
        SPL := a37[7:0];
        FlagS := a31[7:0][7];
        FlagZ := is_zero(a31[7:0]);
        FlagA := a34[7:0][4];
        FlagP := parity(a31[7:0]);
        FlagCY := a26[16];
        jump ((a38,a36));
      }
    } else {
      advance (10)
      #078B
      #instruction: LD   DE,1ACF
      advance (10)
      #078E
      #instruction: CALL 08F3
      let:16 a39 = (-1 + (SPH,SPL)) in
      M[a39] := 07;
      let:16 a40 = (-1 + a39) in
      M[a40] := 91;
      #return-to: 0791
      advance (17)
      #08F3
      #instruction: LD   A,(DE)
      advance (7)
      #08F4
      #instruction: PUSH DE
      let:16 a41 = (-1 + a40) in
      M[a41] := 1A;
      let:16 a42 = (-1 + a41) in
      M[a42] := CF;
      advance (11)
      #08F5
      #instruction: CALL 08FF
      let:16 a43 = (-1 + a42) in
      M[a43] := 08;
      let:16 a44 = (-1 + a43) in
      M[a44] := F8;
      #return-to: 08F8
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a45 = (-1 + a44) in
      M[a45] := 28;
      let:16 a46 = (-1 + a45) in
      M[a46] := 10;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a47 = add17(000E,000E) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a48 = add17(a47[15:0],a47[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a49 = add17(a48[15:0],a48[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a50 = add17(1E00,a49[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a51 = (1 + a46) in
      let:8 a52 = M[a46] in
      let:16 a53 = (1 + a51) in
      let:8 a54 = M[a51] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a55 = (-1 + a53) in
      M[a55] := 08;
      let:16 a56 = (-1 + a55) in
      M[a56] := 14;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a57 = M[a50[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a54,a52)] := a57;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a58 = (1 + a50[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a59 = add17(0020,(a54,a52)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a60 = (1 + a56) in
      let:8 a61 = M[a56] in
      let:16 a62 = (1 + a60) in
      let:8 a63 = M[a60] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a64 = addWithCarry(!true,a63,~00) in
      let:8 a65 = (a63 & 0F) in
      let:8 a66 = (~00 & 0F) in
      let:16 a67 = addWithCarry(!true,a65,a66) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a64[7:0])) {
        advance (10)
        A := a57;
        B := a64[7:0];
        C := a61;
        D := a58[15:8];
        E := a58[7:0];
        H := a59[15:0][15:8];
        L := a59[15:0][7:0];
        SPH := a62[15:8];
        SPL := a62[7:0];
        FlagS := a64[7:0][7];
        FlagZ := is_zero(a64[7:0]);
        FlagA := a67[7:0][4];
        FlagP := parity(a64[7:0]);
        FlagCY := a59[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a68 = (1 + a62) in
        let:8 a69 = M[a62] in
        let:16 a70 = (1 + a68) in
        let:8 a71 = M[a68] in
        advance (10)
        A := a57;
        B := a64[7:0];
        C := a61;
        D := a58[15:8];
        E := a58[7:0];
        H := a59[15:0][15:8];
        L := a59[15:0][7:0];
        SPH := a70[15:8];
        SPL := a70[7:0];
        FlagS := a64[7:0][7];
        FlagZ := is_zero(a64[7:0]);
        FlagA := a67[7:0][4];
        FlagP := parity(a64[7:0]);
        FlagCY := a59[16];
        jump ((a71,a69));
      }
    }

0791:

    #0791
    #instruction: IN   01
    advance (10)
    #0793
    #instruction: AND  04
    let:8 a1 = (04 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
    let:8 a2 = (04 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
    advance (7)
    #0795
    #instruction: JP   Z,077F
    if (is_zero(a1)) {
      advance (10)
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (077F);
    } else {
      advance (10)
      #0798
      #instruction: LD   B,99
      advance (7)
      #079A
      #instruction: XOR  A
      let:8 a3 = (a1 ^ a1) in
      advance (4)
      #079B
      #instruction: LD   (20CE),A
      M[20CE] := a3;
      advance (13)
      #079E
      #instruction: LD   A,(20EB)
      let:8 a4 = M[20EB] in
      advance (13)
      #07A1
      #instruction: ADD  B
      let:16 a5 = addWithCarry(false,99,a4) in
      let:8 a6 = (99 & 0F) in
      let:8 a7 = (a4 & 0F) in
      let:16 a8 = addWithCarry(false,a6,a7) in
      advance (4)
      #07A2
      #instruction: DAA
      let:8 a9 = (a5[7:0] & 0F) in
      let:16 a10 = addWithCarry(false,a9,06) in
      let:16 a11 = addWithCarry(((((a9[1] || a9[2]) && a9[3]) || a8[7:0][4]) ? a10[7:0] : a9)[4],(a5[7:0] >> 04),00) in
      let:16 a12 = addWithCarry(false,a11[7:0],06) in
      let:8 a13 = (((((a9[1] || a9[2]) && a9[3]) || a8[7:0][4]) ? a10[7:0] : a9) & 0F) in
      let:8 a14 = ((((((a11[7:0][1] || a11[7:0][2]) && a11[7:0][3]) || a5[15:8][0]) ? a12[7:0] : a11[7:0]) << 04) | a13) in
      advance (4)
      #07A3
      #instruction: LD   (20EB),A
      M[20EB] := a14;
      advance (13)
      #07A6
      #instruction: CALL 1947
      let:16 a15 = (-1 + (SPH,SPL)) in
      M[a15] := 07;
      let:16 a16 = (-1 + a15) in
      M[a16] := A9;
      #return-to: 07A9
      advance (17)
      #1947
      #instruction: LD   A,(20EB)
      let:8 a17 = M[20EB] in
      advance (13)
      #194A
      #instruction: LD   HL,3C01
      advance (10)
      #194D
      #instruction: JP   09B2
      advance (10)
      #09B2
      #instruction: PUSH DE
      let:16 a18 = (-1 + a16) in
      M[a18] := D;
      let:16 a19 = (-1 + a18) in
      M[a19] := E;
      advance (11)
      #09B3
      #instruction: PUSH PSW
      let:16 a20 = (-1 + a19) in
      M[a20] := a17;
      let:16 a21 = (-1 + a20) in
      M[a21] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a14[7]),6,is_zero(a14)),4,((((a9[1] || a9[2]) && a9[3]) || a8[7:0][4]) ? a10[7:0] : a9)[4]),2,parity(a14)),0,(((((a11[7:0][1] || a11[7:0][2]) && a11[7:0][3]) || a5[15:8][0]) ? a12[7:0] : a11[7:0])[4] || a5[15:8][0]));
      advance (11)
      #09B4
      #instruction: RRCA
      advance (4)
      #09B5
      #instruction: RRCA
      advance (4)
      #09B6
      #instruction: RRCA
      advance (4)
      #09B7
      #instruction: RRCA
      advance (4)
      #09B8
      #instruction: AND  0F
      let:8 a22 = (0F & updateBit((updateBit((updateBit((updateBit((a17 >> 01),7,a17[0]) >> 01),7,updateBit((a17 >> 01),7,a17[0])[0]) >> 01),7,updateBit((updateBit((a17 >> 01),7,a17[0]) >> 01),7,updateBit((a17 >> 01),7,a17[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a17 >> 01),7,a17[0]) >> 01),7,updateBit((a17 >> 01),7,a17[0])[0]) >> 01),7,updateBit((updateBit((a17 >> 01),7,a17[0]) >> 01),7,updateBit((a17 >> 01),7,a17[0])[0])[0])[0])) in
      let:8 a23 = (0F | updateBit((updateBit((updateBit((updateBit((a17 >> 01),7,a17[0]) >> 01),7,updateBit((a17 >> 01),7,a17[0])[0]) >> 01),7,updateBit((updateBit((a17 >> 01),7,a17[0]) >> 01),7,updateBit((a17 >> 01),7,a17[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a17 >> 01),7,a17[0]) >> 01),7,updateBit((a17 >> 01),7,a17[0])[0]) >> 01),7,updateBit((updateBit((a17 >> 01),7,a17[0]) >> 01),7,updateBit((a17 >> 01),7,a17[0])[0])[0])[0])) in
      advance (7)
      #09BA
      #instruction: CALL 09C5
      let:16 a24 = (-1 + a21) in
      M[a24] := 09;
      let:16 a25 = (-1 + a24) in
      M[a25] := BD;
      #return-to: 09BD
      advance (17)
      #09C5
      #instruction: ADD  1A
      let:16 a26 = addWithCarry(false,1A,a22) in
      let:8 a27 = (1A & 0F) in
      let:8 a28 = (a22 & 0F) in
      let:16 a29 = addWithCarry(false,a27,a28) in
      advance (7)
      #09C7
      #instruction: JP   08FF
      advance (10)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a30 = (-1 + a25) in
      M[a30] := 3C;
      let:16 a31 = (-1 + a30) in
      M[a31] := 01;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a32 = add17((00,a26[7:0]),(00,a26[7:0])) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a33 = add17(a32[15:0],a32[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a34 = add17(a33[15:0],a33[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a35 = add17(1E00,a34[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a36 = (1 + a31) in
      let:8 a37 = M[a31] in
      let:16 a38 = (1 + a36) in
      let:8 a39 = M[a36] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a40 = (-1 + a38) in
      M[a40] := 08;
      let:16 a41 = (-1 + a40) in
      M[a41] := C;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a42 = M[a35[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a39,a37)] := a42;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a43 = (1 + a35[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a44 = add17(0020,(a39,a37)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a45 = (1 + a41) in
      let:8 a46 = M[a41] in
      let:16 a47 = (1 + a45) in
      let:8 a48 = M[a45] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a49 = addWithCarry(!true,a48,~00) in
      let:8 a50 = (a48 & 0F) in
      let:8 a51 = (~00 & 0F) in
      let:16 a52 = addWithCarry(!true,a50,a51) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a49[7:0])) {
        advance (10)
        A := a42;
        B := a49[7:0];
        C := a46;
        D := a43[15:8];
        E := a43[7:0];
        H := a44[15:0][15:8];
        L := a44[15:0][7:0];
        SPH := a47[15:8];
        SPL := a47[7:0];
        FlagS := a49[7:0][7];
        FlagZ := is_zero(a49[7:0]);
        FlagA := a52[7:0][4];
        FlagP := parity(a49[7:0]);
        FlagCY := a44[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a53 = (1 + a47) in
        let:8 a54 = M[a47] in
        let:16 a55 = (1 + a53) in
        let:8 a56 = M[a53] in
        advance (10)
        A := a42;
        B := a49[7:0];
        C := a46;
        D := a43[15:8];
        E := a43[7:0];
        H := a44[15:0][15:8];
        L := a44[15:0][7:0];
        SPH := a55[15:8];
        SPL := a55[7:0];
        FlagS := a49[7:0][7];
        FlagZ := is_zero(a49[7:0]);
        FlagA := a52[7:0][4];
        FlagP := parity(a49[7:0]);
        FlagCY := a44[16];
        jump ((a56,a54));
      }
    }

07A9:

    #07A9
    #instruction: LD   HL,0000
    advance (10)
    #07AC
    #instruction: LD   (20F8),HL
    M[20F8] := 00;
    M[20F9] := 00;
    advance (16)
    #07AF
    #instruction: LD   (20FC),HL
    M[20FC] := 00;
    M[20FD] := 00;
    advance (16)
    #07B2
    #instruction: CALL 1925
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := B5;
    #return-to: 07B5
    advance (17)
    #1925
    #instruction: LD   HL,20F8
    advance (10)
    #1928
    #instruction: JP   1931
    advance (10)
    #1931
    #instruction: LD   E,(HL)
    let:8 a3 = M[20F8] in
    advance (7)
    #1932
    #instruction: INC  HL
    advance (5)
    #1933
    #instruction: LD   D,(HL)
    let:8 a4 = M[20F9] in
    advance (7)
    #1934
    #instruction: INC  HL
    advance (5)
    #1935
    #instruction: LD   A,(HL)
    let:8 a5 = M[20FA] in
    advance (7)
    #1936
    #instruction: INC  HL
    advance (5)
    #1937
    #instruction: LD   H,(HL)
    let:8 a6 = M[20FB] in
    advance (7)
    #1938
    #instruction: LD   L,A
    advance (5)
    #1939
    #instruction: JP   09AD
    advance (10)
    #09AD
    #instruction: LD   A,D
    advance (5)
    #09AE
    #instruction: CALL 09B2
    let:16 a7 = (-1 + a2) in
    M[a7] := 09;
    let:16 a8 = (-1 + a7) in
    M[a8] := B1;
    #return-to: 09B1
    advance (17)
    #09B2
    #instruction: PUSH DE
    let:16 a9 = (-1 + a8) in
    M[a9] := a4;
    let:16 a10 = (-1 + a9) in
    M[a10] := a3;
    advance (11)
    #09B3
    #instruction: PUSH PSW
    let:16 a11 = (-1 + a10) in
    M[a11] := a4;
    let:16 a12 = (-1 + a11) in
    M[a12] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #09B4
    #instruction: RRCA
    advance (4)
    #09B5
    #instruction: RRCA
    advance (4)
    #09B6
    #instruction: RRCA
    advance (4)
    #09B7
    #instruction: RRCA
    advance (4)
    #09B8
    #instruction: AND  0F
    let:8 a13 = (0F & updateBit((updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0])[0])) in
    let:8 a14 = (0F | updateBit((updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0])[0])) in
    advance (7)
    #09BA
    #instruction: CALL 09C5
    let:16 a15 = (-1 + a12) in
    M[a15] := 09;
    let:16 a16 = (-1 + a15) in
    M[a16] := BD;
    #return-to: 09BD
    advance (17)
    #09C5
    #instruction: ADD  1A
    let:16 a17 = addWithCarry(false,1A,a13) in
    let:8 a18 = (1A & 0F) in
    let:8 a19 = (a13 & 0F) in
    let:16 a20 = addWithCarry(false,a18,a19) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a21 = (-1 + a16) in
    M[a21] := a6;
    let:16 a22 = (-1 + a21) in
    M[a22] := a5;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a23 = add17((00,a17[7:0]),(00,a17[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a24 = add17(a23[15:0],a23[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a25 = add17(a24[15:0],a24[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a26 = add17(1E00,a25[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a27 = (1 + a22) in
    let:8 a28 = M[a22] in
    let:16 a29 = (1 + a27) in
    let:8 a30 = M[a27] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a31 = (-1 + a29) in
    M[a31] := 08;
    let:16 a32 = (-1 + a31) in
    M[a32] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a33 = M[a26[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a30,a28)] := a33;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a34 = (1 + a26[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a35 = add17(0020,(a30,a28)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a36 = (1 + a32) in
    let:8 a37 = M[a32] in
    let:16 a38 = (1 + a36) in
    let:8 a39 = M[a36] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a40 = addWithCarry(!true,a39,~00) in
    let:8 a41 = (a39 & 0F) in
    let:8 a42 = (~00 & 0F) in
    let:16 a43 = addWithCarry(!true,a41,a42) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a40[7:0])) {
      advance (10)
      A := a33;
      B := a40[7:0];
      C := a37;
      D := a34[15:8];
      E := a34[7:0];
      H := a35[15:0][15:8];
      L := a35[15:0][7:0];
      SPH := a38[15:8];
      SPL := a38[7:0];
      FlagS := a40[7:0][7];
      FlagZ := is_zero(a40[7:0]);
      FlagA := a43[7:0][4];
      FlagP := parity(a40[7:0]);
      FlagCY := a35[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a44 = (1 + a38) in
      let:8 a45 = M[a38] in
      let:16 a46 = (1 + a44) in
      let:8 a47 = M[a44] in
      advance (10)
      A := a33;
      B := a40[7:0];
      C := a37;
      D := a34[15:8];
      E := a34[7:0];
      H := a35[15:0][15:8];
      L := a35[15:0][7:0];
      SPH := a46[15:8];
      SPL := a46[7:0];
      FlagS := a40[7:0][7];
      FlagZ := is_zero(a40[7:0]);
      FlagA := a43[7:0][4];
      FlagP := parity(a40[7:0]);
      FlagCY := a35[16];
      jump ((a47,a45));
    }

07B5:

    #07B5
    #instruction: CALL 192B
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := B8;
    #return-to: 07B8
    advance (17)
    #192B
    #instruction: LD   HL,20FC
    advance (10)
    #192E
    #instruction: JP   1931
    advance (10)
    #1931
    #instruction: LD   E,(HL)
    let:8 a3 = M[20FC] in
    advance (7)
    #1932
    #instruction: INC  HL
    advance (5)
    #1933
    #instruction: LD   D,(HL)
    let:8 a4 = M[20FD] in
    advance (7)
    #1934
    #instruction: INC  HL
    advance (5)
    #1935
    #instruction: LD   A,(HL)
    let:8 a5 = M[20FE] in
    advance (7)
    #1936
    #instruction: INC  HL
    advance (5)
    #1937
    #instruction: LD   H,(HL)
    let:8 a6 = M[20FF] in
    advance (7)
    #1938
    #instruction: LD   L,A
    advance (5)
    #1939
    #instruction: JP   09AD
    advance (10)
    #09AD
    #instruction: LD   A,D
    advance (5)
    #09AE
    #instruction: CALL 09B2
    let:16 a7 = (-1 + a2) in
    M[a7] := 09;
    let:16 a8 = (-1 + a7) in
    M[a8] := B1;
    #return-to: 09B1
    advance (17)
    #09B2
    #instruction: PUSH DE
    let:16 a9 = (-1 + a8) in
    M[a9] := a4;
    let:16 a10 = (-1 + a9) in
    M[a10] := a3;
    advance (11)
    #09B3
    #instruction: PUSH PSW
    let:16 a11 = (-1 + a10) in
    M[a11] := a4;
    let:16 a12 = (-1 + a11) in
    M[a12] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #09B4
    #instruction: RRCA
    advance (4)
    #09B5
    #instruction: RRCA
    advance (4)
    #09B6
    #instruction: RRCA
    advance (4)
    #09B7
    #instruction: RRCA
    advance (4)
    #09B8
    #instruction: AND  0F
    let:8 a13 = (0F & updateBit((updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0])[0])) in
    let:8 a14 = (0F | updateBit((updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0])[0])) in
    advance (7)
    #09BA
    #instruction: CALL 09C5
    let:16 a15 = (-1 + a12) in
    M[a15] := 09;
    let:16 a16 = (-1 + a15) in
    M[a16] := BD;
    #return-to: 09BD
    advance (17)
    #09C5
    #instruction: ADD  1A
    let:16 a17 = addWithCarry(false,1A,a13) in
    let:8 a18 = (1A & 0F) in
    let:8 a19 = (a13 & 0F) in
    let:16 a20 = addWithCarry(false,a18,a19) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a21 = (-1 + a16) in
    M[a21] := a6;
    let:16 a22 = (-1 + a21) in
    M[a22] := a5;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a23 = add17((00,a17[7:0]),(00,a17[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a24 = add17(a23[15:0],a23[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a25 = add17(a24[15:0],a24[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a26 = add17(1E00,a25[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a27 = (1 + a22) in
    let:8 a28 = M[a22] in
    let:16 a29 = (1 + a27) in
    let:8 a30 = M[a27] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a31 = (-1 + a29) in
    M[a31] := 08;
    let:16 a32 = (-1 + a31) in
    M[a32] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a33 = M[a26[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a30,a28)] := a33;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a34 = (1 + a26[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a35 = add17(0020,(a30,a28)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a36 = (1 + a32) in
    let:8 a37 = M[a32] in
    let:16 a38 = (1 + a36) in
    let:8 a39 = M[a36] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a40 = addWithCarry(!true,a39,~00) in
    let:8 a41 = (a39 & 0F) in
    let:8 a42 = (~00 & 0F) in
    let:16 a43 = addWithCarry(!true,a41,a42) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a40[7:0])) {
      advance (10)
      A := a33;
      B := a40[7:0];
      C := a37;
      D := a34[15:8];
      E := a34[7:0];
      H := a35[15:0][15:8];
      L := a35[15:0][7:0];
      SPH := a38[15:8];
      SPL := a38[7:0];
      FlagS := a40[7:0][7];
      FlagZ := is_zero(a40[7:0]);
      FlagA := a43[7:0][4];
      FlagP := parity(a40[7:0]);
      FlagCY := a35[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a44 = (1 + a38) in
      let:8 a45 = M[a38] in
      let:16 a46 = (1 + a44) in
      let:8 a47 = M[a44] in
      advance (10)
      A := a33;
      B := a40[7:0];
      C := a37;
      D := a34[15:8];
      E := a34[7:0];
      H := a35[15:0][15:8];
      L := a35[15:0][7:0];
      SPH := a46[15:8];
      SPL := a46[7:0];
      FlagS := a40[7:0][7];
      FlagZ := is_zero(a40[7:0]);
      FlagA := a43[7:0][4];
      FlagP := parity(a40[7:0]);
      FlagCY := a35[16];
      jump ((a47,a45));
    }

07B8:

    #07B8
    #instruction: CALL 19D7
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := BB;
    #return-to: 07BB
    advance (17)
    #19D7
    #instruction: XOR  A
    let:8 a3 = (A ^ A) in
    advance (4)
    #19D8
    #instruction: JP   19D3
    advance (10)
    #19D3
    #instruction: LD   (20E9),A
    M[20E9] := a3;
    advance (13)
    #19D6
    #instruction: RET
    let:16 a4 = (1 + a2) in
    let:8 a5 = M[a2] in
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    advance (10)
    A := a3;
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagS := a3[7];
    FlagZ := is_zero(a3);
    FlagA := false;
    FlagP := parity(a3);
    FlagCY := false;
    jump ((a7,a5));

07BB:

    #07BB
    #instruction: LD   HL,0101
    advance (10)
    #07BE
    #instruction: LD   A,H
    advance (5)
    #07BF
    #instruction: LD   (20EF),A
    M[20EF] := 01;
    advance (13)
    #07C2
    #instruction: LD   (20E7),HL
    M[20E7] := 01;
    M[20E8] := 01;
    advance (16)
    #07C5
    #instruction: LD   (20E5),HL
    M[20E5] := 01;
    M[20E6] := 01;
    advance (16)
    #07C8
    #instruction: CALL 1956
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := CB;
    #return-to: 07CB
    advance (17)
    #1956
    #instruction: CALL 1A5C
    let:16 a3 = (-1 + a2) in
    M[a3] := 19;
    let:16 a4 = (-1 + a3) in
    M[a4] := 59;
    #return-to: 1959
    advance (17)
    #1A5C
    #instruction: LD   HL,2400
    advance (10)
    #1A5F
    #instruction: LD   (HL),00
    M[2400] := 00;
    advance (10)
    #1A61
    #instruction: INC  HL
    advance (5)
    #1A62
    #instruction: LD   A,H
    advance (5)
    #1A63
    #instruction: CP   40
    let:16 a5 = addWithCarry(!false,24,~40) in
    let:8 a6 = (24 & 0F) in
    let:8 a7 = (~40 & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    advance (7)
    #1A65
    #instruction: JP   NZ,1A5F
    if (!is_zero(a5[7:0])) {
      advance (10)
      A := 24;
      H := 24;
      L := 01;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a5[15:8][0];
      jump (1A5F);
    } else {
      advance (10)
      #1A68
      #instruction: RET
      let:16 a9 = (1 + a4) in
      let:8 a10 = M[a4] in
      let:16 a11 = (1 + a9) in
      let:8 a12 = M[a9] in
      advance (10)
      A := 24;
      H := 24;
      L := 01;
      SPH := a11[15:8];
      SPL := a11[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a5[15:8][0];
      jump ((a12,a10));
    }

07CB:

    #07CB
    #instruction: CALL 01EF
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := CE;
    #return-to: 07CE
    advance (17)
    #01EF
    #instruction: LD   HL,2142
    advance (10)
    #01F2
    #instruction: JP   01F8
    advance (10)
    #01F8
    #instruction: LD   C,04
    advance (7)
    #01FA
    #instruction: LD   DE,1D20
    advance (10)
    #01FD
    #instruction: PUSH DE
    let:16 a3 = (-1 + a2) in
    M[a3] := 1D;
    let:16 a4 = (-1 + a3) in
    M[a4] := 20;
    advance (11)
    #01FE
    #instruction: LD   B,2C
    advance (7)
    #0200
    #instruction: CALL 1A32
    let:16 a5 = (-1 + a4) in
    M[a5] := 02;
    let:16 a6 = (-1 + a5) in
    M[a6] := 03;
    #return-to: 0203
    advance (17)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2142] := FF;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a7 = addWithCarry(!true,2C,~00) in
    let:8 a8 = (2C & 0F) in
    let:8 a9 = (~00 & 0F) in
    let:16 a10 = addWithCarry(!true,a8,a9) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a7[7:0])) {
      advance (10)
      A := FF;
      B := a7[7:0];
      C := 04;
      D := 1D;
      E := 21;
      H := 21;
      L := 43;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a11 = (1 + a6) in
      let:8 a12 = M[a6] in
      let:16 a13 = (1 + a11) in
      let:8 a14 = M[a11] in
      advance (10)
      A := FF;
      B := a7[7:0];
      C := 04;
      D := 1D;
      E := 21;
      H := 21;
      L := 43;
      SPH := a13[15:8];
      SPL := a13[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      jump ((a14,a12));
    }

07CE:

    #07CE
    #instruction: CALL 01F5
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := D1;
    #return-to: 07D1
    advance (17)
    #01F5
    #instruction: LD   HL,2242
    advance (10)
    #01F8
    #instruction: LD   C,04
    advance (7)
    #01FA
    #instruction: LD   DE,1D20
    advance (10)
    #01FD
    #instruction: PUSH DE
    let:16 a3 = (-1 + a2) in
    M[a3] := 1D;
    let:16 a4 = (-1 + a3) in
    M[a4] := 20;
    advance (11)
    #01FE
    #instruction: LD   B,2C
    advance (7)
    #0200
    #instruction: CALL 1A32
    let:16 a5 = (-1 + a4) in
    M[a5] := 02;
    let:16 a6 = (-1 + a5) in
    M[a6] := 03;
    #return-to: 0203
    advance (17)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2242] := FF;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a7 = addWithCarry(!true,2C,~00) in
    let:8 a8 = (2C & 0F) in
    let:8 a9 = (~00 & 0F) in
    let:16 a10 = addWithCarry(!true,a8,a9) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a7[7:0])) {
      advance (10)
      A := FF;
      B := a7[7:0];
      C := 04;
      D := 1D;
      E := 21;
      H := 22;
      L := 43;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a11 = (1 + a6) in
      let:8 a12 = M[a6] in
      let:16 a13 = (1 + a11) in
      let:8 a14 = M[a11] in
      advance (10)
      A := FF;
      B := a7[7:0];
      C := 04;
      D := 1D;
      E := 21;
      H := 22;
      L := 43;
      SPH := a13[15:8];
      SPL := a13[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      jump ((a14,a12));
    }

07D1:

    #07D1
    #instruction: CALL 08D1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := D4;
    #return-to: 07D4
    advance (17)
    #08D1
    #instruction: IN   02
    advance (10)
    #08D3
    #instruction: AND  03
    let:8 a3 = (03 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
    let:8 a4 = (03 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
    advance (7)
    #08D5
    #instruction: ADD  03
    let:16 a5 = addWithCarry(false,03,a3) in
    let:8 a6 = (03 & 0F) in
    let:8 a7 = (a3 & 0F) in
    let:16 a8 = addWithCarry(false,a6,a7) in
    advance (7)
    #08D7
    #instruction: RET
    let:16 a9 = (1 + a2) in
    let:8 a10 = M[a2] in
    let:16 a11 = (1 + a9) in
    let:8 a12 = M[a9] in
    advance (10)
    A := a5[7:0];
    SPH := a11[15:8];
    SPL := a11[7:0];
    FlagS := a5[7:0][7];
    FlagZ := is_zero(a5[7:0]);
    FlagA := a8[7:0][4];
    FlagP := parity(a5[7:0]);
    FlagCY := a5[15:8][0];
    jump ((a12,a10));

07D4:

    #07D4
    #instruction: LD   (21FF),A
    M[21FF] := A;
    advance (13)
    #07D7
    #instruction: LD   (22FF),A
    M[22FF] := A;
    advance (13)
    #07DA
    #instruction: CALL 00D7
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := DD;
    #return-to: 07DD
    advance (17)
    #00D7
    #instruction: LD   A,02
    advance (7)
    #00D9
    #instruction: LD   (21FB),A
    M[21FB] := 02;
    advance (13)
    #00DC
    #instruction: LD   (22FB),A
    M[22FB] := 02;
    advance (13)
    #00DF
    #instruction: JP   08E4
    advance (10)
    #08E4
    #instruction: LD   A,(20CE)
    let:8 a3 = M[20CE] in
    advance (13)
    #08E7
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #08E8
    #instruction: RET  NZ
    if (!is_zero(a4)) {
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (11)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    } else {
      advance (5)
      #08E9
      #instruction: LD   HL,391C
      advance (10)
      #08EC
      #instruction: LD   B,20
      advance (7)
      #08EE
      #instruction: JP   14CB
      advance (10)
      #14CB
      #instruction: XOR  A
      let:8 a10 = (a4 ^ a4) in
      advance (4)
      #14CC
      #instruction: PUSH BC
      let:16 a11 = (-1 + a2) in
      M[a11] := 20;
      let:16 a12 = (-1 + a11) in
      M[a12] := C;
      advance (11)
      #14CD
      #instruction: LD   (HL),A
      M[391C] := a10;
      advance (7)
      #14CE
      #instruction: LD   BC,0020
      advance (10)
      #14D1
      #instruction: ADD  HL,BC
      let:17 a13 = add17(0020,391C) in
      advance (10)
      #14D2
      #instruction: POP  BC
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      #14D3
      #instruction: DEC  B
      let:16 a18 = addWithCarry(!true,a17,~00) in
      let:8 a19 = (a17 & 0F) in
      let:8 a20 = (~00 & 0F) in
      let:16 a21 = addWithCarry(!true,a19,a20) in
      advance (5)
      #14D4
      #instruction: JP   NZ,14CC
      if (!is_zero(a18[7:0])) {
        advance (10)
        A := a10;
        B := a18[7:0];
        C := a15;
        H := a13[15:0][15:8];
        L := a13[15:0][7:0];
        SPH := a16[15:8];
        SPL := a16[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := a13[16];
        jump (14CC);
      } else {
        advance (10)
        #14D7
        #instruction: RET
        let:16 a22 = (1 + a16) in
        let:8 a23 = M[a16] in
        let:16 a24 = (1 + a22) in
        let:8 a25 = M[a22] in
        advance (10)
        A := a10;
        B := a18[7:0];
        C := a15;
        H := a13[15:0][15:8];
        L := a13[15:0][7:0];
        SPH := a24[15:8];
        SPL := a24[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := a13[16];
        jump ((a25,a23));
      }
    }

07DD:

    #07DD
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #07DE
    #instruction: LD   (21FE),A
    M[21FE] := a1;
    advance (13)
    #07E1
    #instruction: LD   (22FE),A
    M[22FE] := a1;
    advance (13)
    #07E4
    #instruction: CALL 01C0
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 07;
    let:16 a3 = (-1 + a2) in
    M[a3] := E7;
    #return-to: 07E7
    advance (17)
    #01C0
    #instruction: LD   HL,2100
    advance (10)
    #01C3
    #instruction: LD   B,37
    advance (7)
    #01C5
    #instruction: LD   (HL),01
    M[2100] := 01;
    advance (10)
    #01C7
    #instruction: INC  HL
    advance (5)
    #01C8
    #instruction: DEC  B
    let:16 a4 = addWithCarry(!true,37,~00) in
    let:8 a5 = (37 & 0F) in
    let:8 a6 = (~00 & 0F) in
    let:16 a7 = addWithCarry(!true,a5,a6) in
    advance (5)
    #01C9
    #instruction: JP   NZ,01C5
    if (!is_zero(a4[7:0])) {
      advance (10)
      A := a1;
      B := a4[7:0];
      H := 21;
      L := 01;
      SPH := a3[15:8];
      SPL := a3[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := false;
      jump (01C5);
    } else {
      advance (10)
      #01CC
      #instruction: RET
      let:16 a8 = (1 + a3) in
      let:8 a9 = M[a3] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := a1;
      B := a4[7:0];
      H := 21;
      L := 01;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := false;
      jump ((a11,a9));
    }

07E7:

    #07E7
    #instruction: CALL 1904
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := EA;
    #return-to: 07EA
    advance (17)
    #1904
    #instruction: LD   HL,2200
    advance (10)
    #1907
    #instruction: JP   01C3
    advance (10)
    #01C3
    #instruction: LD   B,37
    advance (7)
    #01C5
    #instruction: LD   (HL),01
    M[2200] := 01;
    advance (10)
    #01C7
    #instruction: INC  HL
    advance (5)
    #01C8
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,37,~00) in
    let:8 a4 = (37 & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #01C9
    #instruction: JP   NZ,01C5
    if (!is_zero(a3[7:0])) {
      advance (10)
      B := a3[7:0];
      H := 22;
      L := 01;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (01C5);
    } else {
      advance (10)
      #01CC
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      B := a3[7:0];
      H := 22;
      L := 01;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

07EA:

    #07EA
    #instruction: LD   HL,3878
    advance (10)
    #07ED
    #instruction: LD   (21FC),HL
    M[21FC] := 78;
    M[21FD] := 38;
    advance (16)
    #07F0
    #instruction: LD   (22FC),HL
    M[22FC] := 78;
    M[22FD] := 38;
    advance (16)
    #07F3
    #instruction: CALL 01E4
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := F6;
    #return-to: 07F6
    advance (17)
    #01E4
    #instruction: LD   B,C0
    advance (7)
    #01E6
    #instruction: LD   DE,1B00
    advance (10)
    #01E9
    #instruction: LD   HL,2000
    advance (10)
    #01EC
    #instruction: JP   1A32
    advance (10)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2000] := 01;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,C0,~00) in
    let:8 a4 = (C0 & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a3[7:0])) {
      advance (10)
      A := 01;
      B := a3[7:0];
      D := 1B;
      E := 01;
      H := 20;
      L := 01;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := 01;
      B := a3[7:0];
      D := 1B;
      E := 01;
      H := 20;
      L := 01;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

07F6:

    #07F6
    #instruction: CALL 1A7F
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := F9;
    #return-to: 07F9
    advance (17)
    #1A7F
    #instruction: CALL 092E
    let:16 a3 = (-1 + a2) in
    M[a3] := 1A;
    let:16 a4 = (-1 + a3) in
    M[a4] := 82;
    #return-to: 1A82
    advance (17)
    #092E
    #instruction: CALL 1611
    let:16 a5 = (-1 + a4) in
    M[a5] := 09;
    let:16 a6 = (-1 + a5) in
    M[a6] := 31;
    #return-to: 0931
    advance (17)
    #1611
    #instruction: LD   L,00
    advance (7)
    #1613
    #instruction: LD   A,(2067)
    let:8 a7 = M[2067] in
    advance (13)
    #1616
    #instruction: LD   H,A
    advance (5)
    #1617
    #instruction: RET
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    let:16 a10 = (1 + a8) in
    let:8 a11 = M[a8] in
    advance (10)
    A := a7;
    H := a7;
    L := 00;
    SPH := a10[15:8];
    SPL := a10[7:0];
    jump ((a11,a9));

07F9:

    #07F9
    #instruction: CALL 088D
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := FC;
    #return-to: 07FC
    advance (17)
    #088D
    #instruction: LD   HL,2B11
    advance (10)
    #0890
    #instruction: LD   DE,1B70
    advance (10)
    #0893
    #instruction: LD   C,0E
    advance (7)
    #0895
    #instruction: CALL 08F3
    let:16 a3 = (-1 + a2) in
    M[a3] := 08;
    let:16 a4 = (-1 + a3) in
    M[a4] := 98;
    #return-to: 0898
    advance (17)
    #08F3
    #instruction: LD   A,(DE)
    advance (7)
    #08F4
    #instruction: PUSH DE
    let:16 a5 = (-1 + a4) in
    M[a5] := 1B;
    let:16 a6 = (-1 + a5) in
    M[a6] := 70;
    advance (11)
    #08F5
    #instruction: CALL 08FF
    let:16 a7 = (-1 + a6) in
    M[a7] := 08;
    let:16 a8 = (-1 + a7) in
    M[a8] := F8;
    #return-to: 08F8
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a9 = (-1 + a8) in
    M[a9] := 2B;
    let:16 a10 = (-1 + a9) in
    M[a10] := 11;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a11 = add17(000F,000F) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a12 = add17(a11[15:0],a11[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a13 = add17(a12[15:0],a12[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a14 = add17(1E00,a13[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a15 = (1 + a10) in
    let:8 a16 = M[a10] in
    let:16 a17 = (1 + a15) in
    let:8 a18 = M[a15] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a19 = (-1 + a17) in
    M[a19] := 08;
    let:16 a20 = (-1 + a19) in
    M[a20] := 0E;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a21 = M[a14[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a18,a16)] := a21;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a22 = (1 + a14[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a23 = add17(0020,(a18,a16)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a24 = (1 + a20) in
    let:8 a25 = M[a20] in
    let:16 a26 = (1 + a24) in
    let:8 a27 = M[a24] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a28 = addWithCarry(!true,a27,~00) in
    let:8 a29 = (a27 & 0F) in
    let:8 a30 = (~00 & 0F) in
    let:16 a31 = addWithCarry(!true,a29,a30) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a28[7:0])) {
      advance (10)
      A := a21;
      B := a28[7:0];
      C := a25;
      D := a22[15:8];
      E := a22[7:0];
      H := a23[15:0][15:8];
      L := a23[15:0][7:0];
      SPH := a26[15:8];
      SPL := a26[7:0];
      FlagS := a28[7:0][7];
      FlagZ := is_zero(a28[7:0]);
      FlagA := a31[7:0][4];
      FlagP := parity(a28[7:0]);
      FlagCY := a23[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a32 = (1 + a26) in
      let:8 a33 = M[a26] in
      let:16 a34 = (1 + a32) in
      let:8 a35 = M[a32] in
      advance (10)
      A := a21;
      B := a28[7:0];
      C := a25;
      D := a22[15:8];
      E := a22[7:0];
      H := a23[15:0][15:8];
      L := a23[15:0][7:0];
      SPH := a34[15:8];
      SPL := a34[7:0];
      FlagS := a28[7:0][7];
      FlagZ := is_zero(a28[7:0]);
      FlagA := a31[7:0][4];
      FlagP := parity(a28[7:0]);
      FlagCY := a23[16];
      jump ((a35,a33));
    }

07FC:

    #07FC
    #instruction: CALL 09D6
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := FF;
    #return-to: 07FF
    advance (17)
    #09D6
    #instruction: LD   HL,2402
    advance (10)
    #09D9
    #instruction: LD   (HL),00
    M[2402] := 00;
    advance (10)
    #09DB
    #instruction: INC  HL
    advance (5)
    #09DC
    #instruction: LD   A,L
    advance (5)
    #09DD
    #instruction: AND  1F
    let:8 a3 = (1F & 03) in
    let:8 a4 = (1F | 03) in
    advance (7)
    #09DF
    #instruction: CP   1C
    let:16 a5 = addWithCarry(!false,a3,~1C) in
    let:8 a6 = (a3 & 0F) in
    let:8 a7 = (~1C & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    advance (7)
    #09E1
    #instruction: JP   CY,09E8
    if (!a5[15:8][0]) {
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a9 = addWithCarry(!false,24,~40) in
      let:8 a10 = (24 & 0F) in
      let:8 a11 = (~40 & 0F) in
      let:16 a12 = addWithCarry(!false,a10,a11) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a9[15:8][0]) {
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a13 = (1 + a2) in
        let:8 a14 = M[a2] in
        let:16 a15 = (1 + a13) in
        let:8 a16 = M[a13] in
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a15[15:8];
        SPL := a15[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump ((a16,a14));
      }
    } else {
      advance (10)
      #09E4
      #instruction: LD   DE,0006
      advance (10)
      #09E7
      #instruction: ADD  HL,DE
      let:17 a17 = add17(0006,2403) in
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a18 = addWithCarry(!false,a17[15:0][15:8],~40) in
      let:8 a19 = (a17[15:0][15:8] & 0F) in
      let:8 a20 = (~40 & 0F) in
      let:16 a21 = addWithCarry(!false,a19,a20) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a18[15:8][0]) {
        advance (10)
        A := a17[15:0][15:8];
        D := 00;
        E := 06;
        H := a17[15:0][15:8];
        L := a17[15:0][7:0];
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := !a18[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a22 = (1 + a2) in
        let:8 a23 = M[a2] in
        let:16 a24 = (1 + a22) in
        let:8 a25 = M[a22] in
        advance (10)
        A := a17[15:0][15:8];
        D := 00;
        E := 06;
        H := a17[15:0][15:8];
        L := a17[15:0][7:0];
        SPH := a24[15:8];
        SPL := a24[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := !a18[15:8][0];
        jump ((a25,a23));
      }
    }

07FF:

    #07FF
    #instruction: NOP
    advance (4)
    #0800
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #0801
    #instruction: LD   (20C1),A
    M[20C1] := a1;
    advance (13)
    #0804
    #instruction: CALL 01CF
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 08;
    let:16 a3 = (-1 + a2) in
    M[a3] := 07;
    #return-to: 0807
    advance (17)
    #01CF
    #instruction: LD   A,01
    advance (7)
    #01D1
    #instruction: LD   B,E0
    advance (7)
    #01D3
    #instruction: LD   HL,2402
    advance (10)
    #01D6
    #instruction: JP   14CC
    advance (10)
    #14CC
    #instruction: PUSH BC
    let:16 a4 = (-1 + a3) in
    M[a4] := E0;
    let:16 a5 = (-1 + a4) in
    M[a5] := C;
    advance (11)
    #14CD
    #instruction: LD   (HL),A
    M[2402] := 01;
    advance (7)
    #14CE
    #instruction: LD   BC,0020
    advance (10)
    #14D1
    #instruction: ADD  HL,BC
    let:17 a6 = add17(0020,2402) in
    advance (10)
    #14D2
    #instruction: POP  BC
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    let:16 a9 = (1 + a7) in
    let:8 a10 = M[a7] in
    advance (10)
    #14D3
    #instruction: DEC  B
    let:16 a11 = addWithCarry(!true,a10,~00) in
    let:8 a12 = (a10 & 0F) in
    let:8 a13 = (~00 & 0F) in
    let:16 a14 = addWithCarry(!true,a12,a13) in
    advance (5)
    #14D4
    #instruction: JP   NZ,14CC
    if (!is_zero(a11[7:0])) {
      advance (10)
      A := 01;
      B := a11[7:0];
      C := a8;
      H := a6[15:0][15:8];
      L := a6[15:0][7:0];
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a11[7:0][7];
      FlagZ := is_zero(a11[7:0]);
      FlagA := a14[7:0][4];
      FlagP := parity(a11[7:0]);
      FlagCY := a6[16];
      jump (14CC);
    } else {
      advance (10)
      #14D7
      #instruction: RET
      let:16 a15 = (1 + a9) in
      let:8 a16 = M[a9] in
      let:16 a17 = (1 + a15) in
      let:8 a18 = M[a15] in
      advance (10)
      A := 01;
      B := a11[7:0];
      C := a8;
      H := a6[15:0][15:8];
      L := a6[15:0][7:0];
      SPH := a17[15:8];
      SPL := a17[7:0];
      FlagS := a11[7:0][7];
      FlagZ := is_zero(a11[7:0]);
      FlagA := a14[7:0][4];
      FlagP := parity(a11[7:0]);
      FlagCY := a6[16];
      jump ((a18,a16));
    }

0807:

    #0807
    #instruction: LD   A,(2067)
    let:8 a1 = M[2067] in
    advance (13)
    #080A
    #instruction: RRCA
    advance (4)
    #080B
    #instruction: JP   CY,0872
    if (a1[0]) {
      advance (10)
      #0872
      #instruction: CALL 021A
      let:16 a2 = (-1 + (SPH,SPL)) in
      M[a2] := 08;
      let:16 a3 = (-1 + a2) in
      M[a3] := 75;
      #return-to: 0875
      advance (17)
      #021A
      #instruction: XOR  A
      let:8 a4 = (updateBit((a1 >> 01),7,a1[0]) ^ updateBit((a1 >> 01),7,a1[0])) in
      advance (4)
      #021B
      #instruction: LD   DE,2142
      advance (10)
      #021E
      #instruction: LD   (2081),A
      M[2081] := a4;
      advance (13)
      #0221
      #instruction: LD   BC,1602
      advance (10)
      #0224
      #instruction: LD   HL,2806
      advance (10)
      #0227
      #instruction: LD   A,04
      advance (7)
      #0229
      #instruction: PUSH PSW
      let:16 a5 = (-1 + a3) in
      M[a5] := 04;
      let:16 a6 = (-1 + a5) in
      M[a6] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a4[7]),6,is_zero(a4)),4,false),2,parity(a4)),0,false);
      advance (11)
      #022A
      #instruction: PUSH BC
      let:16 a7 = (-1 + a6) in
      M[a7] := 16;
      let:16 a8 = (-1 + a7) in
      M[a8] := 02;
      advance (11)
      #022B
      #instruction: LD   A,(2081)
      let:8 a9 = M[2081] in
      advance (13)
      #022E
      #instruction: AND  A
      let:8 a10 = (a9 & a9) in
      let:8 a11 = (a9 | a9) in
      advance (4)
      #022F
      #instruction: JP   NZ,0242
      if (!is_zero(a10)) {
        advance (10)
        #0242
        #instruction: CALL 147C
        let:16 a12 = (-1 + a8) in
        M[a12] := 02;
        let:16 a13 = (-1 + a12) in
        M[a13] := 45;
        #return-to: 0245
        advance (17)
        #147C
        #instruction: PUSH BC
        let:16 a14 = (-1 + a13) in
        M[a14] := 16;
        let:16 a15 = (-1 + a14) in
        M[a15] := 02;
        advance (11)
        #147D
        #instruction: PUSH HL
        let:16 a16 = (-1 + a15) in
        M[a16] := 28;
        let:16 a17 = (-1 + a16) in
        M[a17] := 06;
        advance (11)
        #147E
        #instruction: LD   A,(HL)
        let:8 a18 = M[2806] in
        advance (7)
        #147F
        #instruction: LD   (DE),A
        M[2142] := a18;
        advance (7)
        #1480
        #instruction: INC  DE
        advance (5)
        #1481
        #instruction: INC  HL
        advance (5)
        #1482
        #instruction: DEC  C
        let:16 a19 = addWithCarry(!true,02,~00) in
        let:8 a20 = (02 & 0F) in
        let:8 a21 = (~00 & 0F) in
        let:16 a22 = addWithCarry(!true,a20,a21) in
        advance (5)
        #1483
        #instruction: JP   NZ,147E
        if (!is_zero(a19[7:0])) {
          advance (10)
          A := a18;
          B := 16;
          C := a19[7:0];
          D := 21;
          E := 43;
          H := 28;
          L := 07;
          SPH := a17[15:8];
          SPL := a17[7:0];
          FlagS := a19[7:0][7];
          FlagZ := is_zero(a19[7:0]);
          FlagA := a22[7:0][4];
          FlagP := parity(a19[7:0]);
          FlagCY := false;
          jump (147E);
        } else {
          advance (10)
          #1486
          #instruction: POP  HL
          let:16 a23 = (1 + a17) in
          let:8 a24 = M[a17] in
          let:16 a25 = (1 + a23) in
          let:8 a26 = M[a23] in
          advance (10)
          #1487
          #instruction: LD   BC,0020
          advance (10)
          #148A
          #instruction: ADD  HL,BC
          let:17 a27 = add17(0020,(a26,a24)) in
          advance (10)
          #148B
          #instruction: POP  BC
          let:16 a28 = (1 + a25) in
          let:8 a29 = M[a25] in
          let:16 a30 = (1 + a28) in
          let:8 a31 = M[a28] in
          advance (10)
          #148C
          #instruction: DEC  B
          let:16 a32 = addWithCarry(!true,a31,~00) in
          let:8 a33 = (a31 & 0F) in
          let:8 a34 = (~00 & 0F) in
          let:16 a35 = addWithCarry(!true,a33,a34) in
          advance (5)
          #148D
          #instruction: JP   NZ,147C
          if (!is_zero(a32[7:0])) {
            advance (10)
            A := a18;
            B := a32[7:0];
            C := a29;
            D := 21;
            E := 43;
            H := a27[15:0][15:8];
            L := a27[15:0][7:0];
            SPH := a30[15:8];
            SPL := a30[7:0];
            FlagS := a32[7:0][7];
            FlagZ := is_zero(a32[7:0]);
            FlagA := a35[7:0][4];
            FlagP := parity(a32[7:0]);
            FlagCY := a27[16];
            jump (147C);
          } else {
            advance (10)
            #1490
            #instruction: RET
            let:16 a36 = (1 + a30) in
            let:8 a37 = M[a30] in
            let:16 a38 = (1 + a36) in
            let:8 a39 = M[a36] in
            advance (10)
            A := a18;
            B := a32[7:0];
            C := a29;
            D := 21;
            E := 43;
            H := a27[15:0][15:8];
            L := a27[15:0][7:0];
            SPH := a38[15:8];
            SPL := a38[7:0];
            FlagS := a32[7:0][7];
            FlagZ := is_zero(a32[7:0]);
            FlagA := a35[7:0][4];
            FlagP := parity(a32[7:0]);
            FlagCY := a27[16];
            jump ((a39,a37));
          }
        }
      } else {
        advance (10)
        #0232
        #instruction: CALL 1A69
        let:16 a40 = (-1 + a8) in
        M[a40] := 02;
        let:16 a41 = (-1 + a40) in
        M[a41] := 35;
        #return-to: 0235
        advance (17)
        #1A69
        #instruction: PUSH BC
        let:16 a42 = (-1 + a41) in
        M[a42] := 16;
        let:16 a43 = (-1 + a42) in
        M[a43] := 02;
        advance (11)
        #1A6A
        #instruction: PUSH HL
        let:16 a44 = (-1 + a43) in
        M[a44] := 28;
        let:16 a45 = (-1 + a44) in
        M[a45] := 06;
        advance (11)
        #1A6B
        #instruction: LD   A,(DE)
        let:8 a46 = M[2142] in
        advance (7)
        #1A6C
        #instruction: OR   (HL)
        let:8 a47 = M[2806] in
        let:8 a48 = (a47 | a46) in
        advance (7)
        #1A6D
        #instruction: LD   (HL),A
        M[2806] := a48;
        advance (7)
        #1A6E
        #instruction: INC  DE
        advance (5)
        #1A6F
        #instruction: INC  HL
        advance (5)
        #1A70
        #instruction: DEC  C
        let:16 a49 = addWithCarry(!true,02,~00) in
        let:8 a50 = (02 & 0F) in
        let:8 a51 = (~00 & 0F) in
        let:16 a52 = addWithCarry(!true,a50,a51) in
        advance (5)
        #1A71
        #instruction: JP   NZ,1A6B
        if (!is_zero(a49[7:0])) {
          advance (10)
          A := a48;
          B := 16;
          C := a49[7:0];
          D := 21;
          E := 43;
          H := 28;
          L := 07;
          SPH := a45[15:8];
          SPL := a45[7:0];
          FlagS := a49[7:0][7];
          FlagZ := is_zero(a49[7:0]);
          FlagA := a52[7:0][4];
          FlagP := parity(a49[7:0]);
          FlagCY := false;
          jump (1A6B);
        } else {
          advance (10)
          #1A74
          #instruction: POP  HL
          let:16 a53 = (1 + a45) in
          let:8 a54 = M[a45] in
          let:16 a55 = (1 + a53) in
          let:8 a56 = M[a53] in
          advance (10)
          #1A75
          #instruction: LD   BC,0020
          advance (10)
          #1A78
          #instruction: ADD  HL,BC
          let:17 a57 = add17(0020,(a56,a54)) in
          advance (10)
          #1A79
          #instruction: POP  BC
          let:16 a58 = (1 + a55) in
          let:8 a59 = M[a55] in
          let:16 a60 = (1 + a58) in
          let:8 a61 = M[a58] in
          advance (10)
          #1A7A
          #instruction: DEC  B
          let:16 a62 = addWithCarry(!true,a61,~00) in
          let:8 a63 = (a61 & 0F) in
          let:8 a64 = (~00 & 0F) in
          let:16 a65 = addWithCarry(!true,a63,a64) in
          advance (5)
          #1A7B
          #instruction: JP   NZ,1A69
          if (!is_zero(a62[7:0])) {
            advance (10)
            A := a48;
            B := a62[7:0];
            C := a59;
            D := 21;
            E := 43;
            H := a57[15:0][15:8];
            L := a57[15:0][7:0];
            SPH := a60[15:8];
            SPL := a60[7:0];
            FlagS := a62[7:0][7];
            FlagZ := is_zero(a62[7:0]);
            FlagA := a65[7:0][4];
            FlagP := parity(a62[7:0]);
            FlagCY := a57[16];
            jump (1A69);
          } else {
            advance (10)
            #1A7E
            #instruction: RET
            let:16 a66 = (1 + a60) in
            let:8 a67 = M[a60] in
            let:16 a68 = (1 + a66) in
            let:8 a69 = M[a66] in
            advance (10)
            A := a48;
            B := a62[7:0];
            C := a59;
            D := 21;
            E := 43;
            H := a57[15:0][15:8];
            L := a57[15:0][7:0];
            SPH := a68[15:8];
            SPL := a68[7:0];
            FlagS := a62[7:0][7];
            FlagZ := is_zero(a62[7:0]);
            FlagA := a65[7:0][4];
            FlagP := parity(a62[7:0]);
            FlagCY := a57[16];
            jump ((a69,a67));
          }
        }
      }
    } else {
      advance (10)
      #080E
      #instruction: CALL 0213
      let:16 a70 = (-1 + (SPH,SPL)) in
      M[a70] := 08;
      let:16 a71 = (-1 + a70) in
      M[a71] := 11;
      #return-to: 0811
      advance (17)
      #0213
      #instruction: XOR  A
      let:8 a72 = (updateBit((a1 >> 01),7,a1[0]) ^ updateBit((a1 >> 01),7,a1[0])) in
      advance (4)
      #0214
      #instruction: LD   DE,2242
      advance (10)
      #0217
      #instruction: JP   021E
      advance (10)
      #021E
      #instruction: LD   (2081),A
      M[2081] := a72;
      advance (13)
      #0221
      #instruction: LD   BC,1602
      advance (10)
      #0224
      #instruction: LD   HL,2806
      advance (10)
      #0227
      #instruction: LD   A,04
      advance (7)
      #0229
      #instruction: PUSH PSW
      let:16 a73 = (-1 + a71) in
      M[a73] := 04;
      let:16 a74 = (-1 + a73) in
      M[a74] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a72[7]),6,is_zero(a72)),4,false),2,parity(a72)),0,false);
      advance (11)
      #022A
      #instruction: PUSH BC
      let:16 a75 = (-1 + a74) in
      M[a75] := 16;
      let:16 a76 = (-1 + a75) in
      M[a76] := 02;
      advance (11)
      #022B
      #instruction: LD   A,(2081)
      let:8 a77 = M[2081] in
      advance (13)
      #022E
      #instruction: AND  A
      let:8 a78 = (a77 & a77) in
      let:8 a79 = (a77 | a77) in
      advance (4)
      #022F
      #instruction: JP   NZ,0242
      if (!is_zero(a78)) {
        advance (10)
        #0242
        #instruction: CALL 147C
        let:16 a80 = (-1 + a76) in
        M[a80] := 02;
        let:16 a81 = (-1 + a80) in
        M[a81] := 45;
        #return-to: 0245
        advance (17)
        #147C
        #instruction: PUSH BC
        let:16 a82 = (-1 + a81) in
        M[a82] := 16;
        let:16 a83 = (-1 + a82) in
        M[a83] := 02;
        advance (11)
        #147D
        #instruction: PUSH HL
        let:16 a84 = (-1 + a83) in
        M[a84] := 28;
        let:16 a85 = (-1 + a84) in
        M[a85] := 06;
        advance (11)
        #147E
        #instruction: LD   A,(HL)
        let:8 a86 = M[2806] in
        advance (7)
        #147F
        #instruction: LD   (DE),A
        M[2242] := a86;
        advance (7)
        #1480
        #instruction: INC  DE
        advance (5)
        #1481
        #instruction: INC  HL
        advance (5)
        #1482
        #instruction: DEC  C
        let:16 a87 = addWithCarry(!true,02,~00) in
        let:8 a88 = (02 & 0F) in
        let:8 a89 = (~00 & 0F) in
        let:16 a90 = addWithCarry(!true,a88,a89) in
        advance (5)
        #1483
        #instruction: JP   NZ,147E
        if (!is_zero(a87[7:0])) {
          advance (10)
          A := a86;
          B := 16;
          C := a87[7:0];
          D := 22;
          E := 43;
          H := 28;
          L := 07;
          SPH := a85[15:8];
          SPL := a85[7:0];
          FlagS := a87[7:0][7];
          FlagZ := is_zero(a87[7:0]);
          FlagA := a90[7:0][4];
          FlagP := parity(a87[7:0]);
          FlagCY := false;
          jump (147E);
        } else {
          advance (10)
          #1486
          #instruction: POP  HL
          let:16 a91 = (1 + a85) in
          let:8 a92 = M[a85] in
          let:16 a93 = (1 + a91) in
          let:8 a94 = M[a91] in
          advance (10)
          #1487
          #instruction: LD   BC,0020
          advance (10)
          #148A
          #instruction: ADD  HL,BC
          let:17 a95 = add17(0020,(a94,a92)) in
          advance (10)
          #148B
          #instruction: POP  BC
          let:16 a96 = (1 + a93) in
          let:8 a97 = M[a93] in
          let:16 a98 = (1 + a96) in
          let:8 a99 = M[a96] in
          advance (10)
          #148C
          #instruction: DEC  B
          let:16 a100 = addWithCarry(!true,a99,~00) in
          let:8 a101 = (a99 & 0F) in
          let:8 a102 = (~00 & 0F) in
          let:16 a103 = addWithCarry(!true,a101,a102) in
          advance (5)
          #148D
          #instruction: JP   NZ,147C
          if (!is_zero(a100[7:0])) {
            advance (10)
            A := a86;
            B := a100[7:0];
            C := a97;
            D := 22;
            E := 43;
            H := a95[15:0][15:8];
            L := a95[15:0][7:0];
            SPH := a98[15:8];
            SPL := a98[7:0];
            FlagS := a100[7:0][7];
            FlagZ := is_zero(a100[7:0]);
            FlagA := a103[7:0][4];
            FlagP := parity(a100[7:0]);
            FlagCY := a95[16];
            jump (147C);
          } else {
            advance (10)
            #1490
            #instruction: RET
            let:16 a104 = (1 + a98) in
            let:8 a105 = M[a98] in
            let:16 a106 = (1 + a104) in
            let:8 a107 = M[a104] in
            advance (10)
            A := a86;
            B := a100[7:0];
            C := a97;
            D := 22;
            E := 43;
            H := a95[15:0][15:8];
            L := a95[15:0][7:0];
            SPH := a106[15:8];
            SPL := a106[7:0];
            FlagS := a100[7:0][7];
            FlagZ := is_zero(a100[7:0]);
            FlagA := a103[7:0][4];
            FlagP := parity(a100[7:0]);
            FlagCY := a95[16];
            jump ((a107,a105));
          }
        }
      } else {
        advance (10)
        #0232
        #instruction: CALL 1A69
        let:16 a108 = (-1 + a76) in
        M[a108] := 02;
        let:16 a109 = (-1 + a108) in
        M[a109] := 35;
        #return-to: 0235
        advance (17)
        #1A69
        #instruction: PUSH BC
        let:16 a110 = (-1 + a109) in
        M[a110] := 16;
        let:16 a111 = (-1 + a110) in
        M[a111] := 02;
        advance (11)
        #1A6A
        #instruction: PUSH HL
        let:16 a112 = (-1 + a111) in
        M[a112] := 28;
        let:16 a113 = (-1 + a112) in
        M[a113] := 06;
        advance (11)
        #1A6B
        #instruction: LD   A,(DE)
        let:8 a114 = M[2242] in
        advance (7)
        #1A6C
        #instruction: OR   (HL)
        let:8 a115 = M[2806] in
        let:8 a116 = (a115 | a114) in
        advance (7)
        #1A6D
        #instruction: LD   (HL),A
        M[2806] := a116;
        advance (7)
        #1A6E
        #instruction: INC  DE
        advance (5)
        #1A6F
        #instruction: INC  HL
        advance (5)
        #1A70
        #instruction: DEC  C
        let:16 a117 = addWithCarry(!true,02,~00) in
        let:8 a118 = (02 & 0F) in
        let:8 a119 = (~00 & 0F) in
        let:16 a120 = addWithCarry(!true,a118,a119) in
        advance (5)
        #1A71
        #instruction: JP   NZ,1A6B
        if (!is_zero(a117[7:0])) {
          advance (10)
          A := a116;
          B := 16;
          C := a117[7:0];
          D := 22;
          E := 43;
          H := 28;
          L := 07;
          SPH := a113[15:8];
          SPL := a113[7:0];
          FlagS := a117[7:0][7];
          FlagZ := is_zero(a117[7:0]);
          FlagA := a120[7:0][4];
          FlagP := parity(a117[7:0]);
          FlagCY := false;
          jump (1A6B);
        } else {
          advance (10)
          #1A74
          #instruction: POP  HL
          let:16 a121 = (1 + a113) in
          let:8 a122 = M[a113] in
          let:16 a123 = (1 + a121) in
          let:8 a124 = M[a121] in
          advance (10)
          #1A75
          #instruction: LD   BC,0020
          advance (10)
          #1A78
          #instruction: ADD  HL,BC
          let:17 a125 = add17(0020,(a124,a122)) in
          advance (10)
          #1A79
          #instruction: POP  BC
          let:16 a126 = (1 + a123) in
          let:8 a127 = M[a123] in
          let:16 a128 = (1 + a126) in
          let:8 a129 = M[a126] in
          advance (10)
          #1A7A
          #instruction: DEC  B
          let:16 a130 = addWithCarry(!true,a129,~00) in
          let:8 a131 = (a129 & 0F) in
          let:8 a132 = (~00 & 0F) in
          let:16 a133 = addWithCarry(!true,a131,a132) in
          advance (5)
          #1A7B
          #instruction: JP   NZ,1A69
          if (!is_zero(a130[7:0])) {
            advance (10)
            A := a116;
            B := a130[7:0];
            C := a127;
            D := 22;
            E := 43;
            H := a125[15:0][15:8];
            L := a125[15:0][7:0];
            SPH := a128[15:8];
            SPL := a128[7:0];
            FlagS := a130[7:0][7];
            FlagZ := is_zero(a130[7:0]);
            FlagA := a133[7:0][4];
            FlagP := parity(a130[7:0]);
            FlagCY := a125[16];
            jump (1A69);
          } else {
            advance (10)
            #1A7E
            #instruction: RET
            let:16 a134 = (1 + a128) in
            let:8 a135 = M[a128] in
            let:16 a136 = (1 + a134) in
            let:8 a137 = M[a134] in
            advance (10)
            A := a116;
            B := a130[7:0];
            C := a127;
            D := 22;
            E := 43;
            H := a125[15:0][15:8];
            L := a125[15:0][7:0];
            SPH := a136[15:8];
            SPL := a136[7:0];
            FlagS := a130[7:0][7];
            FlagZ := is_zero(a130[7:0]);
            FlagA := a133[7:0][4];
            FlagP := parity(a130[7:0]);
            FlagCY := a125[16];
            jump ((a137,a135));
          }
        }
      }
    }

0811:

    #0811
    #instruction: CALL 01CF
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 14;
    #return-to: 0814
    advance (17)
    #01CF
    #instruction: LD   A,01
    advance (7)
    #01D1
    #instruction: LD   B,E0
    advance (7)
    #01D3
    #instruction: LD   HL,2402
    advance (10)
    #01D6
    #instruction: JP   14CC
    advance (10)
    #14CC
    #instruction: PUSH BC
    let:16 a3 = (-1 + a2) in
    M[a3] := E0;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    advance (11)
    #14CD
    #instruction: LD   (HL),A
    M[2402] := 01;
    advance (7)
    #14CE
    #instruction: LD   BC,0020
    advance (10)
    #14D1
    #instruction: ADD  HL,BC
    let:17 a5 = add17(0020,2402) in
    advance (10)
    #14D2
    #instruction: POP  BC
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    #14D3
    #instruction: DEC  B
    let:16 a10 = addWithCarry(!true,a9,~00) in
    let:8 a11 = (a9 & 0F) in
    let:8 a12 = (~00 & 0F) in
    let:16 a13 = addWithCarry(!true,a11,a12) in
    advance (5)
    #14D4
    #instruction: JP   NZ,14CC
    if (!is_zero(a10[7:0])) {
      advance (10)
      A := 01;
      B := a10[7:0];
      C := a7;
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a10[7:0][7];
      FlagZ := is_zero(a10[7:0]);
      FlagA := a13[7:0][4];
      FlagP := parity(a10[7:0]);
      FlagCY := a5[16];
      jump (14CC);
    } else {
      advance (10)
      #14D7
      #instruction: RET
      let:16 a14 = (1 + a8) in
      let:8 a15 = M[a8] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      A := 01;
      B := a10[7:0];
      C := a7;
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a16[15:8];
      SPL := a16[7:0];
      FlagS := a10[7:0][7];
      FlagZ := is_zero(a10[7:0]);
      FlagA := a13[7:0][4];
      FlagP := parity(a10[7:0]);
      FlagCY := a5[16];
      jump ((a17,a15));
    }

0814:

    #0814
    #instruction: CALL 00B1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 17;
    #return-to: 0817
    advance (17)
    #00B1
    #instruction: CALL 0886
    let:16 a3 = (-1 + a2) in
    M[a3] := 00;
    let:16 a4 = (-1 + a3) in
    M[a4] := B4;
    #return-to: 00B4
    advance (17)
    #0886
    #instruction: LD   A,(2067)
    let:8 a5 = M[2067] in
    advance (13)
    #0889
    #instruction: LD   H,A
    advance (5)
    #088A
    #instruction: LD   L,FC
    advance (7)
    #088C
    #instruction: RET
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    A := a5;
    H := a5;
    L := FC;
    SPH := a8[15:8];
    SPL := a8[7:0];
    jump ((a9,a7));

0817:

    #0817
    #instruction: CALL 19D1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 1A;
    #return-to: 081A
    advance (17)
    #19D1
    #instruction: LD   A,01
    advance (7)
    #19D3
    #instruction: LD   (20E9),A
    M[20E9] := 01;
    advance (13)
    #19D6
    #instruction: RET
    let:16 a3 = (1 + a2) in
    let:8 a4 = M[a2] in
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    advance (10)
    A := 01;
    SPH := a5[15:8];
    SPL := a5[7:0];
    jump ((a6,a4));

081A:

    #081A
    #instruction: LD   B,20
    advance (7)
    #081C
    #instruction: CALL 18FA
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 1F;
    #return-to: 081F
    advance (17)
    #18FA
    #instruction: LD   A,(2094)
    let:8 a3 = M[2094] in
    advance (13)
    #18FD
    #instruction: OR   B
    let:8 a4 = (20 | a3) in
    advance (4)
    #18FE
    #instruction: LD   (2094),A
    M[2094] := a4;
    advance (13)
    #1901
    #instruction: OUT  03
    sound_control(Ufo,a4[0]);
    sound_control(Shot,a4[1]);
    sound_control(PlayerDie,a4[2]);
    sound_control(InvaderDie,a4[3]);
    sound_control(ExtraLife,a4[4]);
    advance (10)
    #1903
    #instruction: RET
    let:16 a5 = (1 + a2) in
    let:8 a6 = M[a2] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    A := a4;
    B := 20;
    SPH := a7[15:8];
    SPL := a7[7:0];
    FlagS := a4[7];
    FlagZ := is_zero(a4);
    FlagA := false;
    FlagP := parity(a4);
    FlagCY := false;
    jump ((a8,a6));

081F:

    #081F
    #instruction: CALL 1618
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 22;
    #return-to: 0822
    advance (17)
    #1618
    #instruction: LD   A,(2015)
    let:8 a3 = M[2015] in
    advance (13)
    #161B
    #instruction: CP   FF
    let:16 a4 = addWithCarry(!false,a3,~FF) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~FF & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #161D
    #instruction: RET  NZ
    if (!is_zero(a4[7:0])) {
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (11)
      A := a3;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := !a4[15:8][0];
      jump ((a11,a9));
    } else {
      advance (5)
      #161E
      #instruction: LD   HL,2010
      advance (10)
      #1621
      #instruction: LD   A,(HL)
      let:8 a12 = M[2010] in
      advance (7)
      #1622
      #instruction: INC  HL
      advance (5)
      #1623
      #instruction: LD   B,(HL)
      let:8 a13 = M[2011] in
      advance (7)
      #1624
      #instruction: OR   B
      let:8 a14 = (a13 | a12) in
      advance (4)
      #1625
      #instruction: RET  NZ
      if (!is_zero(a14)) {
        let:16 a15 = (1 + a2) in
        let:8 a16 = M[a2] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (11)
        A := a14;
        B := a13;
        H := 20;
        L := 11;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := false;
        jump ((a18,a16));
      } else {
        advance (5)
        #1626
        #instruction: LD   A,(2025)
        let:8 a19 = M[2025] in
        advance (13)
        #1629
        #instruction: AND  A
        let:8 a20 = (a19 & a19) in
        let:8 a21 = (a19 | a19) in
        advance (4)
        #162A
        #instruction: RET  NZ
        if (!is_zero(a20)) {
          let:16 a22 = (1 + a2) in
          let:8 a23 = M[a2] in
          let:16 a24 = (1 + a22) in
          let:8 a25 = M[a22] in
          advance (11)
          A := a20;
          B := a13;
          H := 20;
          L := 11;
          SPH := a24[15:8];
          SPL := a24[7:0];
          FlagS := a20[7];
          FlagZ := is_zero(a20);
          FlagA := a21[3];
          FlagP := parity(a20);
          FlagCY := false;
          jump ((a25,a23));
        } else {
          advance (5)
          #162B
          #instruction: LD   A,(20EF)
          let:8 a26 = M[20EF] in
          advance (13)
          #162E
          #instruction: AND  A
          let:8 a27 = (a26 & a26) in
          let:8 a28 = (a26 | a26) in
          advance (4)
          #162F
          #instruction: JP   Z,1652
          if (is_zero(a27)) {
            advance (10)
            #1652
            #instruction: LD   HL,2025
            advance (10)
            #1655
            #instruction: LD   (HL),01
            M[2025] := 01;
            advance (10)
            #1657
            #instruction: LD   HL,(20ED)
            let:8 a29 = M[20ED] in
            let:8 a30 = M[20EE] in
            advance (16)
            #165A
            #instruction: INC  HL
            let:16 a31 = (1 + (a30,a29)) in
            advance (5)
            #165B
            #instruction: LD   A,L
            advance (5)
            #165C
            #instruction: CP   7E
            let:16 a32 = addWithCarry(!false,a31[7:0],~7E) in
            let:8 a33 = (a31[7:0] & 0F) in
            let:8 a34 = (~7E & 0F) in
            let:16 a35 = addWithCarry(!false,a33,a34) in
            advance (7)
            #165E
            #instruction: JP   CY,1663
            if (!a32[15:8][0]) {
              advance (10)
              #1663
              #instruction: LD   (20ED),HL
              M[20ED] := a31[7:0];
              M[20EE] := a31[15:8];
              advance (16)
              #1666
              #instruction: LD   A,(HL)
              let:8 a36 = M[a31] in
              advance (7)
              #1667
              #instruction: LD   (201D),A
              M[201D] := a36;
              advance (13)
              #166A
              #instruction: RET
              let:16 a37 = (1 + a2) in
              let:8 a38 = M[a2] in
              let:16 a39 = (1 + a37) in
              let:8 a40 = M[a37] in
              advance (10)
              A := a36;
              B := a13;
              H := a31[15:8];
              L := a31[7:0];
              SPH := a39[15:8];
              SPL := a39[7:0];
              FlagS := a32[7:0][7];
              FlagZ := is_zero(a32[7:0]);
              FlagA := a35[7:0][4];
              FlagP := parity(a32[7:0]);
              FlagCY := !a32[15:8][0];
              jump ((a40,a38));
            } else {
              advance (10)
              #1661
              #instruction: LD   L,74
              advance (7)
              #1663
              #instruction: LD   (20ED),HL
              M[20ED] := 74;
              M[20EE] := a31[15:8];
              advance (16)
              #1666
              #instruction: LD   A,(HL)
              let:8 a41 = M[(a31[15:8],74)] in
              advance (7)
              #1667
              #instruction: LD   (201D),A
              M[201D] := a41;
              advance (13)
              #166A
              #instruction: RET
              let:16 a42 = (1 + a2) in
              let:8 a43 = M[a2] in
              let:16 a44 = (1 + a42) in
              let:8 a45 = M[a42] in
              advance (10)
              A := a41;
              B := a13;
              H := a31[15:8];
              L := 74;
              SPH := a44[15:8];
              SPL := a44[7:0];
              FlagS := a32[7:0][7];
              FlagZ := is_zero(a32[7:0]);
              FlagA := a35[7:0][4];
              FlagP := parity(a32[7:0]);
              FlagCY := !a32[15:8][0];
              jump ((a45,a43));
            }
          } else {
            advance (10)
            #1632
            #instruction: LD   A,(202D)
            let:8 a46 = M[202D] in
            advance (13)
            #1635
            #instruction: AND  A
            let:8 a47 = (a46 & a46) in
            let:8 a48 = (a46 | a46) in
            advance (4)
            #1636
            #instruction: JP   NZ,1648
            if (!is_zero(a47)) {
              advance (10)
              #1648
              #instruction: CALL 17C0
              let:16 a49 = (-1 + a2) in
              M[a49] := 16;
              let:16 a50 = (-1 + a49) in
              M[a50] := 4B;
              #return-to: 164B
              advance (17)
              #17C0
              #instruction: LD   A,(2067)
              let:8 a51 = M[2067] in
              advance (13)
              #17C3
              #instruction: RRCA
              advance (4)
              #17C4
              #instruction: JP   NC,17CA
              if (!a51[0]) {
                advance (10)
                #17CA
                #instruction: IN   02
                advance (10)
                #17CC
                #instruction: RET
                let:16 a52 = (1 + a50) in
                let:8 a53 = M[a50] in
                let:16 a54 = (1 + a52) in
                let:8 a55 = M[a52] in
                advance (10)
                A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
                B := a13;
                H := 20;
                L := 11;
                SPH := a54[15:8];
                SPL := a54[7:0];
                FlagS := a47[7];
                FlagZ := is_zero(a47);
                FlagA := a48[3];
                FlagP := parity(a47);
                FlagCY := a51[0];
                jump ((a55,a53));
              } else {
                advance (10)
                #17C7
                #instruction: IN   01
                advance (10)
                #17C9
                #instruction: RET
                let:16 a56 = (1 + a50) in
                let:8 a57 = M[a50] in
                let:16 a58 = (1 + a56) in
                let:8 a59 = M[a56] in
                advance (10)
                A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
                B := a13;
                H := 20;
                L := 11;
                SPH := a58[15:8];
                SPL := a58[7:0];
                FlagS := a47[7];
                FlagZ := is_zero(a47);
                FlagA := a48[3];
                FlagP := parity(a47);
                FlagCY := a51[0];
                jump ((a59,a57));
              }
            } else {
              advance (10)
              #1639
              #instruction: CALL 17C0
              let:16 a60 = (-1 + a2) in
              M[a60] := 16;
              let:16 a61 = (-1 + a60) in
              M[a61] := 3C;
              #return-to: 163C
              advance (17)
              #17C0
              #instruction: LD   A,(2067)
              let:8 a62 = M[2067] in
              advance (13)
              #17C3
              #instruction: RRCA
              advance (4)
              #17C4
              #instruction: JP   NC,17CA
              if (!a62[0]) {
                advance (10)
                #17CA
                #instruction: IN   02
                advance (10)
                #17CC
                #instruction: RET
                let:16 a63 = (1 + a61) in
                let:8 a64 = M[a61] in
                let:16 a65 = (1 + a63) in
                let:8 a66 = M[a63] in
                advance (10)
                A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
                B := a13;
                H := 20;
                L := 11;
                SPH := a65[15:8];
                SPL := a65[7:0];
                FlagS := a47[7];
                FlagZ := is_zero(a47);
                FlagA := a48[3];
                FlagP := parity(a47);
                FlagCY := a62[0];
                jump ((a66,a64));
              } else {
                advance (10)
                #17C7
                #instruction: IN   01
                advance (10)
                #17C9
                #instruction: RET
                let:16 a67 = (1 + a61) in
                let:8 a68 = M[a61] in
                let:16 a69 = (1 + a67) in
                let:8 a70 = M[a67] in
                advance (10)
                A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
                B := a13;
                H := 20;
                L := 11;
                SPH := a69[15:8];
                SPL := a69[7:0];
                FlagS := a47[7];
                FlagZ := is_zero(a47);
                FlagA := a48[3];
                FlagP := parity(a47);
                FlagCY := a62[0];
                jump ((a70,a68));
              }
            }
          }
        }
      }
    }

0822:

    #0822
    #instruction: CALL 190A
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 25;
    #return-to: 0825
    advance (17)
    #190A
    #instruction: CALL 14D8
    let:16 a3 = (-1 + a2) in
    M[a3] := 19;
    let:16 a4 = (-1 + a3) in
    M[a4] := 0D;
    #return-to: 190D
    advance (17)
    #14D8
    #instruction: LD   A,(2025)
    let:8 a5 = M[2025] in
    advance (13)
    #14DB
    #instruction: CP   05
    let:16 a6 = addWithCarry(!false,a5,~05) in
    let:8 a7 = (a5 & 0F) in
    let:8 a8 = (~05 & 0F) in
    let:16 a9 = addWithCarry(!false,a7,a8) in
    advance (7)
    #14DD
    #instruction: RET  Z
    if (is_zero(a6[7:0])) {
      let:16 a10 = (1 + a4) in
      let:8 a11 = M[a4] in
      let:16 a12 = (1 + a10) in
      let:8 a13 = M[a10] in
      advance (11)
      A := a5;
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagS := a6[7:0][7];
      FlagZ := is_zero(a6[7:0]);
      FlagA := a9[7:0][4];
      FlagP := parity(a6[7:0]);
      FlagCY := !a6[15:8][0];
      jump ((a13,a11));
    } else {
      advance (5)
      #14DE
      #instruction: CP   02
      let:16 a14 = addWithCarry(!false,a5,~02) in
      let:8 a15 = (a5 & 0F) in
      let:8 a16 = (~02 & 0F) in
      let:16 a17 = addWithCarry(!false,a15,a16) in
      advance (7)
      #14E0
      #instruction: RET  NZ
      if (!is_zero(a14[7:0])) {
        let:16 a18 = (1 + a4) in
        let:8 a19 = M[a4] in
        let:16 a20 = (1 + a18) in
        let:8 a21 = M[a18] in
        advance (11)
        A := a5;
        SPH := a20[15:8];
        SPL := a20[7:0];
        FlagS := a14[7:0][7];
        FlagZ := is_zero(a14[7:0]);
        FlagA := a17[7:0][4];
        FlagP := parity(a14[7:0]);
        FlagCY := !a14[15:8][0];
        jump ((a21,a19));
      } else {
        advance (5)
        #14E1
        #instruction: LD   A,(2029)
        let:8 a22 = M[2029] in
        advance (13)
        #14E4
        #instruction: CP   D8
        let:16 a23 = addWithCarry(!false,a22,~D8) in
        let:8 a24 = (a22 & 0F) in
        let:8 a25 = (~D8 & 0F) in
        let:16 a26 = addWithCarry(!false,a24,a25) in
        advance (7)
        #14E6
        #instruction: LD   B,A
        advance (5)
        #14E7
        #instruction: JP   NC,1530
        if (!!a23[15:8][0]) {
          advance (10)
          #1530
          #instruction: LD   A,03
          advance (7)
          #1532
          #instruction: LD   (2025),A
          M[2025] := 03;
          advance (13)
          #1535
          #instruction: JP   154A
          advance (10)
          #154A
          #instruction: XOR  A
          let:8 a27 = (03 ^ 03) in
          advance (4)
          #154B
          #instruction: LD   (2002),A
          M[2002] := a27;
          advance (13)
          #154E
          #instruction: LD   B,F7
          advance (7)
          #1550
          #instruction: JP   19DC
          advance (10)
          #19DC
          #instruction: LD   A,(2094)
          let:8 a28 = M[2094] in
          advance (13)
          #19DF
          #instruction: AND  B
          let:8 a29 = (F7 & a28) in
          let:8 a30 = (F7 | a28) in
          advance (4)
          #19E0
          #instruction: LD   (2094),A
          M[2094] := a29;
          advance (13)
          #19E3
          #instruction: OUT  03
          sound_control(Ufo,a29[0]);
          sound_control(Shot,a29[1]);
          sound_control(PlayerDie,a29[2]);
          sound_control(InvaderDie,a29[3]);
          sound_control(ExtraLife,a29[4]);
          advance (10)
          #19E5
          #instruction: RET
          let:16 a31 = (1 + a4) in
          let:8 a32 = M[a4] in
          let:16 a33 = (1 + a31) in
          let:8 a34 = M[a31] in
          advance (10)
          A := a29;
          B := F7;
          SPH := a33[15:8];
          SPL := a33[7:0];
          FlagS := a29[7];
          FlagZ := is_zero(a29);
          FlagA := a30[3];
          FlagP := parity(a29);
          FlagCY := false;
          jump ((a34,a32));
        } else {
          advance (10)
          #14EA
          #instruction: LD   A,(2002)
          let:8 a35 = M[2002] in
          advance (13)
          #14ED
          #instruction: AND  A
          let:8 a36 = (a35 & a35) in
          let:8 a37 = (a35 | a35) in
          advance (4)
          #14EE
          #instruction: RET  Z
          if (is_zero(a36)) {
            let:16 a38 = (1 + a4) in
            let:8 a39 = M[a4] in
            let:16 a40 = (1 + a38) in
            let:8 a41 = M[a38] in
            advance (11)
            A := a36;
            B := a22;
            SPH := a40[15:8];
            SPL := a40[7:0];
            FlagS := a36[7];
            FlagZ := is_zero(a36);
            FlagA := a37[3];
            FlagP := parity(a36);
            FlagCY := false;
            jump ((a41,a39));
          } else {
            advance (5)
            #14EF
            #instruction: LD   A,B
            advance (5)
            #14F0
            #instruction: CP   CE
            let:16 a42 = addWithCarry(!false,a22,~CE) in
            let:8 a43 = (a22 & 0F) in
            let:8 a44 = (~CE & 0F) in
            let:16 a45 = addWithCarry(!false,a43,a44) in
            advance (7)
            #14F2
            #instruction: JP   NC,1579
            if (!!a42[15:8][0]) {
              advance (10)
              #1579
              #instruction: LD   A,01
              advance (7)
              #157B
              #instruction: LD   (2085),A
              M[2085] := 01;
              advance (13)
              #157E
              #instruction: JP   1545
              advance (10)
              A := 01;
              B := a22;
              SPH := a4[15:8];
              SPL := a4[7:0];
              FlagS := a42[7:0][7];
              FlagZ := is_zero(a42[7:0]);
              FlagA := a45[7:0][4];
              FlagP := parity(a42[7:0]);
              FlagCY := !a42[15:8][0];
              jump (1545);
            } else {
              advance (10)
              #14F5
              #instruction: ADD  06
              let:16 a46 = addWithCarry(false,06,a22) in
              let:8 a47 = (06 & 0F) in
              let:8 a48 = (a22 & 0F) in
              let:16 a49 = addWithCarry(false,a47,a48) in
              advance (7)
              #14F7
              #instruction: LD   B,A
              advance (5)
              #14F8
              #instruction: LD   A,(2009)
              let:8 a50 = M[2009] in
              advance (13)
              #14FB
              #instruction: CP   90
              let:16 a51 = addWithCarry(!false,a50,~90) in
              let:8 a52 = (a50 & 0F) in
              let:8 a53 = (~90 & 0F) in
              let:16 a54 = addWithCarry(!false,a52,a53) in
              advance (7)
              #14FD
              #instruction: JP   NC,1504
              if (!!a51[15:8][0]) {
                advance (10)
                #1504
                #instruction: LD   L,B
                advance (5)
                #1505
                #instruction: CALL 1562
                let:16 a55 = (-1 + a4) in
                M[a55] := 15;
                let:16 a56 = (-1 + a55) in
                M[a56] := 08;
                #return-to: 1508
                advance (17)
                #1562
                #instruction: LD   A,(2009)
                let:8 a57 = M[2009] in
                advance (13)
                #1565
                #instruction: LD   H,L
                advance (5)
                #1566
                #instruction: CALL 1554
                let:16 a58 = (-1 + a56) in
                M[a58] := 15;
                let:16 a59 = (-1 + a58) in
                M[a59] := 69;
                #return-to: 1569
                advance (17)
                #1554
                #instruction: LD   C,00
                advance (7)
                #1556
                #instruction: CP   H
                let:16 a60 = addWithCarry(!false,a57,~a46[7:0]) in
                let:8 a61 = (a57 & 0F) in
                let:8 a62 = (~a46[7:0] & 0F) in
                let:16 a63 = addWithCarry(!false,a61,a62) in
                advance (4)
                #1557
                #instruction: CALL NC,1590
                if (!!a60[15:8][0]) {
                  let:16 a64 = (-1 + a59) in
                  M[a64] := 15;
                  let:16 a65 = (-1 + a64) in
                  M[a65] := 5A;
                  #return-to: 155A
                  advance (17)
                  #1590
                  #instruction: INC  C
                  let:16 a66 = addWithCarry(true,00,00) in
                  let:8 a67 = (00 & 0F) in
                  let:8 a68 = (00 & 0F) in
                  let:16 a69 = addWithCarry(true,a67,a68) in
                  advance (5)
                  #1591
                  #instruction: ADD  10
                  let:16 a70 = addWithCarry(false,10,a57) in
                  let:8 a71 = (10 & 0F) in
                  let:8 a72 = (a57 & 0F) in
                  let:16 a73 = addWithCarry(false,a71,a72) in
                  advance (7)
                  #1593
                  #instruction: JP   MI,1590
                  if (a70[7:0][7]) {
                    advance (10)
                    A := a70[7:0];
                    B := a46[7:0];
                    C := a66[7:0];
                    H := a46[7:0];
                    L := a46[7:0];
                    SPH := a65[15:8];
                    SPL := a65[7:0];
                    FlagS := a70[7:0][7];
                    FlagZ := is_zero(a70[7:0]);
                    FlagA := a73[7:0][4];
                    FlagP := parity(a70[7:0]);
                    FlagCY := a70[15:8][0];
                    jump (1590);
                  } else {
                    advance (10)
                    #1596
                    #instruction: RET
                    let:16 a74 = (1 + a65) in
                    let:8 a75 = M[a65] in
                    let:16 a76 = (1 + a74) in
                    let:8 a77 = M[a74] in
                    advance (10)
                    A := a70[7:0];
                    B := a46[7:0];
                    C := a66[7:0];
                    H := a46[7:0];
                    L := a46[7:0];
                    SPH := a76[15:8];
                    SPL := a76[7:0];
                    FlagS := a70[7:0][7];
                    FlagZ := is_zero(a70[7:0]);
                    FlagA := a73[7:0][4];
                    FlagP := parity(a70[7:0]);
                    FlagCY := a70[15:8][0];
                    jump ((a77,a75));
                  }
                } else {
                  advance (11)
                  A := a57;
                  B := a46[7:0];
                  C := 00;
                  H := a46[7:0];
                  L := a46[7:0];
                  SPH := a59[15:8];
                  SPL := a59[7:0];
                  FlagS := a60[7:0][7];
                  FlagZ := is_zero(a60[7:0]);
                  FlagA := a63[7:0][4];
                  FlagP := parity(a60[7:0]);
                  FlagCY := !a60[15:8][0];
                  jump (155A);
                }
              } else {
                advance (10)
                #1500
                #instruction: CP   B
                let:16 a78 = addWithCarry(!false,a50,~a46[7:0]) in
                let:8 a79 = (a50 & 0F) in
                let:8 a80 = (~a46[7:0] & 0F) in
                let:16 a81 = addWithCarry(!false,a79,a80) in
                advance (4)
                #1501
                #instruction: JP   NC,1530
                if (!!a78[15:8][0]) {
                  advance (10)
                  #1530
                  #instruction: LD   A,03
                  advance (7)
                  #1532
                  #instruction: LD   (2025),A
                  M[2025] := 03;
                  advance (13)
                  #1535
                  #instruction: JP   154A
                  advance (10)
                  #154A
                  #instruction: XOR  A
                  let:8 a82 = (03 ^ 03) in
                  advance (4)
                  #154B
                  #instruction: LD   (2002),A
                  M[2002] := a82;
                  advance (13)
                  #154E
                  #instruction: LD   B,F7
                  advance (7)
                  #1550
                  #instruction: JP   19DC
                  advance (10)
                  #19DC
                  #instruction: LD   A,(2094)
                  let:8 a83 = M[2094] in
                  advance (13)
                  #19DF
                  #instruction: AND  B
                  let:8 a84 = (F7 & a83) in
                  let:8 a85 = (F7 | a83) in
                  advance (4)
                  #19E0
                  #instruction: LD   (2094),A
                  M[2094] := a84;
                  advance (13)
                  #19E3
                  #instruction: OUT  03
                  sound_control(Ufo,a84[0]);
                  sound_control(Shot,a84[1]);
                  sound_control(PlayerDie,a84[2]);
                  sound_control(InvaderDie,a84[3]);
                  sound_control(ExtraLife,a84[4]);
                  advance (10)
                  #19E5
                  #instruction: RET
                  let:16 a86 = (1 + a4) in
                  let:8 a87 = M[a4] in
                  let:16 a88 = (1 + a86) in
                  let:8 a89 = M[a86] in
                  advance (10)
                  A := a84;
                  B := F7;
                  SPH := a88[15:8];
                  SPL := a88[7:0];
                  FlagS := a84[7];
                  FlagZ := is_zero(a84);
                  FlagA := a85[3];
                  FlagP := parity(a84);
                  FlagCY := false;
                  jump ((a89,a87));
                } else {
                  advance (10)
                  #1504
                  #instruction: LD   L,B
                  advance (5)
                  #1505
                  #instruction: CALL 1562
                  let:16 a90 = (-1 + a4) in
                  M[a90] := 15;
                  let:16 a91 = (-1 + a90) in
                  M[a91] := 08;
                  #return-to: 1508
                  advance (17)
                  #1562
                  #instruction: LD   A,(2009)
                  let:8 a92 = M[2009] in
                  advance (13)
                  #1565
                  #instruction: LD   H,L
                  advance (5)
                  #1566
                  #instruction: CALL 1554
                  let:16 a93 = (-1 + a91) in
                  M[a93] := 15;
                  let:16 a94 = (-1 + a93) in
                  M[a94] := 69;
                  #return-to: 1569
                  advance (17)
                  #1554
                  #instruction: LD   C,00
                  advance (7)
                  #1556
                  #instruction: CP   H
                  let:16 a95 = addWithCarry(!false,a92,~a46[7:0]) in
                  let:8 a96 = (a92 & 0F) in
                  let:8 a97 = (~a46[7:0] & 0F) in
                  let:16 a98 = addWithCarry(!false,a96,a97) in
                  advance (4)
                  #1557
                  #instruction: CALL NC,1590
                  if (!!a95[15:8][0]) {
                    let:16 a99 = (-1 + a94) in
                    M[a99] := 15;
                    let:16 a100 = (-1 + a99) in
                    M[a100] := 5A;
                    #return-to: 155A
                    advance (17)
                    #1590
                    #instruction: INC  C
                    let:16 a101 = addWithCarry(true,00,00) in
                    let:8 a102 = (00 & 0F) in
                    let:8 a103 = (00 & 0F) in
                    let:16 a104 = addWithCarry(true,a102,a103) in
                    advance (5)
                    #1591
                    #instruction: ADD  10
                    let:16 a105 = addWithCarry(false,10,a92) in
                    let:8 a106 = (10 & 0F) in
                    let:8 a107 = (a92 & 0F) in
                    let:16 a108 = addWithCarry(false,a106,a107) in
                    advance (7)
                    #1593
                    #instruction: JP   MI,1590
                    if (a105[7:0][7]) {
                      advance (10)
                      A := a105[7:0];
                      B := a46[7:0];
                      C := a101[7:0];
                      H := a46[7:0];
                      L := a46[7:0];
                      SPH := a100[15:8];
                      SPL := a100[7:0];
                      FlagS := a105[7:0][7];
                      FlagZ := is_zero(a105[7:0]);
                      FlagA := a108[7:0][4];
                      FlagP := parity(a105[7:0]);
                      FlagCY := a105[15:8][0];
                      jump (1590);
                    } else {
                      advance (10)
                      #1596
                      #instruction: RET
                      let:16 a109 = (1 + a100) in
                      let:8 a110 = M[a100] in
                      let:16 a111 = (1 + a109) in
                      let:8 a112 = M[a109] in
                      advance (10)
                      A := a105[7:0];
                      B := a46[7:0];
                      C := a101[7:0];
                      H := a46[7:0];
                      L := a46[7:0];
                      SPH := a111[15:8];
                      SPL := a111[7:0];
                      FlagS := a105[7:0][7];
                      FlagZ := is_zero(a105[7:0]);
                      FlagA := a108[7:0][4];
                      FlagP := parity(a105[7:0]);
                      FlagCY := a105[15:8][0];
                      jump ((a112,a110));
                    }
                  } else {
                    advance (11)
                    A := a92;
                    B := a46[7:0];
                    C := 00;
                    H := a46[7:0];
                    L := a46[7:0];
                    SPH := a94[15:8];
                    SPL := a94[7:0];
                    FlagS := a95[7:0][7];
                    FlagZ := is_zero(a95[7:0]);
                    FlagA := a98[7:0][4];
                    FlagP := parity(a95[7:0]);
                    FlagCY := !a95[15:8][0];
                    jump (155A);
                  }
                }
              }
            }
          }
        }
      }
    }

0825:

    #0825
    #instruction: CALL 15F3
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 28;
    #return-to: 0828
    advance (17)
    #15F3
    #instruction: CALL 1611
    let:16 a3 = (-1 + a2) in
    M[a3] := 15;
    let:16 a4 = (-1 + a3) in
    M[a4] := F6;
    #return-to: 15F6
    advance (17)
    #1611
    #instruction: LD   L,00
    advance (7)
    #1613
    #instruction: LD   A,(2067)
    let:8 a5 = M[2067] in
    advance (13)
    #1616
    #instruction: LD   H,A
    advance (5)
    #1617
    #instruction: RET
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    A := a5;
    H := a5;
    L := 00;
    SPH := a8[15:8];
    SPL := a8[7:0];
    jump ((a9,a7));

0828:

    #0828
    #instruction: CALL 0988
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2B;
    #return-to: 082B
    advance (17)
    #0988
    #instruction: CALL 09CA
    let:16 a3 = (-1 + a2) in
    M[a3] := 09;
    let:16 a4 = (-1 + a3) in
    M[a4] := 8B;
    #return-to: 098B
    advance (17)
    #09CA
    #instruction: LD   A,(2067)
    let:8 a5 = M[2067] in
    advance (13)
    #09CD
    #instruction: RRCA
    advance (4)
    #09CE
    #instruction: LD   HL,20F8
    advance (10)
    #09D1
    #instruction: RET  CY
    if (a5[0]) {
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (11)
      A := updateBit((a5 >> 01),7,a5[0]);
      H := 20;
      L := F8;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagCY := a5[0];
      jump ((a9,a7));
    } else {
      advance (5)
      #09D2
      #instruction: LD   HL,20FC
      advance (10)
      #09D5
      #instruction: RET
      let:16 a10 = (1 + a4) in
      let:8 a11 = M[a4] in
      let:16 a12 = (1 + a10) in
      let:8 a13 = M[a10] in
      advance (10)
      A := updateBit((a5 >> 01),7,a5[0]);
      H := 20;
      L := FC;
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagCY := a5[0];
      jump ((a13,a11));
    }

082B:

    #082B
    #instruction: LD   A,(2082)
    let:8 a1 = M[2082] in
    advance (13)
    #082E
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #082F
    #instruction: JP   Z,09EF
    if (is_zero(a2)) {
      advance (10)
      #09EF
      #instruction: CALL 0A3C
      let:16 a4 = (-1 + (SPH,SPL)) in
      M[a4] := 09;
      let:16 a5 = (-1 + a4) in
      M[a5] := F2;
      #return-to: 09F2
      advance (17)
      #0A3C
      #instruction: CALL 0A59
      let:16 a6 = (-1 + a5) in
      M[a6] := 0A;
      let:16 a7 = (-1 + a6) in
      M[a7] := 3F;
      #return-to: 0A3F
      advance (17)
      #0A59
      #instruction: LD   A,(2015)
      let:8 a8 = M[2015] in
      advance (13)
      #0A5C
      #instruction: CP   FF
      let:16 a9 = addWithCarry(!false,a8,~FF) in
      let:8 a10 = (a8 & 0F) in
      let:8 a11 = (~FF & 0F) in
      let:16 a12 = addWithCarry(!false,a10,a11) in
      advance (7)
      #0A5E
      #instruction: RET
      let:16 a13 = (1 + a7) in
      let:8 a14 = M[a7] in
      let:16 a15 = (1 + a13) in
      let:8 a16 = M[a13] in
      advance (10)
      A := a8;
      SPH := a15[15:8];
      SPL := a15[7:0];
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      FlagCY := !a9[15:8][0];
      jump ((a16,a14));
    } else {
      advance (10)
      #0832
      #instruction: CALL 170E
      let:16 a17 = (-1 + (SPH,SPL)) in
      M[a17] := 08;
      let:16 a18 = (-1 + a17) in
      M[a18] := 35;
      #return-to: 0835
      advance (17)
      #170E
      #instruction: CALL 09CA
      let:16 a19 = (-1 + a18) in
      M[a19] := 17;
      let:16 a20 = (-1 + a19) in
      M[a20] := 11;
      #return-to: 1711
      advance (17)
      #09CA
      #instruction: LD   A,(2067)
      let:8 a21 = M[2067] in
      advance (13)
      #09CD
      #instruction: RRCA
      advance (4)
      #09CE
      #instruction: LD   HL,20F8
      advance (10)
      #09D1
      #instruction: RET  CY
      if (a21[0]) {
        let:16 a22 = (1 + a20) in
        let:8 a23 = M[a20] in
        let:16 a24 = (1 + a22) in
        let:8 a25 = M[a22] in
        advance (11)
        A := updateBit((a21 >> 01),7,a21[0]);
        H := 20;
        L := F8;
        SPH := a24[15:8];
        SPL := a24[7:0];
        FlagS := a2[7];
        FlagZ := is_zero(a2);
        FlagA := a3[3];
        FlagP := parity(a2);
        FlagCY := a21[0];
        jump ((a25,a23));
      } else {
        advance (5)
        #09D2
        #instruction: LD   HL,20FC
        advance (10)
        #09D5
        #instruction: RET
        let:16 a26 = (1 + a20) in
        let:8 a27 = M[a20] in
        let:16 a28 = (1 + a26) in
        let:8 a29 = M[a26] in
        advance (10)
        A := updateBit((a21 >> 01),7,a21[0]);
        H := 20;
        L := FC;
        SPH := a28[15:8];
        SPL := a28[7:0];
        FlagS := a2[7];
        FlagZ := is_zero(a2);
        FlagA := a3[3];
        FlagP := parity(a2);
        FlagCY := a21[0];
        jump ((a29,a27));
      }
    }

0835:

    #0835
    #instruction: CALL 0935
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 38;
    #return-to: 0838
    advance (17)
    #0935
    #instruction: CALL 1910
    let:16 a3 = (-1 + a2) in
    M[a3] := 09;
    let:16 a4 = (-1 + a3) in
    M[a4] := 38;
    #return-to: 0938
    advance (17)
    #1910
    #instruction: LD   HL,20E7
    advance (10)
    #1913
    #instruction: LD   A,(2067)
    let:8 a5 = M[2067] in
    advance (13)
    #1916
    #instruction: RRCA
    advance (4)
    #1917
    #instruction: RET  CY
    if (a5[0]) {
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (11)
      A := updateBit((a5 >> 01),7,a5[0]);
      H := 20;
      L := E7;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagCY := a5[0];
      jump ((a9,a7));
    } else {
      advance (5)
      #1918
      #instruction: INC  HL
      advance (5)
      #1919
      #instruction: RET
      let:16 a10 = (1 + a4) in
      let:8 a11 = M[a4] in
      let:16 a12 = (1 + a10) in
      let:8 a13 = M[a10] in
      advance (10)
      A := updateBit((a5 >> 01),7,a5[0]);
      H := 20;
      L := E8;
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagCY := a5[0];
      jump ((a13,a11));
    }

0838:

    #0838
    #instruction: CALL 08D8
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3B;
    #return-to: 083B
    advance (17)
    #08D8
    #instruction: LD   A,(2082)
    let:8 a3 = M[2082] in
    advance (13)
    #08DB
    #instruction: CP   09
    let:16 a4 = addWithCarry(!false,a3,~09) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~09 & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #08DD
    #instruction: RET  NC
    if (!!a4[15:8][0]) {
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (11)
      A := a3;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := !a4[15:8][0];
      jump ((a11,a9));
    } else {
      advance (5)
      #08DE
      #instruction: LD   A,FB
      advance (7)
      #08E0
      #instruction: LD   (207E),A
      M[207E] := FB;
      advance (13)
      #08E3
      #instruction: RET
      let:16 a12 = (1 + a2) in
      let:8 a13 = M[a2] in
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      advance (10)
      A := FB;
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := !a4[15:8][0];
      jump ((a15,a13));
    }

083B:

    #083B
    #instruction: CALL 172C
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3E;
    #return-to: 083E
    advance (17)
    #172C
    #instruction: LD   A,(2025)
    let:8 a3 = M[2025] in
    advance (13)
    #172F
    #instruction: CP   00
    let:16 a4 = addWithCarry(!false,a3,~00) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~00 & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #1731
    #instruction: JP   NZ,1739
    if (!is_zero(a4[7:0])) {
      advance (10)
      #1739
      #instruction: LD   B,02
      advance (7)
      #173B
      #instruction: JP   18FA
      advance (10)
      #18FA
      #instruction: LD   A,(2094)
      let:8 a8 = M[2094] in
      advance (13)
      #18FD
      #instruction: OR   B
      let:8 a9 = (02 | a8) in
      advance (4)
      #18FE
      #instruction: LD   (2094),A
      M[2094] := a9;
      advance (13)
      #1901
      #instruction: OUT  03
      sound_control(Ufo,a9[0]);
      sound_control(Shot,a9[1]);
      sound_control(PlayerDie,a9[2]);
      sound_control(InvaderDie,a9[3]);
      sound_control(ExtraLife,a9[4]);
      advance (10)
      #1903
      #instruction: RET
      let:16 a10 = (1 + a2) in
      let:8 a11 = M[a2] in
      let:16 a12 = (1 + a10) in
      let:8 a13 = M[a10] in
      advance (10)
      A := a9;
      B := 02;
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagS := a9[7];
      FlagZ := is_zero(a9);
      FlagA := false;
      FlagP := parity(a9);
      FlagCY := false;
      jump ((a13,a11));
    } else {
      advance (10)
      #1734
      #instruction: LD   B,FD
      advance (7)
      #1736
      #instruction: JP   19DC
      advance (10)
      #19DC
      #instruction: LD   A,(2094)
      let:8 a14 = M[2094] in
      advance (13)
      #19DF
      #instruction: AND  B
      let:8 a15 = (FD & a14) in
      let:8 a16 = (FD | a14) in
      advance (4)
      #19E0
      #instruction: LD   (2094),A
      M[2094] := a15;
      advance (13)
      #19E3
      #instruction: OUT  03
      sound_control(Ufo,a15[0]);
      sound_control(Shot,a15[1]);
      sound_control(PlayerDie,a15[2]);
      sound_control(InvaderDie,a15[3]);
      sound_control(ExtraLife,a15[4]);
      advance (10)
      #19E5
      #instruction: RET
      let:16 a17 = (1 + a2) in
      let:8 a18 = M[a2] in
      let:16 a19 = (1 + a17) in
      let:8 a20 = M[a17] in
      advance (10)
      A := a15;
      B := FD;
      SPH := a19[15:8];
      SPL := a19[7:0];
      FlagS := a15[7];
      FlagZ := is_zero(a15);
      FlagA := a16[3];
      FlagP := parity(a15);
      FlagCY := false;
      jump ((a20,a18));
    }

083E:

    #083E
    #instruction: CALL 0A59
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 41;
    #return-to: 0841
    advance (17)
    #0A59
    #instruction: LD   A,(2015)
    let:8 a3 = M[2015] in
    advance (13)
    #0A5C
    #instruction: CP   FF
    let:16 a4 = addWithCarry(!false,a3,~FF) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~FF & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #0A5E
    #instruction: RET
    let:16 a8 = (1 + a2) in
    let:8 a9 = M[a2] in
    let:16 a10 = (1 + a8) in
    let:8 a11 = M[a8] in
    advance (10)
    A := a3;
    SPH := a10[15:8];
    SPL := a10[7:0];
    FlagS := a4[7:0][7];
    FlagZ := is_zero(a4[7:0]);
    FlagA := a7[7:0][4];
    FlagP := parity(a4[7:0]);
    FlagCY := !a4[15:8][0];
    jump ((a11,a9));

0841:

    #0841
    #instruction: JP   Z,0849
    if (FlagZ) {
      advance (10)
      jump (0849);
    } else {
      advance (10)
      #0844
      #instruction: LD   B,04
      advance (7)
      #0846
      #instruction: CALL 18FA
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 08;
      let:16 a2 = (-1 + a1) in
      M[a2] := 49;
      #return-to: 0849
      advance (17)
      #18FA
      #instruction: LD   A,(2094)
      let:8 a3 = M[2094] in
      advance (13)
      #18FD
      #instruction: OR   B
      let:8 a4 = (04 | a3) in
      advance (4)
      #18FE
      #instruction: LD   (2094),A
      M[2094] := a4;
      advance (13)
      #1901
      #instruction: OUT  03
      sound_control(Ufo,a4[0]);
      sound_control(Shot,a4[1]);
      sound_control(PlayerDie,a4[2]);
      sound_control(InvaderDie,a4[3]);
      sound_control(ExtraLife,a4[4]);
      advance (10)
      #1903
      #instruction: RET
      let:16 a5 = (1 + a2) in
      let:8 a6 = M[a2] in
      let:16 a7 = (1 + a5) in
      let:8 a8 = M[a5] in
      advance (10)
      A := a4;
      B := 04;
      SPH := a7[15:8];
      SPL := a7[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := false;
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a8,a6));
    }

0849:

    #0849
    #instruction: CALL 1775
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4C;
    #return-to: 084C
    advance (17)
    #1775
    #instruction: LD   A,(2095)
    let:8 a3 = M[2095] in
    advance (13)
    #1778
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #1779
    #instruction: JP   Z,17AA
    if (is_zero(a4)) {
      advance (10)
      #17AA
      #instruction: LD   HL,2099
      advance (10)
      #17AD
      #instruction: DEC  (HL)
      let:8 a6 = M[2099] in
      let:16 a7 = addWithCarry(!true,a6,~00) in
      let:8 a8 = (a6 & 0F) in
      let:8 a9 = (~00 & 0F) in
      let:16 a10 = addWithCarry(!true,a8,a9) in
      M[2099] := a7[7:0];
      advance (10)
      #17AE
      #instruction: RET  NZ
      if (!is_zero(a7[7:0])) {
        let:16 a11 = (1 + a2) in
        let:8 a12 = M[a2] in
        let:16 a13 = (1 + a11) in
        let:8 a14 = M[a11] in
        advance (11)
        A := a4;
        H := 20;
        L := 99;
        SPH := a13[15:8];
        SPL := a13[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := false;
        jump ((a14,a12));
      } else {
        advance (5)
        #17AF
        #instruction: LD   B,EF
        advance (7)
        #17B1
        #instruction: JP   19DC
        advance (10)
        #19DC
        #instruction: LD   A,(2094)
        let:8 a15 = M[2094] in
        advance (13)
        #19DF
        #instruction: AND  B
        let:8 a16 = (EF & a15) in
        let:8 a17 = (EF | a15) in
        advance (4)
        #19E0
        #instruction: LD   (2094),A
        M[2094] := a16;
        advance (13)
        #19E3
        #instruction: OUT  03
        sound_control(Ufo,a16[0]);
        sound_control(Shot,a16[1]);
        sound_control(PlayerDie,a16[2]);
        sound_control(InvaderDie,a16[3]);
        sound_control(ExtraLife,a16[4]);
        advance (10)
        #19E5
        #instruction: RET
        let:16 a18 = (1 + a2) in
        let:8 a19 = M[a2] in
        let:16 a20 = (1 + a18) in
        let:8 a21 = M[a18] in
        advance (10)
        A := a16;
        B := EF;
        H := 20;
        L := 99;
        SPH := a20[15:8];
        SPL := a20[7:0];
        FlagS := a16[7];
        FlagZ := is_zero(a16);
        FlagA := a17[3];
        FlagP := parity(a16);
        FlagCY := false;
        jump ((a21,a19));
      }
    } else {
      advance (10)
      #177C
      #instruction: LD   HL,1A11
      advance (10)
      #177F
      #instruction: LD   DE,1A21
      advance (10)
      #1782
      #instruction: LD   A,(2082)
      let:8 a22 = M[2082] in
      advance (13)
      #1785
      #instruction: CP   (HL)
      let:16 a23 = addWithCarry(!false,a22,~32) in
      let:8 a24 = (a22 & 0F) in
      let:8 a25 = (~32 & 0F) in
      let:16 a26 = addWithCarry(!false,a24,a25) in
      advance (7)
      #1786
      #instruction: JP   NC,178E
      if (!!a23[15:8][0]) {
        advance (10)
        #178E
        #instruction: LD   A,(DE)
        advance (7)
        #178F
        #instruction: LD   (2097),A
        M[2097] := 34;
        advance (13)
        #1792
        #instruction: LD   HL,2098
        advance (10)
        #1795
        #instruction: LD   A,(HL)
        let:8 a27 = M[2098] in
        advance (7)
        #1796
        #instruction: AND  30
        let:8 a28 = (30 & a27) in
        let:8 a29 = (30 | a27) in
        advance (7)
        #1798
        #instruction: LD   B,A
        advance (5)
        #1799
        #instruction: LD   A,(HL)
        let:8 a30 = M[2098] in
        advance (7)
        #179A
        #instruction: AND  0F
        let:8 a31 = (0F & a30) in
        let:8 a32 = (0F | a30) in
        advance (7)
        #179C
        #instruction: RLCA
        advance (4)
        #179D
        #instruction: CP   10
        let:16 a33 = addWithCarry(!false,updateBit((a31 << 01),0,a31[7]),~10) in
        let:8 a34 = (updateBit((a31 << 01),0,a31[7]) & 0F) in
        let:8 a35 = (~10 & 0F) in
        let:16 a36 = addWithCarry(!false,a34,a35) in
        advance (7)
        #179F
        #instruction: JP   NZ,17A4
        if (!is_zero(a33[7:0])) {
          advance (10)
          #17A4
          #instruction: OR   B
          let:8 a37 = (a28 | updateBit((a31 << 01),0,a31[7])) in
          advance (4)
          #17A5
          #instruction: LD   (HL),A
          M[2098] := a37;
          advance (7)
          #17A6
          #instruction: XOR  A
          let:8 a38 = (a37 ^ a37) in
          advance (4)
          #17A7
          #instruction: LD   (2095),A
          M[2095] := a38;
          advance (13)
          #17AA
          #instruction: LD   HL,2099
          advance (10)
          #17AD
          #instruction: DEC  (HL)
          let:8 a39 = M[2099] in
          let:16 a40 = addWithCarry(!true,a39,~00) in
          let:8 a41 = (a39 & 0F) in
          let:8 a42 = (~00 & 0F) in
          let:16 a43 = addWithCarry(!true,a41,a42) in
          M[2099] := a40[7:0];
          advance (10)
          #17AE
          #instruction: RET  NZ
          if (!is_zero(a40[7:0])) {
            let:16 a44 = (1 + a2) in
            let:8 a45 = M[a2] in
            let:16 a46 = (1 + a44) in
            let:8 a47 = M[a44] in
            advance (11)
            A := a38;
            B := a28;
            D := 1A;
            E := 21;
            H := 20;
            L := 99;
            SPH := a46[15:8];
            SPL := a46[7:0];
            FlagS := a40[7:0][7];
            FlagZ := is_zero(a40[7:0]);
            FlagA := a43[7:0][4];
            FlagP := parity(a40[7:0]);
            FlagCY := false;
            jump ((a47,a45));
          } else {
            advance (5)
            #17AF
            #instruction: LD   B,EF
            advance (7)
            #17B1
            #instruction: JP   19DC
            advance (10)
            #19DC
            #instruction: LD   A,(2094)
            let:8 a48 = M[2094] in
            advance (13)
            #19DF
            #instruction: AND  B
            let:8 a49 = (EF & a48) in
            let:8 a50 = (EF | a48) in
            advance (4)
            #19E0
            #instruction: LD   (2094),A
            M[2094] := a49;
            advance (13)
            #19E3
            #instruction: OUT  03
            sound_control(Ufo,a49[0]);
            sound_control(Shot,a49[1]);
            sound_control(PlayerDie,a49[2]);
            sound_control(InvaderDie,a49[3]);
            sound_control(ExtraLife,a49[4]);
            advance (10)
            #19E5
            #instruction: RET
            let:16 a51 = (1 + a2) in
            let:8 a52 = M[a2] in
            let:16 a53 = (1 + a51) in
            let:8 a54 = M[a51] in
            advance (10)
            A := a49;
            B := EF;
            D := 1A;
            E := 21;
            H := 20;
            L := 99;
            SPH := a53[15:8];
            SPL := a53[7:0];
            FlagS := a49[7];
            FlagZ := is_zero(a49);
            FlagA := a50[3];
            FlagP := parity(a49);
            FlagCY := false;
            jump ((a54,a52));
          }
        } else {
          advance (10)
          #17A2
          #instruction: LD   A,01
          advance (7)
          #17A4
          #instruction: OR   B
          let:8 a55 = (a28 | 01) in
          advance (4)
          #17A5
          #instruction: LD   (HL),A
          M[2098] := a55;
          advance (7)
          #17A6
          #instruction: XOR  A
          let:8 a56 = (a55 ^ a55) in
          advance (4)
          #17A7
          #instruction: LD   (2095),A
          M[2095] := a56;
          advance (13)
          #17AA
          #instruction: LD   HL,2099
          advance (10)
          #17AD
          #instruction: DEC  (HL)
          let:8 a57 = M[2099] in
          let:16 a58 = addWithCarry(!true,a57,~00) in
          let:8 a59 = (a57 & 0F) in
          let:8 a60 = (~00 & 0F) in
          let:16 a61 = addWithCarry(!true,a59,a60) in
          M[2099] := a58[7:0];
          advance (10)
          #17AE
          #instruction: RET  NZ
          if (!is_zero(a58[7:0])) {
            let:16 a62 = (1 + a2) in
            let:8 a63 = M[a2] in
            let:16 a64 = (1 + a62) in
            let:8 a65 = M[a62] in
            advance (11)
            A := a56;
            B := a28;
            D := 1A;
            E := 21;
            H := 20;
            L := 99;
            SPH := a64[15:8];
            SPL := a64[7:0];
            FlagS := a58[7:0][7];
            FlagZ := is_zero(a58[7:0]);
            FlagA := a61[7:0][4];
            FlagP := parity(a58[7:0]);
            FlagCY := false;
            jump ((a65,a63));
          } else {
            advance (5)
            #17AF
            #instruction: LD   B,EF
            advance (7)
            #17B1
            #instruction: JP   19DC
            advance (10)
            #19DC
            #instruction: LD   A,(2094)
            let:8 a66 = M[2094] in
            advance (13)
            #19DF
            #instruction: AND  B
            let:8 a67 = (EF & a66) in
            let:8 a68 = (EF | a66) in
            advance (4)
            #19E0
            #instruction: LD   (2094),A
            M[2094] := a67;
            advance (13)
            #19E3
            #instruction: OUT  03
            sound_control(Ufo,a67[0]);
            sound_control(Shot,a67[1]);
            sound_control(PlayerDie,a67[2]);
            sound_control(InvaderDie,a67[3]);
            sound_control(ExtraLife,a67[4]);
            advance (10)
            #19E5
            #instruction: RET
            let:16 a69 = (1 + a2) in
            let:8 a70 = M[a2] in
            let:16 a71 = (1 + a69) in
            let:8 a72 = M[a69] in
            advance (10)
            A := a67;
            B := EF;
            D := 1A;
            E := 21;
            H := 20;
            L := 99;
            SPH := a71[15:8];
            SPL := a71[7:0];
            FlagS := a67[7];
            FlagZ := is_zero(a67);
            FlagA := a68[3];
            FlagP := parity(a67);
            FlagCY := false;
            jump ((a72,a70));
          }
        }
      } else {
        advance (10)
        #1789
        #instruction: INC  HL
        advance (5)
        #178A
        #instruction: INC  DE
        advance (5)
        #178B
        #instruction: JP   1785
        advance (10)
        A := a22;
        D := 1A;
        E := 22;
        H := 1A;
        L := 12;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a23[7:0][7];
        FlagZ := is_zero(a23[7:0]);
        FlagA := a26[7:0][4];
        FlagP := parity(a23[7:0]);
        FlagCY := !a23[15:8][0];
        jump (1785);
      }
    }

084C:

    #084C
    #instruction: OUT  06
    advance (10)
    #084E
    #instruction: CALL 1804
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 51;
    #return-to: 0851
    advance (17)
    #1804
    #instruction: LD   HL,2084
    advance (10)
    #1807
    #instruction: LD   A,(HL)
    let:8 a3 = M[2084] in
    advance (7)
    #1808
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #1809
    #instruction: JP   Z,0707
    if (is_zero(a4)) {
      advance (10)
      A := a4;
      H := 20;
      L := 84;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0707);
    } else {
      advance (10)
      #180C
      #instruction: INC  HL
      advance (5)
      #180D
      #instruction: LD   A,(HL)
      let:8 a6 = M[2085] in
      advance (7)
      #180E
      #instruction: AND  A
      let:8 a7 = (a6 & a6) in
      let:8 a8 = (a6 | a6) in
      advance (4)
      #180F
      #instruction: RET  NZ
      if (!is_zero(a7)) {
        let:16 a9 = (1 + a2) in
        let:8 a10 = M[a2] in
        let:16 a11 = (1 + a9) in
        let:8 a12 = M[a9] in
        advance (11)
        A := a7;
        H := 20;
        L := 85;
        SPH := a11[15:8];
        SPL := a11[7:0];
        FlagS := a7[7];
        FlagZ := is_zero(a7);
        FlagA := a8[3];
        FlagP := parity(a7);
        FlagCY := false;
        jump ((a12,a10));
      } else {
        advance (5)
        #1810
        #instruction: LD   B,01
        advance (7)
        #1812
        #instruction: JP   18FA
        advance (10)
        #18FA
        #instruction: LD   A,(2094)
        let:8 a13 = M[2094] in
        advance (13)
        #18FD
        #instruction: OR   B
        let:8 a14 = (01 | a13) in
        advance (4)
        #18FE
        #instruction: LD   (2094),A
        M[2094] := a14;
        advance (13)
        #1901
        #instruction: OUT  03
        sound_control(Ufo,a14[0]);
        sound_control(Shot,a14[1]);
        sound_control(PlayerDie,a14[2]);
        sound_control(InvaderDie,a14[3]);
        sound_control(ExtraLife,a14[4]);
        advance (10)
        #1903
        #instruction: RET
        let:16 a15 = (1 + a2) in
        let:8 a16 = M[a2] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (10)
        A := a14;
        B := 01;
        H := 20;
        L := 85;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := false;
        jump ((a18,a16));
      }
    }

0851:

    #0851
    #instruction: JP   081F
    advance (10)
    jump (081F);

085D:

    #085D
    #instruction: LD   B,98
    advance (7)
    #085F
    #instruction: IN   01
    advance (10)
    #0861
    #instruction: RRCA
    advance (4)
    #0862
    #instruction: RRCA
    advance (4)
    #0863
    #instruction: JP   CY,086D
    if (updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0]) {
      advance (10)
      #086D
      #instruction: LD   A,01
      advance (7)
      #086F
      #instruction: JP   079B
      advance (10)
      #079B
      #instruction: LD   (20CE),A
      M[20CE] := 01;
      advance (13)
      #079E
      #instruction: LD   A,(20EB)
      let:8 a1 = M[20EB] in
      advance (13)
      #07A1
      #instruction: ADD  B
      let:16 a2 = addWithCarry(false,98,a1) in
      let:8 a3 = (98 & 0F) in
      let:8 a4 = (a1 & 0F) in
      let:16 a5 = addWithCarry(false,a3,a4) in
      advance (4)
      #07A2
      #instruction: DAA
      let:8 a6 = (a2[7:0] & 0F) in
      let:16 a7 = addWithCarry(false,a6,06) in
      let:16 a8 = addWithCarry(((((a6[1] || a6[2]) && a6[3]) || a5[7:0][4]) ? a7[7:0] : a6)[4],(a2[7:0] >> 04),00) in
      let:16 a9 = addWithCarry(false,a8[7:0],06) in
      let:8 a10 = (((((a6[1] || a6[2]) && a6[3]) || a5[7:0][4]) ? a7[7:0] : a6) & 0F) in
      let:8 a11 = ((((((a8[7:0][1] || a8[7:0][2]) && a8[7:0][3]) || a2[15:8][0]) ? a9[7:0] : a8[7:0]) << 04) | a10) in
      advance (4)
      #07A3
      #instruction: LD   (20EB),A
      M[20EB] := a11;
      advance (13)
      #07A6
      #instruction: CALL 1947
      let:16 a12 = (-1 + (SPH,SPL)) in
      M[a12] := 07;
      let:16 a13 = (-1 + a12) in
      M[a13] := A9;
      #return-to: 07A9
      advance (17)
      #1947
      #instruction: LD   A,(20EB)
      let:8 a14 = M[20EB] in
      advance (13)
      #194A
      #instruction: LD   HL,3C01
      advance (10)
      #194D
      #instruction: JP   09B2
      advance (10)
      #09B2
      #instruction: PUSH DE
      let:16 a15 = (-1 + a13) in
      M[a15] := D;
      let:16 a16 = (-1 + a15) in
      M[a16] := E;
      advance (11)
      #09B3
      #instruction: PUSH PSW
      let:16 a17 = (-1 + a16) in
      M[a17] := a14;
      let:16 a18 = (-1 + a17) in
      M[a18] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a11[7]),6,is_zero(a11)),4,((((a6[1] || a6[2]) && a6[3]) || a5[7:0][4]) ? a7[7:0] : a6)[4]),2,parity(a11)),0,(((((a8[7:0][1] || a8[7:0][2]) && a8[7:0][3]) || a2[15:8][0]) ? a9[7:0] : a8[7:0])[4] || a2[15:8][0]));
      advance (11)
      #09B4
      #instruction: RRCA
      advance (4)
      #09B5
      #instruction: RRCA
      advance (4)
      #09B6
      #instruction: RRCA
      advance (4)
      #09B7
      #instruction: RRCA
      advance (4)
      #09B8
      #instruction: AND  0F
      let:8 a19 = (0F & updateBit((updateBit((updateBit((updateBit((a14 >> 01),7,a14[0]) >> 01),7,updateBit((a14 >> 01),7,a14[0])[0]) >> 01),7,updateBit((updateBit((a14 >> 01),7,a14[0]) >> 01),7,updateBit((a14 >> 01),7,a14[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a14 >> 01),7,a14[0]) >> 01),7,updateBit((a14 >> 01),7,a14[0])[0]) >> 01),7,updateBit((updateBit((a14 >> 01),7,a14[0]) >> 01),7,updateBit((a14 >> 01),7,a14[0])[0])[0])[0])) in
      let:8 a20 = (0F | updateBit((updateBit((updateBit((updateBit((a14 >> 01),7,a14[0]) >> 01),7,updateBit((a14 >> 01),7,a14[0])[0]) >> 01),7,updateBit((updateBit((a14 >> 01),7,a14[0]) >> 01),7,updateBit((a14 >> 01),7,a14[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a14 >> 01),7,a14[0]) >> 01),7,updateBit((a14 >> 01),7,a14[0])[0]) >> 01),7,updateBit((updateBit((a14 >> 01),7,a14[0]) >> 01),7,updateBit((a14 >> 01),7,a14[0])[0])[0])[0])) in
      advance (7)
      #09BA
      #instruction: CALL 09C5
      let:16 a21 = (-1 + a18) in
      M[a21] := 09;
      let:16 a22 = (-1 + a21) in
      M[a22] := BD;
      #return-to: 09BD
      advance (17)
      #09C5
      #instruction: ADD  1A
      let:16 a23 = addWithCarry(false,1A,a19) in
      let:8 a24 = (1A & 0F) in
      let:8 a25 = (a19 & 0F) in
      let:16 a26 = addWithCarry(false,a24,a25) in
      advance (7)
      #09C7
      #instruction: JP   08FF
      advance (10)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a27 = (-1 + a22) in
      M[a27] := 3C;
      let:16 a28 = (-1 + a27) in
      M[a28] := 01;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a29 = add17((00,a23[7:0]),(00,a23[7:0])) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a30 = add17(a29[15:0],a29[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a31 = add17(a30[15:0],a30[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a32 = add17(1E00,a31[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a33 = (1 + a28) in
      let:8 a34 = M[a28] in
      let:16 a35 = (1 + a33) in
      let:8 a36 = M[a33] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a37 = (-1 + a35) in
      M[a37] := 08;
      let:16 a38 = (-1 + a37) in
      M[a38] := C;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a39 = M[a32[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a36,a34)] := a39;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a40 = (1 + a32[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a41 = add17(0020,(a36,a34)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a42 = (1 + a38) in
      let:8 a43 = M[a38] in
      let:16 a44 = (1 + a42) in
      let:8 a45 = M[a42] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a46 = addWithCarry(!true,a45,~00) in
      let:8 a47 = (a45 & 0F) in
      let:8 a48 = (~00 & 0F) in
      let:16 a49 = addWithCarry(!true,a47,a48) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a46[7:0])) {
        advance (10)
        A := a39;
        B := a46[7:0];
        C := a43;
        D := a40[15:8];
        E := a40[7:0];
        H := a41[15:0][15:8];
        L := a41[15:0][7:0];
        SPH := a44[15:8];
        SPL := a44[7:0];
        FlagS := a46[7:0][7];
        FlagZ := is_zero(a46[7:0]);
        FlagA := a49[7:0][4];
        FlagP := parity(a46[7:0]);
        FlagCY := a41[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a50 = (1 + a44) in
        let:8 a51 = M[a44] in
        let:16 a52 = (1 + a50) in
        let:8 a53 = M[a50] in
        advance (10)
        A := a39;
        B := a46[7:0];
        C := a43;
        D := a40[15:8];
        E := a40[7:0];
        H := a41[15:0][15:8];
        L := a41[15:0][7:0];
        SPH := a52[15:8];
        SPL := a52[7:0];
        FlagS := a46[7:0][7];
        FlagZ := is_zero(a46[7:0]);
        FlagA := a49[7:0][4];
        FlagP := parity(a46[7:0]);
        FlagCY := a41[16];
        jump ((a53,a51));
      }
    } else {
      advance (10)
      #0866
      #instruction: RRCA
      advance (4)
      #0867
      #instruction: JP   CY,0798
      if (updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0])[0]) {
        advance (10)
        #0798
        #instruction: LD   B,99
        advance (7)
        #079A
        #instruction: XOR  A
        let:8 a54 = (updateBit((updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0]) >> 01),7,updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0])[0]) ^ updateBit((updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0]) >> 01),7,updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0])[0])) in
        advance (4)
        #079B
        #instruction: LD   (20CE),A
        M[20CE] := a54;
        advance (13)
        #079E
        #instruction: LD   A,(20EB)
        let:8 a55 = M[20EB] in
        advance (13)
        #07A1
        #instruction: ADD  B
        let:16 a56 = addWithCarry(false,99,a55) in
        let:8 a57 = (99 & 0F) in
        let:8 a58 = (a55 & 0F) in
        let:16 a59 = addWithCarry(false,a57,a58) in
        advance (4)
        #07A2
        #instruction: DAA
        let:8 a60 = (a56[7:0] & 0F) in
        let:16 a61 = addWithCarry(false,a60,06) in
        let:16 a62 = addWithCarry(((((a60[1] || a60[2]) && a60[3]) || a59[7:0][4]) ? a61[7:0] : a60)[4],(a56[7:0] >> 04),00) in
        let:16 a63 = addWithCarry(false,a62[7:0],06) in
        let:8 a64 = (((((a60[1] || a60[2]) && a60[3]) || a59[7:0][4]) ? a61[7:0] : a60) & 0F) in
        let:8 a65 = ((((((a62[7:0][1] || a62[7:0][2]) && a62[7:0][3]) || a56[15:8][0]) ? a63[7:0] : a62[7:0]) << 04) | a64) in
        advance (4)
        #07A3
        #instruction: LD   (20EB),A
        M[20EB] := a65;
        advance (13)
        #07A6
        #instruction: CALL 1947
        let:16 a66 = (-1 + (SPH,SPL)) in
        M[a66] := 07;
        let:16 a67 = (-1 + a66) in
        M[a67] := A9;
        #return-to: 07A9
        advance (17)
        #1947
        #instruction: LD   A,(20EB)
        let:8 a68 = M[20EB] in
        advance (13)
        #194A
        #instruction: LD   HL,3C01
        advance (10)
        #194D
        #instruction: JP   09B2
        advance (10)
        #09B2
        #instruction: PUSH DE
        let:16 a69 = (-1 + a67) in
        M[a69] := D;
        let:16 a70 = (-1 + a69) in
        M[a70] := E;
        advance (11)
        #09B3
        #instruction: PUSH PSW
        let:16 a71 = (-1 + a70) in
        M[a71] := a68;
        let:16 a72 = (-1 + a71) in
        M[a72] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a65[7]),6,is_zero(a65)),4,((((a60[1] || a60[2]) && a60[3]) || a59[7:0][4]) ? a61[7:0] : a60)[4]),2,parity(a65)),0,(((((a62[7:0][1] || a62[7:0][2]) && a62[7:0][3]) || a56[15:8][0]) ? a63[7:0] : a62[7:0])[4] || a56[15:8][0]));
        advance (11)
        #09B4
        #instruction: RRCA
        advance (4)
        #09B5
        #instruction: RRCA
        advance (4)
        #09B6
        #instruction: RRCA
        advance (4)
        #09B7
        #instruction: RRCA
        advance (4)
        #09B8
        #instruction: AND  0F
        let:8 a73 = (0F & updateBit((updateBit((updateBit((updateBit((a68 >> 01),7,a68[0]) >> 01),7,updateBit((a68 >> 01),7,a68[0])[0]) >> 01),7,updateBit((updateBit((a68 >> 01),7,a68[0]) >> 01),7,updateBit((a68 >> 01),7,a68[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a68 >> 01),7,a68[0]) >> 01),7,updateBit((a68 >> 01),7,a68[0])[0]) >> 01),7,updateBit((updateBit((a68 >> 01),7,a68[0]) >> 01),7,updateBit((a68 >> 01),7,a68[0])[0])[0])[0])) in
        let:8 a74 = (0F | updateBit((updateBit((updateBit((updateBit((a68 >> 01),7,a68[0]) >> 01),7,updateBit((a68 >> 01),7,a68[0])[0]) >> 01),7,updateBit((updateBit((a68 >> 01),7,a68[0]) >> 01),7,updateBit((a68 >> 01),7,a68[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a68 >> 01),7,a68[0]) >> 01),7,updateBit((a68 >> 01),7,a68[0])[0]) >> 01),7,updateBit((updateBit((a68 >> 01),7,a68[0]) >> 01),7,updateBit((a68 >> 01),7,a68[0])[0])[0])[0])) in
        advance (7)
        #09BA
        #instruction: CALL 09C5
        let:16 a75 = (-1 + a72) in
        M[a75] := 09;
        let:16 a76 = (-1 + a75) in
        M[a76] := BD;
        #return-to: 09BD
        advance (17)
        #09C5
        #instruction: ADD  1A
        let:16 a77 = addWithCarry(false,1A,a73) in
        let:8 a78 = (1A & 0F) in
        let:8 a79 = (a73 & 0F) in
        let:16 a80 = addWithCarry(false,a78,a79) in
        advance (7)
        #09C7
        #instruction: JP   08FF
        advance (10)
        #08FF
        #instruction: LD   DE,1E00
        advance (10)
        #0902
        #instruction: PUSH HL
        let:16 a81 = (-1 + a76) in
        M[a81] := 3C;
        let:16 a82 = (-1 + a81) in
        M[a82] := 01;
        advance (11)
        #0903
        #instruction: LD   H,00
        advance (7)
        #0905
        #instruction: LD   L,A
        advance (5)
        #0906
        #instruction: ADD  HL,HL
        let:17 a83 = add17((00,a77[7:0]),(00,a77[7:0])) in
        advance (10)
        #0907
        #instruction: ADD  HL,HL
        let:17 a84 = add17(a83[15:0],a83[15:0]) in
        advance (10)
        #0908
        #instruction: ADD  HL,HL
        let:17 a85 = add17(a84[15:0],a84[15:0]) in
        advance (10)
        #0909
        #instruction: ADD  HL,DE
        let:17 a86 = add17(1E00,a85[15:0]) in
        advance (10)
        #090A
        #instruction: EX   DE,HL
        advance (4)
        #090B
        #instruction: POP  HL
        let:16 a87 = (1 + a82) in
        let:8 a88 = M[a82] in
        let:16 a89 = (1 + a87) in
        let:8 a90 = M[a87] in
        advance (10)
        #090C
        #instruction: LD   B,08
        advance (7)
        #090E
        #instruction: OUT  06
        advance (10)
        #0910
        #instruction: JP   1439
        advance (10)
        #1439
        #instruction: PUSH BC
        let:16 a91 = (-1 + a89) in
        M[a91] := 08;
        let:16 a92 = (-1 + a91) in
        M[a92] := C;
        advance (11)
        #143A
        #instruction: LD   A,(DE)
        let:8 a93 = M[a86[15:0]] in
        advance (7)
        #143B
        #instruction: LD   (HL),A
        M[(a90,a88)] := a93;
        advance (7)
        #143C
        #instruction: INC  DE
        let:16 a94 = (1 + a86[15:0]) in
        advance (5)
        #143D
        #instruction: LD   BC,0020
        advance (10)
        #1440
        #instruction: ADD  HL,BC
        let:17 a95 = add17(0020,(a90,a88)) in
        advance (10)
        #1441
        #instruction: POP  BC
        let:16 a96 = (1 + a92) in
        let:8 a97 = M[a92] in
        let:16 a98 = (1 + a96) in
        let:8 a99 = M[a96] in
        advance (10)
        #1442
        #instruction: DEC  B
        let:16 a100 = addWithCarry(!true,a99,~00) in
        let:8 a101 = (a99 & 0F) in
        let:8 a102 = (~00 & 0F) in
        let:16 a103 = addWithCarry(!true,a101,a102) in
        advance (5)
        #1443
        #instruction: JP   NZ,1439
        if (!is_zero(a100[7:0])) {
          advance (10)
          A := a93;
          B := a100[7:0];
          C := a97;
          D := a94[15:8];
          E := a94[7:0];
          H := a95[15:0][15:8];
          L := a95[15:0][7:0];
          SPH := a98[15:8];
          SPL := a98[7:0];
          FlagS := a100[7:0][7];
          FlagZ := is_zero(a100[7:0]);
          FlagA := a103[7:0][4];
          FlagP := parity(a100[7:0]);
          FlagCY := a95[16];
          jump (1439);
        } else {
          advance (10)
          #1446
          #instruction: RET
          let:16 a104 = (1 + a98) in
          let:8 a105 = M[a98] in
          let:16 a106 = (1 + a104) in
          let:8 a107 = M[a104] in
          advance (10)
          A := a93;
          B := a100[7:0];
          C := a97;
          D := a94[15:8];
          E := a94[7:0];
          H := a95[15:0][15:8];
          L := a95[15:0][7:0];
          SPH := a106[15:8];
          SPL := a106[7:0];
          FlagS := a100[7:0][7];
          FlagZ := is_zero(a100[7:0]);
          FlagA := a103[7:0][4];
          FlagP := parity(a100[7:0]);
          FlagCY := a95[16];
          jump ((a107,a105));
        }
      } else {
        advance (10)
        #086A
        #instruction: JP   077F
        advance (10)
        A := updateBit((updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0]) >> 01),7,updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0])[0]);
        B := 98;
        FlagCY := updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0])[0];
        jump (077F);
      }
    }

0875:

    #0875
    #instruction: JP   0814
    advance (10)
    jump (0814);

0898:

    #0898
    #instruction: LD   A,(2067)
    let:8 a1 = M[2067] in
    advance (13)
    #089B
    #instruction: RRCA
    advance (4)
    #089C
    #instruction: LD   A,1C
    advance (7)
    #089E
    #instruction: LD   HL,3711
    advance (10)
    #08A1
    #instruction: CALL NC,08FF
    if (!a1[0]) {
      let:16 a2 = (-1 + (SPH,SPL)) in
      M[a2] := 08;
      let:16 a3 = (-1 + a2) in
      M[a3] := A4;
      #return-to: 08A4
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a4 = (-1 + a3) in
      M[a4] := 37;
      let:16 a5 = (-1 + a4) in
      M[a5] := 11;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a6 = add17(001C,001C) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a7 = add17(a6[15:0],a6[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a8 = add17(a7[15:0],a7[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a9 = add17(1E00,a8[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a10 = (1 + a5) in
      let:8 a11 = M[a5] in
      let:16 a12 = (1 + a10) in
      let:8 a13 = M[a10] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a14 = (-1 + a12) in
      M[a14] := 08;
      let:16 a15 = (-1 + a14) in
      M[a15] := C;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a16 = M[a9[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a13,a11)] := a16;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a17 = (1 + a9[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a18 = add17(0020,(a13,a11)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a19 = (1 + a15) in
      let:8 a20 = M[a15] in
      let:16 a21 = (1 + a19) in
      let:8 a22 = M[a19] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a23 = addWithCarry(!true,a22,~00) in
      let:8 a24 = (a22 & 0F) in
      let:8 a25 = (~00 & 0F) in
      let:16 a26 = addWithCarry(!true,a24,a25) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a23[7:0])) {
        advance (10)
        A := a16;
        B := a23[7:0];
        C := a20;
        D := a17[15:8];
        E := a17[7:0];
        H := a18[15:0][15:8];
        L := a18[15:0][7:0];
        SPH := a21[15:8];
        SPL := a21[7:0];
        FlagS := a23[7:0][7];
        FlagZ := is_zero(a23[7:0]);
        FlagA := a26[7:0][4];
        FlagP := parity(a23[7:0]);
        FlagCY := a18[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a27 = (1 + a21) in
        let:8 a28 = M[a21] in
        let:16 a29 = (1 + a27) in
        let:8 a30 = M[a27] in
        advance (10)
        A := a16;
        B := a23[7:0];
        C := a20;
        D := a17[15:8];
        E := a17[7:0];
        H := a18[15:0][15:8];
        L := a18[15:0][7:0];
        SPH := a29[15:8];
        SPL := a29[7:0];
        FlagS := a23[7:0][7];
        FlagZ := is_zero(a23[7:0]);
        FlagA := a26[7:0][4];
        FlagP := parity(a23[7:0]);
        FlagCY := a18[16];
        jump ((a30,a28));
      }
    } else {
      advance (11)
      A := 1C;
      H := 37;
      L := 11;
      FlagCY := a1[0];
      jump (08A4);
    }

08A4:

    #08A4
    #instruction: LD   A,B0
    advance (7)
    #08A6
    #instruction: LD   (20C0),A
    M[20C0] := B0;
    advance (13)
    #08A9
    #instruction: LD   A,(20C0)
    let:8 a1 = M[20C0] in
    advance (13)
    #08AC
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #08AD
    #instruction: RET  Z
    if (is_zero(a2)) {
      let:16 a4 = (1 + (SPH,SPL)) in
      let:8 a5 = M[(SPH,SPL)] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (11)
      A := a2;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump ((a7,a5));
    } else {
      advance (5)
      #08AE
      #instruction: AND  04
      let:8 a8 = (04 & a2) in
      let:8 a9 = (04 | a2) in
      advance (7)
      #08B0
      #instruction: JP   NZ,08BC
      if (!is_zero(a8)) {
        advance (10)
        #08BC
        #instruction: LD   B,20
        advance (7)
        #08BE
        #instruction: LD   HL,271C
        advance (10)
        #08C1
        #instruction: LD   A,(2067)
        let:8 a10 = M[2067] in
        advance (13)
        #08C4
        #instruction: RRCA
        advance (4)
        #08C5
        #instruction: JP   CY,08CB
        if (a10[0]) {
          advance (10)
          #08CB
          #instruction: CALL 14CB
          let:16 a11 = (-1 + (SPH,SPL)) in
          M[a11] := 08;
          let:16 a12 = (-1 + a11) in
          M[a12] := CE;
          #return-to: 08CE
          advance (17)
          #14CB
          #instruction: XOR  A
          let:8 a13 = (updateBit((a10 >> 01),7,a10[0]) ^ updateBit((a10 >> 01),7,a10[0])) in
          advance (4)
          #14CC
          #instruction: PUSH BC
          let:16 a14 = (-1 + a12) in
          M[a14] := 20;
          let:16 a15 = (-1 + a14) in
          M[a15] := C;
          advance (11)
          #14CD
          #instruction: LD   (HL),A
          M[271C] := a13;
          advance (7)
          #14CE
          #instruction: LD   BC,0020
          advance (10)
          #14D1
          #instruction: ADD  HL,BC
          let:17 a16 = add17(0020,271C) in
          advance (10)
          #14D2
          #instruction: POP  BC
          let:16 a17 = (1 + a15) in
          let:8 a18 = M[a15] in
          let:16 a19 = (1 + a17) in
          let:8 a20 = M[a17] in
          advance (10)
          #14D3
          #instruction: DEC  B
          let:16 a21 = addWithCarry(!true,a20,~00) in
          let:8 a22 = (a20 & 0F) in
          let:8 a23 = (~00 & 0F) in
          let:16 a24 = addWithCarry(!true,a22,a23) in
          advance (5)
          #14D4
          #instruction: JP   NZ,14CC
          if (!is_zero(a21[7:0])) {
            advance (10)
            A := a13;
            B := a21[7:0];
            C := a18;
            H := a16[15:0][15:8];
            L := a16[15:0][7:0];
            SPH := a19[15:8];
            SPL := a19[7:0];
            FlagS := a21[7:0][7];
            FlagZ := is_zero(a21[7:0]);
            FlagA := a24[7:0][4];
            FlagP := parity(a21[7:0]);
            FlagCY := a16[16];
            jump (14CC);
          } else {
            advance (10)
            #14D7
            #instruction: RET
            let:16 a25 = (1 + a19) in
            let:8 a26 = M[a19] in
            let:16 a27 = (1 + a25) in
            let:8 a28 = M[a25] in
            advance (10)
            A := a13;
            B := a21[7:0];
            C := a18;
            H := a16[15:0][15:8];
            L := a16[15:0][7:0];
            SPH := a27[15:8];
            SPL := a27[7:0];
            FlagS := a21[7:0][7];
            FlagZ := is_zero(a21[7:0]);
            FlagA := a24[7:0][4];
            FlagP := parity(a21[7:0]);
            FlagCY := a16[16];
            jump ((a28,a26));
          }
        } else {
          advance (10)
          #08C8
          #instruction: LD   HL,391C
          advance (10)
          #08CB
          #instruction: CALL 14CB
          let:16 a29 = (-1 + (SPH,SPL)) in
          M[a29] := 08;
          let:16 a30 = (-1 + a29) in
          M[a30] := CE;
          #return-to: 08CE
          advance (17)
          #14CB
          #instruction: XOR  A
          let:8 a31 = (updateBit((a10 >> 01),7,a10[0]) ^ updateBit((a10 >> 01),7,a10[0])) in
          advance (4)
          #14CC
          #instruction: PUSH BC
          let:16 a32 = (-1 + a30) in
          M[a32] := 20;
          let:16 a33 = (-1 + a32) in
          M[a33] := C;
          advance (11)
          #14CD
          #instruction: LD   (HL),A
          M[391C] := a31;
          advance (7)
          #14CE
          #instruction: LD   BC,0020
          advance (10)
          #14D1
          #instruction: ADD  HL,BC
          let:17 a34 = add17(0020,391C) in
          advance (10)
          #14D2
          #instruction: POP  BC
          let:16 a35 = (1 + a33) in
          let:8 a36 = M[a33] in
          let:16 a37 = (1 + a35) in
          let:8 a38 = M[a35] in
          advance (10)
          #14D3
          #instruction: DEC  B
          let:16 a39 = addWithCarry(!true,a38,~00) in
          let:8 a40 = (a38 & 0F) in
          let:8 a41 = (~00 & 0F) in
          let:16 a42 = addWithCarry(!true,a40,a41) in
          advance (5)
          #14D4
          #instruction: JP   NZ,14CC
          if (!is_zero(a39[7:0])) {
            advance (10)
            A := a31;
            B := a39[7:0];
            C := a36;
            H := a34[15:0][15:8];
            L := a34[15:0][7:0];
            SPH := a37[15:8];
            SPL := a37[7:0];
            FlagS := a39[7:0][7];
            FlagZ := is_zero(a39[7:0]);
            FlagA := a42[7:0][4];
            FlagP := parity(a39[7:0]);
            FlagCY := a34[16];
            jump (14CC);
          } else {
            advance (10)
            #14D7
            #instruction: RET
            let:16 a43 = (1 + a37) in
            let:8 a44 = M[a37] in
            let:16 a45 = (1 + a43) in
            let:8 a46 = M[a43] in
            advance (10)
            A := a31;
            B := a39[7:0];
            C := a36;
            H := a34[15:0][15:8];
            L := a34[15:0][7:0];
            SPH := a45[15:8];
            SPL := a45[7:0];
            FlagS := a39[7:0][7];
            FlagZ := is_zero(a39[7:0]);
            FlagA := a42[7:0][4];
            FlagP := parity(a39[7:0]);
            FlagCY := a34[16];
            jump ((a46,a44));
          }
        }
      } else {
        advance (10)
        #08B3
        #instruction: CALL 09CA
        let:16 a47 = (-1 + (SPH,SPL)) in
        M[a47] := 08;
        let:16 a48 = (-1 + a47) in
        M[a48] := B6;
        #return-to: 08B6
        advance (17)
        #09CA
        #instruction: LD   A,(2067)
        let:8 a49 = M[2067] in
        advance (13)
        #09CD
        #instruction: RRCA
        advance (4)
        #09CE
        #instruction: LD   HL,20F8
        advance (10)
        #09D1
        #instruction: RET  CY
        if (a49[0]) {
          let:16 a50 = (1 + a48) in
          let:8 a51 = M[a48] in
          let:16 a52 = (1 + a50) in
          let:8 a53 = M[a50] in
          advance (11)
          A := updateBit((a49 >> 01),7,a49[0]);
          H := 20;
          L := F8;
          SPH := a52[15:8];
          SPL := a52[7:0];
          FlagS := a8[7];
          FlagZ := is_zero(a8);
          FlagA := a9[3];
          FlagP := parity(a8);
          FlagCY := a49[0];
          jump ((a53,a51));
        } else {
          advance (5)
          #09D2
          #instruction: LD   HL,20FC
          advance (10)
          #09D5
          #instruction: RET
          let:16 a54 = (1 + a48) in
          let:8 a55 = M[a48] in
          let:16 a56 = (1 + a54) in
          let:8 a57 = M[a54] in
          advance (10)
          A := updateBit((a49 >> 01),7,a49[0]);
          H := 20;
          L := FC;
          SPH := a56[15:8];
          SPL := a56[7:0];
          FlagS := a8[7];
          FlagZ := is_zero(a8);
          FlagA := a9[3];
          FlagP := parity(a8);
          FlagCY := a49[0];
          jump ((a57,a55));
        }
      }
    }

08B6:

    #08B6
    #instruction: CALL 1931
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := B9;
    #return-to: 08B9
    advance (17)
    #1931
    #instruction: LD   E,(HL)
    let:8 a3 = M[(H,L)] in
    advance (7)
    #1932
    #instruction: INC  HL
    let:16 a4 = (1 + (H,L)) in
    advance (5)
    #1933
    #instruction: LD   D,(HL)
    let:8 a5 = M[a4] in
    advance (7)
    #1934
    #instruction: INC  HL
    let:16 a6 = (1 + a4) in
    advance (5)
    #1935
    #instruction: LD   A,(HL)
    let:8 a7 = M[a6] in
    advance (7)
    #1936
    #instruction: INC  HL
    let:16 a8 = (1 + a6) in
    advance (5)
    #1937
    #instruction: LD   H,(HL)
    let:8 a9 = M[a8] in
    advance (7)
    #1938
    #instruction: LD   L,A
    advance (5)
    #1939
    #instruction: JP   09AD
    advance (10)
    #09AD
    #instruction: LD   A,D
    advance (5)
    #09AE
    #instruction: CALL 09B2
    let:16 a10 = (-1 + a2) in
    M[a10] := 09;
    let:16 a11 = (-1 + a10) in
    M[a11] := B1;
    #return-to: 09B1
    advance (17)
    #09B2
    #instruction: PUSH DE
    let:16 a12 = (-1 + a11) in
    M[a12] := a5;
    let:16 a13 = (-1 + a12) in
    M[a13] := a3;
    advance (11)
    #09B3
    #instruction: PUSH PSW
    let:16 a14 = (-1 + a13) in
    M[a14] := a5;
    let:16 a15 = (-1 + a14) in
    M[a15] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #09B4
    #instruction: RRCA
    advance (4)
    #09B5
    #instruction: RRCA
    advance (4)
    #09B6
    #instruction: RRCA
    advance (4)
    #09B7
    #instruction: RRCA
    advance (4)
    #09B8
    #instruction: AND  0F
    let:8 a16 = (0F & updateBit((updateBit((updateBit((updateBit((a5 >> 01),7,a5[0]) >> 01),7,updateBit((a5 >> 01),7,a5[0])[0]) >> 01),7,updateBit((updateBit((a5 >> 01),7,a5[0]) >> 01),7,updateBit((a5 >> 01),7,a5[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a5 >> 01),7,a5[0]) >> 01),7,updateBit((a5 >> 01),7,a5[0])[0]) >> 01),7,updateBit((updateBit((a5 >> 01),7,a5[0]) >> 01),7,updateBit((a5 >> 01),7,a5[0])[0])[0])[0])) in
    let:8 a17 = (0F | updateBit((updateBit((updateBit((updateBit((a5 >> 01),7,a5[0]) >> 01),7,updateBit((a5 >> 01),7,a5[0])[0]) >> 01),7,updateBit((updateBit((a5 >> 01),7,a5[0]) >> 01),7,updateBit((a5 >> 01),7,a5[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a5 >> 01),7,a5[0]) >> 01),7,updateBit((a5 >> 01),7,a5[0])[0]) >> 01),7,updateBit((updateBit((a5 >> 01),7,a5[0]) >> 01),7,updateBit((a5 >> 01),7,a5[0])[0])[0])[0])) in
    advance (7)
    #09BA
    #instruction: CALL 09C5
    let:16 a18 = (-1 + a15) in
    M[a18] := 09;
    let:16 a19 = (-1 + a18) in
    M[a19] := BD;
    #return-to: 09BD
    advance (17)
    #09C5
    #instruction: ADD  1A
    let:16 a20 = addWithCarry(false,1A,a16) in
    let:8 a21 = (1A & 0F) in
    let:8 a22 = (a16 & 0F) in
    let:16 a23 = addWithCarry(false,a21,a22) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a24 = (-1 + a19) in
    M[a24] := a9;
    let:16 a25 = (-1 + a24) in
    M[a25] := a7;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a26 = add17((00,a20[7:0]),(00,a20[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a27 = add17(a26[15:0],a26[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a28 = add17(a27[15:0],a27[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a29 = add17(1E00,a28[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a30 = (1 + a25) in
    let:8 a31 = M[a25] in
    let:16 a32 = (1 + a30) in
    let:8 a33 = M[a30] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a34 = (-1 + a32) in
    M[a34] := 08;
    let:16 a35 = (-1 + a34) in
    M[a35] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a36 = M[a29[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a33,a31)] := a36;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a37 = (1 + a29[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a38 = add17(0020,(a33,a31)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a39 = (1 + a35) in
    let:8 a40 = M[a35] in
    let:16 a41 = (1 + a39) in
    let:8 a42 = M[a39] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a43 = addWithCarry(!true,a42,~00) in
    let:8 a44 = (a42 & 0F) in
    let:8 a45 = (~00 & 0F) in
    let:16 a46 = addWithCarry(!true,a44,a45) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a43[7:0])) {
      advance (10)
      A := a36;
      B := a43[7:0];
      C := a40;
      D := a37[15:8];
      E := a37[7:0];
      H := a38[15:0][15:8];
      L := a38[15:0][7:0];
      SPH := a41[15:8];
      SPL := a41[7:0];
      FlagS := a43[7:0][7];
      FlagZ := is_zero(a43[7:0]);
      FlagA := a46[7:0][4];
      FlagP := parity(a43[7:0]);
      FlagCY := a38[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a47 = (1 + a41) in
      let:8 a48 = M[a41] in
      let:16 a49 = (1 + a47) in
      let:8 a50 = M[a47] in
      advance (10)
      A := a36;
      B := a43[7:0];
      C := a40;
      D := a37[15:8];
      E := a37[7:0];
      H := a38[15:0][15:8];
      L := a38[15:0][7:0];
      SPH := a49[15:8];
      SPL := a49[7:0];
      FlagS := a43[7:0][7];
      FlagZ := is_zero(a43[7:0]);
      FlagA := a46[7:0][4];
      FlagP := parity(a43[7:0]);
      FlagCY := a38[16];
      jump ((a50,a48));
    }

08B9:

    #08B9
    #instruction: JP   08A9
    advance (10)
    #08A9
    #instruction: LD   A,(20C0)
    let:8 a1 = M[20C0] in
    advance (13)
    #08AC
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #08AD
    #instruction: RET  Z
    if (is_zero(a2)) {
      let:16 a4 = (1 + (SPH,SPL)) in
      let:8 a5 = M[(SPH,SPL)] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (11)
      A := a2;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump ((a7,a5));
    } else {
      advance (5)
      #08AE
      #instruction: AND  04
      let:8 a8 = (04 & a2) in
      let:8 a9 = (04 | a2) in
      advance (7)
      #08B0
      #instruction: JP   NZ,08BC
      if (!is_zero(a8)) {
        advance (10)
        #08BC
        #instruction: LD   B,20
        advance (7)
        #08BE
        #instruction: LD   HL,271C
        advance (10)
        #08C1
        #instruction: LD   A,(2067)
        let:8 a10 = M[2067] in
        advance (13)
        #08C4
        #instruction: RRCA
        advance (4)
        #08C5
        #instruction: JP   CY,08CB
        if (a10[0]) {
          advance (10)
          #08CB
          #instruction: CALL 14CB
          let:16 a11 = (-1 + (SPH,SPL)) in
          M[a11] := 08;
          let:16 a12 = (-1 + a11) in
          M[a12] := CE;
          #return-to: 08CE
          advance (17)
          #14CB
          #instruction: XOR  A
          let:8 a13 = (updateBit((a10 >> 01),7,a10[0]) ^ updateBit((a10 >> 01),7,a10[0])) in
          advance (4)
          #14CC
          #instruction: PUSH BC
          let:16 a14 = (-1 + a12) in
          M[a14] := 20;
          let:16 a15 = (-1 + a14) in
          M[a15] := C;
          advance (11)
          #14CD
          #instruction: LD   (HL),A
          M[271C] := a13;
          advance (7)
          #14CE
          #instruction: LD   BC,0020
          advance (10)
          #14D1
          #instruction: ADD  HL,BC
          let:17 a16 = add17(0020,271C) in
          advance (10)
          #14D2
          #instruction: POP  BC
          let:16 a17 = (1 + a15) in
          let:8 a18 = M[a15] in
          let:16 a19 = (1 + a17) in
          let:8 a20 = M[a17] in
          advance (10)
          #14D3
          #instruction: DEC  B
          let:16 a21 = addWithCarry(!true,a20,~00) in
          let:8 a22 = (a20 & 0F) in
          let:8 a23 = (~00 & 0F) in
          let:16 a24 = addWithCarry(!true,a22,a23) in
          advance (5)
          #14D4
          #instruction: JP   NZ,14CC
          if (!is_zero(a21[7:0])) {
            advance (10)
            A := a13;
            B := a21[7:0];
            C := a18;
            H := a16[15:0][15:8];
            L := a16[15:0][7:0];
            SPH := a19[15:8];
            SPL := a19[7:0];
            FlagS := a21[7:0][7];
            FlagZ := is_zero(a21[7:0]);
            FlagA := a24[7:0][4];
            FlagP := parity(a21[7:0]);
            FlagCY := a16[16];
            jump (14CC);
          } else {
            advance (10)
            #14D7
            #instruction: RET
            let:16 a25 = (1 + a19) in
            let:8 a26 = M[a19] in
            let:16 a27 = (1 + a25) in
            let:8 a28 = M[a25] in
            advance (10)
            A := a13;
            B := a21[7:0];
            C := a18;
            H := a16[15:0][15:8];
            L := a16[15:0][7:0];
            SPH := a27[15:8];
            SPL := a27[7:0];
            FlagS := a21[7:0][7];
            FlagZ := is_zero(a21[7:0]);
            FlagA := a24[7:0][4];
            FlagP := parity(a21[7:0]);
            FlagCY := a16[16];
            jump ((a28,a26));
          }
        } else {
          advance (10)
          #08C8
          #instruction: LD   HL,391C
          advance (10)
          #08CB
          #instruction: CALL 14CB
          let:16 a29 = (-1 + (SPH,SPL)) in
          M[a29] := 08;
          let:16 a30 = (-1 + a29) in
          M[a30] := CE;
          #return-to: 08CE
          advance (17)
          #14CB
          #instruction: XOR  A
          let:8 a31 = (updateBit((a10 >> 01),7,a10[0]) ^ updateBit((a10 >> 01),7,a10[0])) in
          advance (4)
          #14CC
          #instruction: PUSH BC
          let:16 a32 = (-1 + a30) in
          M[a32] := 20;
          let:16 a33 = (-1 + a32) in
          M[a33] := C;
          advance (11)
          #14CD
          #instruction: LD   (HL),A
          M[391C] := a31;
          advance (7)
          #14CE
          #instruction: LD   BC,0020
          advance (10)
          #14D1
          #instruction: ADD  HL,BC
          let:17 a34 = add17(0020,391C) in
          advance (10)
          #14D2
          #instruction: POP  BC
          let:16 a35 = (1 + a33) in
          let:8 a36 = M[a33] in
          let:16 a37 = (1 + a35) in
          let:8 a38 = M[a35] in
          advance (10)
          #14D3
          #instruction: DEC  B
          let:16 a39 = addWithCarry(!true,a38,~00) in
          let:8 a40 = (a38 & 0F) in
          let:8 a41 = (~00 & 0F) in
          let:16 a42 = addWithCarry(!true,a40,a41) in
          advance (5)
          #14D4
          #instruction: JP   NZ,14CC
          if (!is_zero(a39[7:0])) {
            advance (10)
            A := a31;
            B := a39[7:0];
            C := a36;
            H := a34[15:0][15:8];
            L := a34[15:0][7:0];
            SPH := a37[15:8];
            SPL := a37[7:0];
            FlagS := a39[7:0][7];
            FlagZ := is_zero(a39[7:0]);
            FlagA := a42[7:0][4];
            FlagP := parity(a39[7:0]);
            FlagCY := a34[16];
            jump (14CC);
          } else {
            advance (10)
            #14D7
            #instruction: RET
            let:16 a43 = (1 + a37) in
            let:8 a44 = M[a37] in
            let:16 a45 = (1 + a43) in
            let:8 a46 = M[a43] in
            advance (10)
            A := a31;
            B := a39[7:0];
            C := a36;
            H := a34[15:0][15:8];
            L := a34[15:0][7:0];
            SPH := a45[15:8];
            SPL := a45[7:0];
            FlagS := a39[7:0][7];
            FlagZ := is_zero(a39[7:0]);
            FlagA := a42[7:0][4];
            FlagP := parity(a39[7:0]);
            FlagCY := a34[16];
            jump ((a46,a44));
          }
        }
      } else {
        advance (10)
        #08B3
        #instruction: CALL 09CA
        let:16 a47 = (-1 + (SPH,SPL)) in
        M[a47] := 08;
        let:16 a48 = (-1 + a47) in
        M[a48] := B6;
        #return-to: 08B6
        advance (17)
        #09CA
        #instruction: LD   A,(2067)
        let:8 a49 = M[2067] in
        advance (13)
        #09CD
        #instruction: RRCA
        advance (4)
        #09CE
        #instruction: LD   HL,20F8
        advance (10)
        #09D1
        #instruction: RET  CY
        if (a49[0]) {
          let:16 a50 = (1 + a48) in
          let:8 a51 = M[a48] in
          let:16 a52 = (1 + a50) in
          let:8 a53 = M[a50] in
          advance (11)
          A := updateBit((a49 >> 01),7,a49[0]);
          H := 20;
          L := F8;
          SPH := a52[15:8];
          SPL := a52[7:0];
          FlagS := a8[7];
          FlagZ := is_zero(a8);
          FlagA := a9[3];
          FlagP := parity(a8);
          FlagCY := a49[0];
          jump ((a53,a51));
        } else {
          advance (5)
          #09D2
          #instruction: LD   HL,20FC
          advance (10)
          #09D5
          #instruction: RET
          let:16 a54 = (1 + a48) in
          let:8 a55 = M[a48] in
          let:16 a56 = (1 + a54) in
          let:8 a57 = M[a54] in
          advance (10)
          A := updateBit((a49 >> 01),7,a49[0]);
          H := 20;
          L := FC;
          SPH := a56[15:8];
          SPL := a56[7:0];
          FlagS := a8[7];
          FlagZ := is_zero(a8);
          FlagA := a9[3];
          FlagP := parity(a8);
          FlagCY := a49[0];
          jump ((a57,a55));
        }
      }
    }

08CE:

    #08CE
    #instruction: JP   08A9
    advance (10)
    #08A9
    #instruction: LD   A,(20C0)
    let:8 a1 = M[20C0] in
    advance (13)
    #08AC
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #08AD
    #instruction: RET  Z
    if (is_zero(a2)) {
      let:16 a4 = (1 + (SPH,SPL)) in
      let:8 a5 = M[(SPH,SPL)] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (11)
      A := a2;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump ((a7,a5));
    } else {
      advance (5)
      #08AE
      #instruction: AND  04
      let:8 a8 = (04 & a2) in
      let:8 a9 = (04 | a2) in
      advance (7)
      #08B0
      #instruction: JP   NZ,08BC
      if (!is_zero(a8)) {
        advance (10)
        #08BC
        #instruction: LD   B,20
        advance (7)
        #08BE
        #instruction: LD   HL,271C
        advance (10)
        #08C1
        #instruction: LD   A,(2067)
        let:8 a10 = M[2067] in
        advance (13)
        #08C4
        #instruction: RRCA
        advance (4)
        #08C5
        #instruction: JP   CY,08CB
        if (a10[0]) {
          advance (10)
          #08CB
          #instruction: CALL 14CB
          let:16 a11 = (-1 + (SPH,SPL)) in
          M[a11] := 08;
          let:16 a12 = (-1 + a11) in
          M[a12] := CE;
          #return-to: 08CE
          advance (17)
          #14CB
          #instruction: XOR  A
          let:8 a13 = (updateBit((a10 >> 01),7,a10[0]) ^ updateBit((a10 >> 01),7,a10[0])) in
          advance (4)
          #14CC
          #instruction: PUSH BC
          let:16 a14 = (-1 + a12) in
          M[a14] := 20;
          let:16 a15 = (-1 + a14) in
          M[a15] := C;
          advance (11)
          #14CD
          #instruction: LD   (HL),A
          M[271C] := a13;
          advance (7)
          #14CE
          #instruction: LD   BC,0020
          advance (10)
          #14D1
          #instruction: ADD  HL,BC
          let:17 a16 = add17(0020,271C) in
          advance (10)
          #14D2
          #instruction: POP  BC
          let:16 a17 = (1 + a15) in
          let:8 a18 = M[a15] in
          let:16 a19 = (1 + a17) in
          let:8 a20 = M[a17] in
          advance (10)
          #14D3
          #instruction: DEC  B
          let:16 a21 = addWithCarry(!true,a20,~00) in
          let:8 a22 = (a20 & 0F) in
          let:8 a23 = (~00 & 0F) in
          let:16 a24 = addWithCarry(!true,a22,a23) in
          advance (5)
          #14D4
          #instruction: JP   NZ,14CC
          if (!is_zero(a21[7:0])) {
            advance (10)
            A := a13;
            B := a21[7:0];
            C := a18;
            H := a16[15:0][15:8];
            L := a16[15:0][7:0];
            SPH := a19[15:8];
            SPL := a19[7:0];
            FlagS := a21[7:0][7];
            FlagZ := is_zero(a21[7:0]);
            FlagA := a24[7:0][4];
            FlagP := parity(a21[7:0]);
            FlagCY := a16[16];
            jump (14CC);
          } else {
            advance (10)
            #14D7
            #instruction: RET
            let:16 a25 = (1 + a19) in
            let:8 a26 = M[a19] in
            let:16 a27 = (1 + a25) in
            let:8 a28 = M[a25] in
            advance (10)
            A := a13;
            B := a21[7:0];
            C := a18;
            H := a16[15:0][15:8];
            L := a16[15:0][7:0];
            SPH := a27[15:8];
            SPL := a27[7:0];
            FlagS := a21[7:0][7];
            FlagZ := is_zero(a21[7:0]);
            FlagA := a24[7:0][4];
            FlagP := parity(a21[7:0]);
            FlagCY := a16[16];
            jump ((a28,a26));
          }
        } else {
          advance (10)
          #08C8
          #instruction: LD   HL,391C
          advance (10)
          #08CB
          #instruction: CALL 14CB
          let:16 a29 = (-1 + (SPH,SPL)) in
          M[a29] := 08;
          let:16 a30 = (-1 + a29) in
          M[a30] := CE;
          #return-to: 08CE
          advance (17)
          #14CB
          #instruction: XOR  A
          let:8 a31 = (updateBit((a10 >> 01),7,a10[0]) ^ updateBit((a10 >> 01),7,a10[0])) in
          advance (4)
          #14CC
          #instruction: PUSH BC
          let:16 a32 = (-1 + a30) in
          M[a32] := 20;
          let:16 a33 = (-1 + a32) in
          M[a33] := C;
          advance (11)
          #14CD
          #instruction: LD   (HL),A
          M[391C] := a31;
          advance (7)
          #14CE
          #instruction: LD   BC,0020
          advance (10)
          #14D1
          #instruction: ADD  HL,BC
          let:17 a34 = add17(0020,391C) in
          advance (10)
          #14D2
          #instruction: POP  BC
          let:16 a35 = (1 + a33) in
          let:8 a36 = M[a33] in
          let:16 a37 = (1 + a35) in
          let:8 a38 = M[a35] in
          advance (10)
          #14D3
          #instruction: DEC  B
          let:16 a39 = addWithCarry(!true,a38,~00) in
          let:8 a40 = (a38 & 0F) in
          let:8 a41 = (~00 & 0F) in
          let:16 a42 = addWithCarry(!true,a40,a41) in
          advance (5)
          #14D4
          #instruction: JP   NZ,14CC
          if (!is_zero(a39[7:0])) {
            advance (10)
            A := a31;
            B := a39[7:0];
            C := a36;
            H := a34[15:0][15:8];
            L := a34[15:0][7:0];
            SPH := a37[15:8];
            SPL := a37[7:0];
            FlagS := a39[7:0][7];
            FlagZ := is_zero(a39[7:0]);
            FlagA := a42[7:0][4];
            FlagP := parity(a39[7:0]);
            FlagCY := a34[16];
            jump (14CC);
          } else {
            advance (10)
            #14D7
            #instruction: RET
            let:16 a43 = (1 + a37) in
            let:8 a44 = M[a37] in
            let:16 a45 = (1 + a43) in
            let:8 a46 = M[a43] in
            advance (10)
            A := a31;
            B := a39[7:0];
            C := a36;
            H := a34[15:0][15:8];
            L := a34[15:0][7:0];
            SPH := a45[15:8];
            SPL := a45[7:0];
            FlagS := a39[7:0][7];
            FlagZ := is_zero(a39[7:0]);
            FlagA := a42[7:0][4];
            FlagP := parity(a39[7:0]);
            FlagCY := a34[16];
            jump ((a46,a44));
          }
        }
      } else {
        advance (10)
        #08B3
        #instruction: CALL 09CA
        let:16 a47 = (-1 + (SPH,SPL)) in
        M[a47] := 08;
        let:16 a48 = (-1 + a47) in
        M[a48] := B6;
        #return-to: 08B6
        advance (17)
        #09CA
        #instruction: LD   A,(2067)
        let:8 a49 = M[2067] in
        advance (13)
        #09CD
        #instruction: RRCA
        advance (4)
        #09CE
        #instruction: LD   HL,20F8
        advance (10)
        #09D1
        #instruction: RET  CY
        if (a49[0]) {
          let:16 a50 = (1 + a48) in
          let:8 a51 = M[a48] in
          let:16 a52 = (1 + a50) in
          let:8 a53 = M[a50] in
          advance (11)
          A := updateBit((a49 >> 01),7,a49[0]);
          H := 20;
          L := F8;
          SPH := a52[15:8];
          SPL := a52[7:0];
          FlagS := a8[7];
          FlagZ := is_zero(a8);
          FlagA := a9[3];
          FlagP := parity(a8);
          FlagCY := a49[0];
          jump ((a53,a51));
        } else {
          advance (5)
          #09D2
          #instruction: LD   HL,20FC
          advance (10)
          #09D5
          #instruction: RET
          let:16 a54 = (1 + a48) in
          let:8 a55 = M[a48] in
          let:16 a56 = (1 + a54) in
          let:8 a57 = M[a54] in
          advance (10)
          A := updateBit((a49 >> 01),7,a49[0]);
          H := 20;
          L := FC;
          SPH := a56[15:8];
          SPL := a56[7:0];
          FlagS := a8[7];
          FlagZ := is_zero(a8);
          FlagA := a9[3];
          FlagP := parity(a8);
          FlagCY := a49[0];
          jump ((a57,a55));
        }
      }
    }

08F8:

    #08F8
    #instruction: POP  DE
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #08F9
    #instruction: INC  DE
    let:16 a5 = (1 + (a4,a2)) in
    advance (5)
    #08FA
    #instruction: DEC  C
    let:16 a6 = addWithCarry(!true,C,~00) in
    let:8 a7 = (C & 0F) in
    let:8 a8 = (~00 & 0F) in
    let:16 a9 = addWithCarry(!true,a7,a8) in
    advance (5)
    #08FB
    #instruction: JP   NZ,08F3
    if (!is_zero(a6[7:0])) {
      advance (10)
      #08F3
      #instruction: LD   A,(DE)
      let:8 a10 = M[a5] in
      advance (7)
      #08F4
      #instruction: PUSH DE
      let:16 a11 = (-1 + a3) in
      M[a11] := a5[15:8];
      let:16 a12 = (-1 + a11) in
      M[a12] := a5[7:0];
      advance (11)
      #08F5
      #instruction: CALL 08FF
      let:16 a13 = (-1 + a12) in
      M[a13] := 08;
      let:16 a14 = (-1 + a13) in
      M[a14] := F8;
      #return-to: 08F8
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a15 = (-1 + a14) in
      M[a15] := H;
      let:16 a16 = (-1 + a15) in
      M[a16] := L;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a17 = add17((00,a10),(00,a10)) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a18 = add17(a17[15:0],a17[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a19 = add17(a18[15:0],a18[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a20 = add17(1E00,a19[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a21 = (1 + a16) in
      let:8 a22 = M[a16] in
      let:16 a23 = (1 + a21) in
      let:8 a24 = M[a21] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a25 = (-1 + a23) in
      M[a25] := 08;
      let:16 a26 = (-1 + a25) in
      M[a26] := a6[7:0];
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a27 = M[a20[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a24,a22)] := a27;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a28 = (1 + a20[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a29 = add17(0020,(a24,a22)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a30 = (1 + a26) in
      let:8 a31 = M[a26] in
      let:16 a32 = (1 + a30) in
      let:8 a33 = M[a30] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a34 = addWithCarry(!true,a33,~00) in
      let:8 a35 = (a33 & 0F) in
      let:8 a36 = (~00 & 0F) in
      let:16 a37 = addWithCarry(!true,a35,a36) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a34[7:0])) {
        advance (10)
        A := a27;
        B := a34[7:0];
        C := a31;
        D := a28[15:8];
        E := a28[7:0];
        H := a29[15:0][15:8];
        L := a29[15:0][7:0];
        SPH := a32[15:8];
        SPL := a32[7:0];
        FlagS := a34[7:0][7];
        FlagZ := is_zero(a34[7:0]);
        FlagA := a37[7:0][4];
        FlagP := parity(a34[7:0]);
        FlagCY := a29[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a38 = (1 + a32) in
        let:8 a39 = M[a32] in
        let:16 a40 = (1 + a38) in
        let:8 a41 = M[a38] in
        advance (10)
        A := a27;
        B := a34[7:0];
        C := a31;
        D := a28[15:8];
        E := a28[7:0];
        H := a29[15:0][15:8];
        L := a29[15:0][7:0];
        SPH := a40[15:8];
        SPL := a40[7:0];
        FlagS := a34[7:0][7];
        FlagZ := is_zero(a34[7:0]);
        FlagA := a37[7:0][4];
        FlagP := parity(a34[7:0]);
        FlagCY := a29[16];
        jump ((a41,a39));
      }
    } else {
      advance (10)
      #08FE
      #instruction: RET
      let:16 a42 = (1 + a3) in
      let:8 a43 = M[a3] in
      let:16 a44 = (1 + a42) in
      let:8 a45 = M[a42] in
      advance (10)
      C := a6[7:0];
      D := a5[15:8];
      E := a5[7:0];
      SPH := a44[15:8];
      SPL := a44[7:0];
      FlagS := a6[7:0][7];
      FlagZ := is_zero(a6[7:0]);
      FlagA := a9[7:0][4];
      FlagP := parity(a6[7:0]);
      jump ((a45,a43));
    }

0931:

    #0931
    #instruction: LD   L,FF
    advance (7)
    #0933
    #instruction: LD   A,(HL)
    let:8 a1 = M[(H,FF)] in
    advance (7)
    #0934
    #instruction: RET
    let:16 a2 = (1 + (SPH,SPL)) in
    let:8 a3 = M[(SPH,SPL)] in
    let:16 a4 = (1 + a2) in
    let:8 a5 = M[a2] in
    advance (10)
    A := a1;
    L := FF;
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump ((a5,a3));

0938:

    #0938
    #instruction: DEC  HL
    let:16 a1 = (-1 + (H,L)) in
    advance (5)
    #0939
    #instruction: DEC  HL
    let:16 a2 = (-1 + a1) in
    advance (5)
    #093A
    #instruction: LD   A,(HL)
    let:8 a3 = M[a2] in
    advance (7)
    #093B
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #093C
    #instruction: RET  Z
    if (is_zero(a4)) {
      let:16 a6 = (1 + (SPH,SPL)) in
      let:8 a7 = M[(SPH,SPL)] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (11)
      A := a4;
      H := a2[15:8];
      L := a2[7:0];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    } else {
      advance (5)
      #093D
      #instruction: LD   B,15
      advance (7)
      #093F
      #instruction: IN   02
      advance (10)
      #0941
      #instruction: AND  08
      let:8 a10 = (08 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
      let:8 a11 = (08 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
      advance (7)
      #0943
      #instruction: JP   Z,0948
      if (is_zero(a10)) {
        advance (10)
        #0948
        #instruction: CALL 09CA
        let:16 a12 = (-1 + (SPH,SPL)) in
        M[a12] := 09;
        let:16 a13 = (-1 + a12) in
        M[a13] := 4B;
        #return-to: 094B
        advance (17)
        #09CA
        #instruction: LD   A,(2067)
        let:8 a14 = M[2067] in
        advance (13)
        #09CD
        #instruction: RRCA
        advance (4)
        #09CE
        #instruction: LD   HL,20F8
        advance (10)
        #09D1
        #instruction: RET  CY
        if (a14[0]) {
          let:16 a15 = (1 + a13) in
          let:8 a16 = M[a13] in
          let:16 a17 = (1 + a15) in
          let:8 a18 = M[a15] in
          advance (11)
          A := updateBit((a14 >> 01),7,a14[0]);
          B := 15;
          H := 20;
          L := F8;
          SPH := a17[15:8];
          SPL := a17[7:0];
          FlagS := a10[7];
          FlagZ := is_zero(a10);
          FlagA := a11[3];
          FlagP := parity(a10);
          FlagCY := a14[0];
          jump ((a18,a16));
        } else {
          advance (5)
          #09D2
          #instruction: LD   HL,20FC
          advance (10)
          #09D5
          #instruction: RET
          let:16 a19 = (1 + a13) in
          let:8 a20 = M[a13] in
          let:16 a21 = (1 + a19) in
          let:8 a22 = M[a19] in
          advance (10)
          A := updateBit((a14 >> 01),7,a14[0]);
          B := 15;
          H := 20;
          L := FC;
          SPH := a21[15:8];
          SPL := a21[7:0];
          FlagS := a10[7];
          FlagZ := is_zero(a10);
          FlagA := a11[3];
          FlagP := parity(a10);
          FlagCY := a14[0];
          jump ((a22,a20));
        }
      } else {
        advance (10)
        #0946
        #instruction: LD   B,10
        advance (7)
        #0948
        #instruction: CALL 09CA
        let:16 a23 = (-1 + (SPH,SPL)) in
        M[a23] := 09;
        let:16 a24 = (-1 + a23) in
        M[a24] := 4B;
        #return-to: 094B
        advance (17)
        #09CA
        #instruction: LD   A,(2067)
        let:8 a25 = M[2067] in
        advance (13)
        #09CD
        #instruction: RRCA
        advance (4)
        #09CE
        #instruction: LD   HL,20F8
        advance (10)
        #09D1
        #instruction: RET  CY
        if (a25[0]) {
          let:16 a26 = (1 + a24) in
          let:8 a27 = M[a24] in
          let:16 a28 = (1 + a26) in
          let:8 a29 = M[a26] in
          advance (11)
          A := updateBit((a25 >> 01),7,a25[0]);
          B := 10;
          H := 20;
          L := F8;
          SPH := a28[15:8];
          SPL := a28[7:0];
          FlagS := a10[7];
          FlagZ := is_zero(a10);
          FlagA := a11[3];
          FlagP := parity(a10);
          FlagCY := a25[0];
          jump ((a29,a27));
        } else {
          advance (5)
          #09D2
          #instruction: LD   HL,20FC
          advance (10)
          #09D5
          #instruction: RET
          let:16 a30 = (1 + a24) in
          let:8 a31 = M[a24] in
          let:16 a32 = (1 + a30) in
          let:8 a33 = M[a30] in
          advance (10)
          A := updateBit((a25 >> 01),7,a25[0]);
          B := 10;
          H := 20;
          L := FC;
          SPH := a32[15:8];
          SPL := a32[7:0];
          FlagS := a10[7];
          FlagZ := is_zero(a10);
          FlagA := a11[3];
          FlagP := parity(a10);
          FlagCY := a25[0];
          jump ((a33,a31));
        }
      }
    }

094B:

    #094B
    #instruction: INC  HL
    let:16 a1 = (1 + (H,L)) in
    advance (5)
    #094C
    #instruction: LD   A,(HL)
    let:8 a2 = M[a1] in
    advance (7)
    #094D
    #instruction: CP   B
    let:16 a3 = addWithCarry(!false,a2,~B) in
    let:8 a4 = (a2 & 0F) in
    let:8 a5 = (~B & 0F) in
    let:16 a6 = addWithCarry(!false,a4,a5) in
    advance (4)
    #094E
    #instruction: RET  CY
    if (!a3[15:8][0]) {
      let:16 a7 = (1 + (SPH,SPL)) in
      let:8 a8 = M[(SPH,SPL)] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (11)
      A := a2;
      H := a1[15:8];
      L := a1[7:0];
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := !a3[15:8][0];
      jump ((a10,a8));
    } else {
      advance (5)
      #094F
      #instruction: CALL 092E
      let:16 a11 = (-1 + (SPH,SPL)) in
      M[a11] := 09;
      let:16 a12 = (-1 + a11) in
      M[a12] := 52;
      #return-to: 0952
      advance (17)
      #092E
      #instruction: CALL 1611
      let:16 a13 = (-1 + a12) in
      M[a13] := 09;
      let:16 a14 = (-1 + a13) in
      M[a14] := 31;
      #return-to: 0931
      advance (17)
      #1611
      #instruction: LD   L,00
      advance (7)
      #1613
      #instruction: LD   A,(2067)
      let:8 a15 = M[2067] in
      advance (13)
      #1616
      #instruction: LD   H,A
      advance (5)
      #1617
      #instruction: RET
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      advance (10)
      A := a15;
      H := a15;
      L := 00;
      SPH := a18[15:8];
      SPL := a18[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := !a3[15:8][0];
      jump ((a19,a17));
    }

0952:

    #0952
    #instruction: INC  (HL)
    let:8 a1 = M[(H,L)] in
    let:16 a2 = addWithCarry(true,a1,00) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (00 & 0F) in
    let:16 a5 = addWithCarry(true,a3,a4) in
    M[(H,L)] := a2[7:0];
    advance (10)
    #0953
    #instruction: LD   A,(HL)
    let:8 a6 = M[(H,L)] in
    advance (7)
    #0954
    #instruction: PUSH PSW
    let:16 a7 = (-1 + (SPH,SPL)) in
    M[a7] := a6;
    let:16 a8 = (-1 + a7) in
    M[a8] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a2[7:0][7]),6,is_zero(a2[7:0])),4,a5[7:0][4]),2,parity(a2[7:0])),0,FlagCY);
    advance (11)
    #0955
    #instruction: LD   HL,2501
    advance (10)
    #0958
    #instruction: INC  H
    let:16 a9 = addWithCarry(true,25,00) in
    let:8 a10 = (25 & 0F) in
    let:8 a11 = (00 & 0F) in
    let:16 a12 = addWithCarry(true,a10,a11) in
    advance (5)
    #0959
    #instruction: INC  H
    let:16 a13 = addWithCarry(true,a9[7:0],00) in
    let:8 a14 = (a9[7:0] & 0F) in
    let:8 a15 = (00 & 0F) in
    let:16 a16 = addWithCarry(true,a14,a15) in
    advance (5)
    #095A
    #instruction: DEC  A
    let:16 a17 = addWithCarry(!true,a6,~00) in
    let:8 a18 = (a6 & 0F) in
    let:8 a19 = (~00 & 0F) in
    let:16 a20 = addWithCarry(!true,a18,a19) in
    advance (5)
    #095B
    #instruction: JP   NZ,0958
    if (!is_zero(a17[7:0])) {
      advance (10)
      A := a17[7:0];
      H := a13[7:0];
      L := 01;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a17[7:0][7];
      FlagZ := is_zero(a17[7:0]);
      FlagA := a20[7:0][4];
      FlagP := parity(a17[7:0]);
      jump (0958);
    } else {
      advance (10)
      #095E
      #instruction: LD   B,10
      advance (7)
      #0960
      #instruction: LD   DE,1C60
      advance (10)
      #0963
      #instruction: CALL 1439
      let:16 a21 = (-1 + a8) in
      M[a21] := 09;
      let:16 a22 = (-1 + a21) in
      M[a22] := 66;
      #return-to: 0966
      advance (17)
      #1439
      #instruction: PUSH BC
      let:16 a23 = (-1 + a22) in
      M[a23] := 10;
      let:16 a24 = (-1 + a23) in
      M[a24] := C;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a13[7:0],01)] := 00;
      advance (7)
      #143C
      #instruction: INC  DE
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a25 = add17(0020,(a13[7:0],01)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a26 = (1 + a24) in
      let:8 a27 = M[a24] in
      let:16 a28 = (1 + a26) in
      let:8 a29 = M[a26] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a30 = addWithCarry(!true,a29,~00) in
      let:8 a31 = (a29 & 0F) in
      let:8 a32 = (~00 & 0F) in
      let:16 a33 = addWithCarry(!true,a31,a32) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a30[7:0])) {
        advance (10)
        A := 00;
        B := a30[7:0];
        C := a27;
        D := 1C;
        E := 61;
        H := a25[15:0][15:8];
        L := a25[15:0][7:0];
        SPH := a28[15:8];
        SPL := a28[7:0];
        FlagS := a30[7:0][7];
        FlagZ := is_zero(a30[7:0]);
        FlagA := a33[7:0][4];
        FlagP := parity(a30[7:0]);
        FlagCY := a25[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a34 = (1 + a28) in
        let:8 a35 = M[a28] in
        let:16 a36 = (1 + a34) in
        let:8 a37 = M[a34] in
        advance (10)
        A := 00;
        B := a30[7:0];
        C := a27;
        D := 1C;
        E := 61;
        H := a25[15:0][15:8];
        L := a25[15:0][7:0];
        SPH := a36[15:8];
        SPL := a36[7:0];
        FlagS := a30[7:0][7];
        FlagZ := is_zero(a30[7:0]);
        FlagA := a33[7:0][4];
        FlagP := parity(a30[7:0]);
        FlagCY := a25[16];
        jump ((a37,a35));
      }
    }

0966:

    #0966
    #instruction: POP  PSW
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0967
    #instruction: INC  A
    let:16 a5 = addWithCarry(true,a4,00) in
    let:8 a6 = (a4 & 0F) in
    let:8 a7 = (00 & 0F) in
    let:16 a8 = addWithCarry(true,a6,a7) in
    advance (5)
    #0968
    #instruction: CALL 1A8B
    let:16 a9 = (-1 + a3) in
    M[a9] := 09;
    let:16 a10 = (-1 + a9) in
    M[a10] := 6B;
    #return-to: 096B
    advance (17)
    #1A8B
    #instruction: LD   HL,2501
    advance (10)
    #1A8E
    #instruction: AND  0F
    let:8 a11 = (0F & a5[7:0]) in
    let:8 a12 = (0F | a5[7:0]) in
    advance (7)
    #1A90
    #instruction: JP   09C5
    advance (10)
    #09C5
    #instruction: ADD  1A
    let:16 a13 = addWithCarry(false,1A,a11) in
    let:8 a14 = (1A & 0F) in
    let:8 a15 = (a11 & 0F) in
    let:16 a16 = addWithCarry(false,a14,a15) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a17 = (-1 + a10) in
    M[a17] := 25;
    let:16 a18 = (-1 + a17) in
    M[a18] := 01;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a19 = add17((00,a13[7:0]),(00,a13[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a20 = add17(a19[15:0],a19[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a21 = add17(a20[15:0],a20[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a22 = add17(1E00,a21[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a23 = (1 + a18) in
    let:8 a24 = M[a18] in
    let:16 a25 = (1 + a23) in
    let:8 a26 = M[a23] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a27 = (-1 + a25) in
    M[a27] := 08;
    let:16 a28 = (-1 + a27) in
    M[a28] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a29 = M[a22[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a26,a24)] := a29;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a30 = (1 + a22[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a31 = add17(0020,(a26,a24)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a32 = (1 + a28) in
    let:8 a33 = M[a28] in
    let:16 a34 = (1 + a32) in
    let:8 a35 = M[a32] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a36 = addWithCarry(!true,a35,~00) in
    let:8 a37 = (a35 & 0F) in
    let:8 a38 = (~00 & 0F) in
    let:16 a39 = addWithCarry(!true,a37,a38) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a36[7:0])) {
      advance (10)
      A := a29;
      B := a36[7:0];
      C := a33;
      D := a30[15:8];
      E := a30[7:0];
      H := a31[15:0][15:8];
      L := a31[15:0][7:0];
      SPH := a34[15:8];
      SPL := a34[7:0];
      FlagS := a36[7:0][7];
      FlagZ := is_zero(a36[7:0]);
      FlagA := a39[7:0][4];
      FlagP := parity(a36[7:0]);
      FlagCY := a31[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a40 = (1 + a34) in
      let:8 a41 = M[a34] in
      let:16 a42 = (1 + a40) in
      let:8 a43 = M[a40] in
      advance (10)
      A := a29;
      B := a36[7:0];
      C := a33;
      D := a30[15:8];
      E := a30[7:0];
      H := a31[15:0][15:8];
      L := a31[15:0][7:0];
      SPH := a42[15:8];
      SPL := a42[7:0];
      FlagS := a36[7:0][7];
      FlagZ := is_zero(a36[7:0]);
      FlagA := a39[7:0][4];
      FlagP := parity(a36[7:0]);
      FlagCY := a31[16];
      jump ((a43,a41));
    }

096B:

    #096B
    #instruction: CALL 1910
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 6E;
    #return-to: 096E
    advance (17)
    #1910
    #instruction: LD   HL,20E7
    advance (10)
    #1913
    #instruction: LD   A,(2067)
    let:8 a3 = M[2067] in
    advance (13)
    #1916
    #instruction: RRCA
    advance (4)
    #1917
    #instruction: RET  CY
    if (a3[0]) {
      let:16 a4 = (1 + a2) in
      let:8 a5 = M[a2] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (11)
      A := updateBit((a3 >> 01),7,a3[0]);
      H := 20;
      L := E7;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagCY := a3[0];
      jump ((a7,a5));
    } else {
      advance (5)
      #1918
      #instruction: INC  HL
      advance (5)
      #1919
      #instruction: RET
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := updateBit((a3 >> 01),7,a3[0]);
      H := 20;
      L := E8;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagCY := a3[0];
      jump ((a11,a9));
    }

096E:

    #096E
    #instruction: DEC  HL
    let:16 a1 = (-1 + (H,L)) in
    advance (5)
    #096F
    #instruction: DEC  HL
    let:16 a2 = (-1 + a1) in
    advance (5)
    #0970
    #instruction: LD   (HL),00
    M[a2] := 00;
    advance (10)
    #0972
    #instruction: LD   A,FF
    advance (7)
    #0974
    #instruction: LD   (2099),A
    M[2099] := FF;
    advance (13)
    #0977
    #instruction: LD   B,10
    advance (7)
    #0979
    #instruction: JP   18FA
    advance (10)
    #18FA
    #instruction: LD   A,(2094)
    let:8 a3 = M[2094] in
    advance (13)
    #18FD
    #instruction: OR   B
    let:8 a4 = (10 | a3) in
    advance (4)
    #18FE
    #instruction: LD   (2094),A
    M[2094] := a4;
    advance (13)
    #1901
    #instruction: OUT  03
    sound_control(Ufo,a4[0]);
    sound_control(Shot,a4[1]);
    sound_control(PlayerDie,a4[2]);
    sound_control(InvaderDie,a4[3]);
    sound_control(ExtraLife,a4[4]);
    advance (10)
    #1903
    #instruction: RET
    let:16 a5 = (1 + (SPH,SPL)) in
    let:8 a6 = M[(SPH,SPL)] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    A := a4;
    B := 10;
    H := a2[15:8];
    L := a2[7:0];
    SPH := a7[15:8];
    SPL := a7[7:0];
    FlagS := a4[7];
    FlagZ := is_zero(a4);
    FlagA := false;
    FlagP := parity(a4);
    FlagCY := false;
    jump ((a8,a6));

098B:

    #098B
    #instruction: LD   A,(20F1)
    let:8 a1 = M[20F1] in
    advance (13)
    #098E
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #098F
    #instruction: RET  Z
    if (is_zero(a2)) {
      let:16 a4 = (1 + (SPH,SPL)) in
      let:8 a5 = M[(SPH,SPL)] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (11)
      A := a2;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump ((a7,a5));
    } else {
      advance (5)
      #0990
      #instruction: XOR  A
      let:8 a8 = (a2 ^ a2) in
      advance (4)
      #0991
      #instruction: LD   (20F1),A
      M[20F1] := a8;
      advance (13)
      #0994
      #instruction: PUSH HL
      let:16 a9 = (-1 + (SPH,SPL)) in
      M[a9] := H;
      let:16 a10 = (-1 + a9) in
      M[a10] := L;
      advance (11)
      #0995
      #instruction: LD   HL,(20F2)
      let:8 a11 = M[20F2] in
      let:8 a12 = M[20F3] in
      advance (16)
      #0998
      #instruction: EX   DE,HL
      advance (4)
      #0999
      #instruction: POP  HL
      let:16 a13 = (1 + a10) in
      let:8 a14 = M[a10] in
      let:16 a15 = (1 + a13) in
      let:8 a16 = M[a13] in
      advance (10)
      #099A
      #instruction: LD   A,(HL)
      let:8 a17 = M[(a16,a14)] in
      advance (7)
      #099B
      #instruction: ADD  E
      let:16 a18 = addWithCarry(false,a11,a17) in
      let:8 a19 = (a11 & 0F) in
      let:8 a20 = (a17 & 0F) in
      let:16 a21 = addWithCarry(false,a19,a20) in
      advance (4)
      #099C
      #instruction: DAA
      let:8 a22 = (a18[7:0] & 0F) in
      let:16 a23 = addWithCarry(false,a22,06) in
      let:16 a24 = addWithCarry(((((a22[1] || a22[2]) && a22[3]) || a21[7:0][4]) ? a23[7:0] : a22)[4],(a18[7:0] >> 04),00) in
      let:16 a25 = addWithCarry(false,a24[7:0],06) in
      let:8 a26 = (((((a22[1] || a22[2]) && a22[3]) || a21[7:0][4]) ? a23[7:0] : a22) & 0F) in
      let:8 a27 = ((((((a24[7:0][1] || a24[7:0][2]) && a24[7:0][3]) || a18[15:8][0]) ? a25[7:0] : a24[7:0]) << 04) | a26) in
      advance (4)
      #099D
      #instruction: LD   (HL),A
      M[(a16,a14)] := a27;
      advance (7)
      #099E
      #instruction: LD   E,A
      advance (5)
      #099F
      #instruction: INC  HL
      let:16 a28 = (1 + (a16,a14)) in
      advance (5)
      #09A0
      #instruction: LD   A,(HL)
      let:8 a29 = M[a28] in
      advance (7)
      #09A1
      #instruction: ADC  D
      let:16 a30 = addWithCarry((((((a24[7:0][1] || a24[7:0][2]) && a24[7:0][3]) || a18[15:8][0]) ? a25[7:0] : a24[7:0])[4] || a18[15:8][0]),a12,a29) in
      let:8 a31 = (a12 & 0F) in
      let:8 a32 = (a29 & 0F) in
      let:16 a33 = addWithCarry((((((a24[7:0][1] || a24[7:0][2]) && a24[7:0][3]) || a18[15:8][0]) ? a25[7:0] : a24[7:0])[4] || a18[15:8][0]),a31,a32) in
      advance (4)
      #09A2
      #instruction: DAA
      let:8 a34 = (a30[7:0] & 0F) in
      let:16 a35 = addWithCarry(false,a34,06) in
      let:16 a36 = addWithCarry(((((a34[1] || a34[2]) && a34[3]) || a33[7:0][4]) ? a35[7:0] : a34)[4],(a30[7:0] >> 04),00) in
      let:16 a37 = addWithCarry(false,a36[7:0],06) in
      let:8 a38 = (((((a34[1] || a34[2]) && a34[3]) || a33[7:0][4]) ? a35[7:0] : a34) & 0F) in
      let:8 a39 = ((((((a36[7:0][1] || a36[7:0][2]) && a36[7:0][3]) || a30[15:8][0]) ? a37[7:0] : a36[7:0]) << 04) | a38) in
      advance (4)
      #09A3
      #instruction: LD   (HL),A
      M[a28] := a39;
      advance (7)
      #09A4
      #instruction: LD   D,A
      advance (5)
      #09A5
      #instruction: INC  HL
      let:16 a40 = (1 + a28) in
      advance (5)
      #09A6
      #instruction: LD   A,(HL)
      let:8 a41 = M[a40] in
      advance (7)
      #09A7
      #instruction: INC  HL
      let:16 a42 = (1 + a40) in
      advance (5)
      #09A8
      #instruction: LD   H,(HL)
      let:8 a43 = M[a42] in
      advance (7)
      #09A9
      #instruction: LD   L,A
      advance (5)
      #09AA
      #instruction: JP   09AD
      advance (10)
      #09AD
      #instruction: LD   A,D
      advance (5)
      #09AE
      #instruction: CALL 09B2
      let:16 a44 = (-1 + a15) in
      M[a44] := 09;
      let:16 a45 = (-1 + a44) in
      M[a45] := B1;
      #return-to: 09B1
      advance (17)
      #09B2
      #instruction: PUSH DE
      let:16 a46 = (-1 + a45) in
      M[a46] := a39;
      let:16 a47 = (-1 + a46) in
      M[a47] := a27;
      advance (11)
      #09B3
      #instruction: PUSH PSW
      let:16 a48 = (-1 + a47) in
      M[a48] := a39;
      let:16 a49 = (-1 + a48) in
      M[a49] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a39[7]),6,is_zero(a39)),4,((((a34[1] || a34[2]) && a34[3]) || a33[7:0][4]) ? a35[7:0] : a34)[4]),2,parity(a39)),0,(((((a36[7:0][1] || a36[7:0][2]) && a36[7:0][3]) || a30[15:8][0]) ? a37[7:0] : a36[7:0])[4] || a30[15:8][0]));
      advance (11)
      #09B4
      #instruction: RRCA
      advance (4)
      #09B5
      #instruction: RRCA
      advance (4)
      #09B6
      #instruction: RRCA
      advance (4)
      #09B7
      #instruction: RRCA
      advance (4)
      #09B8
      #instruction: AND  0F
      let:8 a50 = (0F & updateBit((updateBit((updateBit((updateBit((a39 >> 01),7,a39[0]) >> 01),7,updateBit((a39 >> 01),7,a39[0])[0]) >> 01),7,updateBit((updateBit((a39 >> 01),7,a39[0]) >> 01),7,updateBit((a39 >> 01),7,a39[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a39 >> 01),7,a39[0]) >> 01),7,updateBit((a39 >> 01),7,a39[0])[0]) >> 01),7,updateBit((updateBit((a39 >> 01),7,a39[0]) >> 01),7,updateBit((a39 >> 01),7,a39[0])[0])[0])[0])) in
      let:8 a51 = (0F | updateBit((updateBit((updateBit((updateBit((a39 >> 01),7,a39[0]) >> 01),7,updateBit((a39 >> 01),7,a39[0])[0]) >> 01),7,updateBit((updateBit((a39 >> 01),7,a39[0]) >> 01),7,updateBit((a39 >> 01),7,a39[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a39 >> 01),7,a39[0]) >> 01),7,updateBit((a39 >> 01),7,a39[0])[0]) >> 01),7,updateBit((updateBit((a39 >> 01),7,a39[0]) >> 01),7,updateBit((a39 >> 01),7,a39[0])[0])[0])[0])) in
      advance (7)
      #09BA
      #instruction: CALL 09C5
      let:16 a52 = (-1 + a49) in
      M[a52] := 09;
      let:16 a53 = (-1 + a52) in
      M[a53] := BD;
      #return-to: 09BD
      advance (17)
      #09C5
      #instruction: ADD  1A
      let:16 a54 = addWithCarry(false,1A,a50) in
      let:8 a55 = (1A & 0F) in
      let:8 a56 = (a50 & 0F) in
      let:16 a57 = addWithCarry(false,a55,a56) in
      advance (7)
      #09C7
      #instruction: JP   08FF
      advance (10)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a58 = (-1 + a53) in
      M[a58] := a43;
      let:16 a59 = (-1 + a58) in
      M[a59] := a41;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a60 = add17((00,a54[7:0]),(00,a54[7:0])) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a61 = add17(a60[15:0],a60[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a62 = add17(a61[15:0],a61[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a63 = add17(1E00,a62[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a64 = (1 + a59) in
      let:8 a65 = M[a59] in
      let:16 a66 = (1 + a64) in
      let:8 a67 = M[a64] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a68 = (-1 + a66) in
      M[a68] := 08;
      let:16 a69 = (-1 + a68) in
      M[a69] := C;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a70 = M[a63[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a67,a65)] := a70;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a71 = (1 + a63[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a72 = add17(0020,(a67,a65)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a73 = (1 + a69) in
      let:8 a74 = M[a69] in
      let:16 a75 = (1 + a73) in
      let:8 a76 = M[a73] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a77 = addWithCarry(!true,a76,~00) in
      let:8 a78 = (a76 & 0F) in
      let:8 a79 = (~00 & 0F) in
      let:16 a80 = addWithCarry(!true,a78,a79) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a77[7:0])) {
        advance (10)
        A := a70;
        B := a77[7:0];
        C := a74;
        D := a71[15:8];
        E := a71[7:0];
        H := a72[15:0][15:8];
        L := a72[15:0][7:0];
        SPH := a75[15:8];
        SPL := a75[7:0];
        FlagS := a77[7:0][7];
        FlagZ := is_zero(a77[7:0]);
        FlagA := a80[7:0][4];
        FlagP := parity(a77[7:0]);
        FlagCY := a72[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a81 = (1 + a75) in
        let:8 a82 = M[a75] in
        let:16 a83 = (1 + a81) in
        let:8 a84 = M[a81] in
        advance (10)
        A := a70;
        B := a77[7:0];
        C := a74;
        D := a71[15:8];
        E := a71[7:0];
        H := a72[15:0][15:8];
        L := a72[15:0][7:0];
        SPH := a83[15:8];
        SPL := a83[7:0];
        FlagS := a77[7:0][7];
        FlagZ := is_zero(a77[7:0]);
        FlagA := a80[7:0][4];
        FlagP := parity(a77[7:0]);
        FlagCY := a72[16];
        jump ((a84,a82));
      }
    }

09B1:

    #09B1
    #instruction: LD   A,E
    advance (5)
    #09B2
    #instruction: PUSH DE
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    advance (11)
    #09B3
    #instruction: PUSH PSW
    let:16 a3 = (-1 + a2) in
    M[a3] := E;
    let:16 a4 = (-1 + a3) in
    M[a4] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #09B4
    #instruction: RRCA
    advance (4)
    #09B5
    #instruction: RRCA
    advance (4)
    #09B6
    #instruction: RRCA
    advance (4)
    #09B7
    #instruction: RRCA
    advance (4)
    #09B8
    #instruction: AND  0F
    let:8 a5 = (0F & updateBit((updateBit((updateBit((updateBit((E >> 01),7,E[0]) >> 01),7,updateBit((E >> 01),7,E[0])[0]) >> 01),7,updateBit((updateBit((E >> 01),7,E[0]) >> 01),7,updateBit((E >> 01),7,E[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((E >> 01),7,E[0]) >> 01),7,updateBit((E >> 01),7,E[0])[0]) >> 01),7,updateBit((updateBit((E >> 01),7,E[0]) >> 01),7,updateBit((E >> 01),7,E[0])[0])[0])[0])) in
    let:8 a6 = (0F | updateBit((updateBit((updateBit((updateBit((E >> 01),7,E[0]) >> 01),7,updateBit((E >> 01),7,E[0])[0]) >> 01),7,updateBit((updateBit((E >> 01),7,E[0]) >> 01),7,updateBit((E >> 01),7,E[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((E >> 01),7,E[0]) >> 01),7,updateBit((E >> 01),7,E[0])[0]) >> 01),7,updateBit((updateBit((E >> 01),7,E[0]) >> 01),7,updateBit((E >> 01),7,E[0])[0])[0])[0])) in
    advance (7)
    #09BA
    #instruction: CALL 09C5
    let:16 a7 = (-1 + a4) in
    M[a7] := 09;
    let:16 a8 = (-1 + a7) in
    M[a8] := BD;
    #return-to: 09BD
    advance (17)
    #09C5
    #instruction: ADD  1A
    let:16 a9 = addWithCarry(false,1A,a5) in
    let:8 a10 = (1A & 0F) in
    let:8 a11 = (a5 & 0F) in
    let:16 a12 = addWithCarry(false,a10,a11) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a13 = (-1 + a8) in
    M[a13] := H;
    let:16 a14 = (-1 + a13) in
    M[a14] := L;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a15 = add17((00,a9[7:0]),(00,a9[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a16 = add17(a15[15:0],a15[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a17 = add17(a16[15:0],a16[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a18 = add17(1E00,a17[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a19 = (1 + a14) in
    let:8 a20 = M[a14] in
    let:16 a21 = (1 + a19) in
    let:8 a22 = M[a19] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a23 = (-1 + a21) in
    M[a23] := 08;
    let:16 a24 = (-1 + a23) in
    M[a24] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a25 = M[a18[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a22,a20)] := a25;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a26 = (1 + a18[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a27 = add17(0020,(a22,a20)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a28 = (1 + a24) in
    let:8 a29 = M[a24] in
    let:16 a30 = (1 + a28) in
    let:8 a31 = M[a28] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a32 = addWithCarry(!true,a31,~00) in
    let:8 a33 = (a31 & 0F) in
    let:8 a34 = (~00 & 0F) in
    let:16 a35 = addWithCarry(!true,a33,a34) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a32[7:0])) {
      advance (10)
      A := a25;
      B := a32[7:0];
      C := a29;
      D := a26[15:8];
      E := a26[7:0];
      H := a27[15:0][15:8];
      L := a27[15:0][7:0];
      SPH := a30[15:8];
      SPL := a30[7:0];
      FlagS := a32[7:0][7];
      FlagZ := is_zero(a32[7:0]);
      FlagA := a35[7:0][4];
      FlagP := parity(a32[7:0]);
      FlagCY := a27[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a36 = (1 + a30) in
      let:8 a37 = M[a30] in
      let:16 a38 = (1 + a36) in
      let:8 a39 = M[a36] in
      advance (10)
      A := a25;
      B := a32[7:0];
      C := a29;
      D := a26[15:8];
      E := a26[7:0];
      H := a27[15:0][15:8];
      L := a27[15:0][7:0];
      SPH := a38[15:8];
      SPL := a38[7:0];
      FlagS := a32[7:0][7];
      FlagZ := is_zero(a32[7:0]);
      FlagA := a35[7:0][4];
      FlagP := parity(a32[7:0]);
      FlagCY := a27[16];
      jump ((a39,a37));
    }

09BD:

    #09BD
    #instruction: POP  PSW
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #09BE
    #instruction: AND  0F
    let:8 a5 = (0F & a4) in
    let:8 a6 = (0F | a4) in
    advance (7)
    #09C0
    #instruction: CALL 09C5
    let:16 a7 = (-1 + a3) in
    M[a7] := 09;
    let:16 a8 = (-1 + a7) in
    M[a8] := C3;
    #return-to: 09C3
    advance (17)
    #09C5
    #instruction: ADD  1A
    let:16 a9 = addWithCarry(false,1A,a5) in
    let:8 a10 = (1A & 0F) in
    let:8 a11 = (a5 & 0F) in
    let:16 a12 = addWithCarry(false,a10,a11) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a13 = (-1 + a8) in
    M[a13] := H;
    let:16 a14 = (-1 + a13) in
    M[a14] := L;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a15 = add17((00,a9[7:0]),(00,a9[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a16 = add17(a15[15:0],a15[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a17 = add17(a16[15:0],a16[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a18 = add17(1E00,a17[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a19 = (1 + a14) in
    let:8 a20 = M[a14] in
    let:16 a21 = (1 + a19) in
    let:8 a22 = M[a19] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a23 = (-1 + a21) in
    M[a23] := 08;
    let:16 a24 = (-1 + a23) in
    M[a24] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a25 = M[a18[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a22,a20)] := a25;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a26 = (1 + a18[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a27 = add17(0020,(a22,a20)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a28 = (1 + a24) in
    let:8 a29 = M[a24] in
    let:16 a30 = (1 + a28) in
    let:8 a31 = M[a28] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a32 = addWithCarry(!true,a31,~00) in
    let:8 a33 = (a31 & 0F) in
    let:8 a34 = (~00 & 0F) in
    let:16 a35 = addWithCarry(!true,a33,a34) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a32[7:0])) {
      advance (10)
      A := a25;
      B := a32[7:0];
      C := a29;
      D := a26[15:8];
      E := a26[7:0];
      H := a27[15:0][15:8];
      L := a27[15:0][7:0];
      SPH := a30[15:8];
      SPL := a30[7:0];
      FlagS := a32[7:0][7];
      FlagZ := is_zero(a32[7:0]);
      FlagA := a35[7:0][4];
      FlagP := parity(a32[7:0]);
      FlagCY := a27[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a36 = (1 + a30) in
      let:8 a37 = M[a30] in
      let:16 a38 = (1 + a36) in
      let:8 a39 = M[a36] in
      advance (10)
      A := a25;
      B := a32[7:0];
      C := a29;
      D := a26[15:8];
      E := a26[7:0];
      H := a27[15:0][15:8];
      L := a27[15:0][7:0];
      SPH := a38[15:8];
      SPL := a38[7:0];
      FlagS := a32[7:0][7];
      FlagZ := is_zero(a32[7:0]);
      FlagA := a35[7:0][4];
      FlagP := parity(a32[7:0]);
      FlagCY := a27[16];
      jump ((a39,a37));
    }

09C3:

    #09C3
    #instruction: POP  DE
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #09C4
    #instruction: RET
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    D := a4;
    E := a2;
    SPH := a7[15:8];
    SPL := a7[7:0];
    jump ((a8,a6));

09F2:

    #09F2
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #09F3
    #instruction: LD   (20E9),A
    M[20E9] := a1;
    advance (13)
    #09F6
    #instruction: CALL 09D6
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 09;
    let:16 a3 = (-1 + a2) in
    M[a3] := F9;
    #return-to: 09F9
    advance (17)
    #09D6
    #instruction: LD   HL,2402
    advance (10)
    #09D9
    #instruction: LD   (HL),00
    M[2402] := 00;
    advance (10)
    #09DB
    #instruction: INC  HL
    advance (5)
    #09DC
    #instruction: LD   A,L
    advance (5)
    #09DD
    #instruction: AND  1F
    let:8 a4 = (1F & 03) in
    let:8 a5 = (1F | 03) in
    advance (7)
    #09DF
    #instruction: CP   1C
    let:16 a6 = addWithCarry(!false,a4,~1C) in
    let:8 a7 = (a4 & 0F) in
    let:8 a8 = (~1C & 0F) in
    let:16 a9 = addWithCarry(!false,a7,a8) in
    advance (7)
    #09E1
    #instruction: JP   CY,09E8
    if (!a6[15:8][0]) {
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a10 = addWithCarry(!false,24,~40) in
      let:8 a11 = (24 & 0F) in
      let:8 a12 = (~40 & 0F) in
      let:16 a13 = addWithCarry(!false,a11,a12) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a10[15:8][0]) {
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a3[15:8];
        SPL := a3[7:0];
        FlagS := a10[7:0][7];
        FlagZ := is_zero(a10[7:0]);
        FlagA := a13[7:0][4];
        FlagP := parity(a10[7:0]);
        FlagCY := !a10[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a14 = (1 + a3) in
        let:8 a15 = M[a3] in
        let:16 a16 = (1 + a14) in
        let:8 a17 = M[a14] in
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a16[15:8];
        SPL := a16[7:0];
        FlagS := a10[7:0][7];
        FlagZ := is_zero(a10[7:0]);
        FlagA := a13[7:0][4];
        FlagP := parity(a10[7:0]);
        FlagCY := !a10[15:8][0];
        jump ((a17,a15));
      }
    } else {
      advance (10)
      #09E4
      #instruction: LD   DE,0006
      advance (10)
      #09E7
      #instruction: ADD  HL,DE
      let:17 a18 = add17(0006,2403) in
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a19 = addWithCarry(!false,a18[15:0][15:8],~40) in
      let:8 a20 = (a18[15:0][15:8] & 0F) in
      let:8 a21 = (~40 & 0F) in
      let:16 a22 = addWithCarry(!false,a20,a21) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a19[15:8][0]) {
        advance (10)
        A := a18[15:0][15:8];
        D := 00;
        E := 06;
        H := a18[15:0][15:8];
        L := a18[15:0][7:0];
        SPH := a3[15:8];
        SPL := a3[7:0];
        FlagS := a19[7:0][7];
        FlagZ := is_zero(a19[7:0]);
        FlagA := a22[7:0][4];
        FlagP := parity(a19[7:0]);
        FlagCY := !a19[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a23 = (1 + a3) in
        let:8 a24 = M[a3] in
        let:16 a25 = (1 + a23) in
        let:8 a26 = M[a23] in
        advance (10)
        A := a18[15:0][15:8];
        D := 00;
        E := 06;
        H := a18[15:0][15:8];
        L := a18[15:0][7:0];
        SPH := a25[15:8];
        SPL := a25[7:0];
        FlagS := a19[7:0][7];
        FlagZ := is_zero(a19[7:0]);
        FlagA := a22[7:0][4];
        FlagP := parity(a19[7:0]);
        FlagCY := !a19[15:8][0];
        jump ((a26,a24));
      }
    }

09F9:

    #09F9
    #instruction: LD   A,(2067)
    let:8 a1 = M[2067] in
    advance (13)
    #09FC
    #instruction: PUSH PSW
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := a1;
    let:16 a3 = (-1 + a2) in
    M[a3] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #09FD
    #instruction: CALL 01E4
    let:16 a4 = (-1 + a3) in
    M[a4] := 0A;
    let:16 a5 = (-1 + a4) in
    M[a5] := 00;
    #return-to: 0A00
    advance (17)
    #01E4
    #instruction: LD   B,C0
    advance (7)
    #01E6
    #instruction: LD   DE,1B00
    advance (10)
    #01E9
    #instruction: LD   HL,2000
    advance (10)
    #01EC
    #instruction: JP   1A32
    advance (10)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2000] := 01;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a6 = addWithCarry(!true,C0,~00) in
    let:8 a7 = (C0 & 0F) in
    let:8 a8 = (~00 & 0F) in
    let:16 a9 = addWithCarry(!true,a7,a8) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a6[7:0])) {
      advance (10)
      A := 01;
      B := a6[7:0];
      D := 1B;
      E := 01;
      H := 20;
      L := 01;
      SPH := a5[15:8];
      SPL := a5[7:0];
      FlagS := a6[7:0][7];
      FlagZ := is_zero(a6[7:0]);
      FlagA := a9[7:0][4];
      FlagP := parity(a6[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a10 = (1 + a5) in
      let:8 a11 = M[a5] in
      let:16 a12 = (1 + a10) in
      let:8 a13 = M[a10] in
      advance (10)
      A := 01;
      B := a6[7:0];
      D := 1B;
      E := 01;
      H := 20;
      L := 01;
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagS := a6[7:0][7];
      FlagZ := is_zero(a6[7:0]);
      FlagA := a9[7:0][4];
      FlagP := parity(a6[7:0]);
      jump ((a13,a11));
    }

0A00:

    #0A00
    #instruction: POP  PSW
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0A01
    #instruction: LD   (2067),A
    M[2067] := a4;
    advance (13)
    #0A04
    #instruction: LD   A,(2067)
    let:8 a5 = M[2067] in
    advance (13)
    #0A07
    #instruction: LD   H,A
    advance (5)
    #0A08
    #instruction: PUSH HL
    let:16 a6 = (-1 + a3) in
    M[a6] := a5;
    let:16 a7 = (-1 + a6) in
    M[a7] := L;
    advance (11)
    #0A09
    #instruction: LD   L,FE
    advance (7)
    #0A0B
    #instruction: LD   A,(HL)
    let:8 a8 = M[(a5,FE)] in
    advance (7)
    #0A0C
    #instruction: AND  07
    let:8 a9 = (07 & a8) in
    let:8 a10 = (07 | a8) in
    advance (7)
    #0A0E
    #instruction: INC  A
    let:16 a11 = addWithCarry(true,a9,00) in
    let:8 a12 = (a9 & 0F) in
    let:8 a13 = (00 & 0F) in
    let:16 a14 = addWithCarry(true,a12,a13) in
    advance (5)
    #0A0F
    #instruction: LD   (HL),A
    M[(a5,FE)] := a11[7:0];
    advance (7)
    #0A10
    #instruction: LD   HL,1DA2
    advance (10)
    #0A13
    #instruction: INC  HL
    advance (5)
    #0A14
    #instruction: DEC  A
    let:16 a15 = addWithCarry(!true,a11[7:0],~00) in
    let:8 a16 = (a11[7:0] & 0F) in
    let:8 a17 = (~00 & 0F) in
    let:16 a18 = addWithCarry(!true,a16,a17) in
    advance (5)
    #0A15
    #instruction: JP   NZ,0A13
    if (!is_zero(a15[7:0])) {
      advance (10)
      A := a15[7:0];
      H := 1D;
      L := A3;
      SPH := a7[15:8];
      SPL := a7[7:0];
      FlagS := a15[7:0][7];
      FlagZ := is_zero(a15[7:0]);
      FlagA := a18[7:0][4];
      FlagP := parity(a15[7:0]);
      FlagCY := false;
      jump (0A13);
    } else {
      advance (10)
      #0A18
      #instruction: LD   A,(HL)
      advance (7)
      #0A19
      #instruction: POP  HL
      let:16 a19 = (1 + a7) in
      let:8 a20 = M[a7] in
      let:16 a21 = (1 + a19) in
      let:8 a22 = M[a19] in
      advance (10)
      #0A1A
      #instruction: LD   L,FC
      advance (7)
      #0A1C
      #instruction: LD   (HL),A
      M[(a22,FC)] := 60;
      advance (7)
      #0A1D
      #instruction: INC  HL
      let:16 a23 = (1 + (a22,FC)) in
      advance (5)
      #0A1E
      #instruction: LD   (HL),38
      M[a23] := 38;
      advance (10)
      #0A20
      #instruction: LD   A,H
      advance (5)
      #0A21
      #instruction: RRCA
      advance (4)
      #0A22
      #instruction: JP   CY,0A33
      if (a23[15:8][0]) {
        advance (10)
        #0A33
        #instruction: CALL 01EF
        let:16 a24 = (-1 + a21) in
        M[a24] := 0A;
        let:16 a25 = (-1 + a24) in
        M[a25] := 36;
        #return-to: 0A36
        advance (17)
        #01EF
        #instruction: LD   HL,2142
        advance (10)
        #01F2
        #instruction: JP   01F8
        advance (10)
        #01F8
        #instruction: LD   C,04
        advance (7)
        #01FA
        #instruction: LD   DE,1D20
        advance (10)
        #01FD
        #instruction: PUSH DE
        let:16 a26 = (-1 + a25) in
        M[a26] := 1D;
        let:16 a27 = (-1 + a26) in
        M[a27] := 20;
        advance (11)
        #01FE
        #instruction: LD   B,2C
        advance (7)
        #0200
        #instruction: CALL 1A32
        let:16 a28 = (-1 + a27) in
        M[a28] := 02;
        let:16 a29 = (-1 + a28) in
        M[a29] := 03;
        #return-to: 0203
        advance (17)
        #1A32
        #instruction: LD   A,(DE)
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2142] := FF;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a30 = addWithCarry(!true,2C,~00) in
        let:8 a31 = (2C & 0F) in
        let:8 a32 = (~00 & 0F) in
        let:16 a33 = addWithCarry(!true,a31,a32) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a30[7:0])) {
          advance (10)
          A := FF;
          B := a30[7:0];
          C := 04;
          D := 1D;
          E := 21;
          H := 21;
          L := 43;
          SPH := a29[15:8];
          SPL := a29[7:0];
          FlagS := a30[7:0][7];
          FlagZ := is_zero(a30[7:0]);
          FlagA := a33[7:0][4];
          FlagP := parity(a30[7:0]);
          FlagCY := a23[15:8][0];
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a34 = (1 + a29) in
          let:8 a35 = M[a29] in
          let:16 a36 = (1 + a34) in
          let:8 a37 = M[a34] in
          advance (10)
          A := FF;
          B := a30[7:0];
          C := 04;
          D := 1D;
          E := 21;
          H := 21;
          L := 43;
          SPH := a36[15:8];
          SPL := a36[7:0];
          FlagS := a30[7:0][7];
          FlagZ := is_zero(a30[7:0]);
          FlagA := a33[7:0][4];
          FlagP := parity(a30[7:0]);
          FlagCY := a23[15:8][0];
          jump ((a37,a35));
        }
      } else {
        advance (10)
        #0A25
        #instruction: LD   A,21
        advance (7)
        #0A27
        #instruction: LD   (2098),A
        M[2098] := 21;
        advance (13)
        #0A2A
        #instruction: CALL 01F5
        let:16 a38 = (-1 + a21) in
        M[a38] := 0A;
        let:16 a39 = (-1 + a38) in
        M[a39] := 2D;
        #return-to: 0A2D
        advance (17)
        #01F5
        #instruction: LD   HL,2242
        advance (10)
        #01F8
        #instruction: LD   C,04
        advance (7)
        #01FA
        #instruction: LD   DE,1D20
        advance (10)
        #01FD
        #instruction: PUSH DE
        let:16 a40 = (-1 + a39) in
        M[a40] := 1D;
        let:16 a41 = (-1 + a40) in
        M[a41] := 20;
        advance (11)
        #01FE
        #instruction: LD   B,2C
        advance (7)
        #0200
        #instruction: CALL 1A32
        let:16 a42 = (-1 + a41) in
        M[a42] := 02;
        let:16 a43 = (-1 + a42) in
        M[a43] := 03;
        #return-to: 0203
        advance (17)
        #1A32
        #instruction: LD   A,(DE)
        advance (7)
        #1A33
        #instruction: LD   (HL),A
        M[2242] := FF;
        advance (7)
        #1A34
        #instruction: INC  HL
        advance (5)
        #1A35
        #instruction: INC  DE
        advance (5)
        #1A36
        #instruction: DEC  B
        let:16 a44 = addWithCarry(!true,2C,~00) in
        let:8 a45 = (2C & 0F) in
        let:8 a46 = (~00 & 0F) in
        let:16 a47 = addWithCarry(!true,a45,a46) in
        advance (5)
        #1A37
        #instruction: JP   NZ,1A32
        if (!is_zero(a44[7:0])) {
          advance (10)
          A := FF;
          B := a44[7:0];
          C := 04;
          D := 1D;
          E := 21;
          H := 22;
          L := 43;
          SPH := a43[15:8];
          SPL := a43[7:0];
          FlagS := a44[7:0][7];
          FlagZ := is_zero(a44[7:0]);
          FlagA := a47[7:0][4];
          FlagP := parity(a44[7:0]);
          FlagCY := a23[15:8][0];
          jump (1A32);
        } else {
          advance (10)
          #1A3A
          #instruction: RET
          let:16 a48 = (1 + a43) in
          let:8 a49 = M[a43] in
          let:16 a50 = (1 + a48) in
          let:8 a51 = M[a48] in
          advance (10)
          A := FF;
          B := a44[7:0];
          C := 04;
          D := 1D;
          E := 21;
          H := 22;
          L := 43;
          SPH := a50[15:8];
          SPL := a50[7:0];
          FlagS := a44[7:0][7];
          FlagZ := is_zero(a44[7:0]);
          FlagA := a47[7:0][4];
          FlagP := parity(a44[7:0]);
          FlagCY := a23[15:8][0];
          jump ((a51,a49));
        }
      }
    }

0A2D:

    #0A2D
    #instruction: CALL 1904
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 30;
    #return-to: 0A30
    advance (17)
    #1904
    #instruction: LD   HL,2200
    advance (10)
    #1907
    #instruction: JP   01C3
    advance (10)
    #01C3
    #instruction: LD   B,37
    advance (7)
    #01C5
    #instruction: LD   (HL),01
    M[2200] := 01;
    advance (10)
    #01C7
    #instruction: INC  HL
    advance (5)
    #01C8
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,37,~00) in
    let:8 a4 = (37 & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #01C9
    #instruction: JP   NZ,01C5
    if (!is_zero(a3[7:0])) {
      advance (10)
      B := a3[7:0];
      H := 22;
      L := 01;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (01C5);
    } else {
      advance (10)
      #01CC
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      B := a3[7:0];
      H := 22;
      L := 01;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

0A30:

    #0A30
    #instruction: JP   0804
    advance (10)
    #0804
    #instruction: CALL 01CF
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 07;
    #return-to: 0807
    advance (17)
    #01CF
    #instruction: LD   A,01
    advance (7)
    #01D1
    #instruction: LD   B,E0
    advance (7)
    #01D3
    #instruction: LD   HL,2402
    advance (10)
    #01D6
    #instruction: JP   14CC
    advance (10)
    #14CC
    #instruction: PUSH BC
    let:16 a3 = (-1 + a2) in
    M[a3] := E0;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    advance (11)
    #14CD
    #instruction: LD   (HL),A
    M[2402] := 01;
    advance (7)
    #14CE
    #instruction: LD   BC,0020
    advance (10)
    #14D1
    #instruction: ADD  HL,BC
    let:17 a5 = add17(0020,2402) in
    advance (10)
    #14D2
    #instruction: POP  BC
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    #14D3
    #instruction: DEC  B
    let:16 a10 = addWithCarry(!true,a9,~00) in
    let:8 a11 = (a9 & 0F) in
    let:8 a12 = (~00 & 0F) in
    let:16 a13 = addWithCarry(!true,a11,a12) in
    advance (5)
    #14D4
    #instruction: JP   NZ,14CC
    if (!is_zero(a10[7:0])) {
      advance (10)
      A := 01;
      B := a10[7:0];
      C := a7;
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a10[7:0][7];
      FlagZ := is_zero(a10[7:0]);
      FlagA := a13[7:0][4];
      FlagP := parity(a10[7:0]);
      FlagCY := a5[16];
      jump (14CC);
    } else {
      advance (10)
      #14D7
      #instruction: RET
      let:16 a14 = (1 + a8) in
      let:8 a15 = M[a8] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      A := 01;
      B := a10[7:0];
      C := a7;
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a16[15:8];
      SPL := a16[7:0];
      FlagS := a10[7:0][7];
      FlagZ := is_zero(a10[7:0]);
      FlagA := a13[7:0][4];
      FlagP := parity(a10[7:0]);
      FlagCY := a5[16];
      jump ((a17,a15));
    }

0A36:

    #0A36
    #instruction: CALL 01C0
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 39;
    #return-to: 0A39
    advance (17)
    #01C0
    #instruction: LD   HL,2100
    advance (10)
    #01C3
    #instruction: LD   B,37
    advance (7)
    #01C5
    #instruction: LD   (HL),01
    M[2100] := 01;
    advance (10)
    #01C7
    #instruction: INC  HL
    advance (5)
    #01C8
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,37,~00) in
    let:8 a4 = (37 & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #01C9
    #instruction: JP   NZ,01C5
    if (!is_zero(a3[7:0])) {
      advance (10)
      B := a3[7:0];
      H := 21;
      L := 01;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (01C5);
    } else {
      advance (10)
      #01CC
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      B := a3[7:0];
      H := 21;
      L := 01;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

0A39:

    #0A39
    #instruction: JP   0804
    advance (10)
    #0804
    #instruction: CALL 01CF
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 07;
    #return-to: 0807
    advance (17)
    #01CF
    #instruction: LD   A,01
    advance (7)
    #01D1
    #instruction: LD   B,E0
    advance (7)
    #01D3
    #instruction: LD   HL,2402
    advance (10)
    #01D6
    #instruction: JP   14CC
    advance (10)
    #14CC
    #instruction: PUSH BC
    let:16 a3 = (-1 + a2) in
    M[a3] := E0;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    advance (11)
    #14CD
    #instruction: LD   (HL),A
    M[2402] := 01;
    advance (7)
    #14CE
    #instruction: LD   BC,0020
    advance (10)
    #14D1
    #instruction: ADD  HL,BC
    let:17 a5 = add17(0020,2402) in
    advance (10)
    #14D2
    #instruction: POP  BC
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    #14D3
    #instruction: DEC  B
    let:16 a10 = addWithCarry(!true,a9,~00) in
    let:8 a11 = (a9 & 0F) in
    let:8 a12 = (~00 & 0F) in
    let:16 a13 = addWithCarry(!true,a11,a12) in
    advance (5)
    #14D4
    #instruction: JP   NZ,14CC
    if (!is_zero(a10[7:0])) {
      advance (10)
      A := 01;
      B := a10[7:0];
      C := a7;
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a10[7:0][7];
      FlagZ := is_zero(a10[7:0]);
      FlagA := a13[7:0][4];
      FlagP := parity(a10[7:0]);
      FlagCY := a5[16];
      jump (14CC);
    } else {
      advance (10)
      #14D7
      #instruction: RET
      let:16 a14 = (1 + a8) in
      let:8 a15 = M[a8] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      A := 01;
      B := a10[7:0];
      C := a7;
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a16[15:8];
      SPL := a16[7:0];
      FlagS := a10[7:0][7];
      FlagZ := is_zero(a10[7:0]);
      FlagA := a13[7:0][4];
      FlagP := parity(a10[7:0]);
      FlagCY := a5[16];
      jump ((a17,a15));
    }

0A3F:

    #0A3F
    #instruction: JP   NZ,0A52
    if (!FlagZ) {
      advance (10)
      #0A52
      #instruction: CALL 0A59
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 0A;
      let:16 a2 = (-1 + a1) in
      M[a2] := 55;
      #return-to: 0A55
      advance (17)
      #0A59
      #instruction: LD   A,(2015)
      let:8 a3 = M[2015] in
      advance (13)
      #0A5C
      #instruction: CP   FF
      let:16 a4 = addWithCarry(!false,a3,~FF) in
      let:8 a5 = (a3 & 0F) in
      let:8 a6 = (~FF & 0F) in
      let:16 a7 = addWithCarry(!false,a5,a6) in
      advance (7)
      #0A5E
      #instruction: RET
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := a3;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := !a4[15:8][0];
      jump ((a11,a9));
    } else {
      advance (10)
      #0A42
      #instruction: LD   A,30
      advance (7)
      #0A44
      #instruction: LD   (20C0),A
      M[20C0] := 30;
      advance (13)
      #0A47
      #instruction: LD   A,(20C0)
      let:8 a12 = M[20C0] in
      advance (13)
      #0A4A
      #instruction: AND  A
      let:8 a13 = (a12 & a12) in
      let:8 a14 = (a12 | a12) in
      advance (4)
      #0A4B
      #instruction: RET  Z
      if (is_zero(a13)) {
        let:16 a15 = (1 + (SPH,SPL)) in
        let:8 a16 = M[(SPH,SPL)] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (11)
        A := a13;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a13[7];
        FlagZ := is_zero(a13);
        FlagA := a14[3];
        FlagP := parity(a13);
        FlagCY := false;
        jump ((a18,a16));
      } else {
        advance (5)
        #0A4C
        #instruction: CALL 0A59
        let:16 a19 = (-1 + (SPH,SPL)) in
        M[a19] := 0A;
        let:16 a20 = (-1 + a19) in
        M[a20] := 4F;
        #return-to: 0A4F
        advance (17)
        #0A59
        #instruction: LD   A,(2015)
        let:8 a21 = M[2015] in
        advance (13)
        #0A5C
        #instruction: CP   FF
        let:16 a22 = addWithCarry(!false,a21,~FF) in
        let:8 a23 = (a21 & 0F) in
        let:8 a24 = (~FF & 0F) in
        let:16 a25 = addWithCarry(!false,a23,a24) in
        advance (7)
        #0A5E
        #instruction: RET
        let:16 a26 = (1 + a20) in
        let:8 a27 = M[a20] in
        let:16 a28 = (1 + a26) in
        let:8 a29 = M[a26] in
        advance (10)
        A := a21;
        SPH := a28[15:8];
        SPL := a28[7:0];
        FlagS := a22[7:0][7];
        FlagZ := is_zero(a22[7:0]);
        FlagA := a25[7:0][4];
        FlagP := parity(a22[7:0]);
        FlagCY := !a22[15:8][0];
        jump ((a29,a27));
      }
    }

0A4F:

    #0A4F
    #instruction: JP   Z,0A47
    if (FlagZ) {
      advance (10)
      #0A47
      #instruction: LD   A,(20C0)
      let:8 a1 = M[20C0] in
      advance (13)
      #0A4A
      #instruction: AND  A
      let:8 a2 = (a1 & a1) in
      let:8 a3 = (a1 | a1) in
      advance (4)
      #0A4B
      #instruction: RET  Z
      if (is_zero(a2)) {
        let:16 a4 = (1 + (SPH,SPL)) in
        let:8 a5 = M[(SPH,SPL)] in
        let:16 a6 = (1 + a4) in
        let:8 a7 = M[a4] in
        advance (11)
        A := a2;
        SPH := a6[15:8];
        SPL := a6[7:0];
        FlagS := a2[7];
        FlagZ := is_zero(a2);
        FlagA := a3[3];
        FlagP := parity(a2);
        FlagCY := false;
        jump ((a7,a5));
      } else {
        advance (5)
        #0A4C
        #instruction: CALL 0A59
        let:16 a8 = (-1 + (SPH,SPL)) in
        M[a8] := 0A;
        let:16 a9 = (-1 + a8) in
        M[a9] := 4F;
        #return-to: 0A4F
        advance (17)
        #0A59
        #instruction: LD   A,(2015)
        let:8 a10 = M[2015] in
        advance (13)
        #0A5C
        #instruction: CP   FF
        let:16 a11 = addWithCarry(!false,a10,~FF) in
        let:8 a12 = (a10 & 0F) in
        let:8 a13 = (~FF & 0F) in
        let:16 a14 = addWithCarry(!false,a12,a13) in
        advance (7)
        #0A5E
        #instruction: RET
        let:16 a15 = (1 + a9) in
        let:8 a16 = M[a9] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (10)
        A := a10;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a11[7:0][7];
        FlagZ := is_zero(a11[7:0]);
        FlagA := a14[7:0][4];
        FlagP := parity(a11[7:0]);
        FlagCY := !a11[15:8][0];
        jump ((a18,a16));
      }
    } else {
      advance (10)
      #0A52
      #instruction: CALL 0A59
      let:16 a19 = (-1 + (SPH,SPL)) in
      M[a19] := 0A;
      let:16 a20 = (-1 + a19) in
      M[a20] := 55;
      #return-to: 0A55
      advance (17)
      #0A59
      #instruction: LD   A,(2015)
      let:8 a21 = M[2015] in
      advance (13)
      #0A5C
      #instruction: CP   FF
      let:16 a22 = addWithCarry(!false,a21,~FF) in
      let:8 a23 = (a21 & 0F) in
      let:8 a24 = (~FF & 0F) in
      let:16 a25 = addWithCarry(!false,a23,a24) in
      advance (7)
      #0A5E
      #instruction: RET
      let:16 a26 = (1 + a20) in
      let:8 a27 = M[a20] in
      let:16 a28 = (1 + a26) in
      let:8 a29 = M[a26] in
      advance (10)
      A := a21;
      SPH := a28[15:8];
      SPL := a28[7:0];
      FlagS := a22[7:0][7];
      FlagZ := is_zero(a22[7:0]);
      FlagA := a25[7:0][4];
      FlagP := parity(a22[7:0]);
      FlagCY := !a22[15:8][0];
      jump ((a29,a27));
    }

0A55:

    #0A55
    #instruction: JP   NZ,0A52
    if (!FlagZ) {
      advance (10)
      #0A52
      #instruction: CALL 0A59
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 0A;
      let:16 a2 = (-1 + a1) in
      M[a2] := 55;
      #return-to: 0A55
      advance (17)
      #0A59
      #instruction: LD   A,(2015)
      let:8 a3 = M[2015] in
      advance (13)
      #0A5C
      #instruction: CP   FF
      let:16 a4 = addWithCarry(!false,a3,~FF) in
      let:8 a5 = (a3 & 0F) in
      let:8 a6 = (~FF & 0F) in
      let:16 a7 = addWithCarry(!false,a5,a6) in
      advance (7)
      #0A5E
      #instruction: RET
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := a3;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := !a4[15:8][0];
      jump ((a11,a9));
    } else {
      advance (10)
      #0A58
      #instruction: RET
      let:16 a12 = (1 + (SPH,SPL)) in
      let:8 a13 = M[(SPH,SPL)] in
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      advance (10)
      SPH := a14[15:8];
      SPL := a14[7:0];
      jump ((a15,a13));
    }

0A6C:

    #0A6C
    #instruction: LD   B,C
    advance (5)
    #0A6D
    #instruction: LD   A,B
    advance (5)
    #0A6E
    #instruction: CALL 097C
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 71;
    #return-to: 0A71
    advance (17)
    #097C
    #instruction: LD   HL,1DA0
    advance (10)
    #097F
    #instruction: CP   02
    let:16 a3 = addWithCarry(!false,C,~02) in
    let:8 a4 = (C & 0F) in
    let:8 a5 = (~02 & 0F) in
    let:16 a6 = addWithCarry(!false,a4,a5) in
    advance (7)
    #0981
    #instruction: RET  CY
    if (!a3[15:8][0]) {
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (11)
      A := C;
      B := C;
      H := 1D;
      L := A0;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := !a3[15:8][0];
      jump ((a10,a8));
    } else {
      advance (5)
      #0982
      #instruction: INC  HL
      advance (5)
      #0983
      #instruction: CP   04
      let:16 a11 = addWithCarry(!false,C,~04) in
      let:8 a12 = (C & 0F) in
      let:8 a13 = (~04 & 0F) in
      let:16 a14 = addWithCarry(!false,a12,a13) in
      advance (7)
      #0985
      #instruction: RET  CY
      if (!a11[15:8][0]) {
        let:16 a15 = (1 + a2) in
        let:8 a16 = M[a2] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (11)
        A := C;
        B := C;
        H := 1D;
        L := A1;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a11[7:0][7];
        FlagZ := is_zero(a11[7:0]);
        FlagA := a14[7:0][4];
        FlagP := parity(a11[7:0]);
        FlagCY := !a11[15:8][0];
        jump ((a18,a16));
      } else {
        advance (5)
        #0986
        #instruction: INC  HL
        advance (5)
        #0987
        #instruction: RET
        let:16 a19 = (1 + a2) in
        let:8 a20 = M[a2] in
        let:16 a21 = (1 + a19) in
        let:8 a22 = M[a19] in
        advance (10)
        A := C;
        B := C;
        H := 1D;
        L := A2;
        SPH := a21[15:8];
        SPL := a21[7:0];
        FlagS := a11[7:0][7];
        FlagZ := is_zero(a11[7:0]);
        FlagA := a14[7:0][4];
        FlagP := parity(a11[7:0]);
        FlagCY := !a11[15:8][0];
        jump ((a22,a20));
      }
    }

0A71:

    #0A71
    #instruction: LD   A,(HL)
    let:8 a1 = M[(H,L)] in
    advance (7)
    #0A72
    #instruction: LD   HL,20F3
    advance (10)
    #0A75
    #instruction: LD   (HL),00
    M[20F3] := 00;
    advance (10)
    #0A77
    #instruction: DEC  HL
    advance (5)
    #0A78
    #instruction: LD   (HL),A
    M[20F2] := a1;
    advance (7)
    #0A79
    #instruction: DEC  HL
    advance (5)
    #0A7A
    #instruction: LD   (HL),01
    M[20F1] := 01;
    advance (10)
    #0A7C
    #instruction: LD   HL,2062
    advance (10)
    #0A7F
    #instruction: RET
    let:16 a2 = (1 + (SPH,SPL)) in
    let:8 a3 = M[(SPH,SPL)] in
    let:16 a4 = (1 + a2) in
    let:8 a5 = M[a2] in
    advance (10)
    A := a1;
    H := 20;
    L := 62;
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump ((a5,a3));

0A98:

    #0A98
    #instruction: POP  DE
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #0A99
    #instruction: LD   A,07
    advance (7)
    #0A9B
    #instruction: LD   (20C0),A
    M[20C0] := 07;
    advance (13)
    #0A9E
    #instruction: LD   A,(20C0)
    let:8 a5 = M[20C0] in
    advance (13)
    #0AA1
    #instruction: DEC  A
    let:16 a6 = addWithCarry(!true,a5,~00) in
    let:8 a7 = (a5 & 0F) in
    let:8 a8 = (~00 & 0F) in
    let:16 a9 = addWithCarry(!true,a7,a8) in
    advance (5)
    #0AA2
    #instruction: JP   NZ,0A9E
    if (!is_zero(a6[7:0])) {
      advance (10)
      A := a6[7:0];
      D := a4;
      E := a2;
      SPH := a3[15:8];
      SPL := a3[7:0];
      FlagS := a6[7:0][7];
      FlagZ := is_zero(a6[7:0]);
      FlagA := a9[7:0][4];
      FlagP := parity(a6[7:0]);
      jump (0A9E);
    } else {
      advance (10)
      #0AA5
      #instruction: INC  DE
      let:16 a10 = (1 + (a4,a2)) in
      advance (5)
      #0AA6
      #instruction: DEC  C
      let:16 a11 = addWithCarry(!true,C,~00) in
      let:8 a12 = (C & 0F) in
      let:8 a13 = (~00 & 0F) in
      let:16 a14 = addWithCarry(!true,a12,a13) in
      advance (5)
      #0AA7
      #instruction: JP   NZ,0A93
      if (!is_zero(a11[7:0])) {
        advance (10)
        #0A93
        #instruction: PUSH DE
        let:16 a15 = (-1 + a3) in
        M[a15] := a10[15:8];
        let:16 a16 = (-1 + a15) in
        M[a16] := a10[7:0];
        advance (11)
        #0A94
        #instruction: LD   A,(DE)
        let:8 a17 = M[a10] in
        advance (7)
        #0A95
        #instruction: CALL 08FF
        let:16 a18 = (-1 + a16) in
        M[a18] := 0A;
        let:16 a19 = (-1 + a18) in
        M[a19] := 98;
        #return-to: 0A98
        advance (17)
        #08FF
        #instruction: LD   DE,1E00
        advance (10)
        #0902
        #instruction: PUSH HL
        let:16 a20 = (-1 + a19) in
        M[a20] := H;
        let:16 a21 = (-1 + a20) in
        M[a21] := L;
        advance (11)
        #0903
        #instruction: LD   H,00
        advance (7)
        #0905
        #instruction: LD   L,A
        advance (5)
        #0906
        #instruction: ADD  HL,HL
        let:17 a22 = add17((00,a17),(00,a17)) in
        advance (10)
        #0907
        #instruction: ADD  HL,HL
        let:17 a23 = add17(a22[15:0],a22[15:0]) in
        advance (10)
        #0908
        #instruction: ADD  HL,HL
        let:17 a24 = add17(a23[15:0],a23[15:0]) in
        advance (10)
        #0909
        #instruction: ADD  HL,DE
        let:17 a25 = add17(1E00,a24[15:0]) in
        advance (10)
        #090A
        #instruction: EX   DE,HL
        advance (4)
        #090B
        #instruction: POP  HL
        let:16 a26 = (1 + a21) in
        let:8 a27 = M[a21] in
        let:16 a28 = (1 + a26) in
        let:8 a29 = M[a26] in
        advance (10)
        #090C
        #instruction: LD   B,08
        advance (7)
        #090E
        #instruction: OUT  06
        advance (10)
        #0910
        #instruction: JP   1439
        advance (10)
        #1439
        #instruction: PUSH BC
        let:16 a30 = (-1 + a28) in
        M[a30] := 08;
        let:16 a31 = (-1 + a30) in
        M[a31] := a11[7:0];
        advance (11)
        #143A
        #instruction: LD   A,(DE)
        let:8 a32 = M[a25[15:0]] in
        advance (7)
        #143B
        #instruction: LD   (HL),A
        M[(a29,a27)] := a32;
        advance (7)
        #143C
        #instruction: INC  DE
        let:16 a33 = (1 + a25[15:0]) in
        advance (5)
        #143D
        #instruction: LD   BC,0020
        advance (10)
        #1440
        #instruction: ADD  HL,BC
        let:17 a34 = add17(0020,(a29,a27)) in
        advance (10)
        #1441
        #instruction: POP  BC
        let:16 a35 = (1 + a31) in
        let:8 a36 = M[a31] in
        let:16 a37 = (1 + a35) in
        let:8 a38 = M[a35] in
        advance (10)
        #1442
        #instruction: DEC  B
        let:16 a39 = addWithCarry(!true,a38,~00) in
        let:8 a40 = (a38 & 0F) in
        let:8 a41 = (~00 & 0F) in
        let:16 a42 = addWithCarry(!true,a40,a41) in
        advance (5)
        #1443
        #instruction: JP   NZ,1439
        if (!is_zero(a39[7:0])) {
          advance (10)
          A := a32;
          B := a39[7:0];
          C := a36;
          D := a33[15:8];
          E := a33[7:0];
          H := a34[15:0][15:8];
          L := a34[15:0][7:0];
          SPH := a37[15:8];
          SPL := a37[7:0];
          FlagS := a39[7:0][7];
          FlagZ := is_zero(a39[7:0]);
          FlagA := a42[7:0][4];
          FlagP := parity(a39[7:0]);
          FlagCY := a34[16];
          jump (1439);
        } else {
          advance (10)
          #1446
          #instruction: RET
          let:16 a43 = (1 + a37) in
          let:8 a44 = M[a37] in
          let:16 a45 = (1 + a43) in
          let:8 a46 = M[a43] in
          advance (10)
          A := a32;
          B := a39[7:0];
          C := a36;
          D := a33[15:8];
          E := a33[7:0];
          H := a34[15:0][15:8];
          L := a34[15:0][7:0];
          SPH := a45[15:8];
          SPL := a45[7:0];
          FlagS := a39[7:0][7];
          FlagZ := is_zero(a39[7:0]);
          FlagA := a42[7:0][4];
          FlagP := parity(a39[7:0]);
          FlagCY := a34[16];
          jump ((a46,a44));
        }
      } else {
        advance (10)
        #0AAA
        #instruction: RET
        let:16 a47 = (1 + a3) in
        let:8 a48 = M[a3] in
        let:16 a49 = (1 + a47) in
        let:8 a50 = M[a47] in
        advance (10)
        A := a6[7:0];
        C := a11[7:0];
        D := a10[15:8];
        E := a10[7:0];
        SPH := a49[15:8];
        SPL := a49[7:0];
        FlagS := a11[7:0][7];
        FlagZ := is_zero(a11[7:0]);
        FlagA := a14[7:0][4];
        FlagP := parity(a11[7:0]);
        jump ((a50,a48));
      }
    }

0AF2:

    #0AF2
    #instruction: EI
    enable_interrupts()
    advance (4)
    #0AF3
    #instruction: CALL 0AB1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := F6;
    #return-to: 0AF6
    advance (17)
    #0AB1
    #instruction: LD   A,40
    advance (7)
    #0AB3
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 40;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

0AF6:

    #0AF6
    #instruction: LD   A,(20EC)
    let:8 a1 = M[20EC] in
    advance (13)
    #0AF9
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #0AFA
    #instruction: LD   HL,3017
    advance (10)
    #0AFD
    #instruction: LD   C,04
    advance (7)
    #0AFF
    #instruction: JP   NZ,0BE8
    if (!is_zero(a2)) {
      advance (10)
      #0BE8
      #instruction: LD   DE,1DAB
      advance (10)
      #0BEB
      #instruction: CALL 0A93
      let:16 a4 = (-1 + (SPH,SPL)) in
      M[a4] := 0B;
      let:16 a5 = (-1 + a4) in
      M[a5] := EE;
      #return-to: 0BEE
      advance (17)
      #0A93
      #instruction: PUSH DE
      let:16 a6 = (-1 + a5) in
      M[a6] := 1D;
      let:16 a7 = (-1 + a6) in
      M[a7] := AB;
      advance (11)
      #0A94
      #instruction: LD   A,(DE)
      advance (7)
      #0A95
      #instruction: CALL 08FF
      let:16 a8 = (-1 + a7) in
      M[a8] := 0A;
      let:16 a9 = (-1 + a8) in
      M[a9] := 98;
      #return-to: 0A98
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a10 = (-1 + a9) in
      M[a10] := 30;
      let:16 a11 = (-1 + a10) in
      M[a11] := 17;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a12 = add17(000F,000F) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a13 = add17(a12[15:0],a12[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a14 = add17(a13[15:0],a13[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a15 = add17(1E00,a14[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a16 = (1 + a11) in
      let:8 a17 = M[a11] in
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a20 = (-1 + a18) in
      M[a20] := 08;
      let:16 a21 = (-1 + a20) in
      M[a21] := 04;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a22 = M[a15[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a19,a17)] := a22;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a23 = (1 + a15[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a24 = add17(0020,(a19,a17)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a25 = (1 + a21) in
      let:8 a26 = M[a21] in
      let:16 a27 = (1 + a25) in
      let:8 a28 = M[a25] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a29 = addWithCarry(!true,a28,~00) in
      let:8 a30 = (a28 & 0F) in
      let:8 a31 = (~00 & 0F) in
      let:16 a32 = addWithCarry(!true,a30,a31) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a29[7:0])) {
        advance (10)
        A := a22;
        B := a29[7:0];
        C := a26;
        D := a23[15:8];
        E := a23[7:0];
        H := a24[15:0][15:8];
        L := a24[15:0][7:0];
        SPH := a27[15:8];
        SPL := a27[7:0];
        FlagS := a29[7:0][7];
        FlagZ := is_zero(a29[7:0]);
        FlagA := a32[7:0][4];
        FlagP := parity(a29[7:0]);
        FlagCY := a24[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a33 = (1 + a27) in
        let:8 a34 = M[a27] in
        let:16 a35 = (1 + a33) in
        let:8 a36 = M[a33] in
        advance (10)
        A := a22;
        B := a29[7:0];
        C := a26;
        D := a23[15:8];
        E := a23[7:0];
        H := a24[15:0][15:8];
        L := a24[15:0][7:0];
        SPH := a35[15:8];
        SPL := a35[7:0];
        FlagS := a29[7:0][7];
        FlagZ := is_zero(a29[7:0]);
        FlagA := a32[7:0][4];
        FlagP := parity(a29[7:0]);
        FlagCY := a24[16];
        jump ((a36,a34));
      }
    } else {
      advance (10)
      #0B02
      #instruction: LD   DE,1CFA
      advance (10)
      #0B05
      #instruction: CALL 0A93
      let:16 a37 = (-1 + (SPH,SPL)) in
      M[a37] := 0B;
      let:16 a38 = (-1 + a37) in
      M[a38] := 08;
      #return-to: 0B08
      advance (17)
      #0A93
      #instruction: PUSH DE
      let:16 a39 = (-1 + a38) in
      M[a39] := 1C;
      let:16 a40 = (-1 + a39) in
      M[a40] := FA;
      advance (11)
      #0A94
      #instruction: LD   A,(DE)
      advance (7)
      #0A95
      #instruction: CALL 08FF
      let:16 a41 = (-1 + a40) in
      M[a41] := 0A;
      let:16 a42 = (-1 + a41) in
      M[a42] := 98;
      #return-to: 0A98
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a43 = (-1 + a42) in
      M[a43] := 30;
      let:16 a44 = (-1 + a43) in
      M[a44] := 17;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a45 = add17(000F,000F) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a46 = add17(a45[15:0],a45[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a47 = add17(a46[15:0],a46[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a48 = add17(1E00,a47[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a49 = (1 + a44) in
      let:8 a50 = M[a44] in
      let:16 a51 = (1 + a49) in
      let:8 a52 = M[a49] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a53 = (-1 + a51) in
      M[a53] := 08;
      let:16 a54 = (-1 + a53) in
      M[a54] := 04;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a55 = M[a48[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a52,a50)] := a55;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a56 = (1 + a48[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a57 = add17(0020,(a52,a50)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a58 = (1 + a54) in
      let:8 a59 = M[a54] in
      let:16 a60 = (1 + a58) in
      let:8 a61 = M[a58] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a62 = addWithCarry(!true,a61,~00) in
      let:8 a63 = (a61 & 0F) in
      let:8 a64 = (~00 & 0F) in
      let:16 a65 = addWithCarry(!true,a63,a64) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a62[7:0])) {
        advance (10)
        A := a55;
        B := a62[7:0];
        C := a59;
        D := a56[15:8];
        E := a56[7:0];
        H := a57[15:0][15:8];
        L := a57[15:0][7:0];
        SPH := a60[15:8];
        SPL := a60[7:0];
        FlagS := a62[7:0][7];
        FlagZ := is_zero(a62[7:0]);
        FlagA := a65[7:0][4];
        FlagP := parity(a62[7:0]);
        FlagCY := a57[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a66 = (1 + a60) in
        let:8 a67 = M[a60] in
        let:16 a68 = (1 + a66) in
        let:8 a69 = M[a66] in
        advance (10)
        A := a55;
        B := a62[7:0];
        C := a59;
        D := a56[15:8];
        E := a56[7:0];
        H := a57[15:0][15:8];
        L := a57[15:0][7:0];
        SPH := a68[15:8];
        SPL := a68[7:0];
        FlagS := a62[7:0][7];
        FlagZ := is_zero(a62[7:0]);
        FlagA := a65[7:0][4];
        FlagP := parity(a62[7:0]);
        FlagCY := a57[16];
        jump ((a69,a67));
      }
    }

0B08:

    #0B08
    #instruction: LD   DE,1DAF
    advance (10)
    #0B0B
    #instruction: CALL 0ACF
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 0E;
    #return-to: 0B0E
    advance (17)
    #0ACF
    #instruction: LD   HL,2B14
    advance (10)
    #0AD2
    #instruction: LD   C,0F
    advance (7)
    #0AD4
    #instruction: JP   0A93
    advance (10)
    #0A93
    #instruction: PUSH DE
    let:16 a3 = (-1 + a2) in
    M[a3] := 1D;
    let:16 a4 = (-1 + a3) in
    M[a4] := AF;
    advance (11)
    #0A94
    #instruction: LD   A,(DE)
    advance (7)
    #0A95
    #instruction: CALL 08FF
    let:16 a5 = (-1 + a4) in
    M[a5] := 0A;
    let:16 a6 = (-1 + a5) in
    M[a6] := 98;
    #return-to: 0A98
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a7 = (-1 + a6) in
    M[a7] := 2B;
    let:16 a8 = (-1 + a7) in
    M[a8] := 14;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a9 = add17(0012,0012) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a10 = add17(a9[15:0],a9[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a11 = add17(a10[15:0],a10[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a12 = add17(1E00,a11[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a13 = (1 + a8) in
    let:8 a14 = M[a8] in
    let:16 a15 = (1 + a13) in
    let:8 a16 = M[a13] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a17 = (-1 + a15) in
    M[a17] := 08;
    let:16 a18 = (-1 + a17) in
    M[a18] := 0F;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a19 = M[a12[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a16,a14)] := a19;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a20 = (1 + a12[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a21 = add17(0020,(a16,a14)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a22 = (1 + a18) in
    let:8 a23 = M[a18] in
    let:16 a24 = (1 + a22) in
    let:8 a25 = M[a22] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a26 = addWithCarry(!true,a25,~00) in
    let:8 a27 = (a25 & 0F) in
    let:8 a28 = (~00 & 0F) in
    let:16 a29 = addWithCarry(!true,a27,a28) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a26[7:0])) {
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a24[15:8];
      SPL := a24[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a30 = (1 + a24) in
      let:8 a31 = M[a24] in
      let:16 a32 = (1 + a30) in
      let:8 a33 = M[a30] in
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a32[15:8];
      SPL := a32[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump ((a33,a31));
    }

0B0E:

    #0B0E
    #instruction: CALL 0AB1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 11;
    #return-to: 0B11
    advance (17)
    #0AB1
    #instruction: LD   A,40
    advance (7)
    #0AB3
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 40;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

0B11:

    #0B11
    #instruction: CALL 1815
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 14;
    #return-to: 0B14
    advance (17)
    #1815
    #instruction: LD   HL,2810
    advance (10)
    #1818
    #instruction: LD   DE,1CA3
    advance (10)
    #181B
    #instruction: LD   C,15
    advance (7)
    #181D
    #instruction: CALL 08F3
    let:16 a3 = (-1 + a2) in
    M[a3] := 18;
    let:16 a4 = (-1 + a3) in
    M[a4] := 20;
    #return-to: 1820
    advance (17)
    #08F3
    #instruction: LD   A,(DE)
    advance (7)
    #08F4
    #instruction: PUSH DE
    let:16 a5 = (-1 + a4) in
    M[a5] := 1C;
    let:16 a6 = (-1 + a5) in
    M[a6] := A3;
    advance (11)
    #08F5
    #instruction: CALL 08FF
    let:16 a7 = (-1 + a6) in
    M[a7] := 08;
    let:16 a8 = (-1 + a7) in
    M[a8] := F8;
    #return-to: 08F8
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a9 = (-1 + a8) in
    M[a9] := 28;
    let:16 a10 = (-1 + a9) in
    M[a10] := 10;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a11 = add17(0028,0028) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a12 = add17(a11[15:0],a11[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a13 = add17(a12[15:0],a12[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a14 = add17(1E00,a13[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a15 = (1 + a10) in
    let:8 a16 = M[a10] in
    let:16 a17 = (1 + a15) in
    let:8 a18 = M[a15] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a19 = (-1 + a17) in
    M[a19] := 08;
    let:16 a20 = (-1 + a19) in
    M[a20] := 15;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a21 = M[a14[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a18,a16)] := a21;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a22 = (1 + a14[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a23 = add17(0020,(a18,a16)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a24 = (1 + a20) in
    let:8 a25 = M[a20] in
    let:16 a26 = (1 + a24) in
    let:8 a27 = M[a24] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a28 = addWithCarry(!true,a27,~00) in
    let:8 a29 = (a27 & 0F) in
    let:8 a30 = (~00 & 0F) in
    let:16 a31 = addWithCarry(!true,a29,a30) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a28[7:0])) {
      advance (10)
      A := a21;
      B := a28[7:0];
      C := a25;
      D := a22[15:8];
      E := a22[7:0];
      H := a23[15:0][15:8];
      L := a23[15:0][7:0];
      SPH := a26[15:8];
      SPL := a26[7:0];
      FlagS := a28[7:0][7];
      FlagZ := is_zero(a28[7:0]);
      FlagA := a31[7:0][4];
      FlagP := parity(a28[7:0]);
      FlagCY := a23[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a32 = (1 + a26) in
      let:8 a33 = M[a26] in
      let:16 a34 = (1 + a32) in
      let:8 a35 = M[a32] in
      advance (10)
      A := a21;
      B := a28[7:0];
      C := a25;
      D := a22[15:8];
      E := a22[7:0];
      H := a23[15:0][15:8];
      L := a23[15:0][7:0];
      SPH := a34[15:8];
      SPL := a34[7:0];
      FlagS := a28[7:0][7];
      FlagZ := is_zero(a28[7:0]);
      FlagA := a31[7:0][4];
      FlagP := parity(a28[7:0]);
      FlagCY := a23[16];
      jump ((a35,a33));
    }

0B14:

    #0B14
    #instruction: CALL 0AB6
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 17;
    #return-to: 0B17
    advance (17)
    #0AB6
    #instruction: LD   A,80
    advance (7)
    #0AB8
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 80;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

0B17:

    #0B17
    #instruction: LD   A,(20EC)
    let:8 a1 = M[20EC] in
    advance (13)
    #0B1A
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #0B1B
    #instruction: JP   NZ,0B4A
    if (!is_zero(a2)) {
      advance (10)
      A := a2;
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump (0B4A);
    } else {
      advance (10)
      #0B1E
      #instruction: LD   DE,1A95
      advance (10)
      #0B21
      #instruction: CALL 0AE2
      let:16 a4 = (-1 + (SPH,SPL)) in
      M[a4] := 0B;
      let:16 a5 = (-1 + a4) in
      M[a5] := 24;
      #return-to: 0B24
      advance (17)
      #0AE2
      #instruction: LD   HL,20C2
      advance (10)
      #0AE5
      #instruction: LD   B,0C
      advance (7)
      #0AE7
      #instruction: JP   1A32
      advance (10)
      #1A32
      #instruction: LD   A,(DE)
      advance (7)
      #1A33
      #instruction: LD   (HL),A
      M[20C2] := 00;
      advance (7)
      #1A34
      #instruction: INC  HL
      advance (5)
      #1A35
      #instruction: INC  DE
      advance (5)
      #1A36
      #instruction: DEC  B
      let:16 a6 = addWithCarry(!true,0C,~00) in
      let:8 a7 = (0C & 0F) in
      let:8 a8 = (~00 & 0F) in
      let:16 a9 = addWithCarry(!true,a7,a8) in
      advance (5)
      #1A37
      #instruction: JP   NZ,1A32
      if (!is_zero(a6[7:0])) {
        advance (10)
        A := 00;
        B := a6[7:0];
        D := 1A;
        E := 96;
        H := 20;
        L := C3;
        SPH := a5[15:8];
        SPL := a5[7:0];
        FlagS := a6[7:0][7];
        FlagZ := is_zero(a6[7:0]);
        FlagA := a9[7:0][4];
        FlagP := parity(a6[7:0]);
        FlagCY := false;
        jump (1A32);
      } else {
        advance (10)
        #1A3A
        #instruction: RET
        let:16 a10 = (1 + a5) in
        let:8 a11 = M[a5] in
        let:16 a12 = (1 + a10) in
        let:8 a13 = M[a10] in
        advance (10)
        A := 00;
        B := a6[7:0];
        D := 1A;
        E := 96;
        H := 20;
        L := C3;
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a6[7:0][7];
        FlagZ := is_zero(a6[7:0]);
        FlagA := a9[7:0][4];
        FlagP := parity(a6[7:0]);
        FlagCY := false;
        jump ((a13,a11));
      }
    }

0B24:

    #0B24
    #instruction: CALL 0A80
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 27;
    #return-to: 0B27
    advance (17)
    #0A80
    #instruction: LD   A,02
    advance (7)
    #0A82
    #instruction: LD   (20C1),A
    M[20C1] := 02;
    advance (13)
    #0A85
    #instruction: OUT  06
    advance (10)
    #0A87
    #instruction: LD   A,(20CB)
    let:8 a3 = M[20CB] in
    advance (13)
    #0A8A
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0A8B
    #instruction: JP   Z,0A85
    if (is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0A85);
    } else {
      advance (10)
      #0A8E
      #instruction: XOR  A
      let:8 a6 = (a4 ^ a4) in
      advance (4)
      #0A8F
      #instruction: LD   (20C1),A
      M[20C1] := a6;
      advance (13)
      #0A92
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := a6;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a6[7];
      FlagZ := is_zero(a6);
      FlagA := false;
      FlagP := parity(a6);
      FlagCY := false;
      jump ((a10,a8));
    }

0B27:

    #0B27
    #instruction: LD   DE,1BB0
    advance (10)
    #0B2A
    #instruction: CALL 0AE2
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2D;
    #return-to: 0B2D
    advance (17)
    #0AE2
    #instruction: LD   HL,20C2
    advance (10)
    #0AE5
    #instruction: LD   B,0C
    advance (7)
    #0AE7
    #instruction: JP   1A32
    advance (10)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[20C2] := 00;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,0C,~00) in
    let:8 a4 = (0C & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a3[7:0])) {
      advance (10)
      A := 00;
      B := a3[7:0];
      D := 1B;
      E := B1;
      H := 20;
      L := C3;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := 00;
      B := a3[7:0];
      D := 1B;
      E := B1;
      H := 20;
      L := C3;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

0B2D:

    #0B2D
    #instruction: CALL 0A80
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 30;
    #return-to: 0B30
    advance (17)
    #0A80
    #instruction: LD   A,02
    advance (7)
    #0A82
    #instruction: LD   (20C1),A
    M[20C1] := 02;
    advance (13)
    #0A85
    #instruction: OUT  06
    advance (10)
    #0A87
    #instruction: LD   A,(20CB)
    let:8 a3 = M[20CB] in
    advance (13)
    #0A8A
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0A8B
    #instruction: JP   Z,0A85
    if (is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0A85);
    } else {
      advance (10)
      #0A8E
      #instruction: XOR  A
      let:8 a6 = (a4 ^ a4) in
      advance (4)
      #0A8F
      #instruction: LD   (20C1),A
      M[20C1] := a6;
      advance (13)
      #0A92
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := a6;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a6[7];
      FlagZ := is_zero(a6);
      FlagA := false;
      FlagP := parity(a6);
      FlagCY := false;
      jump ((a10,a8));
    }

0B30:

    #0B30
    #instruction: CALL 0AB1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 33;
    #return-to: 0B33
    advance (17)
    #0AB1
    #instruction: LD   A,40
    advance (7)
    #0AB3
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 40;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

0B33:

    #0B33
    #instruction: LD   DE,1FC9
    advance (10)
    #0B36
    #instruction: CALL 0AE2
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 39;
    #return-to: 0B39
    advance (17)
    #0AE2
    #instruction: LD   HL,20C2
    advance (10)
    #0AE5
    #instruction: LD   B,0C
    advance (7)
    #0AE7
    #instruction: JP   1A32
    advance (10)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[20C2] := 00;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,0C,~00) in
    let:8 a4 = (0C & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a3[7:0])) {
      advance (10)
      A := 00;
      B := a3[7:0];
      D := 1F;
      E := CA;
      H := 20;
      L := C3;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := 00;
      B := a3[7:0];
      D := 1F;
      E := CA;
      H := 20;
      L := C3;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

0B39:

    #0B39
    #instruction: CALL 0A80
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3C;
    #return-to: 0B3C
    advance (17)
    #0A80
    #instruction: LD   A,02
    advance (7)
    #0A82
    #instruction: LD   (20C1),A
    M[20C1] := 02;
    advance (13)
    #0A85
    #instruction: OUT  06
    advance (10)
    #0A87
    #instruction: LD   A,(20CB)
    let:8 a3 = M[20CB] in
    advance (13)
    #0A8A
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0A8B
    #instruction: JP   Z,0A85
    if (is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0A85);
    } else {
      advance (10)
      #0A8E
      #instruction: XOR  A
      let:8 a6 = (a4 ^ a4) in
      advance (4)
      #0A8F
      #instruction: LD   (20C1),A
      M[20C1] := a6;
      advance (13)
      #0A92
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := a6;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a6[7];
      FlagZ := is_zero(a6);
      FlagA := false;
      FlagP := parity(a6);
      FlagCY := false;
      jump ((a10,a8));
    }

0B3C:

    #0B3C
    #instruction: CALL 0AB1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3F;
    #return-to: 0B3F
    advance (17)
    #0AB1
    #instruction: LD   A,40
    advance (7)
    #0AB3
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 40;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

0B3F:

    #0B3F
    #instruction: LD   HL,33B7
    advance (10)
    #0B42
    #instruction: LD   B,0A
    advance (7)
    #0B44
    #instruction: CALL 14CB
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 47;
    #return-to: 0B47
    advance (17)
    #14CB
    #instruction: XOR  A
    let:8 a3 = (A ^ A) in
    advance (4)
    #14CC
    #instruction: PUSH BC
    let:16 a4 = (-1 + a2) in
    M[a4] := 0A;
    let:16 a5 = (-1 + a4) in
    M[a5] := C;
    advance (11)
    #14CD
    #instruction: LD   (HL),A
    M[33B7] := a3;
    advance (7)
    #14CE
    #instruction: LD   BC,0020
    advance (10)
    #14D1
    #instruction: ADD  HL,BC
    let:17 a6 = add17(0020,33B7) in
    advance (10)
    #14D2
    #instruction: POP  BC
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    let:16 a9 = (1 + a7) in
    let:8 a10 = M[a7] in
    advance (10)
    #14D3
    #instruction: DEC  B
    let:16 a11 = addWithCarry(!true,a10,~00) in
    let:8 a12 = (a10 & 0F) in
    let:8 a13 = (~00 & 0F) in
    let:16 a14 = addWithCarry(!true,a12,a13) in
    advance (5)
    #14D4
    #instruction: JP   NZ,14CC
    if (!is_zero(a11[7:0])) {
      advance (10)
      A := a3;
      B := a11[7:0];
      C := a8;
      H := a6[15:0][15:8];
      L := a6[15:0][7:0];
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a11[7:0][7];
      FlagZ := is_zero(a11[7:0]);
      FlagA := a14[7:0][4];
      FlagP := parity(a11[7:0]);
      FlagCY := a6[16];
      jump (14CC);
    } else {
      advance (10)
      #14D7
      #instruction: RET
      let:16 a15 = (1 + a9) in
      let:8 a16 = M[a9] in
      let:16 a17 = (1 + a15) in
      let:8 a18 = M[a15] in
      advance (10)
      A := a3;
      B := a11[7:0];
      C := a8;
      H := a6[15:0][15:8];
      L := a6[15:0][7:0];
      SPH := a17[15:8];
      SPL := a17[7:0];
      FlagS := a11[7:0][7];
      FlagZ := is_zero(a11[7:0]);
      FlagA := a14[7:0][4];
      FlagP := parity(a11[7:0]);
      FlagCY := a6[16];
      jump ((a18,a16));
    }

0B47:

    #0B47
    #instruction: CALL 0AB6
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4A;
    #return-to: 0B4A
    advance (17)
    #0AB6
    #instruction: LD   A,80
    advance (7)
    #0AB8
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 80;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

0B4A:

    #0B4A
    #instruction: CALL 09D6
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4D;
    #return-to: 0B4D
    advance (17)
    #09D6
    #instruction: LD   HL,2402
    advance (10)
    #09D9
    #instruction: LD   (HL),00
    M[2402] := 00;
    advance (10)
    #09DB
    #instruction: INC  HL
    advance (5)
    #09DC
    #instruction: LD   A,L
    advance (5)
    #09DD
    #instruction: AND  1F
    let:8 a3 = (1F & 03) in
    let:8 a4 = (1F | 03) in
    advance (7)
    #09DF
    #instruction: CP   1C
    let:16 a5 = addWithCarry(!false,a3,~1C) in
    let:8 a6 = (a3 & 0F) in
    let:8 a7 = (~1C & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    advance (7)
    #09E1
    #instruction: JP   CY,09E8
    if (!a5[15:8][0]) {
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a9 = addWithCarry(!false,24,~40) in
      let:8 a10 = (24 & 0F) in
      let:8 a11 = (~40 & 0F) in
      let:16 a12 = addWithCarry(!false,a10,a11) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a9[15:8][0]) {
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a13 = (1 + a2) in
        let:8 a14 = M[a2] in
        let:16 a15 = (1 + a13) in
        let:8 a16 = M[a13] in
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a15[15:8];
        SPL := a15[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump ((a16,a14));
      }
    } else {
      advance (10)
      #09E4
      #instruction: LD   DE,0006
      advance (10)
      #09E7
      #instruction: ADD  HL,DE
      let:17 a17 = add17(0006,2403) in
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a18 = addWithCarry(!false,a17[15:0][15:8],~40) in
      let:8 a19 = (a17[15:0][15:8] & 0F) in
      let:8 a20 = (~40 & 0F) in
      let:16 a21 = addWithCarry(!false,a19,a20) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a18[15:8][0]) {
        advance (10)
        A := a17[15:0][15:8];
        D := 00;
        E := 06;
        H := a17[15:0][15:8];
        L := a17[15:0][7:0];
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := !a18[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a22 = (1 + a2) in
        let:8 a23 = M[a2] in
        let:16 a24 = (1 + a22) in
        let:8 a25 = M[a22] in
        advance (10)
        A := a17[15:0][15:8];
        D := 00;
        E := 06;
        H := a17[15:0][15:8];
        L := a17[15:0][7:0];
        SPH := a24[15:8];
        SPL := a24[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := !a18[15:8][0];
        jump ((a25,a23));
      }
    }

0B4D:

    #0B4D
    #instruction: LD   A,(21FF)
    let:8 a1 = M[21FF] in
    advance (13)
    #0B50
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #0B51
    #instruction: JP   NZ,0B5D
    if (!is_zero(a2)) {
      advance (10)
      A := a2;
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump (0B5D);
    } else {
      advance (10)
      #0B54
      #instruction: CALL 08D1
      let:16 a4 = (-1 + (SPH,SPL)) in
      M[a4] := 0B;
      let:16 a5 = (-1 + a4) in
      M[a5] := 57;
      #return-to: 0B57
      advance (17)
      #08D1
      #instruction: IN   02
      advance (10)
      #08D3
      #instruction: AND  03
      let:8 a6 = (03 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
      let:8 a7 = (03 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
      advance (7)
      #08D5
      #instruction: ADD  03
      let:16 a8 = addWithCarry(false,03,a6) in
      let:8 a9 = (03 & 0F) in
      let:8 a10 = (a6 & 0F) in
      let:16 a11 = addWithCarry(false,a9,a10) in
      advance (7)
      #08D7
      #instruction: RET
      let:16 a12 = (1 + a5) in
      let:8 a13 = M[a5] in
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      advance (10)
      A := a8[7:0];
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a8[7:0][7];
      FlagZ := is_zero(a8[7:0]);
      FlagA := a11[7:0][4];
      FlagP := parity(a8[7:0]);
      FlagCY := a8[15:8][0];
      jump ((a15,a13));
    }

0B57:

    #0B57
    #instruction: LD   (21FF),A
    M[21FF] := A;
    advance (13)
    #0B5A
    #instruction: CALL 1A7F
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5D;
    #return-to: 0B5D
    advance (17)
    #1A7F
    #instruction: CALL 092E
    let:16 a3 = (-1 + a2) in
    M[a3] := 1A;
    let:16 a4 = (-1 + a3) in
    M[a4] := 82;
    #return-to: 1A82
    advance (17)
    #092E
    #instruction: CALL 1611
    let:16 a5 = (-1 + a4) in
    M[a5] := 09;
    let:16 a6 = (-1 + a5) in
    M[a6] := 31;
    #return-to: 0931
    advance (17)
    #1611
    #instruction: LD   L,00
    advance (7)
    #1613
    #instruction: LD   A,(2067)
    let:8 a7 = M[2067] in
    advance (13)
    #1616
    #instruction: LD   H,A
    advance (5)
    #1617
    #instruction: RET
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    let:16 a10 = (1 + a8) in
    let:8 a11 = M[a8] in
    advance (10)
    A := a7;
    H := a7;
    L := 00;
    SPH := a10[15:8];
    SPL := a10[7:0];
    jump ((a11,a9));

0B5D:

    #0B5D
    #instruction: CALL 01E4
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 60;
    #return-to: 0B60
    advance (17)
    #01E4
    #instruction: LD   B,C0
    advance (7)
    #01E6
    #instruction: LD   DE,1B00
    advance (10)
    #01E9
    #instruction: LD   HL,2000
    advance (10)
    #01EC
    #instruction: JP   1A32
    advance (10)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2000] := 01;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,C0,~00) in
    let:8 a4 = (C0 & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a3[7:0])) {
      advance (10)
      A := 01;
      B := a3[7:0];
      D := 1B;
      E := 01;
      H := 20;
      L := 01;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := 01;
      B := a3[7:0];
      D := 1B;
      E := 01;
      H := 20;
      L := 01;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

0B60:

    #0B60
    #instruction: CALL 01C0
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 63;
    #return-to: 0B63
    advance (17)
    #01C0
    #instruction: LD   HL,2100
    advance (10)
    #01C3
    #instruction: LD   B,37
    advance (7)
    #01C5
    #instruction: LD   (HL),01
    M[2100] := 01;
    advance (10)
    #01C7
    #instruction: INC  HL
    advance (5)
    #01C8
    #instruction: DEC  B
    let:16 a3 = addWithCarry(!true,37,~00) in
    let:8 a4 = (37 & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    advance (5)
    #01C9
    #instruction: JP   NZ,01C5
    if (!is_zero(a3[7:0])) {
      advance (10)
      B := a3[7:0];
      H := 21;
      L := 01;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (01C5);
    } else {
      advance (10)
      #01CC
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      B := a3[7:0];
      H := 21;
      L := 01;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((a10,a8));
    }

0B63:

    #0B63
    #instruction: CALL 01EF
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 66;
    #return-to: 0B66
    advance (17)
    #01EF
    #instruction: LD   HL,2142
    advance (10)
    #01F2
    #instruction: JP   01F8
    advance (10)
    #01F8
    #instruction: LD   C,04
    advance (7)
    #01FA
    #instruction: LD   DE,1D20
    advance (10)
    #01FD
    #instruction: PUSH DE
    let:16 a3 = (-1 + a2) in
    M[a3] := 1D;
    let:16 a4 = (-1 + a3) in
    M[a4] := 20;
    advance (11)
    #01FE
    #instruction: LD   B,2C
    advance (7)
    #0200
    #instruction: CALL 1A32
    let:16 a5 = (-1 + a4) in
    M[a5] := 02;
    let:16 a6 = (-1 + a5) in
    M[a6] := 03;
    #return-to: 0203
    advance (17)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2142] := FF;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a7 = addWithCarry(!true,2C,~00) in
    let:8 a8 = (2C & 0F) in
    let:8 a9 = (~00 & 0F) in
    let:16 a10 = addWithCarry(!true,a8,a9) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a7[7:0])) {
      advance (10)
      A := FF;
      B := a7[7:0];
      C := 04;
      D := 1D;
      E := 21;
      H := 21;
      L := 43;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a11 = (1 + a6) in
      let:8 a12 = M[a6] in
      let:16 a13 = (1 + a11) in
      let:8 a14 = M[a11] in
      advance (10)
      A := FF;
      B := a7[7:0];
      C := 04;
      D := 1D;
      E := 21;
      H := 21;
      L := 43;
      SPH := a13[15:8];
      SPL := a13[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      jump ((a14,a12));
    }

0B66:

    #0B66
    #instruction: CALL 021A
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 69;
    #return-to: 0B69
    advance (17)
    #021A
    #instruction: XOR  A
    let:8 a3 = (A ^ A) in
    advance (4)
    #021B
    #instruction: LD   DE,2142
    advance (10)
    #021E
    #instruction: LD   (2081),A
    M[2081] := a3;
    advance (13)
    #0221
    #instruction: LD   BC,1602
    advance (10)
    #0224
    #instruction: LD   HL,2806
    advance (10)
    #0227
    #instruction: LD   A,04
    advance (7)
    #0229
    #instruction: PUSH PSW
    let:16 a4 = (-1 + a2) in
    M[a4] := 04;
    let:16 a5 = (-1 + a4) in
    M[a5] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a3[7]),6,is_zero(a3)),4,false),2,parity(a3)),0,false);
    advance (11)
    #022A
    #instruction: PUSH BC
    let:16 a6 = (-1 + a5) in
    M[a6] := 16;
    let:16 a7 = (-1 + a6) in
    M[a7] := 02;
    advance (11)
    #022B
    #instruction: LD   A,(2081)
    let:8 a8 = M[2081] in
    advance (13)
    #022E
    #instruction: AND  A
    let:8 a9 = (a8 & a8) in
    let:8 a10 = (a8 | a8) in
    advance (4)
    #022F
    #instruction: JP   NZ,0242
    if (!is_zero(a9)) {
      advance (10)
      #0242
      #instruction: CALL 147C
      let:16 a11 = (-1 + a7) in
      M[a11] := 02;
      let:16 a12 = (-1 + a11) in
      M[a12] := 45;
      #return-to: 0245
      advance (17)
      #147C
      #instruction: PUSH BC
      let:16 a13 = (-1 + a12) in
      M[a13] := 16;
      let:16 a14 = (-1 + a13) in
      M[a14] := 02;
      advance (11)
      #147D
      #instruction: PUSH HL
      let:16 a15 = (-1 + a14) in
      M[a15] := 28;
      let:16 a16 = (-1 + a15) in
      M[a16] := 06;
      advance (11)
      #147E
      #instruction: LD   A,(HL)
      let:8 a17 = M[2806] in
      advance (7)
      #147F
      #instruction: LD   (DE),A
      M[2142] := a17;
      advance (7)
      #1480
      #instruction: INC  DE
      advance (5)
      #1481
      #instruction: INC  HL
      advance (5)
      #1482
      #instruction: DEC  C
      let:16 a18 = addWithCarry(!true,02,~00) in
      let:8 a19 = (02 & 0F) in
      let:8 a20 = (~00 & 0F) in
      let:16 a21 = addWithCarry(!true,a19,a20) in
      advance (5)
      #1483
      #instruction: JP   NZ,147E
      if (!is_zero(a18[7:0])) {
        advance (10)
        A := a17;
        B := 16;
        C := a18[7:0];
        D := 21;
        E := 43;
        H := 28;
        L := 07;
        SPH := a16[15:8];
        SPL := a16[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := false;
        jump (147E);
      } else {
        advance (10)
        #1486
        #instruction: POP  HL
        let:16 a22 = (1 + a16) in
        let:8 a23 = M[a16] in
        let:16 a24 = (1 + a22) in
        let:8 a25 = M[a22] in
        advance (10)
        #1487
        #instruction: LD   BC,0020
        advance (10)
        #148A
        #instruction: ADD  HL,BC
        let:17 a26 = add17(0020,(a25,a23)) in
        advance (10)
        #148B
        #instruction: POP  BC
        let:16 a27 = (1 + a24) in
        let:8 a28 = M[a24] in
        let:16 a29 = (1 + a27) in
        let:8 a30 = M[a27] in
        advance (10)
        #148C
        #instruction: DEC  B
        let:16 a31 = addWithCarry(!true,a30,~00) in
        let:8 a32 = (a30 & 0F) in
        let:8 a33 = (~00 & 0F) in
        let:16 a34 = addWithCarry(!true,a32,a33) in
        advance (5)
        #148D
        #instruction: JP   NZ,147C
        if (!is_zero(a31[7:0])) {
          advance (10)
          A := a17;
          B := a31[7:0];
          C := a28;
          D := 21;
          E := 43;
          H := a26[15:0][15:8];
          L := a26[15:0][7:0];
          SPH := a29[15:8];
          SPL := a29[7:0];
          FlagS := a31[7:0][7];
          FlagZ := is_zero(a31[7:0]);
          FlagA := a34[7:0][4];
          FlagP := parity(a31[7:0]);
          FlagCY := a26[16];
          jump (147C);
        } else {
          advance (10)
          #1490
          #instruction: RET
          let:16 a35 = (1 + a29) in
          let:8 a36 = M[a29] in
          let:16 a37 = (1 + a35) in
          let:8 a38 = M[a35] in
          advance (10)
          A := a17;
          B := a31[7:0];
          C := a28;
          D := 21;
          E := 43;
          H := a26[15:0][15:8];
          L := a26[15:0][7:0];
          SPH := a37[15:8];
          SPL := a37[7:0];
          FlagS := a31[7:0][7];
          FlagZ := is_zero(a31[7:0]);
          FlagA := a34[7:0][4];
          FlagP := parity(a31[7:0]);
          FlagCY := a26[16];
          jump ((a38,a36));
        }
      }
    } else {
      advance (10)
      #0232
      #instruction: CALL 1A69
      let:16 a39 = (-1 + a7) in
      M[a39] := 02;
      let:16 a40 = (-1 + a39) in
      M[a40] := 35;
      #return-to: 0235
      advance (17)
      #1A69
      #instruction: PUSH BC
      let:16 a41 = (-1 + a40) in
      M[a41] := 16;
      let:16 a42 = (-1 + a41) in
      M[a42] := 02;
      advance (11)
      #1A6A
      #instruction: PUSH HL
      let:16 a43 = (-1 + a42) in
      M[a43] := 28;
      let:16 a44 = (-1 + a43) in
      M[a44] := 06;
      advance (11)
      #1A6B
      #instruction: LD   A,(DE)
      let:8 a45 = M[2142] in
      advance (7)
      #1A6C
      #instruction: OR   (HL)
      let:8 a46 = M[2806] in
      let:8 a47 = (a46 | a45) in
      advance (7)
      #1A6D
      #instruction: LD   (HL),A
      M[2806] := a47;
      advance (7)
      #1A6E
      #instruction: INC  DE
      advance (5)
      #1A6F
      #instruction: INC  HL
      advance (5)
      #1A70
      #instruction: DEC  C
      let:16 a48 = addWithCarry(!true,02,~00) in
      let:8 a49 = (02 & 0F) in
      let:8 a50 = (~00 & 0F) in
      let:16 a51 = addWithCarry(!true,a49,a50) in
      advance (5)
      #1A71
      #instruction: JP   NZ,1A6B
      if (!is_zero(a48[7:0])) {
        advance (10)
        A := a47;
        B := 16;
        C := a48[7:0];
        D := 21;
        E := 43;
        H := 28;
        L := 07;
        SPH := a44[15:8];
        SPL := a44[7:0];
        FlagS := a48[7:0][7];
        FlagZ := is_zero(a48[7:0]);
        FlagA := a51[7:0][4];
        FlagP := parity(a48[7:0]);
        FlagCY := false;
        jump (1A6B);
      } else {
        advance (10)
        #1A74
        #instruction: POP  HL
        let:16 a52 = (1 + a44) in
        let:8 a53 = M[a44] in
        let:16 a54 = (1 + a52) in
        let:8 a55 = M[a52] in
        advance (10)
        #1A75
        #instruction: LD   BC,0020
        advance (10)
        #1A78
        #instruction: ADD  HL,BC
        let:17 a56 = add17(0020,(a55,a53)) in
        advance (10)
        #1A79
        #instruction: POP  BC
        let:16 a57 = (1 + a54) in
        let:8 a58 = M[a54] in
        let:16 a59 = (1 + a57) in
        let:8 a60 = M[a57] in
        advance (10)
        #1A7A
        #instruction: DEC  B
        let:16 a61 = addWithCarry(!true,a60,~00) in
        let:8 a62 = (a60 & 0F) in
        let:8 a63 = (~00 & 0F) in
        let:16 a64 = addWithCarry(!true,a62,a63) in
        advance (5)
        #1A7B
        #instruction: JP   NZ,1A69
        if (!is_zero(a61[7:0])) {
          advance (10)
          A := a47;
          B := a61[7:0];
          C := a58;
          D := 21;
          E := 43;
          H := a56[15:0][15:8];
          L := a56[15:0][7:0];
          SPH := a59[15:8];
          SPL := a59[7:0];
          FlagS := a61[7:0][7];
          FlagZ := is_zero(a61[7:0]);
          FlagA := a64[7:0][4];
          FlagP := parity(a61[7:0]);
          FlagCY := a56[16];
          jump (1A69);
        } else {
          advance (10)
          #1A7E
          #instruction: RET
          let:16 a65 = (1 + a59) in
          let:8 a66 = M[a59] in
          let:16 a67 = (1 + a65) in
          let:8 a68 = M[a65] in
          advance (10)
          A := a47;
          B := a61[7:0];
          C := a58;
          D := 21;
          E := 43;
          H := a56[15:0][15:8];
          L := a56[15:0][7:0];
          SPH := a67[15:8];
          SPL := a67[7:0];
          FlagS := a61[7:0][7];
          FlagZ := is_zero(a61[7:0]);
          FlagA := a64[7:0][4];
          FlagP := parity(a61[7:0]);
          FlagCY := a56[16];
          jump ((a68,a66));
        }
      }
    }

0B69:

    #0B69
    #instruction: LD   A,01
    advance (7)
    #0B6B
    #instruction: LD   (20C1),A
    M[20C1] := 01;
    advance (13)
    #0B6E
    #instruction: CALL 01CF
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 71;
    #return-to: 0B71
    advance (17)
    #01CF
    #instruction: LD   A,01
    advance (7)
    #01D1
    #instruction: LD   B,E0
    advance (7)
    #01D3
    #instruction: LD   HL,2402
    advance (10)
    #01D6
    #instruction: JP   14CC
    advance (10)
    #14CC
    #instruction: PUSH BC
    let:16 a3 = (-1 + a2) in
    M[a3] := E0;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    advance (11)
    #14CD
    #instruction: LD   (HL),A
    M[2402] := 01;
    advance (7)
    #14CE
    #instruction: LD   BC,0020
    advance (10)
    #14D1
    #instruction: ADD  HL,BC
    let:17 a5 = add17(0020,2402) in
    advance (10)
    #14D2
    #instruction: POP  BC
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    #14D3
    #instruction: DEC  B
    let:16 a10 = addWithCarry(!true,a9,~00) in
    let:8 a11 = (a9 & 0F) in
    let:8 a12 = (~00 & 0F) in
    let:16 a13 = addWithCarry(!true,a11,a12) in
    advance (5)
    #14D4
    #instruction: JP   NZ,14CC
    if (!is_zero(a10[7:0])) {
      advance (10)
      A := 01;
      B := a10[7:0];
      C := a7;
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a10[7:0][7];
      FlagZ := is_zero(a10[7:0]);
      FlagA := a13[7:0][4];
      FlagP := parity(a10[7:0]);
      FlagCY := a5[16];
      jump (14CC);
    } else {
      advance (10)
      #14D7
      #instruction: RET
      let:16 a14 = (1 + a8) in
      let:8 a15 = M[a8] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      A := 01;
      B := a10[7:0];
      C := a7;
      H := a5[15:0][15:8];
      L := a5[15:0][7:0];
      SPH := a16[15:8];
      SPL := a16[7:0];
      FlagS := a10[7:0][7];
      FlagZ := is_zero(a10[7:0]);
      FlagA := a13[7:0][4];
      FlagP := parity(a10[7:0]);
      FlagCY := a5[16];
      jump ((a17,a15));
    }

0B71:

    #0B71
    #instruction: CALL 1618
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 74;
    #return-to: 0B74
    advance (17)
    #1618
    #instruction: LD   A,(2015)
    let:8 a3 = M[2015] in
    advance (13)
    #161B
    #instruction: CP   FF
    let:16 a4 = addWithCarry(!false,a3,~FF) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~FF & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #161D
    #instruction: RET  NZ
    if (!is_zero(a4[7:0])) {
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (11)
      A := a3;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := !a4[15:8][0];
      jump ((a11,a9));
    } else {
      advance (5)
      #161E
      #instruction: LD   HL,2010
      advance (10)
      #1621
      #instruction: LD   A,(HL)
      let:8 a12 = M[2010] in
      advance (7)
      #1622
      #instruction: INC  HL
      advance (5)
      #1623
      #instruction: LD   B,(HL)
      let:8 a13 = M[2011] in
      advance (7)
      #1624
      #instruction: OR   B
      let:8 a14 = (a13 | a12) in
      advance (4)
      #1625
      #instruction: RET  NZ
      if (!is_zero(a14)) {
        let:16 a15 = (1 + a2) in
        let:8 a16 = M[a2] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (11)
        A := a14;
        B := a13;
        H := 20;
        L := 11;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := false;
        jump ((a18,a16));
      } else {
        advance (5)
        #1626
        #instruction: LD   A,(2025)
        let:8 a19 = M[2025] in
        advance (13)
        #1629
        #instruction: AND  A
        let:8 a20 = (a19 & a19) in
        let:8 a21 = (a19 | a19) in
        advance (4)
        #162A
        #instruction: RET  NZ
        if (!is_zero(a20)) {
          let:16 a22 = (1 + a2) in
          let:8 a23 = M[a2] in
          let:16 a24 = (1 + a22) in
          let:8 a25 = M[a22] in
          advance (11)
          A := a20;
          B := a13;
          H := 20;
          L := 11;
          SPH := a24[15:8];
          SPL := a24[7:0];
          FlagS := a20[7];
          FlagZ := is_zero(a20);
          FlagA := a21[3];
          FlagP := parity(a20);
          FlagCY := false;
          jump ((a25,a23));
        } else {
          advance (5)
          #162B
          #instruction: LD   A,(20EF)
          let:8 a26 = M[20EF] in
          advance (13)
          #162E
          #instruction: AND  A
          let:8 a27 = (a26 & a26) in
          let:8 a28 = (a26 | a26) in
          advance (4)
          #162F
          #instruction: JP   Z,1652
          if (is_zero(a27)) {
            advance (10)
            #1652
            #instruction: LD   HL,2025
            advance (10)
            #1655
            #instruction: LD   (HL),01
            M[2025] := 01;
            advance (10)
            #1657
            #instruction: LD   HL,(20ED)
            let:8 a29 = M[20ED] in
            let:8 a30 = M[20EE] in
            advance (16)
            #165A
            #instruction: INC  HL
            let:16 a31 = (1 + (a30,a29)) in
            advance (5)
            #165B
            #instruction: LD   A,L
            advance (5)
            #165C
            #instruction: CP   7E
            let:16 a32 = addWithCarry(!false,a31[7:0],~7E) in
            let:8 a33 = (a31[7:0] & 0F) in
            let:8 a34 = (~7E & 0F) in
            let:16 a35 = addWithCarry(!false,a33,a34) in
            advance (7)
            #165E
            #instruction: JP   CY,1663
            if (!a32[15:8][0]) {
              advance (10)
              #1663
              #instruction: LD   (20ED),HL
              M[20ED] := a31[7:0];
              M[20EE] := a31[15:8];
              advance (16)
              #1666
              #instruction: LD   A,(HL)
              let:8 a36 = M[a31] in
              advance (7)
              #1667
              #instruction: LD   (201D),A
              M[201D] := a36;
              advance (13)
              #166A
              #instruction: RET
              let:16 a37 = (1 + a2) in
              let:8 a38 = M[a2] in
              let:16 a39 = (1 + a37) in
              let:8 a40 = M[a37] in
              advance (10)
              A := a36;
              B := a13;
              H := a31[15:8];
              L := a31[7:0];
              SPH := a39[15:8];
              SPL := a39[7:0];
              FlagS := a32[7:0][7];
              FlagZ := is_zero(a32[7:0]);
              FlagA := a35[7:0][4];
              FlagP := parity(a32[7:0]);
              FlagCY := !a32[15:8][0];
              jump ((a40,a38));
            } else {
              advance (10)
              #1661
              #instruction: LD   L,74
              advance (7)
              #1663
              #instruction: LD   (20ED),HL
              M[20ED] := 74;
              M[20EE] := a31[15:8];
              advance (16)
              #1666
              #instruction: LD   A,(HL)
              let:8 a41 = M[(a31[15:8],74)] in
              advance (7)
              #1667
              #instruction: LD   (201D),A
              M[201D] := a41;
              advance (13)
              #166A
              #instruction: RET
              let:16 a42 = (1 + a2) in
              let:8 a43 = M[a2] in
              let:16 a44 = (1 + a42) in
              let:8 a45 = M[a42] in
              advance (10)
              A := a41;
              B := a13;
              H := a31[15:8];
              L := 74;
              SPH := a44[15:8];
              SPL := a44[7:0];
              FlagS := a32[7:0][7];
              FlagZ := is_zero(a32[7:0]);
              FlagA := a35[7:0][4];
              FlagP := parity(a32[7:0]);
              FlagCY := !a32[15:8][0];
              jump ((a45,a43));
            }
          } else {
            advance (10)
            #1632
            #instruction: LD   A,(202D)
            let:8 a46 = M[202D] in
            advance (13)
            #1635
            #instruction: AND  A
            let:8 a47 = (a46 & a46) in
            let:8 a48 = (a46 | a46) in
            advance (4)
            #1636
            #instruction: JP   NZ,1648
            if (!is_zero(a47)) {
              advance (10)
              #1648
              #instruction: CALL 17C0
              let:16 a49 = (-1 + a2) in
              M[a49] := 16;
              let:16 a50 = (-1 + a49) in
              M[a50] := 4B;
              #return-to: 164B
              advance (17)
              #17C0
              #instruction: LD   A,(2067)
              let:8 a51 = M[2067] in
              advance (13)
              #17C3
              #instruction: RRCA
              advance (4)
              #17C4
              #instruction: JP   NC,17CA
              if (!a51[0]) {
                advance (10)
                #17CA
                #instruction: IN   02
                advance (10)
                #17CC
                #instruction: RET
                let:16 a52 = (1 + a50) in
                let:8 a53 = M[a50] in
                let:16 a54 = (1 + a52) in
                let:8 a55 = M[a52] in
                advance (10)
                A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
                B := a13;
                H := 20;
                L := 11;
                SPH := a54[15:8];
                SPL := a54[7:0];
                FlagS := a47[7];
                FlagZ := is_zero(a47);
                FlagA := a48[3];
                FlagP := parity(a47);
                FlagCY := a51[0];
                jump ((a55,a53));
              } else {
                advance (10)
                #17C7
                #instruction: IN   01
                advance (10)
                #17C9
                #instruction: RET
                let:16 a56 = (1 + a50) in
                let:8 a57 = M[a50] in
                let:16 a58 = (1 + a56) in
                let:8 a59 = M[a56] in
                advance (10)
                A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
                B := a13;
                H := 20;
                L := 11;
                SPH := a58[15:8];
                SPL := a58[7:0];
                FlagS := a47[7];
                FlagZ := is_zero(a47);
                FlagA := a48[3];
                FlagP := parity(a47);
                FlagCY := a51[0];
                jump ((a59,a57));
              }
            } else {
              advance (10)
              #1639
              #instruction: CALL 17C0
              let:16 a60 = (-1 + a2) in
              M[a60] := 16;
              let:16 a61 = (-1 + a60) in
              M[a61] := 3C;
              #return-to: 163C
              advance (17)
              #17C0
              #instruction: LD   A,(2067)
              let:8 a62 = M[2067] in
              advance (13)
              #17C3
              #instruction: RRCA
              advance (4)
              #17C4
              #instruction: JP   NC,17CA
              if (!a62[0]) {
                advance (10)
                #17CA
                #instruction: IN   02
                advance (10)
                #17CC
                #instruction: RET
                let:16 a63 = (1 + a61) in
                let:8 a64 = M[a61] in
                let:16 a65 = (1 + a63) in
                let:8 a66 = M[a63] in
                advance (10)
                A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
                B := a13;
                H := 20;
                L := 11;
                SPH := a65[15:8];
                SPL := a65[7:0];
                FlagS := a47[7];
                FlagZ := is_zero(a47);
                FlagA := a48[3];
                FlagP := parity(a47);
                FlagCY := a62[0];
                jump ((a66,a64));
              } else {
                advance (10)
                #17C7
                #instruction: IN   01
                advance (10)
                #17C9
                #instruction: RET
                let:16 a67 = (1 + a61) in
                let:8 a68 = M[a61] in
                let:16 a69 = (1 + a67) in
                let:8 a70 = M[a67] in
                advance (10)
                A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
                B := a13;
                H := 20;
                L := 11;
                SPH := a69[15:8];
                SPL := a69[7:0];
                FlagS := a47[7];
                FlagZ := is_zero(a47);
                FlagA := a48[3];
                FlagP := parity(a47);
                FlagCY := a62[0];
                jump ((a70,a68));
              }
            }
          }
        }
      }
    }

0B74:

    #0B74
    #instruction: CALL 0BF1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 77;
    #return-to: 0B77
    advance (17)
    #0BF1
    #instruction: CALL 190A
    let:16 a3 = (-1 + a2) in
    M[a3] := 0B;
    let:16 a4 = (-1 + a3) in
    M[a4] := F4;
    #return-to: 0BF4
    advance (17)
    #190A
    #instruction: CALL 14D8
    let:16 a5 = (-1 + a4) in
    M[a5] := 19;
    let:16 a6 = (-1 + a5) in
    M[a6] := 0D;
    #return-to: 190D
    advance (17)
    #14D8
    #instruction: LD   A,(2025)
    let:8 a7 = M[2025] in
    advance (13)
    #14DB
    #instruction: CP   05
    let:16 a8 = addWithCarry(!false,a7,~05) in
    let:8 a9 = (a7 & 0F) in
    let:8 a10 = (~05 & 0F) in
    let:16 a11 = addWithCarry(!false,a9,a10) in
    advance (7)
    #14DD
    #instruction: RET  Z
    if (is_zero(a8[7:0])) {
      let:16 a12 = (1 + a6) in
      let:8 a13 = M[a6] in
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      advance (11)
      A := a7;
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a8[7:0][7];
      FlagZ := is_zero(a8[7:0]);
      FlagA := a11[7:0][4];
      FlagP := parity(a8[7:0]);
      FlagCY := !a8[15:8][0];
      jump ((a15,a13));
    } else {
      advance (5)
      #14DE
      #instruction: CP   02
      let:16 a16 = addWithCarry(!false,a7,~02) in
      let:8 a17 = (a7 & 0F) in
      let:8 a18 = (~02 & 0F) in
      let:16 a19 = addWithCarry(!false,a17,a18) in
      advance (7)
      #14E0
      #instruction: RET  NZ
      if (!is_zero(a16[7:0])) {
        let:16 a20 = (1 + a6) in
        let:8 a21 = M[a6] in
        let:16 a22 = (1 + a20) in
        let:8 a23 = M[a20] in
        advance (11)
        A := a7;
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a16[7:0][7];
        FlagZ := is_zero(a16[7:0]);
        FlagA := a19[7:0][4];
        FlagP := parity(a16[7:0]);
        FlagCY := !a16[15:8][0];
        jump ((a23,a21));
      } else {
        advance (5)
        #14E1
        #instruction: LD   A,(2029)
        let:8 a24 = M[2029] in
        advance (13)
        #14E4
        #instruction: CP   D8
        let:16 a25 = addWithCarry(!false,a24,~D8) in
        let:8 a26 = (a24 & 0F) in
        let:8 a27 = (~D8 & 0F) in
        let:16 a28 = addWithCarry(!false,a26,a27) in
        advance (7)
        #14E6
        #instruction: LD   B,A
        advance (5)
        #14E7
        #instruction: JP   NC,1530
        if (!!a25[15:8][0]) {
          advance (10)
          #1530
          #instruction: LD   A,03
          advance (7)
          #1532
          #instruction: LD   (2025),A
          M[2025] := 03;
          advance (13)
          #1535
          #instruction: JP   154A
          advance (10)
          #154A
          #instruction: XOR  A
          let:8 a29 = (03 ^ 03) in
          advance (4)
          #154B
          #instruction: LD   (2002),A
          M[2002] := a29;
          advance (13)
          #154E
          #instruction: LD   B,F7
          advance (7)
          #1550
          #instruction: JP   19DC
          advance (10)
          #19DC
          #instruction: LD   A,(2094)
          let:8 a30 = M[2094] in
          advance (13)
          #19DF
          #instruction: AND  B
          let:8 a31 = (F7 & a30) in
          let:8 a32 = (F7 | a30) in
          advance (4)
          #19E0
          #instruction: LD   (2094),A
          M[2094] := a31;
          advance (13)
          #19E3
          #instruction: OUT  03
          sound_control(Ufo,a31[0]);
          sound_control(Shot,a31[1]);
          sound_control(PlayerDie,a31[2]);
          sound_control(InvaderDie,a31[3]);
          sound_control(ExtraLife,a31[4]);
          advance (10)
          #19E5
          #instruction: RET
          let:16 a33 = (1 + a6) in
          let:8 a34 = M[a6] in
          let:16 a35 = (1 + a33) in
          let:8 a36 = M[a33] in
          advance (10)
          A := a31;
          B := F7;
          SPH := a35[15:8];
          SPL := a35[7:0];
          FlagS := a31[7];
          FlagZ := is_zero(a31);
          FlagA := a32[3];
          FlagP := parity(a31);
          FlagCY := false;
          jump ((a36,a34));
        } else {
          advance (10)
          #14EA
          #instruction: LD   A,(2002)
          let:8 a37 = M[2002] in
          advance (13)
          #14ED
          #instruction: AND  A
          let:8 a38 = (a37 & a37) in
          let:8 a39 = (a37 | a37) in
          advance (4)
          #14EE
          #instruction: RET  Z
          if (is_zero(a38)) {
            let:16 a40 = (1 + a6) in
            let:8 a41 = M[a6] in
            let:16 a42 = (1 + a40) in
            let:8 a43 = M[a40] in
            advance (11)
            A := a38;
            B := a24;
            SPH := a42[15:8];
            SPL := a42[7:0];
            FlagS := a38[7];
            FlagZ := is_zero(a38);
            FlagA := a39[3];
            FlagP := parity(a38);
            FlagCY := false;
            jump ((a43,a41));
          } else {
            advance (5)
            #14EF
            #instruction: LD   A,B
            advance (5)
            #14F0
            #instruction: CP   CE
            let:16 a44 = addWithCarry(!false,a24,~CE) in
            let:8 a45 = (a24 & 0F) in
            let:8 a46 = (~CE & 0F) in
            let:16 a47 = addWithCarry(!false,a45,a46) in
            advance (7)
            #14F2
            #instruction: JP   NC,1579
            if (!!a44[15:8][0]) {
              advance (10)
              #1579
              #instruction: LD   A,01
              advance (7)
              #157B
              #instruction: LD   (2085),A
              M[2085] := 01;
              advance (13)
              #157E
              #instruction: JP   1545
              advance (10)
              A := 01;
              B := a24;
              SPH := a6[15:8];
              SPL := a6[7:0];
              FlagS := a44[7:0][7];
              FlagZ := is_zero(a44[7:0]);
              FlagA := a47[7:0][4];
              FlagP := parity(a44[7:0]);
              FlagCY := !a44[15:8][0];
              jump (1545);
            } else {
              advance (10)
              #14F5
              #instruction: ADD  06
              let:16 a48 = addWithCarry(false,06,a24) in
              let:8 a49 = (06 & 0F) in
              let:8 a50 = (a24 & 0F) in
              let:16 a51 = addWithCarry(false,a49,a50) in
              advance (7)
              #14F7
              #instruction: LD   B,A
              advance (5)
              #14F8
              #instruction: LD   A,(2009)
              let:8 a52 = M[2009] in
              advance (13)
              #14FB
              #instruction: CP   90
              let:16 a53 = addWithCarry(!false,a52,~90) in
              let:8 a54 = (a52 & 0F) in
              let:8 a55 = (~90 & 0F) in
              let:16 a56 = addWithCarry(!false,a54,a55) in
              advance (7)
              #14FD
              #instruction: JP   NC,1504
              if (!!a53[15:8][0]) {
                advance (10)
                #1504
                #instruction: LD   L,B
                advance (5)
                #1505
                #instruction: CALL 1562
                let:16 a57 = (-1 + a6) in
                M[a57] := 15;
                let:16 a58 = (-1 + a57) in
                M[a58] := 08;
                #return-to: 1508
                advance (17)
                #1562
                #instruction: LD   A,(2009)
                let:8 a59 = M[2009] in
                advance (13)
                #1565
                #instruction: LD   H,L
                advance (5)
                #1566
                #instruction: CALL 1554
                let:16 a60 = (-1 + a58) in
                M[a60] := 15;
                let:16 a61 = (-1 + a60) in
                M[a61] := 69;
                #return-to: 1569
                advance (17)
                #1554
                #instruction: LD   C,00
                advance (7)
                #1556
                #instruction: CP   H
                let:16 a62 = addWithCarry(!false,a59,~a48[7:0]) in
                let:8 a63 = (a59 & 0F) in
                let:8 a64 = (~a48[7:0] & 0F) in
                let:16 a65 = addWithCarry(!false,a63,a64) in
                advance (4)
                #1557
                #instruction: CALL NC,1590
                if (!!a62[15:8][0]) {
                  let:16 a66 = (-1 + a61) in
                  M[a66] := 15;
                  let:16 a67 = (-1 + a66) in
                  M[a67] := 5A;
                  #return-to: 155A
                  advance (17)
                  #1590
                  #instruction: INC  C
                  let:16 a68 = addWithCarry(true,00,00) in
                  let:8 a69 = (00 & 0F) in
                  let:8 a70 = (00 & 0F) in
                  let:16 a71 = addWithCarry(true,a69,a70) in
                  advance (5)
                  #1591
                  #instruction: ADD  10
                  let:16 a72 = addWithCarry(false,10,a59) in
                  let:8 a73 = (10 & 0F) in
                  let:8 a74 = (a59 & 0F) in
                  let:16 a75 = addWithCarry(false,a73,a74) in
                  advance (7)
                  #1593
                  #instruction: JP   MI,1590
                  if (a72[7:0][7]) {
                    advance (10)
                    A := a72[7:0];
                    B := a48[7:0];
                    C := a68[7:0];
                    H := a48[7:0];
                    L := a48[7:0];
                    SPH := a67[15:8];
                    SPL := a67[7:0];
                    FlagS := a72[7:0][7];
                    FlagZ := is_zero(a72[7:0]);
                    FlagA := a75[7:0][4];
                    FlagP := parity(a72[7:0]);
                    FlagCY := a72[15:8][0];
                    jump (1590);
                  } else {
                    advance (10)
                    #1596
                    #instruction: RET
                    let:16 a76 = (1 + a67) in
                    let:8 a77 = M[a67] in
                    let:16 a78 = (1 + a76) in
                    let:8 a79 = M[a76] in
                    advance (10)
                    A := a72[7:0];
                    B := a48[7:0];
                    C := a68[7:0];
                    H := a48[7:0];
                    L := a48[7:0];
                    SPH := a78[15:8];
                    SPL := a78[7:0];
                    FlagS := a72[7:0][7];
                    FlagZ := is_zero(a72[7:0]);
                    FlagA := a75[7:0][4];
                    FlagP := parity(a72[7:0]);
                    FlagCY := a72[15:8][0];
                    jump ((a79,a77));
                  }
                } else {
                  advance (11)
                  A := a59;
                  B := a48[7:0];
                  C := 00;
                  H := a48[7:0];
                  L := a48[7:0];
                  SPH := a61[15:8];
                  SPL := a61[7:0];
                  FlagS := a62[7:0][7];
                  FlagZ := is_zero(a62[7:0]);
                  FlagA := a65[7:0][4];
                  FlagP := parity(a62[7:0]);
                  FlagCY := !a62[15:8][0];
                  jump (155A);
                }
              } else {
                advance (10)
                #1500
                #instruction: CP   B
                let:16 a80 = addWithCarry(!false,a52,~a48[7:0]) in
                let:8 a81 = (a52 & 0F) in
                let:8 a82 = (~a48[7:0] & 0F) in
                let:16 a83 = addWithCarry(!false,a81,a82) in
                advance (4)
                #1501
                #instruction: JP   NC,1530
                if (!!a80[15:8][0]) {
                  advance (10)
                  #1530
                  #instruction: LD   A,03
                  advance (7)
                  #1532
                  #instruction: LD   (2025),A
                  M[2025] := 03;
                  advance (13)
                  #1535
                  #instruction: JP   154A
                  advance (10)
                  #154A
                  #instruction: XOR  A
                  let:8 a84 = (03 ^ 03) in
                  advance (4)
                  #154B
                  #instruction: LD   (2002),A
                  M[2002] := a84;
                  advance (13)
                  #154E
                  #instruction: LD   B,F7
                  advance (7)
                  #1550
                  #instruction: JP   19DC
                  advance (10)
                  #19DC
                  #instruction: LD   A,(2094)
                  let:8 a85 = M[2094] in
                  advance (13)
                  #19DF
                  #instruction: AND  B
                  let:8 a86 = (F7 & a85) in
                  let:8 a87 = (F7 | a85) in
                  advance (4)
                  #19E0
                  #instruction: LD   (2094),A
                  M[2094] := a86;
                  advance (13)
                  #19E3
                  #instruction: OUT  03
                  sound_control(Ufo,a86[0]);
                  sound_control(Shot,a86[1]);
                  sound_control(PlayerDie,a86[2]);
                  sound_control(InvaderDie,a86[3]);
                  sound_control(ExtraLife,a86[4]);
                  advance (10)
                  #19E5
                  #instruction: RET
                  let:16 a88 = (1 + a6) in
                  let:8 a89 = M[a6] in
                  let:16 a90 = (1 + a88) in
                  let:8 a91 = M[a88] in
                  advance (10)
                  A := a86;
                  B := F7;
                  SPH := a90[15:8];
                  SPL := a90[7:0];
                  FlagS := a86[7];
                  FlagZ := is_zero(a86);
                  FlagA := a87[3];
                  FlagP := parity(a86);
                  FlagCY := false;
                  jump ((a91,a89));
                } else {
                  advance (10)
                  #1504
                  #instruction: LD   L,B
                  advance (5)
                  #1505
                  #instruction: CALL 1562
                  let:16 a92 = (-1 + a6) in
                  M[a92] := 15;
                  let:16 a93 = (-1 + a92) in
                  M[a93] := 08;
                  #return-to: 1508
                  advance (17)
                  #1562
                  #instruction: LD   A,(2009)
                  let:8 a94 = M[2009] in
                  advance (13)
                  #1565
                  #instruction: LD   H,L
                  advance (5)
                  #1566
                  #instruction: CALL 1554
                  let:16 a95 = (-1 + a93) in
                  M[a95] := 15;
                  let:16 a96 = (-1 + a95) in
                  M[a96] := 69;
                  #return-to: 1569
                  advance (17)
                  #1554
                  #instruction: LD   C,00
                  advance (7)
                  #1556
                  #instruction: CP   H
                  let:16 a97 = addWithCarry(!false,a94,~a48[7:0]) in
                  let:8 a98 = (a94 & 0F) in
                  let:8 a99 = (~a48[7:0] & 0F) in
                  let:16 a100 = addWithCarry(!false,a98,a99) in
                  advance (4)
                  #1557
                  #instruction: CALL NC,1590
                  if (!!a97[15:8][0]) {
                    let:16 a101 = (-1 + a96) in
                    M[a101] := 15;
                    let:16 a102 = (-1 + a101) in
                    M[a102] := 5A;
                    #return-to: 155A
                    advance (17)
                    #1590
                    #instruction: INC  C
                    let:16 a103 = addWithCarry(true,00,00) in
                    let:8 a104 = (00 & 0F) in
                    let:8 a105 = (00 & 0F) in
                    let:16 a106 = addWithCarry(true,a104,a105) in
                    advance (5)
                    #1591
                    #instruction: ADD  10
                    let:16 a107 = addWithCarry(false,10,a94) in
                    let:8 a108 = (10 & 0F) in
                    let:8 a109 = (a94 & 0F) in
                    let:16 a110 = addWithCarry(false,a108,a109) in
                    advance (7)
                    #1593
                    #instruction: JP   MI,1590
                    if (a107[7:0][7]) {
                      advance (10)
                      A := a107[7:0];
                      B := a48[7:0];
                      C := a103[7:0];
                      H := a48[7:0];
                      L := a48[7:0];
                      SPH := a102[15:8];
                      SPL := a102[7:0];
                      FlagS := a107[7:0][7];
                      FlagZ := is_zero(a107[7:0]);
                      FlagA := a110[7:0][4];
                      FlagP := parity(a107[7:0]);
                      FlagCY := a107[15:8][0];
                      jump (1590);
                    } else {
                      advance (10)
                      #1596
                      #instruction: RET
                      let:16 a111 = (1 + a102) in
                      let:8 a112 = M[a102] in
                      let:16 a113 = (1 + a111) in
                      let:8 a114 = M[a111] in
                      advance (10)
                      A := a107[7:0];
                      B := a48[7:0];
                      C := a103[7:0];
                      H := a48[7:0];
                      L := a48[7:0];
                      SPH := a113[15:8];
                      SPL := a113[7:0];
                      FlagS := a107[7:0][7];
                      FlagZ := is_zero(a107[7:0]);
                      FlagA := a110[7:0][4];
                      FlagP := parity(a107[7:0]);
                      FlagCY := a107[15:8][0];
                      jump ((a114,a112));
                    }
                  } else {
                    advance (11)
                    A := a94;
                    B := a48[7:0];
                    C := 00;
                    H := a48[7:0];
                    L := a48[7:0];
                    SPH := a96[15:8];
                    SPL := a96[7:0];
                    FlagS := a97[7:0][7];
                    FlagZ := is_zero(a97[7:0]);
                    FlagA := a100[7:0][4];
                    FlagP := parity(a97[7:0]);
                    FlagCY := !a97[15:8][0];
                    jump (155A);
                  }
                }
              }
            }
          }
        }
      }
    }

0B77:

    #0B77
    #instruction: OUT  06
    advance (10)
    #0B79
    #instruction: CALL 0A59
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7C;
    #return-to: 0B7C
    advance (17)
    #0A59
    #instruction: LD   A,(2015)
    let:8 a3 = M[2015] in
    advance (13)
    #0A5C
    #instruction: CP   FF
    let:16 a4 = addWithCarry(!false,a3,~FF) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~FF & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #0A5E
    #instruction: RET
    let:16 a8 = (1 + a2) in
    let:8 a9 = M[a2] in
    let:16 a10 = (1 + a8) in
    let:8 a11 = M[a8] in
    advance (10)
    A := a3;
    SPH := a10[15:8];
    SPL := a10[7:0];
    FlagS := a4[7:0][7];
    FlagZ := is_zero(a4[7:0]);
    FlagA := a7[7:0][4];
    FlagP := parity(a4[7:0]);
    FlagCY := !a4[15:8][0];
    jump ((a11,a9));

0B7C:

    #0B7C
    #instruction: JP   Z,0B71
    if (FlagZ) {
      advance (10)
      jump (0B71);
    } else {
      advance (10)
      #0B7F
      #instruction: XOR  A
      let:8 a1 = (A ^ A) in
      advance (4)
      #0B80
      #instruction: LD   (2025),A
      M[2025] := a1;
      advance (13)
      #0B83
      #instruction: CALL 0A59
      let:16 a2 = (-1 + (SPH,SPL)) in
      M[a2] := 0B;
      let:16 a3 = (-1 + a2) in
      M[a3] := 86;
      #return-to: 0B86
      advance (17)
      #0A59
      #instruction: LD   A,(2015)
      let:8 a4 = M[2015] in
      advance (13)
      #0A5C
      #instruction: CP   FF
      let:16 a5 = addWithCarry(!false,a4,~FF) in
      let:8 a6 = (a4 & 0F) in
      let:8 a7 = (~FF & 0F) in
      let:16 a8 = addWithCarry(!false,a6,a7) in
      advance (7)
      #0A5E
      #instruction: RET
      let:16 a9 = (1 + a3) in
      let:8 a10 = M[a3] in
      let:16 a11 = (1 + a9) in
      let:8 a12 = M[a9] in
      advance (10)
      A := a4;
      SPH := a11[15:8];
      SPL := a11[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a5[15:8][0];
      jump ((a12,a10));
    }

0B86:

    #0B86
    #instruction: JP   NZ,0B83
    if (!FlagZ) {
      advance (10)
      #0B83
      #instruction: CALL 0A59
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 0B;
      let:16 a2 = (-1 + a1) in
      M[a2] := 86;
      #return-to: 0B86
      advance (17)
      #0A59
      #instruction: LD   A,(2015)
      let:8 a3 = M[2015] in
      advance (13)
      #0A5C
      #instruction: CP   FF
      let:16 a4 = addWithCarry(!false,a3,~FF) in
      let:8 a5 = (a3 & 0F) in
      let:8 a6 = (~FF & 0F) in
      let:16 a7 = addWithCarry(!false,a5,a6) in
      advance (7)
      #0A5E
      #instruction: RET
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := a3;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := !a4[15:8][0];
      jump ((a11,a9));
    } else {
      advance (10)
      #0B89
      #instruction: XOR  A
      let:8 a12 = (A ^ A) in
      advance (4)
      #0B8A
      #instruction: LD   (20C1),A
      M[20C1] := a12;
      advance (13)
      #0B8D
      #instruction: CALL 0AB1
      let:16 a13 = (-1 + (SPH,SPL)) in
      M[a13] := 0B;
      let:16 a14 = (-1 + a13) in
      M[a14] := 90;
      #return-to: 0B90
      advance (17)
      #0AB1
      #instruction: LD   A,40
      advance (7)
      #0AB3
      #instruction: JP   0AD7
      advance (10)
      #0AD7
      #instruction: LD   (20C0),A
      M[20C0] := 40;
      advance (13)
      #0ADA
      #instruction: LD   A,(20C0)
      let:8 a15 = M[20C0] in
      advance (13)
      #0ADD
      #instruction: AND  A
      let:8 a16 = (a15 & a15) in
      let:8 a17 = (a15 | a15) in
      advance (4)
      #0ADE
      #instruction: JP   NZ,0ADA
      if (!is_zero(a16)) {
        advance (10)
        A := a16;
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagS := a16[7];
        FlagZ := is_zero(a16);
        FlagA := a17[3];
        FlagP := parity(a16);
        FlagCY := false;
        jump (0ADA);
      } else {
        advance (10)
        #0AE1
        #instruction: RET
        let:16 a18 = (1 + a14) in
        let:8 a19 = M[a14] in
        let:16 a20 = (1 + a18) in
        let:8 a21 = M[a18] in
        advance (10)
        A := a16;
        SPH := a20[15:8];
        SPL := a20[7:0];
        FlagS := a16[7];
        FlagZ := is_zero(a16);
        FlagA := a17[3];
        FlagP := parity(a16);
        FlagCY := false;
        jump ((a21,a19));
      }
    }

0B90:

    #0B90
    #instruction: CALL 1988
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 93;
    #return-to: 0B93
    advance (17)
    #1988
    #instruction: JP   09D6
    advance (10)
    #09D6
    #instruction: LD   HL,2402
    advance (10)
    #09D9
    #instruction: LD   (HL),00
    M[2402] := 00;
    advance (10)
    #09DB
    #instruction: INC  HL
    advance (5)
    #09DC
    #instruction: LD   A,L
    advance (5)
    #09DD
    #instruction: AND  1F
    let:8 a3 = (1F & 03) in
    let:8 a4 = (1F | 03) in
    advance (7)
    #09DF
    #instruction: CP   1C
    let:16 a5 = addWithCarry(!false,a3,~1C) in
    let:8 a6 = (a3 & 0F) in
    let:8 a7 = (~1C & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    advance (7)
    #09E1
    #instruction: JP   CY,09E8
    if (!a5[15:8][0]) {
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a9 = addWithCarry(!false,24,~40) in
      let:8 a10 = (24 & 0F) in
      let:8 a11 = (~40 & 0F) in
      let:16 a12 = addWithCarry(!false,a10,a11) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a9[15:8][0]) {
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a13 = (1 + a2) in
        let:8 a14 = M[a2] in
        let:16 a15 = (1 + a13) in
        let:8 a16 = M[a13] in
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a15[15:8];
        SPL := a15[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump ((a16,a14));
      }
    } else {
      advance (10)
      #09E4
      #instruction: LD   DE,0006
      advance (10)
      #09E7
      #instruction: ADD  HL,DE
      let:17 a17 = add17(0006,2403) in
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a18 = addWithCarry(!false,a17[15:0][15:8],~40) in
      let:8 a19 = (a17[15:0][15:8] & 0F) in
      let:8 a20 = (~40 & 0F) in
      let:16 a21 = addWithCarry(!false,a19,a20) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a18[15:8][0]) {
        advance (10)
        A := a17[15:0][15:8];
        D := 00;
        E := 06;
        H := a17[15:0][15:8];
        L := a17[15:0][7:0];
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := !a18[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a22 = (1 + a2) in
        let:8 a23 = M[a2] in
        let:16 a24 = (1 + a22) in
        let:8 a25 = M[a22] in
        advance (10)
        A := a17[15:0][15:8];
        D := 00;
        E := 06;
        H := a17[15:0][15:8];
        L := a17[15:0][7:0];
        SPH := a24[15:8];
        SPL := a24[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := !a18[15:8][0];
        jump ((a25,a23));
      }
    }

0B93:

    #0B93
    #instruction: LD   C,0C
    advance (7)
    #0B95
    #instruction: LD   HL,2C11
    advance (10)
    #0B98
    #instruction: LD   DE,1F90
    advance (10)
    #0B9B
    #instruction: CALL 08F3
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 9E;
    #return-to: 0B9E
    advance (17)
    #08F3
    #instruction: LD   A,(DE)
    advance (7)
    #08F4
    #instruction: PUSH DE
    let:16 a3 = (-1 + a2) in
    M[a3] := 1F;
    let:16 a4 = (-1 + a3) in
    M[a4] := 90;
    advance (11)
    #08F5
    #instruction: CALL 08FF
    let:16 a5 = (-1 + a4) in
    M[a5] := 08;
    let:16 a6 = (-1 + a5) in
    M[a6] := F8;
    #return-to: 08F8
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a7 = (-1 + a6) in
    M[a7] := 2C;
    let:16 a8 = (-1 + a7) in
    M[a8] := 11;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a9 = add17(0008,0008) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a10 = add17(a9[15:0],a9[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a11 = add17(a10[15:0],a10[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a12 = add17(1E00,a11[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a13 = (1 + a8) in
    let:8 a14 = M[a8] in
    let:16 a15 = (1 + a13) in
    let:8 a16 = M[a13] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a17 = (-1 + a15) in
    M[a17] := 08;
    let:16 a18 = (-1 + a17) in
    M[a18] := 0C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a19 = M[a12[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a16,a14)] := a19;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a20 = (1 + a12[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a21 = add17(0020,(a16,a14)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a22 = (1 + a18) in
    let:8 a23 = M[a18] in
    let:16 a24 = (1 + a22) in
    let:8 a25 = M[a22] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a26 = addWithCarry(!true,a25,~00) in
    let:8 a27 = (a25 & 0F) in
    let:8 a28 = (~00 & 0F) in
    let:16 a29 = addWithCarry(!true,a27,a28) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a26[7:0])) {
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a24[15:8];
      SPL := a24[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a30 = (1 + a24) in
      let:8 a31 = M[a24] in
      let:16 a32 = (1 + a30) in
      let:8 a33 = M[a30] in
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a32[15:8];
      SPL := a32[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump ((a33,a31));
    }

0B9E:

    #0B9E
    #instruction: LD   A,(20EC)
    let:8 a1 = M[20EC] in
    advance (13)
    #0BA1
    #instruction: CP   00
    let:16 a2 = addWithCarry(!false,a1,~00) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~00 & 0F) in
    let:16 a5 = addWithCarry(!false,a3,a4) in
    advance (7)
    #0BA3
    #instruction: JP   NZ,0BAE
    if (!is_zero(a2[7:0])) {
      advance (10)
      A := a1;
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      FlagCY := !a2[15:8][0];
      jump (0BAE);
    } else {
      advance (10)
      #0BA6
      #instruction: LD   HL,3311
      advance (10)
      #0BA9
      #instruction: LD   A,02
      advance (7)
      #0BAB
      #instruction: CALL 08FF
      let:16 a6 = (-1 + (SPH,SPL)) in
      M[a6] := 0B;
      let:16 a7 = (-1 + a6) in
      M[a7] := AE;
      #return-to: 0BAE
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a8 = (-1 + a7) in
      M[a8] := 33;
      let:16 a9 = (-1 + a8) in
      M[a9] := 11;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a10 = add17(0002,0002) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a11 = add17(a10[15:0],a10[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a12 = add17(a11[15:0],a11[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a13 = add17(1E00,a12[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a14 = (1 + a9) in
      let:8 a15 = M[a9] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a18 = (-1 + a16) in
      M[a18] := 08;
      let:16 a19 = (-1 + a18) in
      M[a19] := C;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a20 = M[a13[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a17,a15)] := a20;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a21 = (1 + a13[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a22 = add17(0020,(a17,a15)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a23 = (1 + a19) in
      let:8 a24 = M[a19] in
      let:16 a25 = (1 + a23) in
      let:8 a26 = M[a23] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a27 = addWithCarry(!true,a26,~00) in
      let:8 a28 = (a26 & 0F) in
      let:8 a29 = (~00 & 0F) in
      let:16 a30 = addWithCarry(!true,a28,a29) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a27[7:0])) {
        advance (10)
        A := a20;
        B := a27[7:0];
        C := a24;
        D := a21[15:8];
        E := a21[7:0];
        H := a22[15:0][15:8];
        L := a22[15:0][7:0];
        SPH := a25[15:8];
        SPL := a25[7:0];
        FlagS := a27[7:0][7];
        FlagZ := is_zero(a27[7:0]);
        FlagA := a30[7:0][4];
        FlagP := parity(a27[7:0]);
        FlagCY := a22[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a31 = (1 + a25) in
        let:8 a32 = M[a25] in
        let:16 a33 = (1 + a31) in
        let:8 a34 = M[a31] in
        advance (10)
        A := a20;
        B := a27[7:0];
        C := a24;
        D := a21[15:8];
        E := a21[7:0];
        H := a22[15:0][15:8];
        L := a22[15:0][7:0];
        SPH := a33[15:8];
        SPL := a33[7:0];
        FlagS := a27[7:0][7];
        FlagZ := is_zero(a27[7:0]);
        FlagA := a30[7:0][4];
        FlagP := parity(a27[7:0]);
        FlagCY := a22[16];
        jump ((a34,a32));
      }
    }

0BAE:

    #0BAE
    #instruction: LD   BC,1F9C
    advance (10)
    #0BB1
    #instruction: CALL 1856
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := B4;
    #return-to: 0BB4
    advance (17)
    #1856
    #instruction: LD   A,(BC)
    advance (7)
    #1857
    #instruction: CP   FF
    let:16 a3 = addWithCarry(!false,0D,~FF) in
    let:8 a4 = (0D & 0F) in
    let:8 a5 = (~FF & 0F) in
    let:16 a6 = addWithCarry(!false,a4,a5) in
    advance (7)
    #1859
    #instruction: SCF
    advance (4)
    #185A
    #instruction: RET  Z
    if (is_zero(a3[7:0])) {
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (11)
      A := 0D;
      B := 1F;
      C := 9C;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := true;
      jump ((a10,a8));
    } else {
      advance (5)
      #185B
      #instruction: LD   L,A
      advance (5)
      #185C
      #instruction: INC  BC
      advance (5)
      #185D
      #instruction: LD   A,(BC)
      advance (7)
      #185E
      #instruction: LD   H,A
      advance (5)
      #185F
      #instruction: INC  BC
      advance (5)
      #1860
      #instruction: LD   A,(BC)
      advance (7)
      #1861
      #instruction: LD   E,A
      advance (5)
      #1862
      #instruction: INC  BC
      advance (5)
      #1863
      #instruction: LD   A,(BC)
      advance (7)
      #1864
      #instruction: LD   D,A
      advance (5)
      #1865
      #instruction: INC  BC
      advance (5)
      #1866
      #instruction: AND  A
      let:8 a11 = (1F & 1F) in
      let:8 a12 = (1F | 1F) in
      advance (4)
      #1867
      #instruction: RET
      let:16 a13 = (1 + a2) in
      let:8 a14 = M[a2] in
      let:16 a15 = (1 + a13) in
      let:8 a16 = M[a13] in
      advance (10)
      A := a11;
      B := 1F;
      C := A0;
      D := 1F;
      E := 50;
      H := 2A;
      L := 0D;
      SPH := a15[15:8];
      SPL := a15[7:0];
      FlagS := a11[7];
      FlagZ := is_zero(a11);
      FlagA := a12[3];
      FlagP := parity(a11);
      FlagCY := false;
      jump ((a16,a14));
    }

0BB4:

    #0BB4
    #instruction: CALL 184C
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := B7;
    #return-to: 0BB7
    advance (17)
    #184C
    #instruction: PUSH BC
    let:16 a3 = (-1 + a2) in
    M[a3] := B;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    advance (11)
    #184D
    #instruction: LD   A,(206C)
    let:8 a5 = M[206C] in
    advance (13)
    #1850
    #instruction: LD   C,A
    advance (5)
    #1851
    #instruction: CALL 0A93
    let:16 a6 = (-1 + a4) in
    M[a6] := 18;
    let:16 a7 = (-1 + a6) in
    M[a7] := 54;
    #return-to: 1854
    advance (17)
    #0A93
    #instruction: PUSH DE
    let:16 a8 = (-1 + a7) in
    M[a8] := D;
    let:16 a9 = (-1 + a8) in
    M[a9] := E;
    advance (11)
    #0A94
    #instruction: LD   A,(DE)
    let:8 a10 = M[(D,E)] in
    advance (7)
    #0A95
    #instruction: CALL 08FF
    let:16 a11 = (-1 + a9) in
    M[a11] := 0A;
    let:16 a12 = (-1 + a11) in
    M[a12] := 98;
    #return-to: 0A98
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a13 = (-1 + a12) in
    M[a13] := H;
    let:16 a14 = (-1 + a13) in
    M[a14] := L;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a15 = add17((00,a10),(00,a10)) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a16 = add17(a15[15:0],a15[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a17 = add17(a16[15:0],a16[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a18 = add17(1E00,a17[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a19 = (1 + a14) in
    let:8 a20 = M[a14] in
    let:16 a21 = (1 + a19) in
    let:8 a22 = M[a19] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a23 = (-1 + a21) in
    M[a23] := 08;
    let:16 a24 = (-1 + a23) in
    M[a24] := a5;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a25 = M[a18[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a22,a20)] := a25;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a26 = (1 + a18[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a27 = add17(0020,(a22,a20)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a28 = (1 + a24) in
    let:8 a29 = M[a24] in
    let:16 a30 = (1 + a28) in
    let:8 a31 = M[a28] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a32 = addWithCarry(!true,a31,~00) in
    let:8 a33 = (a31 & 0F) in
    let:8 a34 = (~00 & 0F) in
    let:16 a35 = addWithCarry(!true,a33,a34) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a32[7:0])) {
      advance (10)
      A := a25;
      B := a32[7:0];
      C := a29;
      D := a26[15:8];
      E := a26[7:0];
      H := a27[15:0][15:8];
      L := a27[15:0][7:0];
      SPH := a30[15:8];
      SPL := a30[7:0];
      FlagS := a32[7:0][7];
      FlagZ := is_zero(a32[7:0]);
      FlagA := a35[7:0][4];
      FlagP := parity(a32[7:0]);
      FlagCY := a27[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a36 = (1 + a30) in
      let:8 a37 = M[a30] in
      let:16 a38 = (1 + a36) in
      let:8 a39 = M[a36] in
      advance (10)
      A := a25;
      B := a32[7:0];
      C := a29;
      D := a26[15:8];
      E := a26[7:0];
      H := a27[15:0][15:8];
      L := a27[15:0][7:0];
      SPH := a38[15:8];
      SPL := a38[7:0];
      FlagS := a32[7:0][7];
      FlagZ := is_zero(a32[7:0]);
      FlagA := a35[7:0][4];
      FlagP := parity(a32[7:0]);
      FlagCY := a27[16];
      jump ((a39,a37));
    }

0BB7:

    #0BB7
    #instruction: IN   02
    advance (10)
    #0BB9
    #instruction: RLCA
    advance (4)
    #0BBA
    #instruction: JP   CY,0BC3
    if (updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))[7]) {
      advance (10)
      A := updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off)) << 01),0,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))[7]);
      FlagCY := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))[7];
      jump (0BC3);
    } else {
      advance (10)
      #0BBD
      #instruction: LD   BC,1FA0
      advance (10)
      #0BC0
      #instruction: CALL 183A
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 0B;
      let:16 a2 = (-1 + a1) in
      M[a2] := C3;
      #return-to: 0BC3
      advance (17)
      #183A
      #instruction: CALL 1856
      let:16 a3 = (-1 + a2) in
      M[a3] := 18;
      let:16 a4 = (-1 + a3) in
      M[a4] := 3D;
      #return-to: 183D
      advance (17)
      #1856
      #instruction: LD   A,(BC)
      advance (7)
      #1857
      #instruction: CP   FF
      let:16 a5 = addWithCarry(!false,0A,~FF) in
      let:8 a6 = (0A & 0F) in
      let:8 a7 = (~FF & 0F) in
      let:16 a8 = addWithCarry(!false,a6,a7) in
      advance (7)
      #1859
      #instruction: SCF
      advance (4)
      #185A
      #instruction: RET  Z
      if (is_zero(a5[7:0])) {
        let:16 a9 = (1 + a4) in
        let:8 a10 = M[a4] in
        let:16 a11 = (1 + a9) in
        let:8 a12 = M[a9] in
        advance (11)
        A := 0A;
        B := 1F;
        C := A0;
        SPH := a11[15:8];
        SPL := a11[7:0];
        FlagS := a5[7:0][7];
        FlagZ := is_zero(a5[7:0]);
        FlagA := a8[7:0][4];
        FlagP := parity(a5[7:0]);
        FlagCY := true;
        jump ((a12,a10));
      } else {
        advance (5)
        #185B
        #instruction: LD   L,A
        advance (5)
        #185C
        #instruction: INC  BC
        advance (5)
        #185D
        #instruction: LD   A,(BC)
        advance (7)
        #185E
        #instruction: LD   H,A
        advance (5)
        #185F
        #instruction: INC  BC
        advance (5)
        #1860
        #instruction: LD   A,(BC)
        advance (7)
        #1861
        #instruction: LD   E,A
        advance (5)
        #1862
        #instruction: INC  BC
        advance (5)
        #1863
        #instruction: LD   A,(BC)
        advance (7)
        #1864
        #instruction: LD   D,A
        advance (5)
        #1865
        #instruction: INC  BC
        advance (5)
        #1866
        #instruction: AND  A
        let:8 a13 = (1F & 1F) in
        let:8 a14 = (1F | 1F) in
        advance (4)
        #1867
        #instruction: RET
        let:16 a15 = (1 + a4) in
        let:8 a16 = M[a4] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (10)
        A := a13;
        B := 1F;
        C := A4;
        D := 1F;
        E := 62;
        H := 2A;
        L := 0A;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a13[7];
        FlagZ := is_zero(a13);
        FlagA := a14[3];
        FlagP := parity(a13);
        FlagCY := false;
        jump ((a18,a16));
      }
    }

0BC3:

    #0BC3
    #instruction: CALL 0AB6
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C6;
    #return-to: 0BC6
    advance (17)
    #0AB6
    #instruction: LD   A,80
    advance (7)
    #0AB8
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 80;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

0BC6:

    #0BC6
    #instruction: LD   A,(20EC)
    let:8 a1 = M[20EC] in
    advance (13)
    #0BC9
    #instruction: CP   00
    let:16 a2 = addWithCarry(!false,a1,~00) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~00 & 0F) in
    let:16 a5 = addWithCarry(!false,a3,a4) in
    advance (7)
    #0BCB
    #instruction: JP   NZ,0BDA
    if (!is_zero(a2[7:0])) {
      advance (10)
      A := a1;
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      FlagCY := !a2[15:8][0];
      jump (0BDA);
    } else {
      advance (10)
      #0BCE
      #instruction: LD   DE,1FD5
      advance (10)
      #0BD1
      #instruction: CALL 0AE2
      let:16 a6 = (-1 + (SPH,SPL)) in
      M[a6] := 0B;
      let:16 a7 = (-1 + a6) in
      M[a7] := D4;
      #return-to: 0BD4
      advance (17)
      #0AE2
      #instruction: LD   HL,20C2
      advance (10)
      #0AE5
      #instruction: LD   B,0C
      advance (7)
      #0AE7
      #instruction: JP   1A32
      advance (10)
      #1A32
      #instruction: LD   A,(DE)
      advance (7)
      #1A33
      #instruction: LD   (HL),A
      M[20C2] := 00;
      advance (7)
      #1A34
      #instruction: INC  HL
      advance (5)
      #1A35
      #instruction: INC  DE
      advance (5)
      #1A36
      #instruction: DEC  B
      let:16 a8 = addWithCarry(!true,0C,~00) in
      let:8 a9 = (0C & 0F) in
      let:8 a10 = (~00 & 0F) in
      let:16 a11 = addWithCarry(!true,a9,a10) in
      advance (5)
      #1A37
      #instruction: JP   NZ,1A32
      if (!is_zero(a8[7:0])) {
        advance (10)
        A := 00;
        B := a8[7:0];
        D := 1F;
        E := D6;
        H := 20;
        L := C3;
        SPH := a7[15:8];
        SPL := a7[7:0];
        FlagS := a8[7:0][7];
        FlagZ := is_zero(a8[7:0]);
        FlagA := a11[7:0][4];
        FlagP := parity(a8[7:0]);
        FlagCY := !a2[15:8][0];
        jump (1A32);
      } else {
        advance (10)
        #1A3A
        #instruction: RET
        let:16 a12 = (1 + a7) in
        let:8 a13 = M[a7] in
        let:16 a14 = (1 + a12) in
        let:8 a15 = M[a12] in
        advance (10)
        A := 00;
        B := a8[7:0];
        D := 1F;
        E := D6;
        H := 20;
        L := C3;
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagS := a8[7:0][7];
        FlagZ := is_zero(a8[7:0]);
        FlagA := a11[7:0][4];
        FlagP := parity(a8[7:0]);
        FlagCY := !a2[15:8][0];
        jump ((a15,a13));
      }
    }

0BD4:

    #0BD4
    #instruction: CALL 0A80
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := D7;
    #return-to: 0BD7
    advance (17)
    #0A80
    #instruction: LD   A,02
    advance (7)
    #0A82
    #instruction: LD   (20C1),A
    M[20C1] := 02;
    advance (13)
    #0A85
    #instruction: OUT  06
    advance (10)
    #0A87
    #instruction: LD   A,(20CB)
    let:8 a3 = M[20CB] in
    advance (13)
    #0A8A
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0A8B
    #instruction: JP   Z,0A85
    if (is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0A85);
    } else {
      advance (10)
      #0A8E
      #instruction: XOR  A
      let:8 a6 = (a4 ^ a4) in
      advance (4)
      #0A8F
      #instruction: LD   (20C1),A
      M[20C1] := a6;
      advance (13)
      #0A92
      #instruction: RET
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := a6;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a6[7];
      FlagZ := is_zero(a6);
      FlagA := false;
      FlagP := parity(a6);
      FlagCY := false;
      jump ((a10,a8));
    }

0BD7:

    #0BD7
    #instruction: CALL 189E
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := DA;
    #return-to: 0BDA
    advance (17)
    #189E
    #instruction: LD   HL,2050
    advance (10)
    #18A1
    #instruction: LD   DE,1BC0
    advance (10)
    #18A4
    #instruction: LD   B,10
    advance (7)
    #18A6
    #instruction: CALL 1A32
    let:16 a3 = (-1 + a2) in
    M[a3] := 18;
    let:16 a4 = (-1 + a3) in
    M[a4] := A9;
    #return-to: 18A9
    advance (17)
    #1A32
    #instruction: LD   A,(DE)
    advance (7)
    #1A33
    #instruction: LD   (HL),A
    M[2050] := 00;
    advance (7)
    #1A34
    #instruction: INC  HL
    advance (5)
    #1A35
    #instruction: INC  DE
    advance (5)
    #1A36
    #instruction: DEC  B
    let:16 a5 = addWithCarry(!true,10,~00) in
    let:8 a6 = (10 & 0F) in
    let:8 a7 = (~00 & 0F) in
    let:16 a8 = addWithCarry(!true,a6,a7) in
    advance (5)
    #1A37
    #instruction: JP   NZ,1A32
    if (!is_zero(a5[7:0])) {
      advance (10)
      A := 00;
      B := a5[7:0];
      D := 1B;
      E := C1;
      H := 20;
      L := 51;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      jump (1A32);
    } else {
      advance (10)
      #1A3A
      #instruction: RET
      let:16 a9 = (1 + a4) in
      let:8 a10 = M[a4] in
      let:16 a11 = (1 + a9) in
      let:8 a12 = M[a9] in
      advance (10)
      A := 00;
      B := a5[7:0];
      D := 1B;
      E := C1;
      H := 20;
      L := 51;
      SPH := a11[15:8];
      SPL := a11[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      jump ((a12,a10));
    }

0BDA:

    #0BDA
    #instruction: LD   HL,20EC
    advance (10)
    #0BDD
    #instruction: LD   A,(HL)
    let:8 a1 = M[20EC] in
    advance (7)
    #0BDE
    #instruction: INC  A
    let:16 a2 = addWithCarry(true,a1,00) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (00 & 0F) in
    let:16 a5 = addWithCarry(true,a3,a4) in
    advance (5)
    #0BDF
    #instruction: AND  01
    let:8 a6 = (01 & a2[7:0]) in
    let:8 a7 = (01 | a2[7:0]) in
    advance (7)
    #0BE1
    #instruction: LD   (HL),A
    M[20EC] := a6;
    advance (7)
    #0BE2
    #instruction: CALL 09D6
    let:16 a8 = (-1 + (SPH,SPL)) in
    M[a8] := 0B;
    let:16 a9 = (-1 + a8) in
    M[a9] := E5;
    #return-to: 0BE5
    advance (17)
    #09D6
    #instruction: LD   HL,2402
    advance (10)
    #09D9
    #instruction: LD   (HL),00
    M[2402] := 00;
    advance (10)
    #09DB
    #instruction: INC  HL
    advance (5)
    #09DC
    #instruction: LD   A,L
    advance (5)
    #09DD
    #instruction: AND  1F
    let:8 a10 = (1F & 03) in
    let:8 a11 = (1F | 03) in
    advance (7)
    #09DF
    #instruction: CP   1C
    let:16 a12 = addWithCarry(!false,a10,~1C) in
    let:8 a13 = (a10 & 0F) in
    let:8 a14 = (~1C & 0F) in
    let:16 a15 = addWithCarry(!false,a13,a14) in
    advance (7)
    #09E1
    #instruction: JP   CY,09E8
    if (!a12[15:8][0]) {
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a16 = addWithCarry(!false,24,~40) in
      let:8 a17 = (24 & 0F) in
      let:8 a18 = (~40 & 0F) in
      let:16 a19 = addWithCarry(!false,a17,a18) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a16[15:8][0]) {
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a9[15:8];
        SPL := a9[7:0];
        FlagS := a16[7:0][7];
        FlagZ := is_zero(a16[7:0]);
        FlagA := a19[7:0][4];
        FlagP := parity(a16[7:0]);
        FlagCY := !a16[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a20 = (1 + a9) in
        let:8 a21 = M[a9] in
        let:16 a22 = (1 + a20) in
        let:8 a23 = M[a20] in
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a16[7:0][7];
        FlagZ := is_zero(a16[7:0]);
        FlagA := a19[7:0][4];
        FlagP := parity(a16[7:0]);
        FlagCY := !a16[15:8][0];
        jump ((a23,a21));
      }
    } else {
      advance (10)
      #09E4
      #instruction: LD   DE,0006
      advance (10)
      #09E7
      #instruction: ADD  HL,DE
      let:17 a24 = add17(0006,2403) in
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a25 = addWithCarry(!false,a24[15:0][15:8],~40) in
      let:8 a26 = (a24[15:0][15:8] & 0F) in
      let:8 a27 = (~40 & 0F) in
      let:16 a28 = addWithCarry(!false,a26,a27) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a25[15:8][0]) {
        advance (10)
        A := a24[15:0][15:8];
        D := 00;
        E := 06;
        H := a24[15:0][15:8];
        L := a24[15:0][7:0];
        SPH := a9[15:8];
        SPL := a9[7:0];
        FlagS := a25[7:0][7];
        FlagZ := is_zero(a25[7:0]);
        FlagA := a28[7:0][4];
        FlagP := parity(a25[7:0]);
        FlagCY := !a25[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a29 = (1 + a9) in
        let:8 a30 = M[a9] in
        let:16 a31 = (1 + a29) in
        let:8 a32 = M[a29] in
        advance (10)
        A := a24[15:0][15:8];
        D := 00;
        E := 06;
        H := a24[15:0][15:8];
        L := a24[15:0][7:0];
        SPH := a31[15:8];
        SPL := a31[7:0];
        FlagS := a25[7:0][7];
        FlagZ := is_zero(a25[7:0]);
        FlagA := a28[7:0][4];
        FlagP := parity(a25[7:0]);
        FlagCY := !a25[15:8][0];
        jump ((a32,a30));
      }
    }

0BE5:

    #0BE5
    #instruction: JP   18DF
    advance (10)
    jump (18DF);

0BEE:

    #0BEE
    #instruction: JP   0B0B
    advance (10)
    #0B0B
    #instruction: CALL 0ACF
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 0E;
    #return-to: 0B0E
    advance (17)
    #0ACF
    #instruction: LD   HL,2B14
    advance (10)
    #0AD2
    #instruction: LD   C,0F
    advance (7)
    #0AD4
    #instruction: JP   0A93
    advance (10)
    #0A93
    #instruction: PUSH DE
    let:16 a3 = (-1 + a2) in
    M[a3] := D;
    let:16 a4 = (-1 + a3) in
    M[a4] := E;
    advance (11)
    #0A94
    #instruction: LD   A,(DE)
    let:8 a5 = M[(D,E)] in
    advance (7)
    #0A95
    #instruction: CALL 08FF
    let:16 a6 = (-1 + a4) in
    M[a6] := 0A;
    let:16 a7 = (-1 + a6) in
    M[a7] := 98;
    #return-to: 0A98
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a8 = (-1 + a7) in
    M[a8] := 2B;
    let:16 a9 = (-1 + a8) in
    M[a9] := 14;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a10 = add17((00,a5),(00,a5)) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a11 = add17(a10[15:0],a10[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a12 = add17(a11[15:0],a11[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a13 = add17(1E00,a12[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a14 = (1 + a9) in
    let:8 a15 = M[a9] in
    let:16 a16 = (1 + a14) in
    let:8 a17 = M[a14] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a18 = (-1 + a16) in
    M[a18] := 08;
    let:16 a19 = (-1 + a18) in
    M[a19] := 0F;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a20 = M[a13[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a17,a15)] := a20;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a21 = (1 + a13[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a22 = add17(0020,(a17,a15)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a23 = (1 + a19) in
    let:8 a24 = M[a19] in
    let:16 a25 = (1 + a23) in
    let:8 a26 = M[a23] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a27 = addWithCarry(!true,a26,~00) in
    let:8 a28 = (a26 & 0F) in
    let:8 a29 = (~00 & 0F) in
    let:16 a30 = addWithCarry(!true,a28,a29) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a27[7:0])) {
      advance (10)
      A := a20;
      B := a27[7:0];
      C := a24;
      D := a21[15:8];
      E := a21[7:0];
      H := a22[15:0][15:8];
      L := a22[15:0][7:0];
      SPH := a25[15:8];
      SPL := a25[7:0];
      FlagS := a27[7:0][7];
      FlagZ := is_zero(a27[7:0]);
      FlagA := a30[7:0][4];
      FlagP := parity(a27[7:0]);
      FlagCY := a22[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a31 = (1 + a25) in
      let:8 a32 = M[a25] in
      let:16 a33 = (1 + a31) in
      let:8 a34 = M[a31] in
      advance (10)
      A := a20;
      B := a27[7:0];
      C := a24;
      D := a21[15:8];
      E := a21[7:0];
      H := a22[15:0][15:8];
      L := a22[15:0][7:0];
      SPH := a33[15:8];
      SPL := a33[7:0];
      FlagS := a27[7:0][7];
      FlagZ := is_zero(a27[7:0]);
      FlagA := a30[7:0][4];
      FlagP := parity(a27[7:0]);
      FlagCY := a22[16];
      jump ((a34,a32));
    }

0BF4:

    #0BF4
    #instruction: JP   199A
    advance (10)
    #199A
    #instruction: LD   A,(201E)
    let:8 a1 = M[201E] in
    advance (13)
    #199D
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #199E
    #instruction: JP   NZ,19AC
    if (!is_zero(a2)) {
      advance (10)
      #19AC
      #instruction: IN   01
      advance (10)
      #19AE
      #instruction: AND  76
      let:8 a4 = (76 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
      let:8 a5 = (76 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
      advance (7)
      #19B0
      #instruction: CP   34
      let:16 a6 = addWithCarry(!false,a4,~34) in
      let:8 a7 = (a4 & 0F) in
      let:8 a8 = (~34 & 0F) in
      let:16 a9 = addWithCarry(!false,a7,a8) in
      advance (7)
      #19B2
      #instruction: RET  NZ
      if (!is_zero(a6[7:0])) {
        let:16 a10 = (1 + (SPH,SPL)) in
        let:8 a11 = M[(SPH,SPL)] in
        let:16 a12 = (1 + a10) in
        let:8 a13 = M[a10] in
        advance (11)
        A := a4;
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a6[7:0][7];
        FlagZ := is_zero(a6[7:0]);
        FlagA := a9[7:0][4];
        FlagP := parity(a6[7:0]);
        FlagCY := !a6[15:8][0];
        jump ((a13,a11));
      } else {
        advance (5)
        #19B3
        #instruction: LD   HL,2E1B
        advance (10)
        #19B6
        #instruction: LD   DE,0BF7
        advance (10)
        #19B9
        #instruction: LD   C,09
        advance (7)
        #19BB
        #instruction: JP   08F3
        advance (10)
        #08F3
        #instruction: LD   A,(DE)
        advance (7)
        #08F4
        #instruction: PUSH DE
        let:16 a14 = (-1 + (SPH,SPL)) in
        M[a14] := 0B;
        let:16 a15 = (-1 + a14) in
        M[a15] := F7;
        advance (11)
        #08F5
        #instruction: CALL 08FF
        let:16 a16 = (-1 + a15) in
        M[a16] := 08;
        let:16 a17 = (-1 + a16) in
        M[a17] := F8;
        #return-to: 08F8
        advance (17)
        #08FF
        #instruction: LD   DE,1E00
        advance (10)
        #0902
        #instruction: PUSH HL
        let:16 a18 = (-1 + a17) in
        M[a18] := 2E;
        let:16 a19 = (-1 + a18) in
        M[a19] := 1B;
        advance (11)
        #0903
        #instruction: LD   H,00
        advance (7)
        #0905
        #instruction: LD   L,A
        advance (5)
        #0906
        #instruction: ADD  HL,HL
        let:17 a20 = add17(0013,0013) in
        advance (10)
        #0907
        #instruction: ADD  HL,HL
        let:17 a21 = add17(a20[15:0],a20[15:0]) in
        advance (10)
        #0908
        #instruction: ADD  HL,HL
        let:17 a22 = add17(a21[15:0],a21[15:0]) in
        advance (10)
        #0909
        #instruction: ADD  HL,DE
        let:17 a23 = add17(1E00,a22[15:0]) in
        advance (10)
        #090A
        #instruction: EX   DE,HL
        advance (4)
        #090B
        #instruction: POP  HL
        let:16 a24 = (1 + a19) in
        let:8 a25 = M[a19] in
        let:16 a26 = (1 + a24) in
        let:8 a27 = M[a24] in
        advance (10)
        #090C
        #instruction: LD   B,08
        advance (7)
        #090E
        #instruction: OUT  06
        advance (10)
        #0910
        #instruction: JP   1439
        advance (10)
        #1439
        #instruction: PUSH BC
        let:16 a28 = (-1 + a26) in
        M[a28] := 08;
        let:16 a29 = (-1 + a28) in
        M[a29] := 09;
        advance (11)
        #143A
        #instruction: LD   A,(DE)
        let:8 a30 = M[a23[15:0]] in
        advance (7)
        #143B
        #instruction: LD   (HL),A
        M[(a27,a25)] := a30;
        advance (7)
        #143C
        #instruction: INC  DE
        let:16 a31 = (1 + a23[15:0]) in
        advance (5)
        #143D
        #instruction: LD   BC,0020
        advance (10)
        #1440
        #instruction: ADD  HL,BC
        let:17 a32 = add17(0020,(a27,a25)) in
        advance (10)
        #1441
        #instruction: POP  BC
        let:16 a33 = (1 + a29) in
        let:8 a34 = M[a29] in
        let:16 a35 = (1 + a33) in
        let:8 a36 = M[a33] in
        advance (10)
        #1442
        #instruction: DEC  B
        let:16 a37 = addWithCarry(!true,a36,~00) in
        let:8 a38 = (a36 & 0F) in
        let:8 a39 = (~00 & 0F) in
        let:16 a40 = addWithCarry(!true,a38,a39) in
        advance (5)
        #1443
        #instruction: JP   NZ,1439
        if (!is_zero(a37[7:0])) {
          advance (10)
          A := a30;
          B := a37[7:0];
          C := a34;
          D := a31[15:8];
          E := a31[7:0];
          H := a32[15:0][15:8];
          L := a32[15:0][7:0];
          SPH := a35[15:8];
          SPL := a35[7:0];
          FlagS := a37[7:0][7];
          FlagZ := is_zero(a37[7:0]);
          FlagA := a40[7:0][4];
          FlagP := parity(a37[7:0]);
          FlagCY := a32[16];
          jump (1439);
        } else {
          advance (10)
          #1446
          #instruction: RET
          let:16 a41 = (1 + a35) in
          let:8 a42 = M[a35] in
          let:16 a43 = (1 + a41) in
          let:8 a44 = M[a41] in
          advance (10)
          A := a30;
          B := a37[7:0];
          C := a34;
          D := a31[15:8];
          E := a31[7:0];
          H := a32[15:0][15:8];
          L := a32[15:0][7:0];
          SPH := a43[15:8];
          SPL := a43[7:0];
          FlagS := a37[7:0][7];
          FlagZ := is_zero(a37[7:0]);
          FlagA := a40[7:0][4];
          FlagP := parity(a37[7:0]);
          FlagCY := a32[16];
          jump ((a44,a42));
        }
      }
    } else {
      advance (10)
      #19A1
      #instruction: IN   01
      advance (10)
      #19A3
      #instruction: AND  76
      let:8 a45 = (76 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
      let:8 a46 = (76 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
      advance (7)
      #19A5
      #instruction: SUB  72
      let:16 a47 = addWithCarry(!false,a45,~72) in
      let:8 a48 = (a45 & 0F) in
      let:8 a49 = (~72 & 0F) in
      let:16 a50 = addWithCarry(!false,a48,a49) in
      advance (7)
      #19A7
      #instruction: RET  NZ
      if (!is_zero(a47[7:0])) {
        let:16 a51 = (1 + (SPH,SPL)) in
        let:8 a52 = M[(SPH,SPL)] in
        let:16 a53 = (1 + a51) in
        let:8 a54 = M[a51] in
        advance (11)
        A := a47[7:0];
        SPH := a53[15:8];
        SPL := a53[7:0];
        FlagS := a47[7:0][7];
        FlagZ := is_zero(a47[7:0]);
        FlagA := a50[7:0][4];
        FlagP := parity(a47[7:0]);
        FlagCY := !a47[15:8][0];
        jump ((a54,a52));
      } else {
        advance (5)
        #19A8
        #instruction: INC  A
        let:16 a55 = addWithCarry(true,a47[7:0],00) in
        let:8 a56 = (a47[7:0] & 0F) in
        let:8 a57 = (00 & 0F) in
        let:16 a58 = addWithCarry(true,a56,a57) in
        advance (5)
        #19A9
        #instruction: LD   (201E),A
        M[201E] := a55[7:0];
        advance (13)
        #19AC
        #instruction: IN   01
        advance (10)
        #19AE
        #instruction: AND  76
        let:8 a59 = (76 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
        let:8 a60 = (76 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
        advance (7)
        #19B0
        #instruction: CP   34
        let:16 a61 = addWithCarry(!false,a59,~34) in
        let:8 a62 = (a59 & 0F) in
        let:8 a63 = (~34 & 0F) in
        let:16 a64 = addWithCarry(!false,a62,a63) in
        advance (7)
        #19B2
        #instruction: RET  NZ
        if (!is_zero(a61[7:0])) {
          let:16 a65 = (1 + (SPH,SPL)) in
          let:8 a66 = M[(SPH,SPL)] in
          let:16 a67 = (1 + a65) in
          let:8 a68 = M[a65] in
          advance (11)
          A := a59;
          SPH := a67[15:8];
          SPL := a67[7:0];
          FlagS := a61[7:0][7];
          FlagZ := is_zero(a61[7:0]);
          FlagA := a64[7:0][4];
          FlagP := parity(a61[7:0]);
          FlagCY := !a61[15:8][0];
          jump ((a68,a66));
        } else {
          advance (5)
          #19B3
          #instruction: LD   HL,2E1B
          advance (10)
          #19B6
          #instruction: LD   DE,0BF7
          advance (10)
          #19B9
          #instruction: LD   C,09
          advance (7)
          #19BB
          #instruction: JP   08F3
          advance (10)
          #08F3
          #instruction: LD   A,(DE)
          advance (7)
          #08F4
          #instruction: PUSH DE
          let:16 a69 = (-1 + (SPH,SPL)) in
          M[a69] := 0B;
          let:16 a70 = (-1 + a69) in
          M[a70] := F7;
          advance (11)
          #08F5
          #instruction: CALL 08FF
          let:16 a71 = (-1 + a70) in
          M[a71] := 08;
          let:16 a72 = (-1 + a71) in
          M[a72] := F8;
          #return-to: 08F8
          advance (17)
          #08FF
          #instruction: LD   DE,1E00
          advance (10)
          #0902
          #instruction: PUSH HL
          let:16 a73 = (-1 + a72) in
          M[a73] := 2E;
          let:16 a74 = (-1 + a73) in
          M[a74] := 1B;
          advance (11)
          #0903
          #instruction: LD   H,00
          advance (7)
          #0905
          #instruction: LD   L,A
          advance (5)
          #0906
          #instruction: ADD  HL,HL
          let:17 a75 = add17(0013,0013) in
          advance (10)
          #0907
          #instruction: ADD  HL,HL
          let:17 a76 = add17(a75[15:0],a75[15:0]) in
          advance (10)
          #0908
          #instruction: ADD  HL,HL
          let:17 a77 = add17(a76[15:0],a76[15:0]) in
          advance (10)
          #0909
          #instruction: ADD  HL,DE
          let:17 a78 = add17(1E00,a77[15:0]) in
          advance (10)
          #090A
          #instruction: EX   DE,HL
          advance (4)
          #090B
          #instruction: POP  HL
          let:16 a79 = (1 + a74) in
          let:8 a80 = M[a74] in
          let:16 a81 = (1 + a79) in
          let:8 a82 = M[a79] in
          advance (10)
          #090C
          #instruction: LD   B,08
          advance (7)
          #090E
          #instruction: OUT  06
          advance (10)
          #0910
          #instruction: JP   1439
          advance (10)
          #1439
          #instruction: PUSH BC
          let:16 a83 = (-1 + a81) in
          M[a83] := 08;
          let:16 a84 = (-1 + a83) in
          M[a84] := 09;
          advance (11)
          #143A
          #instruction: LD   A,(DE)
          let:8 a85 = M[a78[15:0]] in
          advance (7)
          #143B
          #instruction: LD   (HL),A
          M[(a82,a80)] := a85;
          advance (7)
          #143C
          #instruction: INC  DE
          let:16 a86 = (1 + a78[15:0]) in
          advance (5)
          #143D
          #instruction: LD   BC,0020
          advance (10)
          #1440
          #instruction: ADD  HL,BC
          let:17 a87 = add17(0020,(a82,a80)) in
          advance (10)
          #1441
          #instruction: POP  BC
          let:16 a88 = (1 + a84) in
          let:8 a89 = M[a84] in
          let:16 a90 = (1 + a88) in
          let:8 a91 = M[a88] in
          advance (10)
          #1442
          #instruction: DEC  B
          let:16 a92 = addWithCarry(!true,a91,~00) in
          let:8 a93 = (a91 & 0F) in
          let:8 a94 = (~00 & 0F) in
          let:16 a95 = addWithCarry(!true,a93,a94) in
          advance (5)
          #1443
          #instruction: JP   NZ,1439
          if (!is_zero(a92[7:0])) {
            advance (10)
            A := a85;
            B := a92[7:0];
            C := a89;
            D := a86[15:8];
            E := a86[7:0];
            H := a87[15:0][15:8];
            L := a87[15:0][7:0];
            SPH := a90[15:8];
            SPL := a90[7:0];
            FlagS := a92[7:0][7];
            FlagZ := is_zero(a92[7:0]);
            FlagA := a95[7:0][4];
            FlagP := parity(a92[7:0]);
            FlagCY := a87[16];
            jump (1439);
          } else {
            advance (10)
            #1446
            #instruction: RET
            let:16 a96 = (1 + a90) in
            let:8 a97 = M[a90] in
            let:16 a98 = (1 + a96) in
            let:8 a99 = M[a96] in
            advance (10)
            A := a85;
            B := a92[7:0];
            C := a89;
            D := a86[15:8];
            E := a86[7:0];
            H := a87[15:0][15:8];
            L := a87[15:0][7:0];
            SPH := a98[15:8];
            SPL := a98[7:0];
            FlagS := a92[7:0][7];
            FlagZ := is_zero(a92[7:0]);
            FlagA := a95[7:0][4];
            FlagP := parity(a92[7:0]);
            FlagCY := a87[16];
            jump ((a99,a97));
          }
        }
      }
    }

1404:

    #1404
    #instruction: NOP
    advance (4)
    #1405
    #instruction: PUSH BC
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    advance (11)
    #1406
    #instruction: PUSH HL
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    advance (11)
    #1407
    #instruction: LD   A,(DE)
    let:8 a5 = M[(D,E)] in
    advance (7)
    #1408
    #instruction: OUT  04
    advance (10)
    #140A
    #instruction: IN   03
    let:8 a6 = (Shifter_OFF & 07) in
    let:8 a7 = (~Shifter_OFF & 07) in
    let:8 a8 = ((a5 << a6) | ((Shifter_HI >> a7) >> 01)) in
    advance (10)
    #140C
    #instruction: OR   (HL)
    let:8 a9 = M[(H,L)] in
    let:8 a10 = (a9 | a8) in
    advance (7)
    #140D
    #instruction: LD   (HL),A
    M[(H,L)] := a10;
    advance (7)
    #140E
    #instruction: INC  HL
    let:16 a11 = (1 + (H,L)) in
    advance (5)
    #140F
    #instruction: INC  DE
    let:16 a12 = (1 + (D,E)) in
    advance (5)
    #1410
    #instruction: XOR  A
    let:8 a13 = (a10 ^ a10) in
    advance (4)
    #1411
    #instruction: OUT  04
    advance (10)
    #1413
    #instruction: IN   03
    let:8 a14 = (Shifter_OFF & 07) in
    let:8 a15 = (~Shifter_OFF & 07) in
    let:8 a16 = ((a13 << a14) | ((a5 >> a15) >> 01)) in
    advance (10)
    #1415
    #instruction: OR   (HL)
    let:8 a17 = M[a11] in
    let:8 a18 = (a17 | a16) in
    advance (7)
    #1416
    #instruction: LD   (HL),A
    M[a11] := a18;
    advance (7)
    #1417
    #instruction: POP  HL
    let:16 a19 = (1 + a4) in
    let:8 a20 = M[a4] in
    let:16 a21 = (1 + a19) in
    let:8 a22 = M[a19] in
    advance (10)
    #1418
    #instruction: LD   BC,0020
    advance (10)
    #141B
    #instruction: ADD  HL,BC
    let:17 a23 = add17(0020,(a22,a20)) in
    advance (10)
    #141C
    #instruction: POP  BC
    let:16 a24 = (1 + a21) in
    let:8 a25 = M[a21] in
    let:16 a26 = (1 + a24) in
    let:8 a27 = M[a24] in
    advance (10)
    #141D
    #instruction: DEC  B
    let:16 a28 = addWithCarry(!true,a27,~00) in
    let:8 a29 = (a27 & 0F) in
    let:8 a30 = (~00 & 0F) in
    let:16 a31 = addWithCarry(!true,a29,a30) in
    advance (5)
    #141E
    #instruction: JP   NZ,1405
    if (!is_zero(a28[7:0])) {
      advance (10)
      A := a18;
      B := a28[7:0];
      C := a25;
      D := a12[15:8];
      E := a12[7:0];
      H := a23[15:0][15:8];
      L := a23[15:0][7:0];
      SPH := a26[15:8];
      SPL := a26[7:0];
      FlagS := a28[7:0][7];
      FlagZ := is_zero(a28[7:0]);
      FlagA := a31[7:0][4];
      FlagP := parity(a28[7:0]);
      FlagCY := a23[16];
      Shifter_HI := a13;
      Shifter_LO := a5;
      jump (1405);
    } else {
      advance (10)
      #1421
      #instruction: RET
      let:16 a32 = (1 + a26) in
      let:8 a33 = M[a26] in
      let:16 a34 = (1 + a32) in
      let:8 a35 = M[a32] in
      advance (10)
      A := a18;
      B := a28[7:0];
      C := a25;
      D := a12[15:8];
      E := a12[7:0];
      H := a23[15:0][15:8];
      L := a23[15:0][7:0];
      SPH := a34[15:8];
      SPL := a34[7:0];
      FlagS := a28[7:0][7];
      FlagZ := is_zero(a28[7:0]);
      FlagA := a31[7:0][4];
      FlagP := parity(a28[7:0]);
      FlagCY := a23[16];
      Shifter_HI := a13;
      Shifter_LO := a5;
      jump ((a35,a33));
    }

1427:

    #1427
    #instruction: PUSH BC
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    advance (11)
    #1428
    #instruction: PUSH HL
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    advance (11)
    #1429
    #instruction: XOR  A
    let:8 a5 = (A ^ A) in
    advance (4)
    #142A
    #instruction: LD   (HL),A
    M[(H,L)] := a5;
    advance (7)
    #142B
    #instruction: INC  HL
    let:16 a6 = (1 + (H,L)) in
    advance (5)
    #142C
    #instruction: LD   (HL),A
    M[a6] := a5;
    advance (7)
    #142D
    #instruction: INC  HL
    let:16 a7 = (1 + a6) in
    advance (5)
    #142E
    #instruction: POP  HL
    let:16 a8 = (1 + a4) in
    let:8 a9 = M[a4] in
    let:16 a10 = (1 + a8) in
    let:8 a11 = M[a8] in
    advance (10)
    #142F
    #instruction: LD   BC,0020
    advance (10)
    #1432
    #instruction: ADD  HL,BC
    let:17 a12 = add17(0020,(a11,a9)) in
    advance (10)
    #1433
    #instruction: POP  BC
    let:16 a13 = (1 + a10) in
    let:8 a14 = M[a10] in
    let:16 a15 = (1 + a13) in
    let:8 a16 = M[a13] in
    advance (10)
    #1434
    #instruction: DEC  B
    let:16 a17 = addWithCarry(!true,a16,~00) in
    let:8 a18 = (a16 & 0F) in
    let:8 a19 = (~00 & 0F) in
    let:16 a20 = addWithCarry(!true,a18,a19) in
    advance (5)
    #1435
    #instruction: JP   NZ,1427
    if (!is_zero(a17[7:0])) {
      advance (10)
      A := a5;
      B := a17[7:0];
      C := a14;
      H := a12[15:0][15:8];
      L := a12[15:0][7:0];
      SPH := a15[15:8];
      SPL := a15[7:0];
      FlagS := a17[7:0][7];
      FlagZ := is_zero(a17[7:0]);
      FlagA := a20[7:0][4];
      FlagP := parity(a17[7:0]);
      FlagCY := a12[16];
      jump (1427);
    } else {
      advance (10)
      #1438
      #instruction: RET
      let:16 a21 = (1 + a15) in
      let:8 a22 = M[a15] in
      let:16 a23 = (1 + a21) in
      let:8 a24 = M[a21] in
      advance (10)
      A := a5;
      B := a17[7:0];
      C := a14;
      H := a12[15:0][15:8];
      L := a12[15:0][7:0];
      SPH := a23[15:8];
      SPL := a23[7:0];
      FlagS := a17[7:0][7];
      FlagZ := is_zero(a17[7:0]);
      FlagA := a20[7:0][4];
      FlagP := parity(a17[7:0]);
      FlagCY := a12[16];
      jump ((a24,a22));
    }

1455:

    #1455
    #instruction: PUSH BC
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    advance (11)
    #1456
    #instruction: PUSH HL
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    advance (11)
    #1457
    #instruction: LD   A,(DE)
    let:8 a5 = M[(D,E)] in
    advance (7)
    #1458
    #instruction: OUT  04
    advance (10)
    #145A
    #instruction: IN   03
    let:8 a6 = (Shifter_OFF & 07) in
    let:8 a7 = (~Shifter_OFF & 07) in
    let:8 a8 = ((a5 << a6) | ((Shifter_HI >> a7) >> 01)) in
    advance (10)
    #145C
    #instruction: CPL
    advance (4)
    #145D
    #instruction: AND  (HL)
    let:8 a9 = M[(H,L)] in
    let:8 a10 = (a9 & ~a8) in
    let:8 a11 = (a9 | ~a8) in
    advance (7)
    #145E
    #instruction: LD   (HL),A
    M[(H,L)] := a10;
    advance (7)
    #145F
    #instruction: INC  HL
    let:16 a12 = (1 + (H,L)) in
    advance (5)
    #1460
    #instruction: INC  DE
    let:16 a13 = (1 + (D,E)) in
    advance (5)
    #1461
    #instruction: XOR  A
    let:8 a14 = (a10 ^ a10) in
    advance (4)
    #1462
    #instruction: OUT  04
    advance (10)
    #1464
    #instruction: IN   03
    let:8 a15 = (Shifter_OFF & 07) in
    let:8 a16 = (~Shifter_OFF & 07) in
    let:8 a17 = ((a14 << a15) | ((a5 >> a16) >> 01)) in
    advance (10)
    #1466
    #instruction: CPL
    advance (4)
    #1467
    #instruction: AND  (HL)
    let:8 a18 = M[a12] in
    let:8 a19 = (a18 & ~a17) in
    let:8 a20 = (a18 | ~a17) in
    advance (7)
    #1468
    #instruction: LD   (HL),A
    M[a12] := a19;
    advance (7)
    #1469
    #instruction: POP  HL
    let:16 a21 = (1 + a4) in
    let:8 a22 = M[a4] in
    let:16 a23 = (1 + a21) in
    let:8 a24 = M[a21] in
    advance (10)
    #146A
    #instruction: LD   BC,0020
    advance (10)
    #146D
    #instruction: ADD  HL,BC
    let:17 a25 = add17(0020,(a24,a22)) in
    advance (10)
    #146E
    #instruction: POP  BC
    let:16 a26 = (1 + a23) in
    let:8 a27 = M[a23] in
    let:16 a28 = (1 + a26) in
    let:8 a29 = M[a26] in
    advance (10)
    #146F
    #instruction: DEC  B
    let:16 a30 = addWithCarry(!true,a29,~00) in
    let:8 a31 = (a29 & 0F) in
    let:8 a32 = (~00 & 0F) in
    let:16 a33 = addWithCarry(!true,a31,a32) in
    advance (5)
    #1470
    #instruction: JP   NZ,1455
    if (!is_zero(a30[7:0])) {
      advance (10)
      A := a19;
      B := a30[7:0];
      C := a27;
      D := a13[15:8];
      E := a13[7:0];
      H := a25[15:0][15:8];
      L := a25[15:0][7:0];
      SPH := a28[15:8];
      SPL := a28[7:0];
      FlagS := a30[7:0][7];
      FlagZ := is_zero(a30[7:0]);
      FlagA := a33[7:0][4];
      FlagP := parity(a30[7:0]);
      FlagCY := a25[16];
      Shifter_HI := a14;
      Shifter_LO := a5;
      jump (1455);
    } else {
      advance (10)
      #1473
      #instruction: RET
      let:16 a34 = (1 + a28) in
      let:8 a35 = M[a28] in
      let:16 a36 = (1 + a34) in
      let:8 a37 = M[a34] in
      advance (10)
      A := a19;
      B := a30[7:0];
      C := a27;
      D := a13[15:8];
      E := a13[7:0];
      H := a25[15:0][15:8];
      L := a25[15:0][7:0];
      SPH := a36[15:8];
      SPL := a36[7:0];
      FlagS := a30[7:0][7];
      FlagZ := is_zero(a30[7:0]);
      FlagA := a33[7:0][4];
      FlagP := parity(a30[7:0]);
      FlagCY := a25[16];
      Shifter_HI := a14;
      Shifter_LO := a5;
      jump ((a37,a35));
    }

1494:

    #1494
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #1495
    #instruction: LD   (2061),A
    M[2061] := a1;
    advance (13)
    #1498
    #instruction: PUSH BC
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := B;
    let:16 a3 = (-1 + a2) in
    M[a3] := C;
    advance (11)
    #1499
    #instruction: PUSH HL
    let:16 a4 = (-1 + a3) in
    M[a4] := H;
    let:16 a5 = (-1 + a4) in
    M[a5] := L;
    advance (11)
    #149A
    #instruction: LD   A,(DE)
    let:8 a6 = M[(D,E)] in
    advance (7)
    #149B
    #instruction: OUT  04
    advance (10)
    #149D
    #instruction: IN   03
    let:8 a7 = (Shifter_OFF & 07) in
    let:8 a8 = (~Shifter_OFF & 07) in
    let:8 a9 = ((a6 << a7) | ((Shifter_HI >> a8) >> 01)) in
    advance (10)
    #149F
    #instruction: PUSH PSW
    let:16 a10 = (-1 + a5) in
    M[a10] := a9;
    let:16 a11 = (-1 + a10) in
    M[a11] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a1[7]),6,is_zero(a1)),4,false),2,parity(a1)),0,false);
    advance (11)
    #14A0
    #instruction: AND  (HL)
    let:8 a12 = M[(H,L)] in
    let:8 a13 = (a12 & a9) in
    let:8 a14 = (a12 | a9) in
    advance (7)
    #14A1
    #instruction: JP   Z,14A9
    if (is_zero(a13)) {
      advance (10)
      #14A9
      #instruction: POP  PSW
      let:16 a15 = (1 + a11) in
      let:8 a16 = M[a11] in
      let:16 a17 = (1 + a15) in
      let:8 a18 = M[a15] in
      advance (10)
      #14AA
      #instruction: OR   (HL)
      let:8 a19 = M[(H,L)] in
      let:8 a20 = (a19 | a18) in
      advance (7)
      #14AB
      #instruction: LD   (HL),A
      M[(H,L)] := a20;
      advance (7)
      #14AC
      #instruction: INC  HL
      let:16 a21 = (1 + (H,L)) in
      advance (5)
      #14AD
      #instruction: INC  DE
      let:16 a22 = (1 + (D,E)) in
      advance (5)
      #14AE
      #instruction: XOR  A
      let:8 a23 = (a20 ^ a20) in
      advance (4)
      #14AF
      #instruction: OUT  04
      advance (10)
      #14B1
      #instruction: IN   03
      let:8 a24 = (Shifter_OFF & 07) in
      let:8 a25 = (~Shifter_OFF & 07) in
      let:8 a26 = ((a23 << a24) | ((a6 >> a25) >> 01)) in
      advance (10)
      #14B3
      #instruction: PUSH PSW
      let:16 a27 = (-1 + a17) in
      M[a27] := a26;
      let:16 a28 = (-1 + a27) in
      M[a28] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a23[7]),6,is_zero(a23)),4,false),2,parity(a23)),0,false);
      advance (11)
      #14B4
      #instruction: AND  (HL)
      let:8 a29 = M[a21] in
      let:8 a30 = (a29 & a26) in
      let:8 a31 = (a29 | a26) in
      advance (7)
      #14B5
      #instruction: JP   Z,14BD
      if (is_zero(a30)) {
        advance (10)
        #14BD
        #instruction: POP  PSW
        let:16 a32 = (1 + a28) in
        let:8 a33 = M[a28] in
        let:16 a34 = (1 + a32) in
        let:8 a35 = M[a32] in
        advance (10)
        #14BE
        #instruction: OR   (HL)
        let:8 a36 = M[a21] in
        let:8 a37 = (a36 | a35) in
        advance (7)
        #14BF
        #instruction: LD   (HL),A
        M[a21] := a37;
        advance (7)
        #14C0
        #instruction: POP  HL
        let:16 a38 = (1 + a34) in
        let:8 a39 = M[a34] in
        let:16 a40 = (1 + a38) in
        let:8 a41 = M[a38] in
        advance (10)
        #14C1
        #instruction: LD   BC,0020
        advance (10)
        #14C4
        #instruction: ADD  HL,BC
        let:17 a42 = add17(0020,(a41,a39)) in
        advance (10)
        #14C5
        #instruction: POP  BC
        let:16 a43 = (1 + a40) in
        let:8 a44 = M[a40] in
        let:16 a45 = (1 + a43) in
        let:8 a46 = M[a43] in
        advance (10)
        #14C6
        #instruction: DEC  B
        let:16 a47 = addWithCarry(!true,a46,~00) in
        let:8 a48 = (a46 & 0F) in
        let:8 a49 = (~00 & 0F) in
        let:16 a50 = addWithCarry(!true,a48,a49) in
        advance (5)
        #14C7
        #instruction: JP   NZ,1498
        if (!is_zero(a47[7:0])) {
          advance (10)
          A := a37;
          B := a47[7:0];
          C := a44;
          D := a22[15:8];
          E := a22[7:0];
          H := a42[15:0][15:8];
          L := a42[15:0][7:0];
          SPH := a45[15:8];
          SPL := a45[7:0];
          FlagS := a47[7:0][7];
          FlagZ := is_zero(a47[7:0]);
          FlagA := a50[7:0][4];
          FlagP := parity(a47[7:0]);
          FlagCY := a42[16];
          Shifter_HI := a23;
          Shifter_LO := a6;
          jump (1498);
        } else {
          advance (10)
          #14CA
          #instruction: RET
          let:16 a51 = (1 + a45) in
          let:8 a52 = M[a45] in
          let:16 a53 = (1 + a51) in
          let:8 a54 = M[a51] in
          advance (10)
          A := a37;
          B := a47[7:0];
          C := a44;
          D := a22[15:8];
          E := a22[7:0];
          H := a42[15:0][15:8];
          L := a42[15:0][7:0];
          SPH := a53[15:8];
          SPL := a53[7:0];
          FlagS := a47[7:0][7];
          FlagZ := is_zero(a47[7:0]);
          FlagA := a50[7:0][4];
          FlagP := parity(a47[7:0]);
          FlagCY := a42[16];
          Shifter_HI := a23;
          Shifter_LO := a6;
          jump ((a54,a52));
        }
      } else {
        advance (10)
        #14B8
        #instruction: LD   A,01
        advance (7)
        #14BA
        #instruction: LD   (2061),A
        M[2061] := 01;
        advance (13)
        #14BD
        #instruction: POP  PSW
        let:16 a55 = (1 + a28) in
        let:8 a56 = M[a28] in
        let:16 a57 = (1 + a55) in
        let:8 a58 = M[a55] in
        advance (10)
        #14BE
        #instruction: OR   (HL)
        let:8 a59 = M[a21] in
        let:8 a60 = (a59 | a58) in
        advance (7)
        #14BF
        #instruction: LD   (HL),A
        M[a21] := a60;
        advance (7)
        #14C0
        #instruction: POP  HL
        let:16 a61 = (1 + a57) in
        let:8 a62 = M[a57] in
        let:16 a63 = (1 + a61) in
        let:8 a64 = M[a61] in
        advance (10)
        #14C1
        #instruction: LD   BC,0020
        advance (10)
        #14C4
        #instruction: ADD  HL,BC
        let:17 a65 = add17(0020,(a64,a62)) in
        advance (10)
        #14C5
        #instruction: POP  BC
        let:16 a66 = (1 + a63) in
        let:8 a67 = M[a63] in
        let:16 a68 = (1 + a66) in
        let:8 a69 = M[a66] in
        advance (10)
        #14C6
        #instruction: DEC  B
        let:16 a70 = addWithCarry(!true,a69,~00) in
        let:8 a71 = (a69 & 0F) in
        let:8 a72 = (~00 & 0F) in
        let:16 a73 = addWithCarry(!true,a71,a72) in
        advance (5)
        #14C7
        #instruction: JP   NZ,1498
        if (!is_zero(a70[7:0])) {
          advance (10)
          A := a60;
          B := a70[7:0];
          C := a67;
          D := a22[15:8];
          E := a22[7:0];
          H := a65[15:0][15:8];
          L := a65[15:0][7:0];
          SPH := a68[15:8];
          SPL := a68[7:0];
          FlagS := a70[7:0][7];
          FlagZ := is_zero(a70[7:0]);
          FlagA := a73[7:0][4];
          FlagP := parity(a70[7:0]);
          FlagCY := a65[16];
          Shifter_HI := a23;
          Shifter_LO := a6;
          jump (1498);
        } else {
          advance (10)
          #14CA
          #instruction: RET
          let:16 a74 = (1 + a68) in
          let:8 a75 = M[a68] in
          let:16 a76 = (1 + a74) in
          let:8 a77 = M[a74] in
          advance (10)
          A := a60;
          B := a70[7:0];
          C := a67;
          D := a22[15:8];
          E := a22[7:0];
          H := a65[15:0][15:8];
          L := a65[15:0][7:0];
          SPH := a76[15:8];
          SPL := a76[7:0];
          FlagS := a70[7:0][7];
          FlagZ := is_zero(a70[7:0]);
          FlagA := a73[7:0][4];
          FlagP := parity(a70[7:0]);
          FlagCY := a65[16];
          Shifter_HI := a23;
          Shifter_LO := a6;
          jump ((a77,a75));
        }
      }
    } else {
      advance (10)
      #14A4
      #instruction: LD   A,01
      advance (7)
      #14A6
      #instruction: LD   (2061),A
      M[2061] := 01;
      advance (13)
      #14A9
      #instruction: POP  PSW
      let:16 a78 = (1 + a11) in
      let:8 a79 = M[a11] in
      let:16 a80 = (1 + a78) in
      let:8 a81 = M[a78] in
      advance (10)
      #14AA
      #instruction: OR   (HL)
      let:8 a82 = M[(H,L)] in
      let:8 a83 = (a82 | a81) in
      advance (7)
      #14AB
      #instruction: LD   (HL),A
      M[(H,L)] := a83;
      advance (7)
      #14AC
      #instruction: INC  HL
      let:16 a84 = (1 + (H,L)) in
      advance (5)
      #14AD
      #instruction: INC  DE
      let:16 a85 = (1 + (D,E)) in
      advance (5)
      #14AE
      #instruction: XOR  A
      let:8 a86 = (a83 ^ a83) in
      advance (4)
      #14AF
      #instruction: OUT  04
      advance (10)
      #14B1
      #instruction: IN   03
      let:8 a87 = (Shifter_OFF & 07) in
      let:8 a88 = (~Shifter_OFF & 07) in
      let:8 a89 = ((a86 << a87) | ((a6 >> a88) >> 01)) in
      advance (10)
      #14B3
      #instruction: PUSH PSW
      let:16 a90 = (-1 + a80) in
      M[a90] := a89;
      let:16 a91 = (-1 + a90) in
      M[a91] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a86[7]),6,is_zero(a86)),4,false),2,parity(a86)),0,false);
      advance (11)
      #14B4
      #instruction: AND  (HL)
      let:8 a92 = M[a84] in
      let:8 a93 = (a92 & a89) in
      let:8 a94 = (a92 | a89) in
      advance (7)
      #14B5
      #instruction: JP   Z,14BD
      if (is_zero(a93)) {
        advance (10)
        #14BD
        #instruction: POP  PSW
        let:16 a95 = (1 + a91) in
        let:8 a96 = M[a91] in
        let:16 a97 = (1 + a95) in
        let:8 a98 = M[a95] in
        advance (10)
        #14BE
        #instruction: OR   (HL)
        let:8 a99 = M[a84] in
        let:8 a100 = (a99 | a98) in
        advance (7)
        #14BF
        #instruction: LD   (HL),A
        M[a84] := a100;
        advance (7)
        #14C0
        #instruction: POP  HL
        let:16 a101 = (1 + a97) in
        let:8 a102 = M[a97] in
        let:16 a103 = (1 + a101) in
        let:8 a104 = M[a101] in
        advance (10)
        #14C1
        #instruction: LD   BC,0020
        advance (10)
        #14C4
        #instruction: ADD  HL,BC
        let:17 a105 = add17(0020,(a104,a102)) in
        advance (10)
        #14C5
        #instruction: POP  BC
        let:16 a106 = (1 + a103) in
        let:8 a107 = M[a103] in
        let:16 a108 = (1 + a106) in
        let:8 a109 = M[a106] in
        advance (10)
        #14C6
        #instruction: DEC  B
        let:16 a110 = addWithCarry(!true,a109,~00) in
        let:8 a111 = (a109 & 0F) in
        let:8 a112 = (~00 & 0F) in
        let:16 a113 = addWithCarry(!true,a111,a112) in
        advance (5)
        #14C7
        #instruction: JP   NZ,1498
        if (!is_zero(a110[7:0])) {
          advance (10)
          A := a100;
          B := a110[7:0];
          C := a107;
          D := a85[15:8];
          E := a85[7:0];
          H := a105[15:0][15:8];
          L := a105[15:0][7:0];
          SPH := a108[15:8];
          SPL := a108[7:0];
          FlagS := a110[7:0][7];
          FlagZ := is_zero(a110[7:0]);
          FlagA := a113[7:0][4];
          FlagP := parity(a110[7:0]);
          FlagCY := a105[16];
          Shifter_HI := a86;
          Shifter_LO := a6;
          jump (1498);
        } else {
          advance (10)
          #14CA
          #instruction: RET
          let:16 a114 = (1 + a108) in
          let:8 a115 = M[a108] in
          let:16 a116 = (1 + a114) in
          let:8 a117 = M[a114] in
          advance (10)
          A := a100;
          B := a110[7:0];
          C := a107;
          D := a85[15:8];
          E := a85[7:0];
          H := a105[15:0][15:8];
          L := a105[15:0][7:0];
          SPH := a116[15:8];
          SPL := a116[7:0];
          FlagS := a110[7:0][7];
          FlagZ := is_zero(a110[7:0]);
          FlagA := a113[7:0][4];
          FlagP := parity(a110[7:0]);
          FlagCY := a105[16];
          Shifter_HI := a86;
          Shifter_LO := a6;
          jump ((a117,a115));
        }
      } else {
        advance (10)
        #14B8
        #instruction: LD   A,01
        advance (7)
        #14BA
        #instruction: LD   (2061),A
        M[2061] := 01;
        advance (13)
        #14BD
        #instruction: POP  PSW
        let:16 a118 = (1 + a91) in
        let:8 a119 = M[a91] in
        let:16 a120 = (1 + a118) in
        let:8 a121 = M[a118] in
        advance (10)
        #14BE
        #instruction: OR   (HL)
        let:8 a122 = M[a84] in
        let:8 a123 = (a122 | a121) in
        advance (7)
        #14BF
        #instruction: LD   (HL),A
        M[a84] := a123;
        advance (7)
        #14C0
        #instruction: POP  HL
        let:16 a124 = (1 + a120) in
        let:8 a125 = M[a120] in
        let:16 a126 = (1 + a124) in
        let:8 a127 = M[a124] in
        advance (10)
        #14C1
        #instruction: LD   BC,0020
        advance (10)
        #14C4
        #instruction: ADD  HL,BC
        let:17 a128 = add17(0020,(a127,a125)) in
        advance (10)
        #14C5
        #instruction: POP  BC
        let:16 a129 = (1 + a126) in
        let:8 a130 = M[a126] in
        let:16 a131 = (1 + a129) in
        let:8 a132 = M[a129] in
        advance (10)
        #14C6
        #instruction: DEC  B
        let:16 a133 = addWithCarry(!true,a132,~00) in
        let:8 a134 = (a132 & 0F) in
        let:8 a135 = (~00 & 0F) in
        let:16 a136 = addWithCarry(!true,a134,a135) in
        advance (5)
        #14C7
        #instruction: JP   NZ,1498
        if (!is_zero(a133[7:0])) {
          advance (10)
          A := a123;
          B := a133[7:0];
          C := a130;
          D := a85[15:8];
          E := a85[7:0];
          H := a128[15:0][15:8];
          L := a128[15:0][7:0];
          SPH := a131[15:8];
          SPL := a131[7:0];
          FlagS := a133[7:0][7];
          FlagZ := is_zero(a133[7:0]);
          FlagA := a136[7:0][4];
          FlagP := parity(a133[7:0]);
          FlagCY := a128[16];
          Shifter_HI := a86;
          Shifter_LO := a6;
          jump (1498);
        } else {
          advance (10)
          #14CA
          #instruction: RET
          let:16 a137 = (1 + a131) in
          let:8 a138 = M[a131] in
          let:16 a139 = (1 + a137) in
          let:8 a140 = M[a137] in
          advance (10)
          A := a123;
          B := a133[7:0];
          C := a130;
          D := a85[15:8];
          E := a85[7:0];
          H := a128[15:0][15:8];
          L := a128[15:0][7:0];
          SPH := a139[15:8];
          SPL := a139[7:0];
          FlagS := a133[7:0][7];
          FlagZ := is_zero(a133[7:0]);
          FlagA := a136[7:0][4];
          FlagP := parity(a133[7:0]);
          FlagCY := a128[16];
          Shifter_HI := a86;
          Shifter_LO := a6;
          jump ((a140,a138));
        }
      }
    }

1508:

    #1508
    #instruction: LD   A,(202A)
    let:8 a1 = M[202A] in
    advance (13)
    #150B
    #instruction: LD   H,A
    advance (5)
    #150C
    #instruction: CALL 156F
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 15;
    let:16 a3 = (-1 + a2) in
    M[a3] := 0F;
    #return-to: 150F
    advance (17)
    #156F
    #instruction: LD   A,(200A)
    let:8 a4 = M[200A] in
    advance (13)
    #1572
    #instruction: CALL 1554
    let:16 a5 = (-1 + a3) in
    M[a5] := 15;
    let:16 a6 = (-1 + a5) in
    M[a6] := 75;
    #return-to: 1575
    advance (17)
    #1554
    #instruction: LD   C,00
    advance (7)
    #1556
    #instruction: CP   H
    let:16 a7 = addWithCarry(!false,a4,~a1) in
    let:8 a8 = (a4 & 0F) in
    let:8 a9 = (~a1 & 0F) in
    let:16 a10 = addWithCarry(!false,a8,a9) in
    advance (4)
    #1557
    #instruction: CALL NC,1590
    if (!!a7[15:8][0]) {
      let:16 a11 = (-1 + a6) in
      M[a11] := 15;
      let:16 a12 = (-1 + a11) in
      M[a12] := 5A;
      #return-to: 155A
      advance (17)
      #1590
      #instruction: INC  C
      let:16 a13 = addWithCarry(true,00,00) in
      let:8 a14 = (00 & 0F) in
      let:8 a15 = (00 & 0F) in
      let:16 a16 = addWithCarry(true,a14,a15) in
      advance (5)
      #1591
      #instruction: ADD  10
      let:16 a17 = addWithCarry(false,10,a4) in
      let:8 a18 = (10 & 0F) in
      let:8 a19 = (a4 & 0F) in
      let:16 a20 = addWithCarry(false,a18,a19) in
      advance (7)
      #1593
      #instruction: JP   MI,1590
      if (a17[7:0][7]) {
        advance (10)
        A := a17[7:0];
        C := a13[7:0];
        H := a1;
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a17[7:0][7];
        FlagZ := is_zero(a17[7:0]);
        FlagA := a20[7:0][4];
        FlagP := parity(a17[7:0]);
        FlagCY := a17[15:8][0];
        jump (1590);
      } else {
        advance (10)
        #1596
        #instruction: RET
        let:16 a21 = (1 + a12) in
        let:8 a22 = M[a12] in
        let:16 a23 = (1 + a21) in
        let:8 a24 = M[a21] in
        advance (10)
        A := a17[7:0];
        C := a13[7:0];
        H := a1;
        SPH := a23[15:8];
        SPL := a23[7:0];
        FlagS := a17[7:0][7];
        FlagZ := is_zero(a17[7:0]);
        FlagA := a20[7:0][4];
        FlagP := parity(a17[7:0]);
        FlagCY := a17[15:8][0];
        jump ((a24,a22));
      }
    } else {
      advance (11)
      A := a4;
      C := 00;
      H := a1;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      FlagCY := !a7[15:8][0];
      jump (155A);
    }

150F:

    #150F
    #instruction: LD   (2064),HL
    M[2064] := L;
    M[2065] := H;
    advance (16)
    #1512
    #instruction: LD   A,05
    advance (7)
    #1514
    #instruction: LD   (2025),A
    M[2025] := 05;
    advance (13)
    #1517
    #instruction: CALL 1581
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 1A;
    #return-to: 151A
    advance (17)
    #1581
    #instruction: LD   A,B
    advance (5)
    #1582
    #instruction: RLCA
    advance (4)
    #1583
    #instruction: RLCA
    advance (4)
    #1584
    #instruction: RLCA
    advance (4)
    #1585
    #instruction: ADD  B
    let:16 a3 = addWithCarry(false,B,updateBit((updateBit((updateBit((B << 01),0,B[7]) << 01),0,updateBit((B << 01),0,B[7])[7]) << 01),0,updateBit((updateBit((B << 01),0,B[7]) << 01),0,updateBit((B << 01),0,B[7])[7])[7])) in
    let:8 a4 = (B & 0F) in
    let:8 a5 = (updateBit((updateBit((updateBit((B << 01),0,B[7]) << 01),0,updateBit((B << 01),0,B[7])[7]) << 01),0,updateBit((updateBit((B << 01),0,B[7]) << 01),0,updateBit((B << 01),0,B[7])[7])[7]) & 0F) in
    let:16 a6 = addWithCarry(false,a4,a5) in
    advance (4)
    #1586
    #instruction: ADD  B
    let:16 a7 = addWithCarry(false,B,a3[7:0]) in
    let:8 a8 = (B & 0F) in
    let:8 a9 = (a3[7:0] & 0F) in
    let:16 a10 = addWithCarry(false,a8,a9) in
    advance (4)
    #1587
    #instruction: ADD  B
    let:16 a11 = addWithCarry(false,B,a7[7:0]) in
    let:8 a12 = (B & 0F) in
    let:8 a13 = (a7[7:0] & 0F) in
    let:16 a14 = addWithCarry(false,a12,a13) in
    advance (4)
    #1588
    #instruction: ADD  C
    let:16 a15 = addWithCarry(false,C,a11[7:0]) in
    let:8 a16 = (C & 0F) in
    let:8 a17 = (a11[7:0] & 0F) in
    let:16 a18 = addWithCarry(false,a16,a17) in
    advance (4)
    #1589
    #instruction: DEC  A
    let:16 a19 = addWithCarry(!true,a15[7:0],~00) in
    let:8 a20 = (a15[7:0] & 0F) in
    let:8 a21 = (~00 & 0F) in
    let:16 a22 = addWithCarry(!true,a20,a21) in
    advance (5)
    #158A
    #instruction: LD   L,A
    advance (5)
    #158B
    #instruction: LD   A,(2067)
    let:8 a23 = M[2067] in
    advance (13)
    #158E
    #instruction: LD   H,A
    advance (5)
    #158F
    #instruction: RET
    let:16 a24 = (1 + a2) in
    let:8 a25 = M[a2] in
    let:16 a26 = (1 + a24) in
    let:8 a27 = M[a24] in
    advance (10)
    A := a23;
    H := a23;
    L := a19[7:0];
    SPH := a26[15:8];
    SPL := a26[7:0];
    FlagS := a19[7:0][7];
    FlagZ := is_zero(a19[7:0]);
    FlagA := a22[7:0][4];
    FlagP := parity(a19[7:0]);
    FlagCY := a15[15:8][0];
    jump ((a27,a25));

151A:

    #151A
    #instruction: LD   A,(HL)
    let:8 a1 = M[(H,L)] in
    advance (7)
    #151B
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #151C
    #instruction: JP   Z,1530
    if (is_zero(a2)) {
      advance (10)
      #1530
      #instruction: LD   A,03
      advance (7)
      #1532
      #instruction: LD   (2025),A
      M[2025] := 03;
      advance (13)
      #1535
      #instruction: JP   154A
      advance (10)
      #154A
      #instruction: XOR  A
      let:8 a4 = (03 ^ 03) in
      advance (4)
      #154B
      #instruction: LD   (2002),A
      M[2002] := a4;
      advance (13)
      #154E
      #instruction: LD   B,F7
      advance (7)
      #1550
      #instruction: JP   19DC
      advance (10)
      #19DC
      #instruction: LD   A,(2094)
      let:8 a5 = M[2094] in
      advance (13)
      #19DF
      #instruction: AND  B
      let:8 a6 = (F7 & a5) in
      let:8 a7 = (F7 | a5) in
      advance (4)
      #19E0
      #instruction: LD   (2094),A
      M[2094] := a6;
      advance (13)
      #19E3
      #instruction: OUT  03
      sound_control(Ufo,a6[0]);
      sound_control(Shot,a6[1]);
      sound_control(PlayerDie,a6[2]);
      sound_control(InvaderDie,a6[3]);
      sound_control(ExtraLife,a6[4]);
      advance (10)
      #19E5
      #instruction: RET
      let:16 a8 = (1 + (SPH,SPL)) in
      let:8 a9 = M[(SPH,SPL)] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := a6;
      B := F7;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a6[7];
      FlagZ := is_zero(a6);
      FlagA := a7[3];
      FlagP := parity(a6);
      FlagCY := false;
      jump ((a11,a9));
    } else {
      advance (10)
      #151F
      #instruction: LD   (HL),00
      M[(H,L)] := 00;
      advance (10)
      #1521
      #instruction: CALL 0A5F
      let:16 a12 = (-1 + (SPH,SPL)) in
      M[a12] := 15;
      let:16 a13 = (-1 + a12) in
      M[a13] := 24;
      #return-to: 1524
      advance (17)
      #0A5F
      #instruction: LD   A,(20EF)
      let:8 a14 = M[20EF] in
      advance (13)
      #0A62
      #instruction: AND  A
      let:8 a15 = (a14 & a14) in
      let:8 a16 = (a14 | a14) in
      advance (4)
      #0A63
      #instruction: JP   Z,0A7C
      if (is_zero(a15)) {
        advance (10)
        #0A7C
        #instruction: LD   HL,2062
        advance (10)
        #0A7F
        #instruction: RET
        let:16 a17 = (1 + a13) in
        let:8 a18 = M[a13] in
        let:16 a19 = (1 + a17) in
        let:8 a20 = M[a17] in
        advance (10)
        A := a15;
        H := 20;
        L := 62;
        SPH := a19[15:8];
        SPL := a19[7:0];
        FlagS := a15[7];
        FlagZ := is_zero(a15);
        FlagA := a16[3];
        FlagP := parity(a15);
        FlagCY := false;
        jump ((a20,a18));
      } else {
        advance (10)
        #0A66
        #instruction: LD   C,B
        advance (5)
        #0A67
        #instruction: LD   B,08
        advance (7)
        #0A69
        #instruction: CALL 18FA
        let:16 a21 = (-1 + a13) in
        M[a21] := 0A;
        let:16 a22 = (-1 + a21) in
        M[a22] := 6C;
        #return-to: 0A6C
        advance (17)
        #18FA
        #instruction: LD   A,(2094)
        let:8 a23 = M[2094] in
        advance (13)
        #18FD
        #instruction: OR   B
        let:8 a24 = (08 | a23) in
        advance (4)
        #18FE
        #instruction: LD   (2094),A
        M[2094] := a24;
        advance (13)
        #1901
        #instruction: OUT  03
        sound_control(Ufo,a24[0]);
        sound_control(Shot,a24[1]);
        sound_control(PlayerDie,a24[2]);
        sound_control(InvaderDie,a24[3]);
        sound_control(ExtraLife,a24[4]);
        advance (10)
        #1903
        #instruction: RET
        let:16 a25 = (1 + a22) in
        let:8 a26 = M[a22] in
        let:16 a27 = (1 + a25) in
        let:8 a28 = M[a25] in
        advance (10)
        A := a24;
        B := 08;
        C := B;
        SPH := a27[15:8];
        SPL := a27[7:0];
        FlagS := a24[7];
        FlagZ := is_zero(a24);
        FlagA := false;
        FlagP := parity(a24);
        FlagCY := false;
        jump ((a28,a26));
      }
    }

1524:

    #1524
    #instruction: CALL 1A3B
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 27;
    #return-to: 1527
    advance (17)
    #1A3B
    #instruction: LD   E,(HL)
    let:8 a3 = M[(H,L)] in
    advance (7)
    #1A3C
    #instruction: INC  HL
    let:16 a4 = (1 + (H,L)) in
    advance (5)
    #1A3D
    #instruction: LD   D,(HL)
    let:8 a5 = M[a4] in
    advance (7)
    #1A3E
    #instruction: INC  HL
    let:16 a6 = (1 + a4) in
    advance (5)
    #1A3F
    #instruction: LD   A,(HL)
    let:8 a7 = M[a6] in
    advance (7)
    #1A40
    #instruction: INC  HL
    let:16 a8 = (1 + a6) in
    advance (5)
    #1A41
    #instruction: LD   C,(HL)
    let:8 a9 = M[a8] in
    advance (7)
    #1A42
    #instruction: INC  HL
    let:16 a10 = (1 + a8) in
    advance (5)
    #1A43
    #instruction: LD   B,(HL)
    let:8 a11 = M[a10] in
    advance (7)
    #1A44
    #instruction: LD   H,C
    advance (5)
    #1A45
    #instruction: LD   L,A
    advance (5)
    #1A46
    #instruction: RET
    let:16 a12 = (1 + a2) in
    let:8 a13 = M[a2] in
    let:16 a14 = (1 + a12) in
    let:8 a15 = M[a12] in
    advance (10)
    A := a7;
    B := a11;
    C := a9;
    D := a5;
    E := a3;
    H := a9;
    L := a7;
    SPH := a14[15:8];
    SPL := a14[7:0];
    jump ((a15,a13));

1527:

    #1527
    #instruction: CALL 15D3
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2A;
    #return-to: 152A
    advance (17)
    #15D3
    #instruction: CALL 1474
    let:16 a3 = (-1 + a2) in
    M[a3] := 15;
    let:16 a4 = (-1 + a3) in
    M[a4] := D6;
    #return-to: 15D6
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a5 = (07 & L) in
    let:8 a6 = (07 | L) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a7 = (-1 + a4) in
    M[a7] := B;
    let:16 a8 = (-1 + a7) in
    M[a8] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a9 = addWithCarry(!true,03,~00) in
    let:8 a10 = (03 & 0F) in
    let:8 a11 = (~00 & 0F) in
    let:16 a12 = addWithCarry(!true,a10,a11) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a9[7:0])) {
      advance (10)
      A := updateBit((L >> 01),7,H[0]);
      B := a9[7:0];
      H := updateBit((H >> 01),7,false);
      L := updateBit((L >> 01),7,H[0]);
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      FlagCY := L[0];
      Shifter_OFF := a5;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a13 = (3F & updateBit((H >> 01),7,false)) in
      let:8 a14 = (3F | updateBit((H >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a15 = (20 | a13) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a16 = (1 + a8) in
      let:8 a17 = M[a8] in
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      let:16 a22 = (1 + a20) in
      let:8 a23 = M[a20] in
      advance (10)
      A := a15;
      B := a19;
      C := a17;
      H := a15;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a22[15:8];
      SPL := a22[7:0];
      FlagS := a15[7];
      FlagZ := is_zero(a15);
      FlagA := false;
      FlagP := parity(a15);
      FlagCY := false;
      Shifter_OFF := a5;
      jump ((a23,a21));
    }

152A:

    #152A
    #instruction: LD   A,10
    advance (7)
    #152C
    #instruction: LD   (2003),A
    M[2003] := 10;
    advance (13)
    #152F
    #instruction: RET
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    A := 10;
    SPH := a3[15:8];
    SPL := a3[7:0];
    jump ((a4,a2));

1545:

    #1545
    #instruction: LD   A,04
    advance (7)
    #1547
    #instruction: LD   (2025),A
    M[2025] := 04;
    advance (13)
    #154A
    #instruction: XOR  A
    let:8 a1 = (04 ^ 04) in
    advance (4)
    #154B
    #instruction: LD   (2002),A
    M[2002] := a1;
    advance (13)
    #154E
    #instruction: LD   B,F7
    advance (7)
    #1550
    #instruction: JP   19DC
    advance (10)
    #19DC
    #instruction: LD   A,(2094)
    let:8 a2 = M[2094] in
    advance (13)
    #19DF
    #instruction: AND  B
    let:8 a3 = (F7 & a2) in
    let:8 a4 = (F7 | a2) in
    advance (4)
    #19E0
    #instruction: LD   (2094),A
    M[2094] := a3;
    advance (13)
    #19E3
    #instruction: OUT  03
    sound_control(Ufo,a3[0]);
    sound_control(Shot,a3[1]);
    sound_control(PlayerDie,a3[2]);
    sound_control(InvaderDie,a3[3]);
    sound_control(ExtraLife,a3[4]);
    advance (10)
    #19E5
    #instruction: RET
    let:16 a5 = (1 + (SPH,SPL)) in
    let:8 a6 = M[(SPH,SPL)] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    A := a3;
    B := F7;
    SPH := a7[15:8];
    SPL := a7[7:0];
    FlagS := a3[7];
    FlagZ := is_zero(a3);
    FlagA := a4[3];
    FlagP := parity(a3);
    FlagCY := false;
    jump ((a8,a6));

155A:

    #155A
    #instruction: CP   H
    let:16 a1 = addWithCarry(!false,A,~H) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~H & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    advance (4)
    #155B
    #instruction: RET  NC
    if (!!a1[15:8][0]) {
      let:16 a5 = (1 + (SPH,SPL)) in
      let:8 a6 = M[(SPH,SPL)] in
      let:16 a7 = (1 + a5) in
      let:8 a8 = M[a5] in
      advance (11)
      SPH := a7[15:8];
      SPL := a7[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump ((a8,a6));
    } else {
      advance (5)
      #155C
      #instruction: ADD  10
      let:16 a9 = addWithCarry(false,10,A) in
      let:8 a10 = (10 & 0F) in
      let:8 a11 = (A & 0F) in
      let:16 a12 = addWithCarry(false,a10,a11) in
      advance (7)
      #155E
      #instruction: INC  C
      let:16 a13 = addWithCarry(true,C,00) in
      let:8 a14 = (C & 0F) in
      let:8 a15 = (00 & 0F) in
      let:16 a16 = addWithCarry(true,a14,a15) in
      advance (5)
      #155F
      #instruction: JP   155A
      advance (10)
      A := a9[7:0];
      C := a13[7:0];
      FlagS := a13[7:0][7];
      FlagZ := is_zero(a13[7:0]);
      FlagA := a16[7:0][4];
      FlagP := parity(a13[7:0]);
      FlagCY := a9[15:8][0];
      jump (155A);
    }

1569:

    #1569
    #instruction: LD   B,C
    advance (5)
    #156A
    #instruction: DEC  B
    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    advance (5)
    #156B
    #instruction: SBC  10
    let:16 a5 = addWithCarry(!FlagCY,A,~10) in
    let:8 a6 = (A & 0F) in
    let:8 a7 = (~10 & 0F) in
    let:16 a8 = addWithCarry(!FlagCY,a6,a7) in
    advance (7)
    #156D
    #instruction: LD   L,A
    advance (5)
    #156E
    #instruction: RET
    let:16 a9 = (1 + (SPH,SPL)) in
    let:8 a10 = M[(SPH,SPL)] in
    let:16 a11 = (1 + a9) in
    let:8 a12 = M[a9] in
    advance (10)
    A := a5[7:0];
    B := a1[7:0];
    L := a5[7:0];
    SPH := a11[15:8];
    SPL := a11[7:0];
    FlagS := a5[7:0][7];
    FlagZ := is_zero(a5[7:0]);
    FlagA := a8[7:0][4];
    FlagP := parity(a5[7:0]);
    FlagCY := !a5[15:8][0];
    jump ((a12,a10));

1575:

    #1575
    #instruction: SBC  10
    let:16 a1 = addWithCarry(!FlagCY,A,~10) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~10 & 0F) in
    let:16 a4 = addWithCarry(!FlagCY,a2,a3) in
    advance (7)
    #1577
    #instruction: LD   H,A
    advance (5)
    #1578
    #instruction: RET
    let:16 a5 = (1 + (SPH,SPL)) in
    let:8 a6 = M[(SPH,SPL)] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    A := a1[7:0];
    H := a1[7:0];
    SPH := a7[15:8];
    SPL := a7[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump ((a8,a6));

15A4:

    #15A4
    #instruction: RET  NC
    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:8 a2 = M[(SPH,SPL)] in
      let:16 a3 = (1 + a1) in
      let:8 a4 = M[a1] in
      advance (11)
      SPH := a3[15:8];
      SPL := a3[7:0];
      jump ((a4,a2));
    } else {
      advance (5)
      #15A5
      #instruction: LD   B,FE
      advance (7)
      #15A7
      #instruction: LD   A,01
      advance (7)
      #15A9
      #instruction: LD   (200D),A
      M[200D] := 01;
      advance (13)
      #15AC
      #instruction: LD   A,B
      advance (5)
      #15AD
      #instruction: LD   (2008),A
      M[2008] := FE;
      advance (13)
      #15B0
      #instruction: LD   A,(200E)
      let:8 a5 = M[200E] in
      advance (13)
      #15B3
      #instruction: LD   (2007),A
      M[2007] := a5;
      advance (13)
      #15B6
      #instruction: RET
      let:16 a6 = (1 + (SPH,SPL)) in
      let:8 a7 = M[(SPH,SPL)] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a5;
      B := FE;
      SPH := a8[15:8];
      SPL := a8[7:0];
      jump ((a9,a7));
    }

15BD:

    #15BD
    #instruction: RET  NC
    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:8 a2 = M[(SPH,SPL)] in
      let:16 a3 = (1 + a1) in
      let:8 a4 = M[a1] in
      advance (11)
      SPH := a3[15:8];
      SPL := a3[7:0];
      jump ((a4,a2));
    } else {
      advance (5)
      #15BE
      #instruction: CALL 18F1
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 15;
      let:16 a6 = (-1 + a5) in
      M[a6] := C1;
      #return-to: 15C1
      advance (17)
      #18F1
      #instruction: LD   B,02
      advance (7)
      #18F3
      #instruction: LD   A,(2082)
      let:8 a7 = M[2082] in
      advance (13)
      #18F6
      #instruction: DEC  A
      let:16 a8 = addWithCarry(!true,a7,~00) in
      let:8 a9 = (a7 & 0F) in
      let:8 a10 = (~00 & 0F) in
      let:16 a11 = addWithCarry(!true,a9,a10) in
      advance (5)
      #18F7
      #instruction: RET  NZ
      if (!is_zero(a8[7:0])) {
        let:16 a12 = (1 + a6) in
        let:8 a13 = M[a6] in
        let:16 a14 = (1 + a12) in
        let:8 a15 = M[a12] in
        advance (11)
        A := a8[7:0];
        B := 02;
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagS := a8[7:0][7];
        FlagZ := is_zero(a8[7:0]);
        FlagA := a11[7:0][4];
        FlagP := parity(a8[7:0]);
        jump ((a15,a13));
      } else {
        advance (5)
        #18F8
        #instruction: INC  B
        let:16 a16 = addWithCarry(true,02,00) in
        let:8 a17 = (02 & 0F) in
        let:8 a18 = (00 & 0F) in
        let:16 a19 = addWithCarry(true,a17,a18) in
        advance (5)
        #18F9
        #instruction: RET
        let:16 a20 = (1 + a6) in
        let:8 a21 = M[a6] in
        let:16 a22 = (1 + a20) in
        let:8 a23 = M[a20] in
        advance (10)
        A := a8[7:0];
        B := a16[7:0];
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a16[7:0][7];
        FlagZ := is_zero(a16[7:0]);
        FlagA := a19[7:0][4];
        FlagP := parity(a16[7:0]);
        jump ((a23,a21));
      }
    }

15C1:

    #15C1
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #15C2
    #instruction: JP   15A9
    advance (10)
    #15A9
    #instruction: LD   (200D),A
    M[200D] := a1;
    advance (13)
    #15AC
    #instruction: LD   A,B
    advance (5)
    #15AD
    #instruction: LD   (2008),A
    M[2008] := B;
    advance (13)
    #15B0
    #instruction: LD   A,(200E)
    let:8 a2 = M[200E] in
    advance (13)
    #15B3
    #instruction: LD   (2007),A
    M[2007] := a2;
    advance (13)
    #15B6
    #instruction: RET
    let:16 a3 = (1 + (SPH,SPL)) in
    let:8 a4 = M[(SPH,SPL)] in
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    advance (10)
    A := a2;
    SPH := a5[15:8];
    SPL := a5[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump ((a6,a4));

15D6:

    #15D6
    #instruction: PUSH HL
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    advance (11)
    #15D7
    #instruction: PUSH BC
    let:16 a3 = (-1 + a2) in
    M[a3] := B;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    advance (11)
    #15D8
    #instruction: PUSH HL
    let:16 a5 = (-1 + a4) in
    M[a5] := H;
    let:16 a6 = (-1 + a5) in
    M[a6] := L;
    advance (11)
    #15D9
    #instruction: LD   A,(DE)
    let:8 a7 = M[(D,E)] in
    advance (7)
    #15DA
    #instruction: OUT  04
    advance (10)
    #15DC
    #instruction: IN   03
    let:8 a8 = (Shifter_OFF & 07) in
    let:8 a9 = (~Shifter_OFF & 07) in
    let:8 a10 = ((a7 << a8) | ((Shifter_HI >> a9) >> 01)) in
    advance (10)
    #15DE
    #instruction: LD   (HL),A
    M[(H,L)] := a10;
    advance (7)
    #15DF
    #instruction: INC  HL
    let:16 a11 = (1 + (H,L)) in
    advance (5)
    #15E0
    #instruction: INC  DE
    let:16 a12 = (1 + (D,E)) in
    advance (5)
    #15E1
    #instruction: XOR  A
    let:8 a13 = (a10 ^ a10) in
    advance (4)
    #15E2
    #instruction: OUT  04
    advance (10)
    #15E4
    #instruction: IN   03
    let:8 a14 = (Shifter_OFF & 07) in
    let:8 a15 = (~Shifter_OFF & 07) in
    let:8 a16 = ((a13 << a14) | ((a7 >> a15) >> 01)) in
    advance (10)
    #15E6
    #instruction: LD   (HL),A
    M[a11] := a16;
    advance (7)
    #15E7
    #instruction: POP  HL
    let:16 a17 = (1 + a6) in
    let:8 a18 = M[a6] in
    let:16 a19 = (1 + a17) in
    let:8 a20 = M[a17] in
    advance (10)
    #15E8
    #instruction: LD   BC,0020
    advance (10)
    #15EB
    #instruction: ADD  HL,BC
    let:17 a21 = add17(0020,(a20,a18)) in
    advance (10)
    #15EC
    #instruction: POP  BC
    let:16 a22 = (1 + a19) in
    let:8 a23 = M[a19] in
    let:16 a24 = (1 + a22) in
    let:8 a25 = M[a22] in
    advance (10)
    #15ED
    #instruction: DEC  B
    let:16 a26 = addWithCarry(!true,a25,~00) in
    let:8 a27 = (a25 & 0F) in
    let:8 a28 = (~00 & 0F) in
    let:16 a29 = addWithCarry(!true,a27,a28) in
    advance (5)
    #15EE
    #instruction: JP   NZ,15D7
    if (!is_zero(a26[7:0])) {
      advance (10)
      A := a16;
      B := a26[7:0];
      C := a23;
      D := a12[15:8];
      E := a12[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a24[15:8];
      SPL := a24[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      Shifter_HI := a13;
      Shifter_LO := a7;
      jump (15D7);
    } else {
      advance (10)
      #15F1
      #instruction: POP  HL
      let:16 a30 = (1 + a24) in
      let:8 a31 = M[a24] in
      let:16 a32 = (1 + a30) in
      let:8 a33 = M[a30] in
      advance (10)
      #15F2
      #instruction: RET
      let:16 a34 = (1 + a32) in
      let:8 a35 = M[a32] in
      let:16 a36 = (1 + a34) in
      let:8 a37 = M[a34] in
      advance (10)
      A := a16;
      B := a26[7:0];
      C := a23;
      D := a12[15:8];
      E := a12[7:0];
      H := a33;
      L := a31;
      SPH := a36[15:8];
      SPL := a36[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      Shifter_HI := a13;
      Shifter_LO := a7;
      jump ((a37,a35));
    }

15F6:

    #15F6
    #instruction: LD   BC,3700
    advance (10)
    #15F9
    #instruction: LD   A,(HL)
    let:8 a1 = M[(H,L)] in
    advance (7)
    #15FA
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #15FB
    #instruction: JP   Z,15FF
    if (is_zero(a2)) {
      advance (10)
      #15FF
      #instruction: INC  HL
      let:16 a4 = (1 + (H,L)) in
      advance (5)
      #1600
      #instruction: DEC  B
      let:16 a5 = addWithCarry(!true,37,~00) in
      let:8 a6 = (37 & 0F) in
      let:8 a7 = (~00 & 0F) in
      let:16 a8 = addWithCarry(!true,a6,a7) in
      advance (5)
      #1601
      #instruction: JP   NZ,15F9
      if (!is_zero(a5[7:0])) {
        advance (10)
        A := a2;
        B := a5[7:0];
        C := 00;
        H := a4[15:8];
        L := a4[7:0];
        FlagS := a5[7:0][7];
        FlagZ := is_zero(a5[7:0]);
        FlagA := a8[7:0][4];
        FlagP := parity(a5[7:0]);
        FlagCY := false;
        jump (15F9);
      } else {
        advance (10)
        #1604
        #instruction: LD   A,C
        advance (5)
        #1605
        #instruction: LD   (2082),A
        M[2082] := 00;
        advance (13)
        #1608
        #instruction: CP   01
        let:16 a9 = addWithCarry(!false,00,~01) in
        let:8 a10 = (00 & 0F) in
        let:8 a11 = (~01 & 0F) in
        let:16 a12 = addWithCarry(!false,a10,a11) in
        advance (7)
        #160A
        #instruction: RET  NZ
        if (!is_zero(a9[7:0])) {
          let:16 a13 = (1 + (SPH,SPL)) in
          let:8 a14 = M[(SPH,SPL)] in
          let:16 a15 = (1 + a13) in
          let:8 a16 = M[a13] in
          advance (11)
          A := 00;
          B := a5[7:0];
          C := 00;
          H := a4[15:8];
          L := a4[7:0];
          SPH := a15[15:8];
          SPL := a15[7:0];
          FlagS := a9[7:0][7];
          FlagZ := is_zero(a9[7:0]);
          FlagA := a12[7:0][4];
          FlagP := parity(a9[7:0]);
          FlagCY := !a9[15:8][0];
          jump ((a16,a14));
        } else {
          advance (5)
          #160B
          #instruction: LD   HL,206B
          advance (10)
          #160E
          #instruction: LD   (HL),01
          M[206B] := 01;
          advance (10)
          #1610
          #instruction: RET
          let:16 a17 = (1 + (SPH,SPL)) in
          let:8 a18 = M[(SPH,SPL)] in
          let:16 a19 = (1 + a17) in
          let:8 a20 = M[a17] in
          advance (10)
          A := 00;
          B := a5[7:0];
          C := 00;
          H := 20;
          L := 6B;
          SPH := a19[15:8];
          SPL := a19[7:0];
          FlagS := a9[7:0][7];
          FlagZ := is_zero(a9[7:0]);
          FlagA := a12[7:0][4];
          FlagP := parity(a9[7:0]);
          FlagCY := !a9[15:8][0];
          jump ((a20,a18));
        }
      }
    } else {
      advance (10)
      #15FE
      #instruction: INC  C
      let:16 a21 = addWithCarry(true,00,00) in
      let:8 a22 = (00 & 0F) in
      let:8 a23 = (00 & 0F) in
      let:16 a24 = addWithCarry(true,a22,a23) in
      advance (5)
      #15FF
      #instruction: INC  HL
      let:16 a25 = (1 + (H,L)) in
      advance (5)
      #1600
      #instruction: DEC  B
      let:16 a26 = addWithCarry(!true,37,~00) in
      let:8 a27 = (37 & 0F) in
      let:8 a28 = (~00 & 0F) in
      let:16 a29 = addWithCarry(!true,a27,a28) in
      advance (5)
      #1601
      #instruction: JP   NZ,15F9
      if (!is_zero(a26[7:0])) {
        advance (10)
        A := a2;
        B := a26[7:0];
        C := a21[7:0];
        H := a25[15:8];
        L := a25[7:0];
        FlagS := a26[7:0][7];
        FlagZ := is_zero(a26[7:0]);
        FlagA := a29[7:0][4];
        FlagP := parity(a26[7:0]);
        FlagCY := false;
        jump (15F9);
      } else {
        advance (10)
        #1604
        #instruction: LD   A,C
        advance (5)
        #1605
        #instruction: LD   (2082),A
        M[2082] := a21[7:0];
        advance (13)
        #1608
        #instruction: CP   01
        let:16 a30 = addWithCarry(!false,a21[7:0],~01) in
        let:8 a31 = (a21[7:0] & 0F) in
        let:8 a32 = (~01 & 0F) in
        let:16 a33 = addWithCarry(!false,a31,a32) in
        advance (7)
        #160A
        #instruction: RET  NZ
        if (!is_zero(a30[7:0])) {
          let:16 a34 = (1 + (SPH,SPL)) in
          let:8 a35 = M[(SPH,SPL)] in
          let:16 a36 = (1 + a34) in
          let:8 a37 = M[a34] in
          advance (11)
          A := a21[7:0];
          B := a26[7:0];
          C := a21[7:0];
          H := a25[15:8];
          L := a25[7:0];
          SPH := a36[15:8];
          SPL := a36[7:0];
          FlagS := a30[7:0][7];
          FlagZ := is_zero(a30[7:0]);
          FlagA := a33[7:0][4];
          FlagP := parity(a30[7:0]);
          FlagCY := !a30[15:8][0];
          jump ((a37,a35));
        } else {
          advance (5)
          #160B
          #instruction: LD   HL,206B
          advance (10)
          #160E
          #instruction: LD   (HL),01
          M[206B] := 01;
          advance (10)
          #1610
          #instruction: RET
          let:16 a38 = (1 + (SPH,SPL)) in
          let:8 a39 = M[(SPH,SPL)] in
          let:16 a40 = (1 + a38) in
          let:8 a41 = M[a38] in
          advance (10)
          A := a21[7:0];
          B := a26[7:0];
          C := a21[7:0];
          H := 20;
          L := 6B;
          SPH := a40[15:8];
          SPL := a40[7:0];
          FlagS := a30[7:0][7];
          FlagZ := is_zero(a30[7:0]);
          FlagA := a33[7:0][4];
          FlagP := parity(a30[7:0]);
          FlagCY := !a30[15:8][0];
          jump ((a41,a39));
        }
      }
    }

163C:

    #163C
    #instruction: AND  10
    let:8 a1 = (10 & A) in
    let:8 a2 = (10 | A) in
    advance (7)
    #163E
    #instruction: RET  Z
    if (is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:8 a4 = M[(SPH,SPL)] in
      let:16 a5 = (1 + a3) in
      let:8 a6 = M[a3] in
      advance (11)
      A := a1;
      SPH := a5[15:8];
      SPL := a5[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((a6,a4));
    } else {
      advance (5)
      #163F
      #instruction: LD   A,01
      advance (7)
      #1641
      #instruction: LD   (2025),A
      M[2025] := 01;
      advance (13)
      #1644
      #instruction: LD   (202D),A
      M[202D] := 01;
      advance (13)
      #1647
      #instruction: RET
      let:16 a7 = (1 + (SPH,SPL)) in
      let:8 a8 = M[(SPH,SPL)] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := 01;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((a10,a8));
    }

164B:

    #164B
    #instruction: AND  10
    let:8 a1 = (10 & A) in
    let:8 a2 = (10 | A) in
    advance (7)
    #164D
    #instruction: RET  NZ
    if (!is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:8 a4 = M[(SPH,SPL)] in
      let:16 a5 = (1 + a3) in
      let:8 a6 = M[a3] in
      advance (11)
      A := a1;
      SPH := a5[15:8];
      SPL := a5[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((a6,a4));
    } else {
      advance (5)
      #164E
      #instruction: LD   (202D),A
      M[202D] := a1;
      advance (13)
      #1651
      #instruction: RET
      let:16 a7 = (1 + (SPH,SPL)) in
      let:8 a8 = M[(SPH,SPL)] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := a1;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((a10,a8));
    }

1671:

    #1671
    #instruction: CALL 1910
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := 74;
    #return-to: 1674
    advance (17)
    #1910
    #instruction: LD   HL,20E7
    advance (10)
    #1913
    #instruction: LD   A,(2067)
    let:8 a3 = M[2067] in
    advance (13)
    #1916
    #instruction: RRCA
    advance (4)
    #1917
    #instruction: RET  CY
    if (a3[0]) {
      let:16 a4 = (1 + a2) in
      let:8 a5 = M[a2] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (11)
      A := updateBit((a3 >> 01),7,a3[0]);
      H := 20;
      L := E7;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagCY := a3[0];
      jump ((a7,a5));
    } else {
      advance (5)
      #1918
      #instruction: INC  HL
      advance (5)
      #1919
      #instruction: RET
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := updateBit((a3 >> 01),7,a3[0]);
      H := 20;
      L := E8;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagCY := a3[0];
      jump ((a11,a9));
    }

1674:

    #1674
    #instruction: LD   (HL),00
    M[(H,L)] := 00;
    advance (10)
    #1676
    #instruction: CALL 09CA
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := 79;
    #return-to: 1679
    advance (17)
    #09CA
    #instruction: LD   A,(2067)
    let:8 a3 = M[2067] in
    advance (13)
    #09CD
    #instruction: RRCA
    advance (4)
    #09CE
    #instruction: LD   HL,20F8
    advance (10)
    #09D1
    #instruction: RET  CY
    if (a3[0]) {
      let:16 a4 = (1 + a2) in
      let:8 a5 = M[a2] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (11)
      A := updateBit((a3 >> 01),7,a3[0]);
      H := 20;
      L := F8;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagCY := a3[0];
      jump ((a7,a5));
    } else {
      advance (5)
      #09D2
      #instruction: LD   HL,20FC
      advance (10)
      #09D5
      #instruction: RET
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := updateBit((a3 >> 01),7,a3[0]);
      H := 20;
      L := FC;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagCY := a3[0];
      jump ((a11,a9));
    }

1679:

    #1679
    #instruction: INC  HL
    let:16 a1 = (1 + (H,L)) in
    advance (5)
    #167A
    #instruction: LD   DE,20F5
    advance (10)
    #167D
    #instruction: LD   A,(DE)
    let:8 a2 = M[20F5] in
    advance (7)
    #167E
    #instruction: CP   (HL)
    let:8 a3 = M[a1] in
    let:16 a4 = addWithCarry(!false,a2,~a3) in
    let:8 a5 = (a2 & 0F) in
    let:8 a6 = (~a3 & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #167F
    #instruction: DEC  DE
    advance (5)
    #1680
    #instruction: DEC  HL
    let:16 a8 = (-1 + a1) in
    advance (5)
    #1681
    #instruction: LD   A,(DE)
    let:8 a9 = M[20F4] in
    advance (7)
    #1682
    #instruction: JP   Z,168B
    if (is_zero(a4[7:0])) {
      advance (10)
      #168B
      #instruction: CP   (HL)
      let:8 a10 = M[a8] in
      let:16 a11 = addWithCarry(!false,a9,~a10) in
      let:8 a12 = (a9 & 0F) in
      let:8 a13 = (~a10 & 0F) in
      let:16 a14 = addWithCarry(!false,a12,a13) in
      advance (7)
      #168C
      #instruction: JP   NC,1698
      if (!!a11[15:8][0]) {
        advance (10)
        A := a9;
        D := 20;
        E := F4;
        H := a8[15:8];
        L := a8[7:0];
        FlagS := a11[7:0][7];
        FlagZ := is_zero(a11[7:0]);
        FlagA := a14[7:0][4];
        FlagP := parity(a11[7:0]);
        FlagCY := !a11[15:8][0];
        jump (1698);
      } else {
        advance (10)
        #168F
        #instruction: LD   A,(HL)
        let:8 a15 = M[a8] in
        advance (7)
        #1690
        #instruction: LD   (DE),A
        M[20F4] := a15;
        advance (7)
        #1691
        #instruction: INC  DE
        advance (5)
        #1692
        #instruction: INC  HL
        let:16 a16 = (1 + a8) in
        advance (5)
        #1693
        #instruction: LD   A,(HL)
        let:8 a17 = M[a16] in
        advance (7)
        #1694
        #instruction: LD   (DE),A
        M[20F5] := a17;
        advance (7)
        #1695
        #instruction: CALL 1950
        let:16 a18 = (-1 + (SPH,SPL)) in
        M[a18] := 16;
        let:16 a19 = (-1 + a18) in
        M[a19] := 98;
        #return-to: 1698
        advance (17)
        #1950
        #instruction: LD   HL,20F4
        advance (10)
        #1953
        #instruction: JP   1931
        advance (10)
        #1931
        #instruction: LD   E,(HL)
        let:8 a20 = M[20F4] in
        advance (7)
        #1932
        #instruction: INC  HL
        advance (5)
        #1933
        #instruction: LD   D,(HL)
        let:8 a21 = M[20F5] in
        advance (7)
        #1934
        #instruction: INC  HL
        advance (5)
        #1935
        #instruction: LD   A,(HL)
        let:8 a22 = M[20F6] in
        advance (7)
        #1936
        #instruction: INC  HL
        advance (5)
        #1937
        #instruction: LD   H,(HL)
        let:8 a23 = M[20F7] in
        advance (7)
        #1938
        #instruction: LD   L,A
        advance (5)
        #1939
        #instruction: JP   09AD
        advance (10)
        #09AD
        #instruction: LD   A,D
        advance (5)
        #09AE
        #instruction: CALL 09B2
        let:16 a24 = (-1 + a19) in
        M[a24] := 09;
        let:16 a25 = (-1 + a24) in
        M[a25] := B1;
        #return-to: 09B1
        advance (17)
        #09B2
        #instruction: PUSH DE
        let:16 a26 = (-1 + a25) in
        M[a26] := a21;
        let:16 a27 = (-1 + a26) in
        M[a27] := a20;
        advance (11)
        #09B3
        #instruction: PUSH PSW
        let:16 a28 = (-1 + a27) in
        M[a28] := a21;
        let:16 a29 = (-1 + a28) in
        M[a29] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a11[7:0][7]),6,is_zero(a11[7:0])),4,a14[7:0][4]),2,parity(a11[7:0])),0,!a11[15:8][0]);
        advance (11)
        #09B4
        #instruction: RRCA
        advance (4)
        #09B5
        #instruction: RRCA
        advance (4)
        #09B6
        #instruction: RRCA
        advance (4)
        #09B7
        #instruction: RRCA
        advance (4)
        #09B8
        #instruction: AND  0F
        let:8 a30 = (0F & updateBit((updateBit((updateBit((updateBit((a21 >> 01),7,a21[0]) >> 01),7,updateBit((a21 >> 01),7,a21[0])[0]) >> 01),7,updateBit((updateBit((a21 >> 01),7,a21[0]) >> 01),7,updateBit((a21 >> 01),7,a21[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a21 >> 01),7,a21[0]) >> 01),7,updateBit((a21 >> 01),7,a21[0])[0]) >> 01),7,updateBit((updateBit((a21 >> 01),7,a21[0]) >> 01),7,updateBit((a21 >> 01),7,a21[0])[0])[0])[0])) in
        let:8 a31 = (0F | updateBit((updateBit((updateBit((updateBit((a21 >> 01),7,a21[0]) >> 01),7,updateBit((a21 >> 01),7,a21[0])[0]) >> 01),7,updateBit((updateBit((a21 >> 01),7,a21[0]) >> 01),7,updateBit((a21 >> 01),7,a21[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a21 >> 01),7,a21[0]) >> 01),7,updateBit((a21 >> 01),7,a21[0])[0]) >> 01),7,updateBit((updateBit((a21 >> 01),7,a21[0]) >> 01),7,updateBit((a21 >> 01),7,a21[0])[0])[0])[0])) in
        advance (7)
        #09BA
        #instruction: CALL 09C5
        let:16 a32 = (-1 + a29) in
        M[a32] := 09;
        let:16 a33 = (-1 + a32) in
        M[a33] := BD;
        #return-to: 09BD
        advance (17)
        #09C5
        #instruction: ADD  1A
        let:16 a34 = addWithCarry(false,1A,a30) in
        let:8 a35 = (1A & 0F) in
        let:8 a36 = (a30 & 0F) in
        let:16 a37 = addWithCarry(false,a35,a36) in
        advance (7)
        #09C7
        #instruction: JP   08FF
        advance (10)
        #08FF
        #instruction: LD   DE,1E00
        advance (10)
        #0902
        #instruction: PUSH HL
        let:16 a38 = (-1 + a33) in
        M[a38] := a23;
        let:16 a39 = (-1 + a38) in
        M[a39] := a22;
        advance (11)
        #0903
        #instruction: LD   H,00
        advance (7)
        #0905
        #instruction: LD   L,A
        advance (5)
        #0906
        #instruction: ADD  HL,HL
        let:17 a40 = add17((00,a34[7:0]),(00,a34[7:0])) in
        advance (10)
        #0907
        #instruction: ADD  HL,HL
        let:17 a41 = add17(a40[15:0],a40[15:0]) in
        advance (10)
        #0908
        #instruction: ADD  HL,HL
        let:17 a42 = add17(a41[15:0],a41[15:0]) in
        advance (10)
        #0909
        #instruction: ADD  HL,DE
        let:17 a43 = add17(1E00,a42[15:0]) in
        advance (10)
        #090A
        #instruction: EX   DE,HL
        advance (4)
        #090B
        #instruction: POP  HL
        let:16 a44 = (1 + a39) in
        let:8 a45 = M[a39] in
        let:16 a46 = (1 + a44) in
        let:8 a47 = M[a44] in
        advance (10)
        #090C
        #instruction: LD   B,08
        advance (7)
        #090E
        #instruction: OUT  06
        advance (10)
        #0910
        #instruction: JP   1439
        advance (10)
        #1439
        #instruction: PUSH BC
        let:16 a48 = (-1 + a46) in
        M[a48] := 08;
        let:16 a49 = (-1 + a48) in
        M[a49] := C;
        advance (11)
        #143A
        #instruction: LD   A,(DE)
        let:8 a50 = M[a43[15:0]] in
        advance (7)
        #143B
        #instruction: LD   (HL),A
        M[(a47,a45)] := a50;
        advance (7)
        #143C
        #instruction: INC  DE
        let:16 a51 = (1 + a43[15:0]) in
        advance (5)
        #143D
        #instruction: LD   BC,0020
        advance (10)
        #1440
        #instruction: ADD  HL,BC
        let:17 a52 = add17(0020,(a47,a45)) in
        advance (10)
        #1441
        #instruction: POP  BC
        let:16 a53 = (1 + a49) in
        let:8 a54 = M[a49] in
        let:16 a55 = (1 + a53) in
        let:8 a56 = M[a53] in
        advance (10)
        #1442
        #instruction: DEC  B
        let:16 a57 = addWithCarry(!true,a56,~00) in
        let:8 a58 = (a56 & 0F) in
        let:8 a59 = (~00 & 0F) in
        let:16 a60 = addWithCarry(!true,a58,a59) in
        advance (5)
        #1443
        #instruction: JP   NZ,1439
        if (!is_zero(a57[7:0])) {
          advance (10)
          A := a50;
          B := a57[7:0];
          C := a54;
          D := a51[15:8];
          E := a51[7:0];
          H := a52[15:0][15:8];
          L := a52[15:0][7:0];
          SPH := a55[15:8];
          SPL := a55[7:0];
          FlagS := a57[7:0][7];
          FlagZ := is_zero(a57[7:0]);
          FlagA := a60[7:0][4];
          FlagP := parity(a57[7:0]);
          FlagCY := a52[16];
          jump (1439);
        } else {
          advance (10)
          #1446
          #instruction: RET
          let:16 a61 = (1 + a55) in
          let:8 a62 = M[a55] in
          let:16 a63 = (1 + a61) in
          let:8 a64 = M[a61] in
          advance (10)
          A := a50;
          B := a57[7:0];
          C := a54;
          D := a51[15:8];
          E := a51[7:0];
          H := a52[15:0][15:8];
          L := a52[15:0][7:0];
          SPH := a63[15:8];
          SPL := a63[7:0];
          FlagS := a57[7:0][7];
          FlagZ := is_zero(a57[7:0]);
          FlagA := a60[7:0][4];
          FlagP := parity(a57[7:0]);
          FlagCY := a52[16];
          jump ((a64,a62));
        }
      }
    } else {
      advance (10)
      #1685
      #instruction: JP   NC,1698
      if (!!a4[15:8][0]) {
        advance (10)
        A := a9;
        D := 20;
        E := F4;
        H := a8[15:8];
        L := a8[7:0];
        FlagS := a4[7:0][7];
        FlagZ := is_zero(a4[7:0]);
        FlagA := a7[7:0][4];
        FlagP := parity(a4[7:0]);
        FlagCY := !a4[15:8][0];
        jump (1698);
      } else {
        advance (10)
        #1688
        #instruction: JP   168F
        advance (10)
        #168F
        #instruction: LD   A,(HL)
        let:8 a65 = M[a8] in
        advance (7)
        #1690
        #instruction: LD   (DE),A
        M[20F4] := a65;
        advance (7)
        #1691
        #instruction: INC  DE
        advance (5)
        #1692
        #instruction: INC  HL
        let:16 a66 = (1 + a8) in
        advance (5)
        #1693
        #instruction: LD   A,(HL)
        let:8 a67 = M[a66] in
        advance (7)
        #1694
        #instruction: LD   (DE),A
        M[20F5] := a67;
        advance (7)
        #1695
        #instruction: CALL 1950
        let:16 a68 = (-1 + (SPH,SPL)) in
        M[a68] := 16;
        let:16 a69 = (-1 + a68) in
        M[a69] := 98;
        #return-to: 1698
        advance (17)
        #1950
        #instruction: LD   HL,20F4
        advance (10)
        #1953
        #instruction: JP   1931
        advance (10)
        #1931
        #instruction: LD   E,(HL)
        let:8 a70 = M[20F4] in
        advance (7)
        #1932
        #instruction: INC  HL
        advance (5)
        #1933
        #instruction: LD   D,(HL)
        let:8 a71 = M[20F5] in
        advance (7)
        #1934
        #instruction: INC  HL
        advance (5)
        #1935
        #instruction: LD   A,(HL)
        let:8 a72 = M[20F6] in
        advance (7)
        #1936
        #instruction: INC  HL
        advance (5)
        #1937
        #instruction: LD   H,(HL)
        let:8 a73 = M[20F7] in
        advance (7)
        #1938
        #instruction: LD   L,A
        advance (5)
        #1939
        #instruction: JP   09AD
        advance (10)
        #09AD
        #instruction: LD   A,D
        advance (5)
        #09AE
        #instruction: CALL 09B2
        let:16 a74 = (-1 + a69) in
        M[a74] := 09;
        let:16 a75 = (-1 + a74) in
        M[a75] := B1;
        #return-to: 09B1
        advance (17)
        #09B2
        #instruction: PUSH DE
        let:16 a76 = (-1 + a75) in
        M[a76] := a71;
        let:16 a77 = (-1 + a76) in
        M[a77] := a70;
        advance (11)
        #09B3
        #instruction: PUSH PSW
        let:16 a78 = (-1 + a77) in
        M[a78] := a71;
        let:16 a79 = (-1 + a78) in
        M[a79] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a4[7:0][7]),6,is_zero(a4[7:0])),4,a7[7:0][4]),2,parity(a4[7:0])),0,!a4[15:8][0]);
        advance (11)
        #09B4
        #instruction: RRCA
        advance (4)
        #09B5
        #instruction: RRCA
        advance (4)
        #09B6
        #instruction: RRCA
        advance (4)
        #09B7
        #instruction: RRCA
        advance (4)
        #09B8
        #instruction: AND  0F
        let:8 a80 = (0F & updateBit((updateBit((updateBit((updateBit((a71 >> 01),7,a71[0]) >> 01),7,updateBit((a71 >> 01),7,a71[0])[0]) >> 01),7,updateBit((updateBit((a71 >> 01),7,a71[0]) >> 01),7,updateBit((a71 >> 01),7,a71[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a71 >> 01),7,a71[0]) >> 01),7,updateBit((a71 >> 01),7,a71[0])[0]) >> 01),7,updateBit((updateBit((a71 >> 01),7,a71[0]) >> 01),7,updateBit((a71 >> 01),7,a71[0])[0])[0])[0])) in
        let:8 a81 = (0F | updateBit((updateBit((updateBit((updateBit((a71 >> 01),7,a71[0]) >> 01),7,updateBit((a71 >> 01),7,a71[0])[0]) >> 01),7,updateBit((updateBit((a71 >> 01),7,a71[0]) >> 01),7,updateBit((a71 >> 01),7,a71[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a71 >> 01),7,a71[0]) >> 01),7,updateBit((a71 >> 01),7,a71[0])[0]) >> 01),7,updateBit((updateBit((a71 >> 01),7,a71[0]) >> 01),7,updateBit((a71 >> 01),7,a71[0])[0])[0])[0])) in
        advance (7)
        #09BA
        #instruction: CALL 09C5
        let:16 a82 = (-1 + a79) in
        M[a82] := 09;
        let:16 a83 = (-1 + a82) in
        M[a83] := BD;
        #return-to: 09BD
        advance (17)
        #09C5
        #instruction: ADD  1A
        let:16 a84 = addWithCarry(false,1A,a80) in
        let:8 a85 = (1A & 0F) in
        let:8 a86 = (a80 & 0F) in
        let:16 a87 = addWithCarry(false,a85,a86) in
        advance (7)
        #09C7
        #instruction: JP   08FF
        advance (10)
        #08FF
        #instruction: LD   DE,1E00
        advance (10)
        #0902
        #instruction: PUSH HL
        let:16 a88 = (-1 + a83) in
        M[a88] := a73;
        let:16 a89 = (-1 + a88) in
        M[a89] := a72;
        advance (11)
        #0903
        #instruction: LD   H,00
        advance (7)
        #0905
        #instruction: LD   L,A
        advance (5)
        #0906
        #instruction: ADD  HL,HL
        let:17 a90 = add17((00,a84[7:0]),(00,a84[7:0])) in
        advance (10)
        #0907
        #instruction: ADD  HL,HL
        let:17 a91 = add17(a90[15:0],a90[15:0]) in
        advance (10)
        #0908
        #instruction: ADD  HL,HL
        let:17 a92 = add17(a91[15:0],a91[15:0]) in
        advance (10)
        #0909
        #instruction: ADD  HL,DE
        let:17 a93 = add17(1E00,a92[15:0]) in
        advance (10)
        #090A
        #instruction: EX   DE,HL
        advance (4)
        #090B
        #instruction: POP  HL
        let:16 a94 = (1 + a89) in
        let:8 a95 = M[a89] in
        let:16 a96 = (1 + a94) in
        let:8 a97 = M[a94] in
        advance (10)
        #090C
        #instruction: LD   B,08
        advance (7)
        #090E
        #instruction: OUT  06
        advance (10)
        #0910
        #instruction: JP   1439
        advance (10)
        #1439
        #instruction: PUSH BC
        let:16 a98 = (-1 + a96) in
        M[a98] := 08;
        let:16 a99 = (-1 + a98) in
        M[a99] := C;
        advance (11)
        #143A
        #instruction: LD   A,(DE)
        let:8 a100 = M[a93[15:0]] in
        advance (7)
        #143B
        #instruction: LD   (HL),A
        M[(a97,a95)] := a100;
        advance (7)
        #143C
        #instruction: INC  DE
        let:16 a101 = (1 + a93[15:0]) in
        advance (5)
        #143D
        #instruction: LD   BC,0020
        advance (10)
        #1440
        #instruction: ADD  HL,BC
        let:17 a102 = add17(0020,(a97,a95)) in
        advance (10)
        #1441
        #instruction: POP  BC
        let:16 a103 = (1 + a99) in
        let:8 a104 = M[a99] in
        let:16 a105 = (1 + a103) in
        let:8 a106 = M[a103] in
        advance (10)
        #1442
        #instruction: DEC  B
        let:16 a107 = addWithCarry(!true,a106,~00) in
        let:8 a108 = (a106 & 0F) in
        let:8 a109 = (~00 & 0F) in
        let:16 a110 = addWithCarry(!true,a108,a109) in
        advance (5)
        #1443
        #instruction: JP   NZ,1439
        if (!is_zero(a107[7:0])) {
          advance (10)
          A := a100;
          B := a107[7:0];
          C := a104;
          D := a101[15:8];
          E := a101[7:0];
          H := a102[15:0][15:8];
          L := a102[15:0][7:0];
          SPH := a105[15:8];
          SPL := a105[7:0];
          FlagS := a107[7:0][7];
          FlagZ := is_zero(a107[7:0]);
          FlagA := a110[7:0][4];
          FlagP := parity(a107[7:0]);
          FlagCY := a102[16];
          jump (1439);
        } else {
          advance (10)
          #1446
          #instruction: RET
          let:16 a111 = (1 + a105) in
          let:8 a112 = M[a105] in
          let:16 a113 = (1 + a111) in
          let:8 a114 = M[a111] in
          advance (10)
          A := a100;
          B := a107[7:0];
          C := a104;
          D := a101[15:8];
          E := a101[7:0];
          H := a102[15:0][15:8];
          L := a102[15:0][7:0];
          SPH := a113[15:8];
          SPL := a113[7:0];
          FlagS := a107[7:0][7];
          FlagZ := is_zero(a107[7:0]);
          FlagA := a110[7:0][4];
          FlagP := parity(a107[7:0]);
          FlagCY := a102[16];
          jump ((a114,a112));
        }
      }
    }

1698:

    #1698
    #instruction: LD   A,(20CE)
    let:8 a1 = M[20CE] in
    advance (13)
    #169B
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #169C
    #instruction: JP   Z,16C9
    if (is_zero(a2)) {
      advance (10)
      #16C9
      #instruction: LD   HL,2D18
      advance (10)
      #16CC
      #instruction: LD   DE,1AA6
      advance (10)
      #16CF
      #instruction: LD   C,0A
      advance (7)
      #16D1
      #instruction: CALL 0A93
      let:16 a4 = (-1 + (SPH,SPL)) in
      M[a4] := 16;
      let:16 a5 = (-1 + a4) in
      M[a5] := D4;
      #return-to: 16D4
      advance (17)
      #0A93
      #instruction: PUSH DE
      let:16 a6 = (-1 + a5) in
      M[a6] := 1A;
      let:16 a7 = (-1 + a6) in
      M[a7] := A6;
      advance (11)
      #0A94
      #instruction: LD   A,(DE)
      advance (7)
      #0A95
      #instruction: CALL 08FF
      let:16 a8 = (-1 + a7) in
      M[a8] := 0A;
      let:16 a9 = (-1 + a8) in
      M[a9] := 98;
      #return-to: 0A98
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a10 = (-1 + a9) in
      M[a10] := 2D;
      let:16 a11 = (-1 + a10) in
      M[a11] := 18;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a12 = add17(0006,0006) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a13 = add17(a12[15:0],a12[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a14 = add17(a13[15:0],a13[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a15 = add17(1E00,a14[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a16 = (1 + a11) in
      let:8 a17 = M[a11] in
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a20 = (-1 + a18) in
      M[a20] := 08;
      let:16 a21 = (-1 + a20) in
      M[a21] := 0A;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a22 = M[a15[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a19,a17)] := a22;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a23 = (1 + a15[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a24 = add17(0020,(a19,a17)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a25 = (1 + a21) in
      let:8 a26 = M[a21] in
      let:16 a27 = (1 + a25) in
      let:8 a28 = M[a25] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a29 = addWithCarry(!true,a28,~00) in
      let:8 a30 = (a28 & 0F) in
      let:8 a31 = (~00 & 0F) in
      let:16 a32 = addWithCarry(!true,a30,a31) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a29[7:0])) {
        advance (10)
        A := a22;
        B := a29[7:0];
        C := a26;
        D := a23[15:8];
        E := a23[7:0];
        H := a24[15:0][15:8];
        L := a24[15:0][7:0];
        SPH := a27[15:8];
        SPL := a27[7:0];
        FlagS := a29[7:0][7];
        FlagZ := is_zero(a29[7:0]);
        FlagA := a32[7:0][4];
        FlagP := parity(a29[7:0]);
        FlagCY := a24[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a33 = (1 + a27) in
        let:8 a34 = M[a27] in
        let:16 a35 = (1 + a33) in
        let:8 a36 = M[a33] in
        advance (10)
        A := a22;
        B := a29[7:0];
        C := a26;
        D := a23[15:8];
        E := a23[7:0];
        H := a24[15:0][15:8];
        L := a24[15:0][7:0];
        SPH := a35[15:8];
        SPL := a35[7:0];
        FlagS := a29[7:0][7];
        FlagZ := is_zero(a29[7:0]);
        FlagA := a32[7:0][4];
        FlagP := parity(a29[7:0]);
        FlagCY := a24[16];
        jump ((a36,a34));
      }
    } else {
      advance (10)
      #169F
      #instruction: LD   HL,2803
      advance (10)
      #16A2
      #instruction: LD   DE,1AA6
      advance (10)
      #16A5
      #instruction: LD   C,14
      advance (7)
      #16A7
      #instruction: CALL 0A93
      let:16 a37 = (-1 + (SPH,SPL)) in
      M[a37] := 16;
      let:16 a38 = (-1 + a37) in
      M[a38] := AA;
      #return-to: 16AA
      advance (17)
      #0A93
      #instruction: PUSH DE
      let:16 a39 = (-1 + a38) in
      M[a39] := 1A;
      let:16 a40 = (-1 + a39) in
      M[a40] := A6;
      advance (11)
      #0A94
      #instruction: LD   A,(DE)
      advance (7)
      #0A95
      #instruction: CALL 08FF
      let:16 a41 = (-1 + a40) in
      M[a41] := 0A;
      let:16 a42 = (-1 + a41) in
      M[a42] := 98;
      #return-to: 0A98
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a43 = (-1 + a42) in
      M[a43] := 28;
      let:16 a44 = (-1 + a43) in
      M[a44] := 03;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a45 = add17(0006,0006) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a46 = add17(a45[15:0],a45[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a47 = add17(a46[15:0],a46[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a48 = add17(1E00,a47[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a49 = (1 + a44) in
      let:8 a50 = M[a44] in
      let:16 a51 = (1 + a49) in
      let:8 a52 = M[a49] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a53 = (-1 + a51) in
      M[a53] := 08;
      let:16 a54 = (-1 + a53) in
      M[a54] := 14;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a55 = M[a48[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a52,a50)] := a55;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a56 = (1 + a48[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a57 = add17(0020,(a52,a50)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a58 = (1 + a54) in
      let:8 a59 = M[a54] in
      let:16 a60 = (1 + a58) in
      let:8 a61 = M[a58] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a62 = addWithCarry(!true,a61,~00) in
      let:8 a63 = (a61 & 0F) in
      let:8 a64 = (~00 & 0F) in
      let:16 a65 = addWithCarry(!true,a63,a64) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a62[7:0])) {
        advance (10)
        A := a55;
        B := a62[7:0];
        C := a59;
        D := a56[15:8];
        E := a56[7:0];
        H := a57[15:0][15:8];
        L := a57[15:0][7:0];
        SPH := a60[15:8];
        SPL := a60[7:0];
        FlagS := a62[7:0][7];
        FlagZ := is_zero(a62[7:0]);
        FlagA := a65[7:0][4];
        FlagP := parity(a62[7:0]);
        FlagCY := a57[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a66 = (1 + a60) in
        let:8 a67 = M[a60] in
        let:16 a68 = (1 + a66) in
        let:8 a69 = M[a66] in
        advance (10)
        A := a55;
        B := a62[7:0];
        C := a59;
        D := a56[15:8];
        E := a56[7:0];
        H := a57[15:0][15:8];
        L := a57[15:0][7:0];
        SPH := a68[15:8];
        SPL := a68[7:0];
        FlagS := a62[7:0][7];
        FlagZ := is_zero(a62[7:0]);
        FlagA := a65[7:0][4];
        FlagP := parity(a62[7:0]);
        FlagCY := a57[16];
        jump ((a69,a67));
      }
    }

16AA:

    #16AA
    #instruction: DEC  H
    let:16 a1 = addWithCarry(!true,H,~00) in
    let:8 a2 = (H & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    advance (5)
    #16AB
    #instruction: DEC  H
    let:16 a5 = addWithCarry(!true,a1[7:0],~00) in
    let:8 a6 = (a1[7:0] & 0F) in
    let:8 a7 = (~00 & 0F) in
    let:16 a8 = addWithCarry(!true,a6,a7) in
    advance (5)
    #16AC
    #instruction: LD   B,1B
    advance (7)
    #16AE
    #instruction: LD   A,(2067)
    let:8 a9 = M[2067] in
    advance (13)
    #16B1
    #instruction: RRCA
    advance (4)
    #16B2
    #instruction: JP   CY,16B7
    if (a9[0]) {
      advance (10)
      #16B7
      #instruction: LD   A,B
      advance (5)
      #16B8
      #instruction: CALL 08FF
      let:16 a10 = (-1 + (SPH,SPL)) in
      M[a10] := 16;
      let:16 a11 = (-1 + a10) in
      M[a11] := BB;
      #return-to: 16BB
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a12 = (-1 + a11) in
      M[a12] := a5[7:0];
      let:16 a13 = (-1 + a12) in
      M[a13] := L;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a14 = add17(001B,001B) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a15 = add17(a14[15:0],a14[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a16 = add17(a15[15:0],a15[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a17 = add17(1E00,a16[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a18 = (1 + a13) in
      let:8 a19 = M[a13] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a22 = (-1 + a20) in
      M[a22] := 08;
      let:16 a23 = (-1 + a22) in
      M[a23] := C;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a24 = M[a17[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a21,a19)] := a24;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a25 = (1 + a17[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a26 = add17(0020,(a21,a19)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a27 = (1 + a23) in
      let:8 a28 = M[a23] in
      let:16 a29 = (1 + a27) in
      let:8 a30 = M[a27] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a31 = addWithCarry(!true,a30,~00) in
      let:8 a32 = (a30 & 0F) in
      let:8 a33 = (~00 & 0F) in
      let:16 a34 = addWithCarry(!true,a32,a33) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a31[7:0])) {
        advance (10)
        A := a24;
        B := a31[7:0];
        C := a28;
        D := a25[15:8];
        E := a25[7:0];
        H := a26[15:0][15:8];
        L := a26[15:0][7:0];
        SPH := a29[15:8];
        SPL := a29[7:0];
        FlagS := a31[7:0][7];
        FlagZ := is_zero(a31[7:0]);
        FlagA := a34[7:0][4];
        FlagP := parity(a31[7:0]);
        FlagCY := a26[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a35 = (1 + a29) in
        let:8 a36 = M[a29] in
        let:16 a37 = (1 + a35) in
        let:8 a38 = M[a35] in
        advance (10)
        A := a24;
        B := a31[7:0];
        C := a28;
        D := a25[15:8];
        E := a25[7:0];
        H := a26[15:0][15:8];
        L := a26[15:0][7:0];
        SPH := a37[15:8];
        SPL := a37[7:0];
        FlagS := a31[7:0][7];
        FlagZ := is_zero(a31[7:0]);
        FlagA := a34[7:0][4];
        FlagP := parity(a31[7:0]);
        FlagCY := a26[16];
        jump ((a38,a36));
      }
    } else {
      advance (10)
      #16B5
      #instruction: LD   B,1C
      advance (7)
      #16B7
      #instruction: LD   A,B
      advance (5)
      #16B8
      #instruction: CALL 08FF
      let:16 a39 = (-1 + (SPH,SPL)) in
      M[a39] := 16;
      let:16 a40 = (-1 + a39) in
      M[a40] := BB;
      #return-to: 16BB
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a41 = (-1 + a40) in
      M[a41] := a5[7:0];
      let:16 a42 = (-1 + a41) in
      M[a42] := L;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a43 = add17(001C,001C) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a44 = add17(a43[15:0],a43[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a45 = add17(a44[15:0],a44[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a46 = add17(1E00,a45[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a47 = (1 + a42) in
      let:8 a48 = M[a42] in
      let:16 a49 = (1 + a47) in
      let:8 a50 = M[a47] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a51 = (-1 + a49) in
      M[a51] := 08;
      let:16 a52 = (-1 + a51) in
      M[a52] := C;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a53 = M[a46[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a50,a48)] := a53;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a54 = (1 + a46[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a55 = add17(0020,(a50,a48)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a56 = (1 + a52) in
      let:8 a57 = M[a52] in
      let:16 a58 = (1 + a56) in
      let:8 a59 = M[a56] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a60 = addWithCarry(!true,a59,~00) in
      let:8 a61 = (a59 & 0F) in
      let:8 a62 = (~00 & 0F) in
      let:16 a63 = addWithCarry(!true,a61,a62) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a60[7:0])) {
        advance (10)
        A := a53;
        B := a60[7:0];
        C := a57;
        D := a54[15:8];
        E := a54[7:0];
        H := a55[15:0][15:8];
        L := a55[15:0][7:0];
        SPH := a58[15:8];
        SPL := a58[7:0];
        FlagS := a60[7:0][7];
        FlagZ := is_zero(a60[7:0]);
        FlagA := a63[7:0][4];
        FlagP := parity(a60[7:0]);
        FlagCY := a55[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a64 = (1 + a58) in
        let:8 a65 = M[a58] in
        let:16 a66 = (1 + a64) in
        let:8 a67 = M[a64] in
        advance (10)
        A := a53;
        B := a60[7:0];
        C := a57;
        D := a54[15:8];
        E := a54[7:0];
        H := a55[15:0][15:8];
        L := a55[15:0][7:0];
        SPH := a66[15:8];
        SPL := a66[7:0];
        FlagS := a60[7:0][7];
        FlagZ := is_zero(a60[7:0]);
        FlagA := a63[7:0][4];
        FlagP := parity(a60[7:0]);
        FlagCY := a55[16];
        jump ((a67,a65));
      }
    }

16BB:

    #16BB
    #instruction: CALL 0AB1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := BE;
    #return-to: 16BE
    advance (17)
    #0AB1
    #instruction: LD   A,40
    advance (7)
    #0AB3
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 40;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

16BE:

    #16BE
    #instruction: CALL 18E7
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := C1;
    #return-to: 16C1
    advance (17)
    #18E7
    #instruction: LD   A,(2067)
    let:8 a3 = M[2067] in
    advance (13)
    #18EA
    #instruction: LD   HL,20E7
    advance (10)
    #18ED
    #instruction: RRCA
    advance (4)
    #18EE
    #instruction: RET  NC
    if (!a3[0]) {
      let:16 a4 = (1 + a2) in
      let:8 a5 = M[a2] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (11)
      A := updateBit((a3 >> 01),7,a3[0]);
      H := 20;
      L := E7;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagCY := a3[0];
      jump ((a7,a5));
    } else {
      advance (5)
      #18EF
      #instruction: INC  HL
      advance (5)
      #18F0
      #instruction: RET
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (10)
      A := updateBit((a3 >> 01),7,a3[0]);
      H := 20;
      L := E8;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagCY := a3[0];
      jump ((a11,a9));
    }

16C1:

    #16C1
    #instruction: LD   A,(HL)
    let:8 a1 = M[(H,L)] in
    advance (7)
    #16C2
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #16C3
    #instruction: JP   Z,16C9
    if (is_zero(a2)) {
      advance (10)
      #16C9
      #instruction: LD   HL,2D18
      advance (10)
      #16CC
      #instruction: LD   DE,1AA6
      advance (10)
      #16CF
      #instruction: LD   C,0A
      advance (7)
      #16D1
      #instruction: CALL 0A93
      let:16 a4 = (-1 + (SPH,SPL)) in
      M[a4] := 16;
      let:16 a5 = (-1 + a4) in
      M[a5] := D4;
      #return-to: 16D4
      advance (17)
      #0A93
      #instruction: PUSH DE
      let:16 a6 = (-1 + a5) in
      M[a6] := 1A;
      let:16 a7 = (-1 + a6) in
      M[a7] := A6;
      advance (11)
      #0A94
      #instruction: LD   A,(DE)
      advance (7)
      #0A95
      #instruction: CALL 08FF
      let:16 a8 = (-1 + a7) in
      M[a8] := 0A;
      let:16 a9 = (-1 + a8) in
      M[a9] := 98;
      #return-to: 0A98
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a10 = (-1 + a9) in
      M[a10] := 2D;
      let:16 a11 = (-1 + a10) in
      M[a11] := 18;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a12 = add17(0006,0006) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a13 = add17(a12[15:0],a12[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a14 = add17(a13[15:0],a13[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a15 = add17(1E00,a14[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a16 = (1 + a11) in
      let:8 a17 = M[a11] in
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a20 = (-1 + a18) in
      M[a20] := 08;
      let:16 a21 = (-1 + a20) in
      M[a21] := 0A;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a22 = M[a15[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a19,a17)] := a22;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a23 = (1 + a15[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a24 = add17(0020,(a19,a17)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a25 = (1 + a21) in
      let:8 a26 = M[a21] in
      let:16 a27 = (1 + a25) in
      let:8 a28 = M[a25] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a29 = addWithCarry(!true,a28,~00) in
      let:8 a30 = (a28 & 0F) in
      let:8 a31 = (~00 & 0F) in
      let:16 a32 = addWithCarry(!true,a30,a31) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a29[7:0])) {
        advance (10)
        A := a22;
        B := a29[7:0];
        C := a26;
        D := a23[15:8];
        E := a23[7:0];
        H := a24[15:0][15:8];
        L := a24[15:0][7:0];
        SPH := a27[15:8];
        SPL := a27[7:0];
        FlagS := a29[7:0][7];
        FlagZ := is_zero(a29[7:0]);
        FlagA := a32[7:0][4];
        FlagP := parity(a29[7:0]);
        FlagCY := a24[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a33 = (1 + a27) in
        let:8 a34 = M[a27] in
        let:16 a35 = (1 + a33) in
        let:8 a36 = M[a33] in
        advance (10)
        A := a22;
        B := a29[7:0];
        C := a26;
        D := a23[15:8];
        E := a23[7:0];
        H := a24[15:0][15:8];
        L := a24[15:0][7:0];
        SPH := a35[15:8];
        SPL := a35[7:0];
        FlagS := a29[7:0][7];
        FlagZ := is_zero(a29[7:0]);
        FlagA := a32[7:0][4];
        FlagP := parity(a29[7:0]);
        FlagCY := a24[16];
        jump ((a36,a34));
      }
    } else {
      advance (10)
      #16C6
      #instruction: JP   02ED
      advance (10)
      #02ED
      #instruction: LD   A,(2067)
      let:8 a37 = M[2067] in
      advance (13)
      #02F0
      #instruction: PUSH PSW
      let:16 a38 = (-1 + (SPH,SPL)) in
      M[a38] := a37;
      let:16 a39 = (-1 + a38) in
      M[a39] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a2[7]),6,is_zero(a2)),4,a3[3]),2,parity(a2)),0,false);
      advance (11)
      #02F1
      #instruction: RRCA
      advance (4)
      #02F2
      #instruction: JP   CY,0332
      if (a37[0]) {
        advance (10)
        #0332
        #instruction: CALL 0209
        let:16 a40 = (-1 + a39) in
        M[a40] := 03;
        let:16 a41 = (-1 + a40) in
        M[a41] := 35;
        #return-to: 0335
        advance (17)
        #0209
        #instruction: LD   A,01
        advance (7)
        #020B
        #instruction: JP   021B
        advance (10)
        #021B
        #instruction: LD   DE,2142
        advance (10)
        #021E
        #instruction: LD   (2081),A
        M[2081] := 01;
        advance (13)
        #0221
        #instruction: LD   BC,1602
        advance (10)
        #0224
        #instruction: LD   HL,2806
        advance (10)
        #0227
        #instruction: LD   A,04
        advance (7)
        #0229
        #instruction: PUSH PSW
        let:16 a42 = (-1 + a41) in
        M[a42] := 04;
        let:16 a43 = (-1 + a42) in
        M[a43] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a2[7]),6,is_zero(a2)),4,a3[3]),2,parity(a2)),0,a37[0]);
        advance (11)
        #022A
        #instruction: PUSH BC
        let:16 a44 = (-1 + a43) in
        M[a44] := 16;
        let:16 a45 = (-1 + a44) in
        M[a45] := 02;
        advance (11)
        #022B
        #instruction: LD   A,(2081)
        let:8 a46 = M[2081] in
        advance (13)
        #022E
        #instruction: AND  A
        let:8 a47 = (a46 & a46) in
        let:8 a48 = (a46 | a46) in
        advance (4)
        #022F
        #instruction: JP   NZ,0242
        if (!is_zero(a47)) {
          advance (10)
          #0242
          #instruction: CALL 147C
          let:16 a49 = (-1 + a45) in
          M[a49] := 02;
          let:16 a50 = (-1 + a49) in
          M[a50] := 45;
          #return-to: 0245
          advance (17)
          #147C
          #instruction: PUSH BC
          let:16 a51 = (-1 + a50) in
          M[a51] := 16;
          let:16 a52 = (-1 + a51) in
          M[a52] := 02;
          advance (11)
          #147D
          #instruction: PUSH HL
          let:16 a53 = (-1 + a52) in
          M[a53] := 28;
          let:16 a54 = (-1 + a53) in
          M[a54] := 06;
          advance (11)
          #147E
          #instruction: LD   A,(HL)
          let:8 a55 = M[2806] in
          advance (7)
          #147F
          #instruction: LD   (DE),A
          M[2142] := a55;
          advance (7)
          #1480
          #instruction: INC  DE
          advance (5)
          #1481
          #instruction: INC  HL
          advance (5)
          #1482
          #instruction: DEC  C
          let:16 a56 = addWithCarry(!true,02,~00) in
          let:8 a57 = (02 & 0F) in
          let:8 a58 = (~00 & 0F) in
          let:16 a59 = addWithCarry(!true,a57,a58) in
          advance (5)
          #1483
          #instruction: JP   NZ,147E
          if (!is_zero(a56[7:0])) {
            advance (10)
            A := a55;
            B := 16;
            C := a56[7:0];
            D := 21;
            E := 43;
            H := 28;
            L := 07;
            SPH := a54[15:8];
            SPL := a54[7:0];
            FlagS := a56[7:0][7];
            FlagZ := is_zero(a56[7:0]);
            FlagA := a59[7:0][4];
            FlagP := parity(a56[7:0]);
            FlagCY := false;
            jump (147E);
          } else {
            advance (10)
            #1486
            #instruction: POP  HL
            let:16 a60 = (1 + a54) in
            let:8 a61 = M[a54] in
            let:16 a62 = (1 + a60) in
            let:8 a63 = M[a60] in
            advance (10)
            #1487
            #instruction: LD   BC,0020
            advance (10)
            #148A
            #instruction: ADD  HL,BC
            let:17 a64 = add17(0020,(a63,a61)) in
            advance (10)
            #148B
            #instruction: POP  BC
            let:16 a65 = (1 + a62) in
            let:8 a66 = M[a62] in
            let:16 a67 = (1 + a65) in
            let:8 a68 = M[a65] in
            advance (10)
            #148C
            #instruction: DEC  B
            let:16 a69 = addWithCarry(!true,a68,~00) in
            let:8 a70 = (a68 & 0F) in
            let:8 a71 = (~00 & 0F) in
            let:16 a72 = addWithCarry(!true,a70,a71) in
            advance (5)
            #148D
            #instruction: JP   NZ,147C
            if (!is_zero(a69[7:0])) {
              advance (10)
              A := a55;
              B := a69[7:0];
              C := a66;
              D := 21;
              E := 43;
              H := a64[15:0][15:8];
              L := a64[15:0][7:0];
              SPH := a67[15:8];
              SPL := a67[7:0];
              FlagS := a69[7:0][7];
              FlagZ := is_zero(a69[7:0]);
              FlagA := a72[7:0][4];
              FlagP := parity(a69[7:0]);
              FlagCY := a64[16];
              jump (147C);
            } else {
              advance (10)
              #1490
              #instruction: RET
              let:16 a73 = (1 + a67) in
              let:8 a74 = M[a67] in
              let:16 a75 = (1 + a73) in
              let:8 a76 = M[a73] in
              advance (10)
              A := a55;
              B := a69[7:0];
              C := a66;
              D := 21;
              E := 43;
              H := a64[15:0][15:8];
              L := a64[15:0][7:0];
              SPH := a75[15:8];
              SPL := a75[7:0];
              FlagS := a69[7:0][7];
              FlagZ := is_zero(a69[7:0]);
              FlagA := a72[7:0][4];
              FlagP := parity(a69[7:0]);
              FlagCY := a64[16];
              jump ((a76,a74));
            }
          }
        } else {
          advance (10)
          #0232
          #instruction: CALL 1A69
          let:16 a77 = (-1 + a45) in
          M[a77] := 02;
          let:16 a78 = (-1 + a77) in
          M[a78] := 35;
          #return-to: 0235
          advance (17)
          #1A69
          #instruction: PUSH BC
          let:16 a79 = (-1 + a78) in
          M[a79] := 16;
          let:16 a80 = (-1 + a79) in
          M[a80] := 02;
          advance (11)
          #1A6A
          #instruction: PUSH HL
          let:16 a81 = (-1 + a80) in
          M[a81] := 28;
          let:16 a82 = (-1 + a81) in
          M[a82] := 06;
          advance (11)
          #1A6B
          #instruction: LD   A,(DE)
          let:8 a83 = M[2142] in
          advance (7)
          #1A6C
          #instruction: OR   (HL)
          let:8 a84 = M[2806] in
          let:8 a85 = (a84 | a83) in
          advance (7)
          #1A6D
          #instruction: LD   (HL),A
          M[2806] := a85;
          advance (7)
          #1A6E
          #instruction: INC  DE
          advance (5)
          #1A6F
          #instruction: INC  HL
          advance (5)
          #1A70
          #instruction: DEC  C
          let:16 a86 = addWithCarry(!true,02,~00) in
          let:8 a87 = (02 & 0F) in
          let:8 a88 = (~00 & 0F) in
          let:16 a89 = addWithCarry(!true,a87,a88) in
          advance (5)
          #1A71
          #instruction: JP   NZ,1A6B
          if (!is_zero(a86[7:0])) {
            advance (10)
            A := a85;
            B := 16;
            C := a86[7:0];
            D := 21;
            E := 43;
            H := 28;
            L := 07;
            SPH := a82[15:8];
            SPL := a82[7:0];
            FlagS := a86[7:0][7];
            FlagZ := is_zero(a86[7:0]);
            FlagA := a89[7:0][4];
            FlagP := parity(a86[7:0]);
            FlagCY := false;
            jump (1A6B);
          } else {
            advance (10)
            #1A74
            #instruction: POP  HL
            let:16 a90 = (1 + a82) in
            let:8 a91 = M[a82] in
            let:16 a92 = (1 + a90) in
            let:8 a93 = M[a90] in
            advance (10)
            #1A75
            #instruction: LD   BC,0020
            advance (10)
            #1A78
            #instruction: ADD  HL,BC
            let:17 a94 = add17(0020,(a93,a91)) in
            advance (10)
            #1A79
            #instruction: POP  BC
            let:16 a95 = (1 + a92) in
            let:8 a96 = M[a92] in
            let:16 a97 = (1 + a95) in
            let:8 a98 = M[a95] in
            advance (10)
            #1A7A
            #instruction: DEC  B
            let:16 a99 = addWithCarry(!true,a98,~00) in
            let:8 a100 = (a98 & 0F) in
            let:8 a101 = (~00 & 0F) in
            let:16 a102 = addWithCarry(!true,a100,a101) in
            advance (5)
            #1A7B
            #instruction: JP   NZ,1A69
            if (!is_zero(a99[7:0])) {
              advance (10)
              A := a85;
              B := a99[7:0];
              C := a96;
              D := 21;
              E := 43;
              H := a94[15:0][15:8];
              L := a94[15:0][7:0];
              SPH := a97[15:8];
              SPL := a97[7:0];
              FlagS := a99[7:0][7];
              FlagZ := is_zero(a99[7:0]);
              FlagA := a102[7:0][4];
              FlagP := parity(a99[7:0]);
              FlagCY := a94[16];
              jump (1A69);
            } else {
              advance (10)
              #1A7E
              #instruction: RET
              let:16 a103 = (1 + a97) in
              let:8 a104 = M[a97] in
              let:16 a105 = (1 + a103) in
              let:8 a106 = M[a103] in
              advance (10)
              A := a85;
              B := a99[7:0];
              C := a96;
              D := 21;
              E := 43;
              H := a94[15:0][15:8];
              L := a94[15:0][7:0];
              SPH := a105[15:8];
              SPL := a105[7:0];
              FlagS := a99[7:0][7];
              FlagZ := is_zero(a99[7:0]);
              FlagA := a102[7:0][4];
              FlagP := parity(a99[7:0]);
              FlagCY := a94[16];
              jump ((a106,a104));
            }
          }
        }
      } else {
        advance (10)
        #02F5
        #instruction: CALL 020E
        let:16 a107 = (-1 + a39) in
        M[a107] := 02;
        let:16 a108 = (-1 + a107) in
        M[a108] := F8;
        #return-to: 02F8
        advance (17)
        #020E
        #instruction: LD   A,01
        advance (7)
        #0210
        #instruction: JP   0214
        advance (10)
        #0214
        #instruction: LD   DE,2242
        advance (10)
        #0217
        #instruction: JP   021E
        advance (10)
        #021E
        #instruction: LD   (2081),A
        M[2081] := 01;
        advance (13)
        #0221
        #instruction: LD   BC,1602
        advance (10)
        #0224
        #instruction: LD   HL,2806
        advance (10)
        #0227
        #instruction: LD   A,04
        advance (7)
        #0229
        #instruction: PUSH PSW
        let:16 a109 = (-1 + a108) in
        M[a109] := 04;
        let:16 a110 = (-1 + a109) in
        M[a110] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a2[7]),6,is_zero(a2)),4,a3[3]),2,parity(a2)),0,a37[0]);
        advance (11)
        #022A
        #instruction: PUSH BC
        let:16 a111 = (-1 + a110) in
        M[a111] := 16;
        let:16 a112 = (-1 + a111) in
        M[a112] := 02;
        advance (11)
        #022B
        #instruction: LD   A,(2081)
        let:8 a113 = M[2081] in
        advance (13)
        #022E
        #instruction: AND  A
        let:8 a114 = (a113 & a113) in
        let:8 a115 = (a113 | a113) in
        advance (4)
        #022F
        #instruction: JP   NZ,0242
        if (!is_zero(a114)) {
          advance (10)
          #0242
          #instruction: CALL 147C
          let:16 a116 = (-1 + a112) in
          M[a116] := 02;
          let:16 a117 = (-1 + a116) in
          M[a117] := 45;
          #return-to: 0245
          advance (17)
          #147C
          #instruction: PUSH BC
          let:16 a118 = (-1 + a117) in
          M[a118] := 16;
          let:16 a119 = (-1 + a118) in
          M[a119] := 02;
          advance (11)
          #147D
          #instruction: PUSH HL
          let:16 a120 = (-1 + a119) in
          M[a120] := 28;
          let:16 a121 = (-1 + a120) in
          M[a121] := 06;
          advance (11)
          #147E
          #instruction: LD   A,(HL)
          let:8 a122 = M[2806] in
          advance (7)
          #147F
          #instruction: LD   (DE),A
          M[2242] := a122;
          advance (7)
          #1480
          #instruction: INC  DE
          advance (5)
          #1481
          #instruction: INC  HL
          advance (5)
          #1482
          #instruction: DEC  C
          let:16 a123 = addWithCarry(!true,02,~00) in
          let:8 a124 = (02 & 0F) in
          let:8 a125 = (~00 & 0F) in
          let:16 a126 = addWithCarry(!true,a124,a125) in
          advance (5)
          #1483
          #instruction: JP   NZ,147E
          if (!is_zero(a123[7:0])) {
            advance (10)
            A := a122;
            B := 16;
            C := a123[7:0];
            D := 22;
            E := 43;
            H := 28;
            L := 07;
            SPH := a121[15:8];
            SPL := a121[7:0];
            FlagS := a123[7:0][7];
            FlagZ := is_zero(a123[7:0]);
            FlagA := a126[7:0][4];
            FlagP := parity(a123[7:0]);
            FlagCY := false;
            jump (147E);
          } else {
            advance (10)
            #1486
            #instruction: POP  HL
            let:16 a127 = (1 + a121) in
            let:8 a128 = M[a121] in
            let:16 a129 = (1 + a127) in
            let:8 a130 = M[a127] in
            advance (10)
            #1487
            #instruction: LD   BC,0020
            advance (10)
            #148A
            #instruction: ADD  HL,BC
            let:17 a131 = add17(0020,(a130,a128)) in
            advance (10)
            #148B
            #instruction: POP  BC
            let:16 a132 = (1 + a129) in
            let:8 a133 = M[a129] in
            let:16 a134 = (1 + a132) in
            let:8 a135 = M[a132] in
            advance (10)
            #148C
            #instruction: DEC  B
            let:16 a136 = addWithCarry(!true,a135,~00) in
            let:8 a137 = (a135 & 0F) in
            let:8 a138 = (~00 & 0F) in
            let:16 a139 = addWithCarry(!true,a137,a138) in
            advance (5)
            #148D
            #instruction: JP   NZ,147C
            if (!is_zero(a136[7:0])) {
              advance (10)
              A := a122;
              B := a136[7:0];
              C := a133;
              D := 22;
              E := 43;
              H := a131[15:0][15:8];
              L := a131[15:0][7:0];
              SPH := a134[15:8];
              SPL := a134[7:0];
              FlagS := a136[7:0][7];
              FlagZ := is_zero(a136[7:0]);
              FlagA := a139[7:0][4];
              FlagP := parity(a136[7:0]);
              FlagCY := a131[16];
              jump (147C);
            } else {
              advance (10)
              #1490
              #instruction: RET
              let:16 a140 = (1 + a134) in
              let:8 a141 = M[a134] in
              let:16 a142 = (1 + a140) in
              let:8 a143 = M[a140] in
              advance (10)
              A := a122;
              B := a136[7:0];
              C := a133;
              D := 22;
              E := 43;
              H := a131[15:0][15:8];
              L := a131[15:0][7:0];
              SPH := a142[15:8];
              SPL := a142[7:0];
              FlagS := a136[7:0][7];
              FlagZ := is_zero(a136[7:0]);
              FlagA := a139[7:0][4];
              FlagP := parity(a136[7:0]);
              FlagCY := a131[16];
              jump ((a143,a141));
            }
          }
        } else {
          advance (10)
          #0232
          #instruction: CALL 1A69
          let:16 a144 = (-1 + a112) in
          M[a144] := 02;
          let:16 a145 = (-1 + a144) in
          M[a145] := 35;
          #return-to: 0235
          advance (17)
          #1A69
          #instruction: PUSH BC
          let:16 a146 = (-1 + a145) in
          M[a146] := 16;
          let:16 a147 = (-1 + a146) in
          M[a147] := 02;
          advance (11)
          #1A6A
          #instruction: PUSH HL
          let:16 a148 = (-1 + a147) in
          M[a148] := 28;
          let:16 a149 = (-1 + a148) in
          M[a149] := 06;
          advance (11)
          #1A6B
          #instruction: LD   A,(DE)
          let:8 a150 = M[2242] in
          advance (7)
          #1A6C
          #instruction: OR   (HL)
          let:8 a151 = M[2806] in
          let:8 a152 = (a151 | a150) in
          advance (7)
          #1A6D
          #instruction: LD   (HL),A
          M[2806] := a152;
          advance (7)
          #1A6E
          #instruction: INC  DE
          advance (5)
          #1A6F
          #instruction: INC  HL
          advance (5)
          #1A70
          #instruction: DEC  C
          let:16 a153 = addWithCarry(!true,02,~00) in
          let:8 a154 = (02 & 0F) in
          let:8 a155 = (~00 & 0F) in
          let:16 a156 = addWithCarry(!true,a154,a155) in
          advance (5)
          #1A71
          #instruction: JP   NZ,1A6B
          if (!is_zero(a153[7:0])) {
            advance (10)
            A := a152;
            B := 16;
            C := a153[7:0];
            D := 22;
            E := 43;
            H := 28;
            L := 07;
            SPH := a149[15:8];
            SPL := a149[7:0];
            FlagS := a153[7:0][7];
            FlagZ := is_zero(a153[7:0]);
            FlagA := a156[7:0][4];
            FlagP := parity(a153[7:0]);
            FlagCY := false;
            jump (1A6B);
          } else {
            advance (10)
            #1A74
            #instruction: POP  HL
            let:16 a157 = (1 + a149) in
            let:8 a158 = M[a149] in
            let:16 a159 = (1 + a157) in
            let:8 a160 = M[a157] in
            advance (10)
            #1A75
            #instruction: LD   BC,0020
            advance (10)
            #1A78
            #instruction: ADD  HL,BC
            let:17 a161 = add17(0020,(a160,a158)) in
            advance (10)
            #1A79
            #instruction: POP  BC
            let:16 a162 = (1 + a159) in
            let:8 a163 = M[a159] in
            let:16 a164 = (1 + a162) in
            let:8 a165 = M[a162] in
            advance (10)
            #1A7A
            #instruction: DEC  B
            let:16 a166 = addWithCarry(!true,a165,~00) in
            let:8 a167 = (a165 & 0F) in
            let:8 a168 = (~00 & 0F) in
            let:16 a169 = addWithCarry(!true,a167,a168) in
            advance (5)
            #1A7B
            #instruction: JP   NZ,1A69
            if (!is_zero(a166[7:0])) {
              advance (10)
              A := a152;
              B := a166[7:0];
              C := a163;
              D := 22;
              E := 43;
              H := a161[15:0][15:8];
              L := a161[15:0][7:0];
              SPH := a164[15:8];
              SPL := a164[7:0];
              FlagS := a166[7:0][7];
              FlagZ := is_zero(a166[7:0]);
              FlagA := a169[7:0][4];
              FlagP := parity(a166[7:0]);
              FlagCY := a161[16];
              jump (1A69);
            } else {
              advance (10)
              #1A7E
              #instruction: RET
              let:16 a170 = (1 + a164) in
              let:8 a171 = M[a164] in
              let:16 a172 = (1 + a170) in
              let:8 a173 = M[a170] in
              advance (10)
              A := a152;
              B := a166[7:0];
              C := a163;
              D := 22;
              E := 43;
              H := a161[15:0][15:8];
              L := a161[15:0][7:0];
              SPH := a172[15:8];
              SPL := a172[7:0];
              FlagS := a166[7:0][7];
              FlagZ := is_zero(a166[7:0]);
              FlagA := a169[7:0][4];
              FlagP := parity(a166[7:0]);
              FlagCY := a161[16];
              jump ((a173,a171));
            }
          }
        }
      }
    }

16D4:

    #16D4
    #instruction: CALL 0AB6
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := D7;
    #return-to: 16D7
    advance (17)
    #0AB6
    #instruction: LD   A,80
    advance (7)
    #0AB8
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 80;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

16D7:

    #16D7
    #instruction: CALL 09D6
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := DA;
    #return-to: 16DA
    advance (17)
    #09D6
    #instruction: LD   HL,2402
    advance (10)
    #09D9
    #instruction: LD   (HL),00
    M[2402] := 00;
    advance (10)
    #09DB
    #instruction: INC  HL
    advance (5)
    #09DC
    #instruction: LD   A,L
    advance (5)
    #09DD
    #instruction: AND  1F
    let:8 a3 = (1F & 03) in
    let:8 a4 = (1F | 03) in
    advance (7)
    #09DF
    #instruction: CP   1C
    let:16 a5 = addWithCarry(!false,a3,~1C) in
    let:8 a6 = (a3 & 0F) in
    let:8 a7 = (~1C & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    advance (7)
    #09E1
    #instruction: JP   CY,09E8
    if (!a5[15:8][0]) {
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a9 = addWithCarry(!false,24,~40) in
      let:8 a10 = (24 & 0F) in
      let:8 a11 = (~40 & 0F) in
      let:16 a12 = addWithCarry(!false,a10,a11) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a9[15:8][0]) {
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a13 = (1 + a2) in
        let:8 a14 = M[a2] in
        let:16 a15 = (1 + a13) in
        let:8 a16 = M[a13] in
        advance (10)
        A := 24;
        H := 24;
        L := 03;
        SPH := a15[15:8];
        SPL := a15[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump ((a16,a14));
      }
    } else {
      advance (10)
      #09E4
      #instruction: LD   DE,0006
      advance (10)
      #09E7
      #instruction: ADD  HL,DE
      let:17 a17 = add17(0006,2403) in
      advance (10)
      #09E8
      #instruction: LD   A,H
      advance (5)
      #09E9
      #instruction: CP   40
      let:16 a18 = addWithCarry(!false,a17[15:0][15:8],~40) in
      let:8 a19 = (a17[15:0][15:8] & 0F) in
      let:8 a20 = (~40 & 0F) in
      let:16 a21 = addWithCarry(!false,a19,a20) in
      advance (7)
      #09EB
      #instruction: JP   CY,09D9
      if (!a18[15:8][0]) {
        advance (10)
        A := a17[15:0][15:8];
        D := 00;
        E := 06;
        H := a17[15:0][15:8];
        L := a17[15:0][7:0];
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := !a18[15:8][0];
        jump (09D9);
      } else {
        advance (10)
        #09EE
        #instruction: RET
        let:16 a22 = (1 + a2) in
        let:8 a23 = M[a2] in
        let:16 a24 = (1 + a22) in
        let:8 a25 = M[a22] in
        advance (10)
        A := a17[15:0][15:8];
        D := 00;
        E := 06;
        H := a17[15:0][15:8];
        L := a17[15:0][7:0];
        SPH := a24[15:8];
        SPL := a24[7:0];
        FlagS := a18[7:0][7];
        FlagZ := is_zero(a18[7:0]);
        FlagA := a21[7:0][4];
        FlagP := parity(a18[7:0]);
        FlagCY := !a18[15:8][0];
        jump ((a25,a23));
      }
    }

16DA:

    #16DA
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #16DB
    #instruction: LD   (20EF),A
    M[20EF] := a1;
    advance (13)
    #16DE
    #instruction: OUT  05
    sound_control(FleetMovement1,a1[0]);
    sound_control(FleetMovement2,a1[1]);
    sound_control(FleetMovement3,a1[2]);
    sound_control(FleetMovement4,a1[3]);
    sound_control(UfoHit,a1[4]);
    advance (10)
    #16E0
    #instruction: CALL 19D1
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 16;
    let:16 a3 = (-1 + a2) in
    M[a3] := E3;
    #return-to: 16E3
    advance (17)
    #19D1
    #instruction: LD   A,01
    advance (7)
    #19D3
    #instruction: LD   (20E9),A
    M[20E9] := 01;
    advance (13)
    #19D6
    #instruction: RET
    let:16 a4 = (1 + a3) in
    let:8 a5 = M[a3] in
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    advance (10)
    A := 01;
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump ((a7,a5));

16E3:

    #16E3
    #instruction: JP   0B89
    advance (10)
    #0B89
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #0B8A
    #instruction: LD   (20C1),A
    M[20C1] := a1;
    advance (13)
    #0B8D
    #instruction: CALL 0AB1
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 0B;
    let:16 a3 = (-1 + a2) in
    M[a3] := 90;
    #return-to: 0B90
    advance (17)
    #0AB1
    #instruction: LD   A,40
    advance (7)
    #0AB3
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 40;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a4 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a5 = (a4 & a4) in
    let:8 a6 = (a4 | a4) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a5)) {
      advance (10)
      A := a5;
      SPH := a3[15:8];
      SPL := a3[7:0];
      FlagS := a5[7];
      FlagZ := is_zero(a5);
      FlagA := a6[3];
      FlagP := parity(a5);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a7 = (1 + a3) in
      let:8 a8 = M[a3] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := a5;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a5[7];
      FlagZ := is_zero(a5);
      FlagA := a6[3];
      FlagP := parity(a5);
      FlagCY := false;
      jump ((a10,a8));
    }

16F1:

    #16F1
    #instruction: LD   B,04
    advance (7)
    #16F3
    #instruction: CALL 18FA
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := F6;
    #return-to: 16F6
    advance (17)
    #18FA
    #instruction: LD   A,(2094)
    let:8 a3 = M[2094] in
    advance (13)
    #18FD
    #instruction: OR   B
    let:8 a4 = (04 | a3) in
    advance (4)
    #18FE
    #instruction: LD   (2094),A
    M[2094] := a4;
    advance (13)
    #1901
    #instruction: OUT  03
    sound_control(Ufo,a4[0]);
    sound_control(Shot,a4[1]);
    sound_control(PlayerDie,a4[2]);
    sound_control(InvaderDie,a4[3]);
    sound_control(ExtraLife,a4[4]);
    advance (10)
    #1903
    #instruction: RET
    let:16 a5 = (1 + a2) in
    let:8 a6 = M[a2] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    A := a4;
    B := 04;
    SPH := a7[15:8];
    SPL := a7[7:0];
    FlagS := a4[7];
    FlagZ := is_zero(a4);
    FlagA := false;
    FlagP := parity(a4);
    FlagCY := false;
    jump ((a8,a6));

16F6:

    #16F6
    #instruction: CALL 0A59
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := F9;
    #return-to: 16F9
    advance (17)
    #0A59
    #instruction: LD   A,(2015)
    let:8 a3 = M[2015] in
    advance (13)
    #0A5C
    #instruction: CP   FF
    let:16 a4 = addWithCarry(!false,a3,~FF) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~FF & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #0A5E
    #instruction: RET
    let:16 a8 = (1 + a2) in
    let:8 a9 = M[a2] in
    let:16 a10 = (1 + a8) in
    let:8 a11 = M[a8] in
    advance (10)
    A := a3;
    SPH := a10[15:8];
    SPL := a10[7:0];
    FlagS := a4[7:0][7];
    FlagZ := is_zero(a4[7:0]);
    FlagA := a7[7:0][4];
    FlagP := parity(a4[7:0]);
    FlagCY := !a4[15:8][0];
    jump ((a11,a9));

16F9:

    #16F9
    #instruction: JP   NZ,16EE
    if (!FlagZ) {
      advance (10)
      #16EE
      #instruction: CALL 14D8
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 16;
      let:16 a2 = (-1 + a1) in
      M[a2] := F1;
      #return-to: 16F1
      advance (17)
      #14D8
      #instruction: LD   A,(2025)
      let:8 a3 = M[2025] in
      advance (13)
      #14DB
      #instruction: CP   05
      let:16 a4 = addWithCarry(!false,a3,~05) in
      let:8 a5 = (a3 & 0F) in
      let:8 a6 = (~05 & 0F) in
      let:16 a7 = addWithCarry(!false,a5,a6) in
      advance (7)
      #14DD
      #instruction: RET  Z
      if (is_zero(a4[7:0])) {
        let:16 a8 = (1 + a2) in
        let:8 a9 = M[a2] in
        let:16 a10 = (1 + a8) in
        let:8 a11 = M[a8] in
        advance (11)
        A := a3;
        SPH := a10[15:8];
        SPL := a10[7:0];
        FlagS := a4[7:0][7];
        FlagZ := is_zero(a4[7:0]);
        FlagA := a7[7:0][4];
        FlagP := parity(a4[7:0]);
        FlagCY := !a4[15:8][0];
        jump ((a11,a9));
      } else {
        advance (5)
        #14DE
        #instruction: CP   02
        let:16 a12 = addWithCarry(!false,a3,~02) in
        let:8 a13 = (a3 & 0F) in
        let:8 a14 = (~02 & 0F) in
        let:16 a15 = addWithCarry(!false,a13,a14) in
        advance (7)
        #14E0
        #instruction: RET  NZ
        if (!is_zero(a12[7:0])) {
          let:16 a16 = (1 + a2) in
          let:8 a17 = M[a2] in
          let:16 a18 = (1 + a16) in
          let:8 a19 = M[a16] in
          advance (11)
          A := a3;
          SPH := a18[15:8];
          SPL := a18[7:0];
          FlagS := a12[7:0][7];
          FlagZ := is_zero(a12[7:0]);
          FlagA := a15[7:0][4];
          FlagP := parity(a12[7:0]);
          FlagCY := !a12[15:8][0];
          jump ((a19,a17));
        } else {
          advance (5)
          #14E1
          #instruction: LD   A,(2029)
          let:8 a20 = M[2029] in
          advance (13)
          #14E4
          #instruction: CP   D8
          let:16 a21 = addWithCarry(!false,a20,~D8) in
          let:8 a22 = (a20 & 0F) in
          let:8 a23 = (~D8 & 0F) in
          let:16 a24 = addWithCarry(!false,a22,a23) in
          advance (7)
          #14E6
          #instruction: LD   B,A
          advance (5)
          #14E7
          #instruction: JP   NC,1530
          if (!!a21[15:8][0]) {
            advance (10)
            #1530
            #instruction: LD   A,03
            advance (7)
            #1532
            #instruction: LD   (2025),A
            M[2025] := 03;
            advance (13)
            #1535
            #instruction: JP   154A
            advance (10)
            #154A
            #instruction: XOR  A
            let:8 a25 = (03 ^ 03) in
            advance (4)
            #154B
            #instruction: LD   (2002),A
            M[2002] := a25;
            advance (13)
            #154E
            #instruction: LD   B,F7
            advance (7)
            #1550
            #instruction: JP   19DC
            advance (10)
            #19DC
            #instruction: LD   A,(2094)
            let:8 a26 = M[2094] in
            advance (13)
            #19DF
            #instruction: AND  B
            let:8 a27 = (F7 & a26) in
            let:8 a28 = (F7 | a26) in
            advance (4)
            #19E0
            #instruction: LD   (2094),A
            M[2094] := a27;
            advance (13)
            #19E3
            #instruction: OUT  03
            sound_control(Ufo,a27[0]);
            sound_control(Shot,a27[1]);
            sound_control(PlayerDie,a27[2]);
            sound_control(InvaderDie,a27[3]);
            sound_control(ExtraLife,a27[4]);
            advance (10)
            #19E5
            #instruction: RET
            let:16 a29 = (1 + a2) in
            let:8 a30 = M[a2] in
            let:16 a31 = (1 + a29) in
            let:8 a32 = M[a29] in
            advance (10)
            A := a27;
            B := F7;
            SPH := a31[15:8];
            SPL := a31[7:0];
            FlagS := a27[7];
            FlagZ := is_zero(a27);
            FlagA := a28[3];
            FlagP := parity(a27);
            FlagCY := false;
            jump ((a32,a30));
          } else {
            advance (10)
            #14EA
            #instruction: LD   A,(2002)
            let:8 a33 = M[2002] in
            advance (13)
            #14ED
            #instruction: AND  A
            let:8 a34 = (a33 & a33) in
            let:8 a35 = (a33 | a33) in
            advance (4)
            #14EE
            #instruction: RET  Z
            if (is_zero(a34)) {
              let:16 a36 = (1 + a2) in
              let:8 a37 = M[a2] in
              let:16 a38 = (1 + a36) in
              let:8 a39 = M[a36] in
              advance (11)
              A := a34;
              B := a20;
              SPH := a38[15:8];
              SPL := a38[7:0];
              FlagS := a34[7];
              FlagZ := is_zero(a34);
              FlagA := a35[3];
              FlagP := parity(a34);
              FlagCY := false;
              jump ((a39,a37));
            } else {
              advance (5)
              #14EF
              #instruction: LD   A,B
              advance (5)
              #14F0
              #instruction: CP   CE
              let:16 a40 = addWithCarry(!false,a20,~CE) in
              let:8 a41 = (a20 & 0F) in
              let:8 a42 = (~CE & 0F) in
              let:16 a43 = addWithCarry(!false,a41,a42) in
              advance (7)
              #14F2
              #instruction: JP   NC,1579
              if (!!a40[15:8][0]) {
                advance (10)
                #1579
                #instruction: LD   A,01
                advance (7)
                #157B
                #instruction: LD   (2085),A
                M[2085] := 01;
                advance (13)
                #157E
                #instruction: JP   1545
                advance (10)
                A := 01;
                B := a20;
                SPH := a2[15:8];
                SPL := a2[7:0];
                FlagS := a40[7:0][7];
                FlagZ := is_zero(a40[7:0]);
                FlagA := a43[7:0][4];
                FlagP := parity(a40[7:0]);
                FlagCY := !a40[15:8][0];
                jump (1545);
              } else {
                advance (10)
                #14F5
                #instruction: ADD  06
                let:16 a44 = addWithCarry(false,06,a20) in
                let:8 a45 = (06 & 0F) in
                let:8 a46 = (a20 & 0F) in
                let:16 a47 = addWithCarry(false,a45,a46) in
                advance (7)
                #14F7
                #instruction: LD   B,A
                advance (5)
                #14F8
                #instruction: LD   A,(2009)
                let:8 a48 = M[2009] in
                advance (13)
                #14FB
                #instruction: CP   90
                let:16 a49 = addWithCarry(!false,a48,~90) in
                let:8 a50 = (a48 & 0F) in
                let:8 a51 = (~90 & 0F) in
                let:16 a52 = addWithCarry(!false,a50,a51) in
                advance (7)
                #14FD
                #instruction: JP   NC,1504
                if (!!a49[15:8][0]) {
                  advance (10)
                  #1504
                  #instruction: LD   L,B
                  advance (5)
                  #1505
                  #instruction: CALL 1562
                  let:16 a53 = (-1 + a2) in
                  M[a53] := 15;
                  let:16 a54 = (-1 + a53) in
                  M[a54] := 08;
                  #return-to: 1508
                  advance (17)
                  #1562
                  #instruction: LD   A,(2009)
                  let:8 a55 = M[2009] in
                  advance (13)
                  #1565
                  #instruction: LD   H,L
                  advance (5)
                  #1566
                  #instruction: CALL 1554
                  let:16 a56 = (-1 + a54) in
                  M[a56] := 15;
                  let:16 a57 = (-1 + a56) in
                  M[a57] := 69;
                  #return-to: 1569
                  advance (17)
                  #1554
                  #instruction: LD   C,00
                  advance (7)
                  #1556
                  #instruction: CP   H
                  let:16 a58 = addWithCarry(!false,a55,~a44[7:0]) in
                  let:8 a59 = (a55 & 0F) in
                  let:8 a60 = (~a44[7:0] & 0F) in
                  let:16 a61 = addWithCarry(!false,a59,a60) in
                  advance (4)
                  #1557
                  #instruction: CALL NC,1590
                  if (!!a58[15:8][0]) {
                    let:16 a62 = (-1 + a57) in
                    M[a62] := 15;
                    let:16 a63 = (-1 + a62) in
                    M[a63] := 5A;
                    #return-to: 155A
                    advance (17)
                    #1590
                    #instruction: INC  C
                    let:16 a64 = addWithCarry(true,00,00) in
                    let:8 a65 = (00 & 0F) in
                    let:8 a66 = (00 & 0F) in
                    let:16 a67 = addWithCarry(true,a65,a66) in
                    advance (5)
                    #1591
                    #instruction: ADD  10
                    let:16 a68 = addWithCarry(false,10,a55) in
                    let:8 a69 = (10 & 0F) in
                    let:8 a70 = (a55 & 0F) in
                    let:16 a71 = addWithCarry(false,a69,a70) in
                    advance (7)
                    #1593
                    #instruction: JP   MI,1590
                    if (a68[7:0][7]) {
                      advance (10)
                      A := a68[7:0];
                      B := a44[7:0];
                      C := a64[7:0];
                      H := a44[7:0];
                      L := a44[7:0];
                      SPH := a63[15:8];
                      SPL := a63[7:0];
                      FlagS := a68[7:0][7];
                      FlagZ := is_zero(a68[7:0]);
                      FlagA := a71[7:0][4];
                      FlagP := parity(a68[7:0]);
                      FlagCY := a68[15:8][0];
                      jump (1590);
                    } else {
                      advance (10)
                      #1596
                      #instruction: RET
                      let:16 a72 = (1 + a63) in
                      let:8 a73 = M[a63] in
                      let:16 a74 = (1 + a72) in
                      let:8 a75 = M[a72] in
                      advance (10)
                      A := a68[7:0];
                      B := a44[7:0];
                      C := a64[7:0];
                      H := a44[7:0];
                      L := a44[7:0];
                      SPH := a74[15:8];
                      SPL := a74[7:0];
                      FlagS := a68[7:0][7];
                      FlagZ := is_zero(a68[7:0]);
                      FlagA := a71[7:0][4];
                      FlagP := parity(a68[7:0]);
                      FlagCY := a68[15:8][0];
                      jump ((a75,a73));
                    }
                  } else {
                    advance (11)
                    A := a55;
                    B := a44[7:0];
                    C := 00;
                    H := a44[7:0];
                    L := a44[7:0];
                    SPH := a57[15:8];
                    SPL := a57[7:0];
                    FlagS := a58[7:0][7];
                    FlagZ := is_zero(a58[7:0]);
                    FlagA := a61[7:0][4];
                    FlagP := parity(a58[7:0]);
                    FlagCY := !a58[15:8][0];
                    jump (155A);
                  }
                } else {
                  advance (10)
                  #1500
                  #instruction: CP   B
                  let:16 a76 = addWithCarry(!false,a48,~a44[7:0]) in
                  let:8 a77 = (a48 & 0F) in
                  let:8 a78 = (~a44[7:0] & 0F) in
                  let:16 a79 = addWithCarry(!false,a77,a78) in
                  advance (4)
                  #1501
                  #instruction: JP   NC,1530
                  if (!!a76[15:8][0]) {
                    advance (10)
                    #1530
                    #instruction: LD   A,03
                    advance (7)
                    #1532
                    #instruction: LD   (2025),A
                    M[2025] := 03;
                    advance (13)
                    #1535
                    #instruction: JP   154A
                    advance (10)
                    #154A
                    #instruction: XOR  A
                    let:8 a80 = (03 ^ 03) in
                    advance (4)
                    #154B
                    #instruction: LD   (2002),A
                    M[2002] := a80;
                    advance (13)
                    #154E
                    #instruction: LD   B,F7
                    advance (7)
                    #1550
                    #instruction: JP   19DC
                    advance (10)
                    #19DC
                    #instruction: LD   A,(2094)
                    let:8 a81 = M[2094] in
                    advance (13)
                    #19DF
                    #instruction: AND  B
                    let:8 a82 = (F7 & a81) in
                    let:8 a83 = (F7 | a81) in
                    advance (4)
                    #19E0
                    #instruction: LD   (2094),A
                    M[2094] := a82;
                    advance (13)
                    #19E3
                    #instruction: OUT  03
                    sound_control(Ufo,a82[0]);
                    sound_control(Shot,a82[1]);
                    sound_control(PlayerDie,a82[2]);
                    sound_control(InvaderDie,a82[3]);
                    sound_control(ExtraLife,a82[4]);
                    advance (10)
                    #19E5
                    #instruction: RET
                    let:16 a84 = (1 + a2) in
                    let:8 a85 = M[a2] in
                    let:16 a86 = (1 + a84) in
                    let:8 a87 = M[a84] in
                    advance (10)
                    A := a82;
                    B := F7;
                    SPH := a86[15:8];
                    SPL := a86[7:0];
                    FlagS := a82[7];
                    FlagZ := is_zero(a82);
                    FlagA := a83[3];
                    FlagP := parity(a82);
                    FlagCY := false;
                    jump ((a87,a85));
                  } else {
                    advance (10)
                    #1504
                    #instruction: LD   L,B
                    advance (5)
                    #1505
                    #instruction: CALL 1562
                    let:16 a88 = (-1 + a2) in
                    M[a88] := 15;
                    let:16 a89 = (-1 + a88) in
                    M[a89] := 08;
                    #return-to: 1508
                    advance (17)
                    #1562
                    #instruction: LD   A,(2009)
                    let:8 a90 = M[2009] in
                    advance (13)
                    #1565
                    #instruction: LD   H,L
                    advance (5)
                    #1566
                    #instruction: CALL 1554
                    let:16 a91 = (-1 + a89) in
                    M[a91] := 15;
                    let:16 a92 = (-1 + a91) in
                    M[a92] := 69;
                    #return-to: 1569
                    advance (17)
                    #1554
                    #instruction: LD   C,00
                    advance (7)
                    #1556
                    #instruction: CP   H
                    let:16 a93 = addWithCarry(!false,a90,~a44[7:0]) in
                    let:8 a94 = (a90 & 0F) in
                    let:8 a95 = (~a44[7:0] & 0F) in
                    let:16 a96 = addWithCarry(!false,a94,a95) in
                    advance (4)
                    #1557
                    #instruction: CALL NC,1590
                    if (!!a93[15:8][0]) {
                      let:16 a97 = (-1 + a92) in
                      M[a97] := 15;
                      let:16 a98 = (-1 + a97) in
                      M[a98] := 5A;
                      #return-to: 155A
                      advance (17)
                      #1590
                      #instruction: INC  C
                      let:16 a99 = addWithCarry(true,00,00) in
                      let:8 a100 = (00 & 0F) in
                      let:8 a101 = (00 & 0F) in
                      let:16 a102 = addWithCarry(true,a100,a101) in
                      advance (5)
                      #1591
                      #instruction: ADD  10
                      let:16 a103 = addWithCarry(false,10,a90) in
                      let:8 a104 = (10 & 0F) in
                      let:8 a105 = (a90 & 0F) in
                      let:16 a106 = addWithCarry(false,a104,a105) in
                      advance (7)
                      #1593
                      #instruction: JP   MI,1590
                      if (a103[7:0][7]) {
                        advance (10)
                        A := a103[7:0];
                        B := a44[7:0];
                        C := a99[7:0];
                        H := a44[7:0];
                        L := a44[7:0];
                        SPH := a98[15:8];
                        SPL := a98[7:0];
                        FlagS := a103[7:0][7];
                        FlagZ := is_zero(a103[7:0]);
                        FlagA := a106[7:0][4];
                        FlagP := parity(a103[7:0]);
                        FlagCY := a103[15:8][0];
                        jump (1590);
                      } else {
                        advance (10)
                        #1596
                        #instruction: RET
                        let:16 a107 = (1 + a98) in
                        let:8 a108 = M[a98] in
                        let:16 a109 = (1 + a107) in
                        let:8 a110 = M[a107] in
                        advance (10)
                        A := a103[7:0];
                        B := a44[7:0];
                        C := a99[7:0];
                        H := a44[7:0];
                        L := a44[7:0];
                        SPH := a109[15:8];
                        SPL := a109[7:0];
                        FlagS := a103[7:0][7];
                        FlagZ := is_zero(a103[7:0]);
                        FlagA := a106[7:0][4];
                        FlagP := parity(a103[7:0]);
                        FlagCY := a103[15:8][0];
                        jump ((a110,a108));
                      }
                    } else {
                      advance (11)
                      A := a90;
                      B := a44[7:0];
                      C := 00;
                      H := a44[7:0];
                      L := a44[7:0];
                      SPH := a92[15:8];
                      SPL := a92[7:0];
                      FlagS := a93[7:0][7];
                      FlagZ := is_zero(a93[7:0]);
                      FlagA := a96[7:0][4];
                      FlagP := parity(a93[7:0]);
                      FlagCY := !a93[15:8][0];
                      jump (155A);
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else {
      advance (10)
      #16FC
      #instruction: CALL 19D7
      let:16 a111 = (-1 + (SPH,SPL)) in
      M[a111] := 16;
      let:16 a112 = (-1 + a111) in
      M[a112] := FF;
      #return-to: 16FF
      advance (17)
      #19D7
      #instruction: XOR  A
      let:8 a113 = (A ^ A) in
      advance (4)
      #19D8
      #instruction: JP   19D3
      advance (10)
      #19D3
      #instruction: LD   (20E9),A
      M[20E9] := a113;
      advance (13)
      #19D6
      #instruction: RET
      let:16 a114 = (1 + a112) in
      let:8 a115 = M[a112] in
      let:16 a116 = (1 + a114) in
      let:8 a117 = M[a114] in
      advance (10)
      A := a113;
      SPH := a116[15:8];
      SPL := a116[7:0];
      FlagS := a113[7];
      FlagZ := is_zero(a113);
      FlagA := false;
      FlagP := parity(a113);
      FlagCY := false;
      jump ((a117,a115));
    }

16FF:

    #16FF
    #instruction: LD   HL,2701
    advance (10)
    #1702
    #instruction: CALL 19FA
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := 05;
    #return-to: 1705
    advance (17)
    #19FA
    #instruction: LD   B,10
    advance (7)
    #19FC
    #instruction: CALL 14CB
    let:16 a3 = (-1 + a2) in
    M[a3] := 19;
    let:16 a4 = (-1 + a3) in
    M[a4] := FF;
    #return-to: 19FF
    advance (17)
    #14CB
    #instruction: XOR  A
    let:8 a5 = (A ^ A) in
    advance (4)
    #14CC
    #instruction: PUSH BC
    let:16 a6 = (-1 + a4) in
    M[a6] := 10;
    let:16 a7 = (-1 + a6) in
    M[a7] := C;
    advance (11)
    #14CD
    #instruction: LD   (HL),A
    M[2701] := a5;
    advance (7)
    #14CE
    #instruction: LD   BC,0020
    advance (10)
    #14D1
    #instruction: ADD  HL,BC
    let:17 a8 = add17(0020,2701) in
    advance (10)
    #14D2
    #instruction: POP  BC
    let:16 a9 = (1 + a7) in
    let:8 a10 = M[a7] in
    let:16 a11 = (1 + a9) in
    let:8 a12 = M[a9] in
    advance (10)
    #14D3
    #instruction: DEC  B
    let:16 a13 = addWithCarry(!true,a12,~00) in
    let:8 a14 = (a12 & 0F) in
    let:8 a15 = (~00 & 0F) in
    let:16 a16 = addWithCarry(!true,a14,a15) in
    advance (5)
    #14D4
    #instruction: JP   NZ,14CC
    if (!is_zero(a13[7:0])) {
      advance (10)
      A := a5;
      B := a13[7:0];
      C := a10;
      H := a8[15:0][15:8];
      L := a8[15:0][7:0];
      SPH := a11[15:8];
      SPL := a11[7:0];
      FlagS := a13[7:0][7];
      FlagZ := is_zero(a13[7:0]);
      FlagA := a16[7:0][4];
      FlagP := parity(a13[7:0]);
      FlagCY := a8[16];
      jump (14CC);
    } else {
      advance (10)
      #14D7
      #instruction: RET
      let:16 a17 = (1 + a11) in
      let:8 a18 = M[a11] in
      let:16 a19 = (1 + a17) in
      let:8 a20 = M[a17] in
      advance (10)
      A := a5;
      B := a13[7:0];
      C := a10;
      H := a8[15:0][15:8];
      L := a8[15:0][7:0];
      SPH := a19[15:8];
      SPL := a19[7:0];
      FlagS := a13[7:0][7];
      FlagZ := is_zero(a13[7:0]);
      FlagA := a16[7:0][4];
      FlagP := parity(a13[7:0]);
      FlagCY := a8[16];
      jump ((a20,a18));
    }

1705:

    #1705
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #1706
    #instruction: CALL 1A8B
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 17;
    let:16 a3 = (-1 + a2) in
    M[a3] := 09;
    #return-to: 1709
    advance (17)
    #1A8B
    #instruction: LD   HL,2501
    advance (10)
    #1A8E
    #instruction: AND  0F
    let:8 a4 = (0F & a1) in
    let:8 a5 = (0F | a1) in
    advance (7)
    #1A90
    #instruction: JP   09C5
    advance (10)
    #09C5
    #instruction: ADD  1A
    let:16 a6 = addWithCarry(false,1A,a4) in
    let:8 a7 = (1A & 0F) in
    let:8 a8 = (a4 & 0F) in
    let:16 a9 = addWithCarry(false,a7,a8) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a10 = (-1 + a3) in
    M[a10] := 25;
    let:16 a11 = (-1 + a10) in
    M[a11] := 01;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a12 = add17((00,a6[7:0]),(00,a6[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a13 = add17(a12[15:0],a12[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a14 = add17(a13[15:0],a13[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a15 = add17(1E00,a14[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a16 = (1 + a11) in
    let:8 a17 = M[a11] in
    let:16 a18 = (1 + a16) in
    let:8 a19 = M[a16] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a20 = (-1 + a18) in
    M[a20] := 08;
    let:16 a21 = (-1 + a20) in
    M[a21] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a22 = M[a15[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a19,a17)] := a22;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a23 = (1 + a15[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a24 = add17(0020,(a19,a17)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a25 = (1 + a21) in
    let:8 a26 = M[a21] in
    let:16 a27 = (1 + a25) in
    let:8 a28 = M[a25] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a29 = addWithCarry(!true,a28,~00) in
    let:8 a30 = (a28 & 0F) in
    let:8 a31 = (~00 & 0F) in
    let:16 a32 = addWithCarry(!true,a30,a31) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a29[7:0])) {
      advance (10)
      A := a22;
      B := a29[7:0];
      C := a26;
      D := a23[15:8];
      E := a23[7:0];
      H := a24[15:0][15:8];
      L := a24[15:0][7:0];
      SPH := a27[15:8];
      SPL := a27[7:0];
      FlagS := a29[7:0][7];
      FlagZ := is_zero(a29[7:0]);
      FlagA := a32[7:0][4];
      FlagP := parity(a29[7:0]);
      FlagCY := a24[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a33 = (1 + a27) in
      let:8 a34 = M[a27] in
      let:16 a35 = (1 + a33) in
      let:8 a36 = M[a33] in
      advance (10)
      A := a22;
      B := a29[7:0];
      C := a26;
      D := a23[15:8];
      E := a23[7:0];
      H := a24[15:0][15:8];
      L := a24[15:0][7:0];
      SPH := a35[15:8];
      SPL := a35[7:0];
      FlagS := a29[7:0][7];
      FlagZ := is_zero(a29[7:0]);
      FlagA := a32[7:0][4];
      FlagP := parity(a29[7:0]);
      FlagCY := a24[16];
      jump ((a36,a34));
    }

1709:

    #1709
    #instruction: LD   B,FB
    advance (7)
    #170B
    #instruction: JP   196B
    advance (10)
    #196B
    #instruction: CALL 19DC
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 6E;
    #return-to: 196E
    advance (17)
    #19DC
    #instruction: LD   A,(2094)
    let:8 a3 = M[2094] in
    advance (13)
    #19DF
    #instruction: AND  B
    let:8 a4 = (FB & a3) in
    let:8 a5 = (FB | a3) in
    advance (4)
    #19E0
    #instruction: LD   (2094),A
    M[2094] := a4;
    advance (13)
    #19E3
    #instruction: OUT  03
    sound_control(Ufo,a4[0]);
    sound_control(Shot,a4[1]);
    sound_control(PlayerDie,a4[2]);
    sound_control(InvaderDie,a4[3]);
    sound_control(ExtraLife,a4[4]);
    advance (10)
    #19E5
    #instruction: RET
    let:16 a6 = (1 + a2) in
    let:8 a7 = M[a2] in
    let:16 a8 = (1 + a6) in
    let:8 a9 = M[a6] in
    advance (10)
    A := a4;
    B := FB;
    SPH := a8[15:8];
    SPL := a8[7:0];
    FlagS := a4[7];
    FlagZ := is_zero(a4);
    FlagA := a5[3];
    FlagP := parity(a4);
    FlagCY := false;
    jump ((a9,a7));

1711:

    #1711
    #instruction: INC  HL
    let:16 a1 = (1 + (H,L)) in
    advance (5)
    #1712
    #instruction: LD   A,(HL)
    let:8 a2 = M[a1] in
    advance (7)
    #1713
    #instruction: LD   DE,1CB8
    advance (10)
    #1716
    #instruction: LD   HL,1AA1
    advance (10)
    #1719
    #instruction: LD   C,04
    advance (7)
    #171B
    #instruction: LD   B,A
    advance (5)
    #171C
    #instruction: LD   A,(DE)
    advance (7)
    #171D
    #instruction: CP   B
    let:16 a3 = addWithCarry(!false,02,~a2) in
    let:8 a4 = (02 & 0F) in
    let:8 a5 = (~a2 & 0F) in
    let:16 a6 = addWithCarry(!false,a4,a5) in
    advance (4)
    #171E
    #instruction: JP   NC,1727
    if (!!a3[15:8][0]) {
      advance (10)
      #1727
      #instruction: LD   A,(HL)
      advance (7)
      #1728
      #instruction: LD   (20CF),A
      M[20CF] := 30;
      advance (13)
      #172B
      #instruction: RET
      let:16 a7 = (1 + (SPH,SPL)) in
      let:8 a8 = M[(SPH,SPL)] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := 30;
      B := a2;
      C := 04;
      D := 1C;
      E := B8;
      H := 1A;
      L := A1;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := !a3[15:8][0];
      jump ((a10,a8));
    } else {
      advance (10)
      #1721
      #instruction: INC  HL
      advance (5)
      #1722
      #instruction: INC  DE
      advance (5)
      #1723
      #instruction: DEC  C
      let:16 a11 = addWithCarry(!true,04,~00) in
      let:8 a12 = (04 & 0F) in
      let:8 a13 = (~00 & 0F) in
      let:16 a14 = addWithCarry(!true,a12,a13) in
      advance (5)
      #1724
      #instruction: JP   NZ,171C
      if (!is_zero(a11[7:0])) {
        advance (10)
        A := 02;
        B := a2;
        C := a11[7:0];
        D := 1C;
        E := B9;
        H := 1A;
        L := A2;
        FlagS := a11[7:0][7];
        FlagZ := is_zero(a11[7:0]);
        FlagA := a14[7:0][4];
        FlagP := parity(a11[7:0]);
        FlagCY := !a3[15:8][0];
        jump (171C);
      } else {
        advance (10)
        #1727
        #instruction: LD   A,(HL)
        advance (7)
        #1728
        #instruction: LD   (20CF),A
        M[20CF] := 10;
        advance (13)
        #172B
        #instruction: RET
        let:16 a15 = (1 + (SPH,SPL)) in
        let:8 a16 = M[(SPH,SPL)] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (10)
        A := 10;
        B := a2;
        C := a11[7:0];
        D := 1C;
        E := B9;
        H := 1A;
        L := A2;
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a11[7:0][7];
        FlagZ := is_zero(a11[7:0]);
        FlagA := a14[7:0][4];
        FlagP := parity(a11[7:0]);
        FlagCY := !a3[15:8][0];
        jump ((a18,a16));
      }
    }

1747:

    #1747
    #instruction: LD   A,(2068)
    let:8 a1 = M[2068] in
    advance (13)
    #174A
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #174B
    #instruction: JP   Z,176D
    if (is_zero(a2)) {
      advance (10)
      #176D
      #instruction: LD   A,(2098)
      let:8 a4 = M[2098] in
      advance (13)
      #1770
      #instruction: AND  30
      let:8 a5 = (30 & a4) in
      let:8 a6 = (30 | a4) in
      advance (7)
      #1772
      #instruction: OUT  05
      sound_control(FleetMovement1,a5[0]);
      sound_control(FleetMovement2,a5[1]);
      sound_control(FleetMovement3,a5[2]);
      sound_control(FleetMovement4,a5[3]);
      sound_control(UfoHit,a5[4]);
      advance (10)
      #1774
      #instruction: RET
      let:16 a7 = (1 + (SPH,SPL)) in
      let:8 a8 = M[(SPH,SPL)] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (10)
      A := a5;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a5[7];
      FlagZ := is_zero(a5);
      FlagA := a6[3];
      FlagP := parity(a5);
      FlagCY := false;
      jump ((a10,a8));
    } else {
      advance (10)
      #174E
      #instruction: LD   HL,2096
      advance (10)
      #1751
      #instruction: DEC  (HL)
      let:8 a11 = M[2096] in
      let:16 a12 = addWithCarry(!true,a11,~00) in
      let:8 a13 = (a11 & 0F) in
      let:8 a14 = (~00 & 0F) in
      let:16 a15 = addWithCarry(!true,a13,a14) in
      M[2096] := a12[7:0];
      advance (10)
      #1752
      #instruction: RET  NZ
      if (!is_zero(a12[7:0])) {
        let:16 a16 = (1 + (SPH,SPL)) in
        let:8 a17 = M[(SPH,SPL)] in
        let:16 a18 = (1 + a16) in
        let:8 a19 = M[a16] in
        advance (11)
        A := a2;
        H := 20;
        L := 96;
        SPH := a18[15:8];
        SPL := a18[7:0];
        FlagS := a12[7:0][7];
        FlagZ := is_zero(a12[7:0]);
        FlagA := a15[7:0][4];
        FlagP := parity(a12[7:0]);
        FlagCY := false;
        jump ((a19,a17));
      } else {
        advance (5)
        #1753
        #instruction: LD   HL,2098
        advance (10)
        #1756
        #instruction: LD   A,(HL)
        let:8 a20 = M[2098] in
        advance (7)
        #1757
        #instruction: OUT  05
        sound_control(FleetMovement1,a20[0]);
        sound_control(FleetMovement2,a20[1]);
        sound_control(FleetMovement3,a20[2]);
        sound_control(FleetMovement4,a20[3]);
        sound_control(UfoHit,a20[4]);
        advance (10)
        #1759
        #instruction: LD   A,(2082)
        let:8 a21 = M[2082] in
        advance (13)
        #175C
        #instruction: AND  A
        let:8 a22 = (a21 & a21) in
        let:8 a23 = (a21 | a21) in
        advance (4)
        #175D
        #instruction: JP   Z,176D
        if (is_zero(a22)) {
          advance (10)
          #176D
          #instruction: LD   A,(2098)
          let:8 a24 = M[2098] in
          advance (13)
          #1770
          #instruction: AND  30
          let:8 a25 = (30 & a24) in
          let:8 a26 = (30 | a24) in
          advance (7)
          #1772
          #instruction: OUT  05
          sound_control(FleetMovement1,a25[0]);
          sound_control(FleetMovement2,a25[1]);
          sound_control(FleetMovement3,a25[2]);
          sound_control(FleetMovement4,a25[3]);
          sound_control(UfoHit,a25[4]);
          advance (10)
          #1774
          #instruction: RET
          let:16 a27 = (1 + (SPH,SPL)) in
          let:8 a28 = M[(SPH,SPL)] in
          let:16 a29 = (1 + a27) in
          let:8 a30 = M[a27] in
          advance (10)
          A := a25;
          H := 20;
          L := 98;
          SPH := a29[15:8];
          SPL := a29[7:0];
          FlagS := a25[7];
          FlagZ := is_zero(a25);
          FlagA := a26[3];
          FlagP := parity(a25);
          FlagCY := false;
          jump ((a30,a28));
        } else {
          advance (10)
          #1760
          #instruction: DEC  HL
          advance (5)
          #1761
          #instruction: LD   A,(HL)
          let:8 a31 = M[2097] in
          advance (7)
          #1762
          #instruction: DEC  HL
          advance (5)
          #1763
          #instruction: LD   (HL),A
          M[2096] := a31;
          advance (7)
          #1764
          #instruction: DEC  HL
          advance (5)
          #1765
          #instruction: LD   (HL),01
          M[2095] := 01;
          advance (10)
          #1767
          #instruction: LD   A,04
          advance (7)
          #1769
          #instruction: LD   (209B),A
          M[209B] := 04;
          advance (13)
          #176C
          #instruction: RET
          let:16 a32 = (1 + (SPH,SPL)) in
          let:8 a33 = M[(SPH,SPL)] in
          let:16 a34 = (1 + a32) in
          let:8 a35 = M[a32] in
          advance (10)
          A := 04;
          H := 20;
          L := 95;
          SPH := a34[15:8];
          SPL := a34[7:0];
          FlagS := a22[7];
          FlagZ := is_zero(a22);
          FlagA := a23[3];
          FlagP := parity(a22);
          FlagCY := false;
          jump ((a35,a33));
        }
      }
    }

17B4:

    #17B4
    #instruction: LD   B,EF
    advance (7)
    #17B6
    #instruction: LD   HL,2098
    advance (10)
    #17B9
    #instruction: LD   A,(HL)
    let:8 a1 = M[2098] in
    advance (7)
    #17BA
    #instruction: AND  B
    let:8 a2 = (EF & a1) in
    let:8 a3 = (EF | a1) in
    advance (4)
    #17BB
    #instruction: LD   (HL),A
    M[2098] := a2;
    advance (7)
    #17BC
    #instruction: OUT  05
    sound_control(FleetMovement1,a2[0]);
    sound_control(FleetMovement2,a2[1]);
    sound_control(FleetMovement3,a2[2]);
    sound_control(FleetMovement4,a2[3]);
    sound_control(UfoHit,a2[4]);
    advance (10)
    #17BE
    #instruction: RET
    let:16 a4 = (1 + (SPH,SPL)) in
    let:8 a5 = M[(SPH,SPL)] in
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    advance (10)
    A := a2;
    B := EF;
    H := 20;
    L := 98;
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagS := a2[7];
    FlagZ := is_zero(a2);
    FlagA := a3[3];
    FlagP := parity(a2);
    FlagCY := false;
    jump ((a7,a5));

17DF:

    #17DF
    #instruction: DEC  B
    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    advance (5)
    #17E0
    #instruction: JP   NZ,17DC
    if (!is_zero(a1[7:0])) {
      advance (10)
      #17DC
      #instruction: CALL 09D6
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 17;
      let:16 a6 = (-1 + a5) in
      M[a6] := DF;
      #return-to: 17DF
      advance (17)
      #09D6
      #instruction: LD   HL,2402
      advance (10)
      #09D9
      #instruction: LD   (HL),00
      M[2402] := 00;
      advance (10)
      #09DB
      #instruction: INC  HL
      advance (5)
      #09DC
      #instruction: LD   A,L
      advance (5)
      #09DD
      #instruction: AND  1F
      let:8 a7 = (1F & 03) in
      let:8 a8 = (1F | 03) in
      advance (7)
      #09DF
      #instruction: CP   1C
      let:16 a9 = addWithCarry(!false,a7,~1C) in
      let:8 a10 = (a7 & 0F) in
      let:8 a11 = (~1C & 0F) in
      let:16 a12 = addWithCarry(!false,a10,a11) in
      advance (7)
      #09E1
      #instruction: JP   CY,09E8
      if (!a9[15:8][0]) {
        advance (10)
        #09E8
        #instruction: LD   A,H
        advance (5)
        #09E9
        #instruction: CP   40
        let:16 a13 = addWithCarry(!false,24,~40) in
        let:8 a14 = (24 & 0F) in
        let:8 a15 = (~40 & 0F) in
        let:16 a16 = addWithCarry(!false,a14,a15) in
        advance (7)
        #09EB
        #instruction: JP   CY,09D9
        if (!a13[15:8][0]) {
          advance (10)
          A := 24;
          B := a1[7:0];
          H := 24;
          L := 03;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a13[7:0][7];
          FlagZ := is_zero(a13[7:0]);
          FlagA := a16[7:0][4];
          FlagP := parity(a13[7:0]);
          FlagCY := !a13[15:8][0];
          jump (09D9);
        } else {
          advance (10)
          #09EE
          #instruction: RET
          let:16 a17 = (1 + a6) in
          let:8 a18 = M[a6] in
          let:16 a19 = (1 + a17) in
          let:8 a20 = M[a17] in
          advance (10)
          A := 24;
          B := a1[7:0];
          H := 24;
          L := 03;
          SPH := a19[15:8];
          SPL := a19[7:0];
          FlagS := a13[7:0][7];
          FlagZ := is_zero(a13[7:0]);
          FlagA := a16[7:0][4];
          FlagP := parity(a13[7:0]);
          FlagCY := !a13[15:8][0];
          jump ((a20,a18));
        }
      } else {
        advance (10)
        #09E4
        #instruction: LD   DE,0006
        advance (10)
        #09E7
        #instruction: ADD  HL,DE
        let:17 a21 = add17(0006,2403) in
        advance (10)
        #09E8
        #instruction: LD   A,H
        advance (5)
        #09E9
        #instruction: CP   40
        let:16 a22 = addWithCarry(!false,a21[15:0][15:8],~40) in
        let:8 a23 = (a21[15:0][15:8] & 0F) in
        let:8 a24 = (~40 & 0F) in
        let:16 a25 = addWithCarry(!false,a23,a24) in
        advance (7)
        #09EB
        #instruction: JP   CY,09D9
        if (!a22[15:8][0]) {
          advance (10)
          A := a21[15:0][15:8];
          B := a1[7:0];
          D := 00;
          E := 06;
          H := a21[15:0][15:8];
          L := a21[15:0][7:0];
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a22[7:0][7];
          FlagZ := is_zero(a22[7:0]);
          FlagA := a25[7:0][4];
          FlagP := parity(a22[7:0]);
          FlagCY := !a22[15:8][0];
          jump (09D9);
        } else {
          advance (10)
          #09EE
          #instruction: RET
          let:16 a26 = (1 + a6) in
          let:8 a27 = M[a6] in
          let:16 a28 = (1 + a26) in
          let:8 a29 = M[a26] in
          advance (10)
          A := a21[15:0][15:8];
          B := a1[7:0];
          D := 00;
          E := 06;
          H := a21[15:0][15:8];
          L := a21[15:0][7:0];
          SPH := a28[15:8];
          SPL := a28[7:0];
          FlagS := a22[7:0][7];
          FlagZ := is_zero(a22[7:0]);
          FlagA := a25[7:0][4];
          FlagP := parity(a22[7:0]);
          FlagCY := !a22[15:8][0];
          jump ((a29,a27));
        }
      }
    } else {
      advance (10)
      #17E3
      #instruction: LD   A,01
      advance (7)
      #17E5
      #instruction: LD   (209A),A
      M[209A] := 01;
      advance (13)
      #17E8
      #instruction: CALL 19D7
      let:16 a30 = (-1 + (SPH,SPL)) in
      M[a30] := 17;
      let:16 a31 = (-1 + a30) in
      M[a31] := EB;
      #return-to: 17EB
      advance (17)
      #19D7
      #instruction: XOR  A
      let:8 a32 = (01 ^ 01) in
      advance (4)
      #19D8
      #instruction: JP   19D3
      advance (10)
      #19D3
      #instruction: LD   (20E9),A
      M[20E9] := a32;
      advance (13)
      #19D6
      #instruction: RET
      let:16 a33 = (1 + a31) in
      let:8 a34 = M[a31] in
      let:16 a35 = (1 + a33) in
      let:8 a36 = M[a33] in
      advance (10)
      A := a32;
      B := a1[7:0];
      SPH := a35[15:8];
      SPL := a35[7:0];
      FlagS := a32[7];
      FlagZ := is_zero(a32);
      FlagA := false;
      FlagP := parity(a32);
      FlagCY := false;
      jump ((a36,a34));
    }

17EB:

    #17EB
    #instruction: EI
    enable_interrupts()
    advance (4)
    #17EC
    #instruction: LD   DE,1CBC
    advance (10)
    #17EF
    #instruction: LD   HL,3016
    advance (10)
    #17F2
    #instruction: LD   C,04
    advance (7)
    #17F4
    #instruction: CALL 0A93
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := F7;
    #return-to: 17F7
    advance (17)
    #0A93
    #instruction: PUSH DE
    let:16 a3 = (-1 + a2) in
    M[a3] := 1C;
    let:16 a4 = (-1 + a3) in
    M[a4] := BC;
    advance (11)
    #0A94
    #instruction: LD   A,(DE)
    advance (7)
    #0A95
    #instruction: CALL 08FF
    let:16 a5 = (-1 + a4) in
    M[a5] := 0A;
    let:16 a6 = (-1 + a5) in
    M[a6] := 98;
    #return-to: 0A98
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a7 = (-1 + a6) in
    M[a7] := 30;
    let:16 a8 = (-1 + a7) in
    M[a8] := 16;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a9 = add17(0013,0013) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a10 = add17(a9[15:0],a9[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a11 = add17(a10[15:0],a10[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a12 = add17(1E00,a11[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a13 = (1 + a8) in
    let:8 a14 = M[a8] in
    let:16 a15 = (1 + a13) in
    let:8 a16 = M[a13] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a17 = (-1 + a15) in
    M[a17] := 08;
    let:16 a18 = (-1 + a17) in
    M[a18] := 04;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a19 = M[a12[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a16,a14)] := a19;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a20 = (1 + a12[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a21 = add17(0020,(a16,a14)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a22 = (1 + a18) in
    let:8 a23 = M[a18] in
    let:16 a24 = (1 + a22) in
    let:8 a25 = M[a22] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a26 = addWithCarry(!true,a25,~00) in
    let:8 a27 = (a25 & 0F) in
    let:8 a28 = (~00 & 0F) in
    let:16 a29 = addWithCarry(!true,a27,a28) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a26[7:0])) {
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a24[15:8];
      SPL := a24[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a30 = (1 + a24) in
      let:8 a31 = M[a24] in
      let:16 a32 = (1 + a30) in
      let:8 a33 = M[a30] in
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a32[15:8];
      SPL := a32[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump ((a33,a31));
    }

17F7:

    #17F7
    #instruction: CALL 0AB1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := FA;
    #return-to: 17FA
    advance (17)
    #0AB1
    #instruction: LD   A,40
    advance (7)
    #0AB3
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 40;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

17FA:

    #17FA
    #instruction: XOR  A
    let:8 a1 = (A ^ A) in
    advance (4)
    #17FB
    #instruction: LD   (209A),A
    M[209A] := a1;
    advance (13)
    #17FE
    #instruction: LD   (2093),A
    M[2093] := a1;
    advance (13)
    #1801
    #instruction: JP   16C9
    advance (10)
    #16C9
    #instruction: LD   HL,2D18
    advance (10)
    #16CC
    #instruction: LD   DE,1AA6
    advance (10)
    #16CF
    #instruction: LD   C,0A
    advance (7)
    #16D1
    #instruction: CALL 0A93
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 16;
    let:16 a3 = (-1 + a2) in
    M[a3] := D4;
    #return-to: 16D4
    advance (17)
    #0A93
    #instruction: PUSH DE
    let:16 a4 = (-1 + a3) in
    M[a4] := 1A;
    let:16 a5 = (-1 + a4) in
    M[a5] := A6;
    advance (11)
    #0A94
    #instruction: LD   A,(DE)
    advance (7)
    #0A95
    #instruction: CALL 08FF
    let:16 a6 = (-1 + a5) in
    M[a6] := 0A;
    let:16 a7 = (-1 + a6) in
    M[a7] := 98;
    #return-to: 0A98
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a8 = (-1 + a7) in
    M[a8] := 2D;
    let:16 a9 = (-1 + a8) in
    M[a9] := 18;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a10 = add17(0006,0006) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a11 = add17(a10[15:0],a10[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a12 = add17(a11[15:0],a11[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a13 = add17(1E00,a12[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a14 = (1 + a9) in
    let:8 a15 = M[a9] in
    let:16 a16 = (1 + a14) in
    let:8 a17 = M[a14] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a18 = (-1 + a16) in
    M[a18] := 08;
    let:16 a19 = (-1 + a18) in
    M[a19] := 0A;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a20 = M[a13[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a17,a15)] := a20;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a21 = (1 + a13[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a22 = add17(0020,(a17,a15)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a23 = (1 + a19) in
    let:8 a24 = M[a19] in
    let:16 a25 = (1 + a23) in
    let:8 a26 = M[a23] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a27 = addWithCarry(!true,a26,~00) in
    let:8 a28 = (a26 & 0F) in
    let:8 a29 = (~00 & 0F) in
    let:16 a30 = addWithCarry(!true,a28,a29) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a27[7:0])) {
      advance (10)
      A := a20;
      B := a27[7:0];
      C := a24;
      D := a21[15:8];
      E := a21[7:0];
      H := a22[15:0][15:8];
      L := a22[15:0][7:0];
      SPH := a25[15:8];
      SPL := a25[7:0];
      FlagS := a27[7:0][7];
      FlagZ := is_zero(a27[7:0]);
      FlagA := a30[7:0][4];
      FlagP := parity(a27[7:0]);
      FlagCY := a22[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a31 = (1 + a25) in
      let:8 a32 = M[a25] in
      let:16 a33 = (1 + a31) in
      let:8 a34 = M[a31] in
      advance (10)
      A := a20;
      B := a27[7:0];
      C := a24;
      D := a21[15:8];
      E := a21[7:0];
      H := a22[15:0][15:8];
      L := a22[15:0][7:0];
      SPH := a33[15:8];
      SPL := a33[7:0];
      FlagS := a27[7:0][7];
      FlagZ := is_zero(a27[7:0]);
      FlagA := a30[7:0][4];
      FlagP := parity(a27[7:0]);
      FlagCY := a22[16];
      jump ((a34,a32));
    }

1820:

    #1820
    #instruction: LD   A,0A
    advance (7)
    #1822
    #instruction: LD   (206C),A
    M[206C] := 0A;
    advance (13)
    #1825
    #instruction: LD   BC,1DBE
    advance (10)
    #1828
    #instruction: CALL 1856
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2B;
    #return-to: 182B
    advance (17)
    #1856
    #instruction: LD   A,(BC)
    advance (7)
    #1857
    #instruction: CP   FF
    let:16 a3 = addWithCarry(!false,0E,~FF) in
    let:8 a4 = (0E & 0F) in
    let:8 a5 = (~FF & 0F) in
    let:16 a6 = addWithCarry(!false,a4,a5) in
    advance (7)
    #1859
    #instruction: SCF
    advance (4)
    #185A
    #instruction: RET  Z
    if (is_zero(a3[7:0])) {
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (11)
      A := 0E;
      B := 1D;
      C := BE;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := true;
      jump ((a10,a8));
    } else {
      advance (5)
      #185B
      #instruction: LD   L,A
      advance (5)
      #185C
      #instruction: INC  BC
      advance (5)
      #185D
      #instruction: LD   A,(BC)
      advance (7)
      #185E
      #instruction: LD   H,A
      advance (5)
      #185F
      #instruction: INC  BC
      advance (5)
      #1860
      #instruction: LD   A,(BC)
      advance (7)
      #1861
      #instruction: LD   E,A
      advance (5)
      #1862
      #instruction: INC  BC
      advance (5)
      #1863
      #instruction: LD   A,(BC)
      advance (7)
      #1864
      #instruction: LD   D,A
      advance (5)
      #1865
      #instruction: INC  BC
      advance (5)
      #1866
      #instruction: AND  A
      let:8 a11 = (1D & 1D) in
      let:8 a12 = (1D | 1D) in
      advance (4)
      #1867
      #instruction: RET
      let:16 a13 = (1 + a2) in
      let:8 a14 = M[a2] in
      let:16 a15 = (1 + a13) in
      let:8 a16 = M[a13] in
      advance (10)
      A := a11;
      B := 1D;
      C := C2;
      D := 1D;
      E := 68;
      H := 2C;
      L := 0E;
      SPH := a15[15:8];
      SPL := a15[7:0];
      FlagS := a11[7];
      FlagZ := is_zero(a11);
      FlagA := a12[3];
      FlagP := parity(a11);
      FlagCY := false;
      jump ((a16,a14));
    }

182B:

    #182B
    #instruction: JP   CY,1837
    if (FlagCY) {
      advance (10)
      jump (1837);
    } else {
      advance (10)
      #182E
      #instruction: CALL 1844
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 18;
      let:16 a2 = (-1 + a1) in
      M[a2] := 31;
      #return-to: 1831
      advance (17)
      #1844
      #instruction: PUSH BC
      let:16 a3 = (-1 + a2) in
      M[a3] := B;
      let:16 a4 = (-1 + a3) in
      M[a4] := C;
      advance (11)
      #1845
      #instruction: LD   B,10
      advance (7)
      #1847
      #instruction: CALL 1439
      let:16 a5 = (-1 + a4) in
      M[a5] := 18;
      let:16 a6 = (-1 + a5) in
      M[a6] := 4A;
      #return-to: 184A
      advance (17)
      #1439
      #instruction: PUSH BC
      let:16 a7 = (-1 + a6) in
      M[a7] := 10;
      let:16 a8 = (-1 + a7) in
      M[a8] := C;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a9 = M[(D,E)] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(H,L)] := a9;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a10 = (1 + (D,E)) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a11 = add17(0020,(H,L)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a12 = (1 + a8) in
      let:8 a13 = M[a8] in
      let:16 a14 = (1 + a12) in
      let:8 a15 = M[a12] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a16 = addWithCarry(!true,a15,~00) in
      let:8 a17 = (a15 & 0F) in
      let:8 a18 = (~00 & 0F) in
      let:16 a19 = addWithCarry(!true,a17,a18) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a16[7:0])) {
        advance (10)
        A := a9;
        B := a16[7:0];
        C := a13;
        D := a10[15:8];
        E := a10[7:0];
        H := a11[15:0][15:8];
        L := a11[15:0][7:0];
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagS := a16[7:0][7];
        FlagZ := is_zero(a16[7:0]);
        FlagA := a19[7:0][4];
        FlagP := parity(a16[7:0]);
        FlagCY := a11[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a20 = (1 + a14) in
        let:8 a21 = M[a14] in
        let:16 a22 = (1 + a20) in
        let:8 a23 = M[a20] in
        advance (10)
        A := a9;
        B := a16[7:0];
        C := a13;
        D := a10[15:8];
        E := a10[7:0];
        H := a11[15:0][15:8];
        L := a11[15:0][7:0];
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a16[7:0][7];
        FlagZ := is_zero(a16[7:0]);
        FlagA := a19[7:0][4];
        FlagP := parity(a16[7:0]);
        FlagCY := a11[16];
        jump ((a23,a21));
      }
    }

1831:

    #1831
    #instruction: JP   1828
    advance (10)
    #1828
    #instruction: CALL 1856
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2B;
    #return-to: 182B
    advance (17)
    #1856
    #instruction: LD   A,(BC)
    let:8 a3 = M[(B,C)] in
    advance (7)
    #1857
    #instruction: CP   FF
    let:16 a4 = addWithCarry(!false,a3,~FF) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~FF & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #1859
    #instruction: SCF
    advance (4)
    #185A
    #instruction: RET  Z
    if (is_zero(a4[7:0])) {
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (11)
      A := a3;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := true;
      jump ((a11,a9));
    } else {
      advance (5)
      #185B
      #instruction: LD   L,A
      advance (5)
      #185C
      #instruction: INC  BC
      let:16 a12 = (1 + (B,C)) in
      advance (5)
      #185D
      #instruction: LD   A,(BC)
      let:8 a13 = M[a12] in
      advance (7)
      #185E
      #instruction: LD   H,A
      advance (5)
      #185F
      #instruction: INC  BC
      let:16 a14 = (1 + a12) in
      advance (5)
      #1860
      #instruction: LD   A,(BC)
      let:8 a15 = M[a14] in
      advance (7)
      #1861
      #instruction: LD   E,A
      advance (5)
      #1862
      #instruction: INC  BC
      let:16 a16 = (1 + a14) in
      advance (5)
      #1863
      #instruction: LD   A,(BC)
      let:8 a17 = M[a16] in
      advance (7)
      #1864
      #instruction: LD   D,A
      advance (5)
      #1865
      #instruction: INC  BC
      let:16 a18 = (1 + a16) in
      advance (5)
      #1866
      #instruction: AND  A
      let:8 a19 = (a17 & a17) in
      let:8 a20 = (a17 | a17) in
      advance (4)
      #1867
      #instruction: RET
      let:16 a21 = (1 + a2) in
      let:8 a22 = M[a2] in
      let:16 a23 = (1 + a21) in
      let:8 a24 = M[a21] in
      advance (10)
      A := a19;
      B := a18[15:8];
      C := a18[7:0];
      D := a17;
      E := a15;
      H := a13;
      L := a3;
      SPH := a23[15:8];
      SPL := a23[7:0];
      FlagS := a19[7];
      FlagZ := is_zero(a19);
      FlagA := a20[3];
      FlagP := parity(a19);
      FlagCY := false;
      jump ((a24,a22));
    }

1834:

    #1834
    #instruction: CALL 0AB1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 37;
    #return-to: 1837
    advance (17)
    #0AB1
    #instruction: LD   A,40
    advance (7)
    #0AB3
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 40;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a3 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a4 = (a3 & a3) in
    let:8 a5 = (a3 | a3) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a4)) {
      advance (10)
      A := a4;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a6 = (1 + a2) in
      let:8 a7 = M[a2] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := a4;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a4[7];
      FlagZ := is_zero(a4);
      FlagA := a5[3];
      FlagP := parity(a4);
      FlagCY := false;
      jump ((a9,a7));
    }

1837:

    #1837
    #instruction: LD   BC,1DCF
    advance (10)
    #183A
    #instruction: CALL 1856
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3D;
    #return-to: 183D
    advance (17)
    #1856
    #instruction: LD   A,(BC)
    advance (7)
    #1857
    #instruction: CP   FF
    let:16 a3 = addWithCarry(!false,0E,~FF) in
    let:8 a4 = (0E & 0F) in
    let:8 a5 = (~FF & 0F) in
    let:16 a6 = addWithCarry(!false,a4,a5) in
    advance (7)
    #1859
    #instruction: SCF
    advance (4)
    #185A
    #instruction: RET  Z
    if (is_zero(a3[7:0])) {
      let:16 a7 = (1 + a2) in
      let:8 a8 = M[a2] in
      let:16 a9 = (1 + a7) in
      let:8 a10 = M[a7] in
      advance (11)
      A := 0E;
      B := 1D;
      C := CF;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := true;
      jump ((a10,a8));
    } else {
      advance (5)
      #185B
      #instruction: LD   L,A
      advance (5)
      #185C
      #instruction: INC  BC
      advance (5)
      #185D
      #instruction: LD   A,(BC)
      advance (7)
      #185E
      #instruction: LD   H,A
      advance (5)
      #185F
      #instruction: INC  BC
      advance (5)
      #1860
      #instruction: LD   A,(BC)
      advance (7)
      #1861
      #instruction: LD   E,A
      advance (5)
      #1862
      #instruction: INC  BC
      advance (5)
      #1863
      #instruction: LD   A,(BC)
      advance (7)
      #1864
      #instruction: LD   D,A
      advance (5)
      #1865
      #instruction: INC  BC
      advance (5)
      #1866
      #instruction: AND  A
      let:8 a11 = (1D & 1D) in
      let:8 a12 = (1D | 1D) in
      advance (4)
      #1867
      #instruction: RET
      let:16 a13 = (1 + a2) in
      let:8 a14 = M[a2] in
      let:16 a15 = (1 + a13) in
      let:8 a16 = M[a13] in
      advance (10)
      A := a11;
      B := 1D;
      C := D3;
      D := 1D;
      E := E0;
      H := 2E;
      L := 0E;
      SPH := a15[15:8];
      SPL := a15[7:0];
      FlagS := a11[7];
      FlagZ := is_zero(a11);
      FlagA := a12[3];
      FlagP := parity(a11);
      FlagCY := false;
      jump ((a16,a14));
    }

183D:

    #183D
    #instruction: RET  CY
    if (FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:8 a2 = M[(SPH,SPL)] in
      let:16 a3 = (1 + a1) in
      let:8 a4 = M[a1] in
      advance (11)
      SPH := a3[15:8];
      SPL := a3[7:0];
      jump ((a4,a2));
    } else {
      advance (5)
      #183E
      #instruction: CALL 184C
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 18;
      let:16 a6 = (-1 + a5) in
      M[a6] := 41;
      #return-to: 1841
      advance (17)
      #184C
      #instruction: PUSH BC
      let:16 a7 = (-1 + a6) in
      M[a7] := B;
      let:16 a8 = (-1 + a7) in
      M[a8] := C;
      advance (11)
      #184D
      #instruction: LD   A,(206C)
      let:8 a9 = M[206C] in
      advance (13)
      #1850
      #instruction: LD   C,A
      advance (5)
      #1851
      #instruction: CALL 0A93
      let:16 a10 = (-1 + a8) in
      M[a10] := 18;
      let:16 a11 = (-1 + a10) in
      M[a11] := 54;
      #return-to: 1854
      advance (17)
      #0A93
      #instruction: PUSH DE
      let:16 a12 = (-1 + a11) in
      M[a12] := D;
      let:16 a13 = (-1 + a12) in
      M[a13] := E;
      advance (11)
      #0A94
      #instruction: LD   A,(DE)
      let:8 a14 = M[(D,E)] in
      advance (7)
      #0A95
      #instruction: CALL 08FF
      let:16 a15 = (-1 + a13) in
      M[a15] := 0A;
      let:16 a16 = (-1 + a15) in
      M[a16] := 98;
      #return-to: 0A98
      advance (17)
      #08FF
      #instruction: LD   DE,1E00
      advance (10)
      #0902
      #instruction: PUSH HL
      let:16 a17 = (-1 + a16) in
      M[a17] := H;
      let:16 a18 = (-1 + a17) in
      M[a18] := L;
      advance (11)
      #0903
      #instruction: LD   H,00
      advance (7)
      #0905
      #instruction: LD   L,A
      advance (5)
      #0906
      #instruction: ADD  HL,HL
      let:17 a19 = add17((00,a14),(00,a14)) in
      advance (10)
      #0907
      #instruction: ADD  HL,HL
      let:17 a20 = add17(a19[15:0],a19[15:0]) in
      advance (10)
      #0908
      #instruction: ADD  HL,HL
      let:17 a21 = add17(a20[15:0],a20[15:0]) in
      advance (10)
      #0909
      #instruction: ADD  HL,DE
      let:17 a22 = add17(1E00,a21[15:0]) in
      advance (10)
      #090A
      #instruction: EX   DE,HL
      advance (4)
      #090B
      #instruction: POP  HL
      let:16 a23 = (1 + a18) in
      let:8 a24 = M[a18] in
      let:16 a25 = (1 + a23) in
      let:8 a26 = M[a23] in
      advance (10)
      #090C
      #instruction: LD   B,08
      advance (7)
      #090E
      #instruction: OUT  06
      advance (10)
      #0910
      #instruction: JP   1439
      advance (10)
      #1439
      #instruction: PUSH BC
      let:16 a27 = (-1 + a25) in
      M[a27] := 08;
      let:16 a28 = (-1 + a27) in
      M[a28] := a9;
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      let:8 a29 = M[a22[15:0]] in
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(a26,a24)] := a29;
      advance (7)
      #143C
      #instruction: INC  DE
      let:16 a30 = (1 + a22[15:0]) in
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a31 = add17(0020,(a26,a24)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a32 = (1 + a28) in
      let:8 a33 = M[a28] in
      let:16 a34 = (1 + a32) in
      let:8 a35 = M[a32] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a36 = addWithCarry(!true,a35,~00) in
      let:8 a37 = (a35 & 0F) in
      let:8 a38 = (~00 & 0F) in
      let:16 a39 = addWithCarry(!true,a37,a38) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a36[7:0])) {
        advance (10)
        A := a29;
        B := a36[7:0];
        C := a33;
        D := a30[15:8];
        E := a30[7:0];
        H := a31[15:0][15:8];
        L := a31[15:0][7:0];
        SPH := a34[15:8];
        SPL := a34[7:0];
        FlagS := a36[7:0][7];
        FlagZ := is_zero(a36[7:0]);
        FlagA := a39[7:0][4];
        FlagP := parity(a36[7:0]);
        FlagCY := a31[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a40 = (1 + a34) in
        let:8 a41 = M[a34] in
        let:16 a42 = (1 + a40) in
        let:8 a43 = M[a40] in
        advance (10)
        A := a29;
        B := a36[7:0];
        C := a33;
        D := a30[15:8];
        E := a30[7:0];
        H := a31[15:0][15:8];
        L := a31[15:0][7:0];
        SPH := a42[15:8];
        SPL := a42[7:0];
        FlagS := a36[7:0][7];
        FlagZ := is_zero(a36[7:0]);
        FlagA := a39[7:0][4];
        FlagP := parity(a36[7:0]);
        FlagCY := a31[16];
        jump ((a43,a41));
      }
    }

1841:

    #1841
    #instruction: JP   183A
    advance (10)
    #183A
    #instruction: CALL 1856
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3D;
    #return-to: 183D
    advance (17)
    #1856
    #instruction: LD   A,(BC)
    let:8 a3 = M[(B,C)] in
    advance (7)
    #1857
    #instruction: CP   FF
    let:16 a4 = addWithCarry(!false,a3,~FF) in
    let:8 a5 = (a3 & 0F) in
    let:8 a6 = (~FF & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    advance (7)
    #1859
    #instruction: SCF
    advance (4)
    #185A
    #instruction: RET  Z
    if (is_zero(a4[7:0])) {
      let:16 a8 = (1 + a2) in
      let:8 a9 = M[a2] in
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      advance (11)
      A := a3;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := true;
      jump ((a11,a9));
    } else {
      advance (5)
      #185B
      #instruction: LD   L,A
      advance (5)
      #185C
      #instruction: INC  BC
      let:16 a12 = (1 + (B,C)) in
      advance (5)
      #185D
      #instruction: LD   A,(BC)
      let:8 a13 = M[a12] in
      advance (7)
      #185E
      #instruction: LD   H,A
      advance (5)
      #185F
      #instruction: INC  BC
      let:16 a14 = (1 + a12) in
      advance (5)
      #1860
      #instruction: LD   A,(BC)
      let:8 a15 = M[a14] in
      advance (7)
      #1861
      #instruction: LD   E,A
      advance (5)
      #1862
      #instruction: INC  BC
      let:16 a16 = (1 + a14) in
      advance (5)
      #1863
      #instruction: LD   A,(BC)
      let:8 a17 = M[a16] in
      advance (7)
      #1864
      #instruction: LD   D,A
      advance (5)
      #1865
      #instruction: INC  BC
      let:16 a18 = (1 + a16) in
      advance (5)
      #1866
      #instruction: AND  A
      let:8 a19 = (a17 & a17) in
      let:8 a20 = (a17 | a17) in
      advance (4)
      #1867
      #instruction: RET
      let:16 a21 = (1 + a2) in
      let:8 a22 = M[a2] in
      let:16 a23 = (1 + a21) in
      let:8 a24 = M[a21] in
      advance (10)
      A := a19;
      B := a18[15:8];
      C := a18[7:0];
      D := a17;
      E := a15;
      H := a13;
      L := a3;
      SPH := a23[15:8];
      SPL := a23[7:0];
      FlagS := a19[7];
      FlagZ := is_zero(a19);
      FlagA := a20[3];
      FlagP := parity(a19);
      FlagCY := false;
      jump ((a24,a22));
    }

184A:

    #184A
    #instruction: POP  BC
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #184B
    #instruction: RET
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    B := a4;
    C := a2;
    SPH := a7[15:8];
    SPL := a7[7:0];
    jump ((a8,a6));

1854:

    #1854
    #instruction: POP  BC
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #1855
    #instruction: RET
    let:16 a5 = (1 + a3) in
    let:8 a6 = M[a3] in
    let:16 a7 = (1 + a5) in
    let:8 a8 = M[a5] in
    advance (10)
    B := a4;
    C := a2;
    SPH := a7[15:8];
    SPL := a7[7:0];
    jump ((a8,a6));

1871:

    #1871
    #instruction: LD   B,A
    advance (5)
    #1872
    #instruction: LD   A,(20CA)
    let:8 a1 = M[20CA] in
    advance (13)
    #1875
    #instruction: CP   B
    let:16 a2 = addWithCarry(!false,a1,~A) in
    let:8 a3 = (a1 & 0F) in
    let:8 a4 = (~A & 0F) in
    let:16 a5 = addWithCarry(!false,a3,a4) in
    advance (4)
    #1876
    #instruction: JP   Z,1898
    if (is_zero(a2[7:0])) {
      advance (10)
      #1898
      #instruction: LD   A,01
      advance (7)
      #189A
      #instruction: LD   (20CB),A
      M[20CB] := 01;
      advance (13)
      #189D
      #instruction: RET
      let:16 a6 = (1 + (SPH,SPL)) in
      let:8 a7 = M[(SPH,SPL)] in
      let:16 a8 = (1 + a6) in
      let:8 a9 = M[a6] in
      advance (10)
      A := 01;
      B := A;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      FlagCY := !a2[15:8][0];
      jump ((a9,a7));
    } else {
      advance (10)
      #1879
      #instruction: LD   A,(20C2)
      let:8 a10 = M[20C2] in
      advance (13)
      #187C
      #instruction: AND  04
      let:8 a11 = (04 & a10) in
      let:8 a12 = (04 | a10) in
      advance (7)
      #187E
      #instruction: LD   HL,(20CC)
      let:8 a13 = M[20CC] in
      let:8 a14 = M[20CD] in
      advance (16)
      #1881
      #instruction: JP   NZ,1888
      if (!is_zero(a11)) {
        advance (10)
        #1888
        #instruction: LD   (20C7),HL
        M[20C7] := a13;
        M[20C8] := a14;
        advance (16)
        #188B
        #instruction: LD   HL,20C5
        advance (10)
        #188E
        #instruction: CALL 1A3B
        let:16 a15 = (-1 + (SPH,SPL)) in
        M[a15] := 18;
        let:16 a16 = (-1 + a15) in
        M[a16] := 91;
        #return-to: 1891
        advance (17)
        #1A3B
        #instruction: LD   E,(HL)
        let:8 a17 = M[20C5] in
        advance (7)
        #1A3C
        #instruction: INC  HL
        advance (5)
        #1A3D
        #instruction: LD   D,(HL)
        let:8 a18 = M[20C6] in
        advance (7)
        #1A3E
        #instruction: INC  HL
        advance (5)
        #1A3F
        #instruction: LD   A,(HL)
        let:8 a19 = M[20C7] in
        advance (7)
        #1A40
        #instruction: INC  HL
        advance (5)
        #1A41
        #instruction: LD   C,(HL)
        let:8 a20 = M[20C8] in
        advance (7)
        #1A42
        #instruction: INC  HL
        advance (5)
        #1A43
        #instruction: LD   B,(HL)
        let:8 a21 = M[20C9] in
        advance (7)
        #1A44
        #instruction: LD   H,C
        advance (5)
        #1A45
        #instruction: LD   L,A
        advance (5)
        #1A46
        #instruction: RET
        let:16 a22 = (1 + a16) in
        let:8 a23 = M[a16] in
        let:16 a24 = (1 + a22) in
        let:8 a25 = M[a22] in
        advance (10)
        A := a19;
        B := a21;
        C := a20;
        D := a18;
        E := a17;
        H := a20;
        L := a19;
        SPH := a24[15:8];
        SPL := a24[7:0];
        FlagS := a11[7];
        FlagZ := is_zero(a11);
        FlagA := a12[3];
        FlagP := parity(a11);
        FlagCY := false;
        jump ((a25,a23));
      } else {
        advance (10)
        #1884
        #instruction: LD   DE,0030
        advance (10)
        #1887
        #instruction: ADD  HL,DE
        let:17 a26 = add17(0030,(a14,a13)) in
        advance (10)
        #1888
        #instruction: LD   (20C7),HL
        M[20C7] := a26[15:0][7:0];
        M[20C8] := a26[15:0][15:8];
        advance (16)
        #188B
        #instruction: LD   HL,20C5
        advance (10)
        #188E
        #instruction: CALL 1A3B
        let:16 a27 = (-1 + (SPH,SPL)) in
        M[a27] := 18;
        let:16 a28 = (-1 + a27) in
        M[a28] := 91;
        #return-to: 1891
        advance (17)
        #1A3B
        #instruction: LD   E,(HL)
        let:8 a29 = M[20C5] in
        advance (7)
        #1A3C
        #instruction: INC  HL
        advance (5)
        #1A3D
        #instruction: LD   D,(HL)
        let:8 a30 = M[20C6] in
        advance (7)
        #1A3E
        #instruction: INC  HL
        advance (5)
        #1A3F
        #instruction: LD   A,(HL)
        let:8 a31 = M[20C7] in
        advance (7)
        #1A40
        #instruction: INC  HL
        advance (5)
        #1A41
        #instruction: LD   C,(HL)
        let:8 a32 = M[20C8] in
        advance (7)
        #1A42
        #instruction: INC  HL
        advance (5)
        #1A43
        #instruction: LD   B,(HL)
        let:8 a33 = M[20C9] in
        advance (7)
        #1A44
        #instruction: LD   H,C
        advance (5)
        #1A45
        #instruction: LD   L,A
        advance (5)
        #1A46
        #instruction: RET
        let:16 a34 = (1 + a28) in
        let:8 a35 = M[a28] in
        let:16 a36 = (1 + a34) in
        let:8 a37 = M[a34] in
        advance (10)
        A := a31;
        B := a33;
        C := a32;
        D := a30;
        E := a29;
        H := a32;
        L := a31;
        SPH := a36[15:8];
        SPL := a36[7:0];
        FlagS := a11[7];
        FlagZ := is_zero(a11);
        FlagA := a12[3];
        FlagP := parity(a11);
        FlagCY := a26[16];
        jump ((a37,a35));
      }
    }

1891:

    #1891
    #instruction: EX   DE,HL
    advance (4)
    #1892
    #instruction: JP   15D3
    advance (10)
    #15D3
    #instruction: CALL 1474
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := D6;
    #return-to: 15D6
    advance (17)
    #1474
    #instruction: LD   A,L
    advance (5)
    #1475
    #instruction: AND  07
    let:8 a3 = (07 & E) in
    let:8 a4 = (07 | E) in
    advance (7)
    #1477
    #instruction: OUT  02
    advance (10)
    #1479
    #instruction: JP   1A47
    advance (10)
    #1A47
    #instruction: PUSH BC
    let:16 a5 = (-1 + a2) in
    M[a5] := B;
    let:16 a6 = (-1 + a5) in
    M[a6] := C;
    advance (11)
    #1A48
    #instruction: LD   B,03
    advance (7)
    #1A4A
    #instruction: LD   A,H
    advance (5)
    #1A4B
    #instruction: RAR
    advance (4)
    #1A4C
    #instruction: LD   H,A
    advance (5)
    #1A4D
    #instruction: LD   A,L
    advance (5)
    #1A4E
    #instruction: RAR
    advance (4)
    #1A4F
    #instruction: LD   L,A
    advance (5)
    #1A50
    #instruction: DEC  B
    let:16 a7 = addWithCarry(!true,03,~00) in
    let:8 a8 = (03 & 0F) in
    let:8 a9 = (~00 & 0F) in
    let:16 a10 = addWithCarry(!true,a8,a9) in
    advance (5)
    #1A51
    #instruction: JP   NZ,1A4A
    if (!is_zero(a7[7:0])) {
      advance (10)
      A := updateBit((E >> 01),7,D[0]);
      B := a7[7:0];
      D := H;
      E := L;
      H := updateBit((D >> 01),7,false);
      L := updateBit((E >> 01),7,D[0]);
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      FlagCY := E[0];
      Shifter_OFF := a3;
      jump (1A4A);
    } else {
      advance (10)
      #1A54
      #instruction: LD   A,H
      advance (5)
      #1A55
      #instruction: AND  3F
      let:8 a11 = (3F & updateBit((D >> 01),7,false)) in
      let:8 a12 = (3F | updateBit((D >> 01),7,false)) in
      advance (7)
      #1A57
      #instruction: OR   20
      let:8 a13 = (20 | a11) in
      advance (7)
      #1A59
      #instruction: LD   H,A
      advance (5)
      #1A5A
      #instruction: POP  BC
      let:16 a14 = (1 + a6) in
      let:8 a15 = M[a6] in
      let:16 a16 = (1 + a14) in
      let:8 a17 = M[a14] in
      advance (10)
      #1A5B
      #instruction: RET
      let:16 a18 = (1 + a16) in
      let:8 a19 = M[a16] in
      let:16 a20 = (1 + a18) in
      let:8 a21 = M[a18] in
      advance (10)
      A := a13;
      B := a17;
      C := a15;
      D := H;
      E := L;
      H := a13;
      L := updateBit((E >> 01),7,D[0]);
      SPH := a20[15:8];
      SPL := a20[7:0];
      FlagS := a13[7];
      FlagZ := is_zero(a13);
      FlagA := false;
      FlagP := parity(a13);
      FlagCY := false;
      Shifter_OFF := a3;
      jump ((a21,a19));
    }

18A9:

    #18A9
    #instruction: LD   A,02
    advance (7)
    #18AB
    #instruction: LD   (2080),A
    M[2080] := 02;
    advance (13)
    #18AE
    #instruction: LD   A,FF
    advance (7)
    #18B0
    #instruction: LD   (207E),A
    M[207E] := FF;
    advance (13)
    #18B3
    #instruction: LD   A,04
    advance (7)
    #18B5
    #instruction: LD   (20C1),A
    M[20C1] := 04;
    advance (13)
    #18B8
    #instruction: LD   A,(2055)
    let:8 a1 = M[2055] in
    advance (13)
    #18BB
    #instruction: AND  01
    let:8 a2 = (01 & a1) in
    let:8 a3 = (01 | a1) in
    advance (7)
    #18BD
    #instruction: JP   Z,18B8
    if (is_zero(a2)) {
      advance (10)
      A := a2;
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump (18B8);
    } else {
      advance (10)
      #18C0
      #instruction: LD   A,(2055)
      let:8 a4 = M[2055] in
      advance (13)
      #18C3
      #instruction: AND  01
      let:8 a5 = (01 & a4) in
      let:8 a6 = (01 | a4) in
      advance (7)
      #18C5
      #instruction: JP   NZ,18C0
      if (!is_zero(a5)) {
        advance (10)
        A := a5;
        FlagS := a5[7];
        FlagZ := is_zero(a5);
        FlagA := a6[3];
        FlagP := parity(a5);
        FlagCY := false;
        jump (18C0);
      } else {
        advance (10)
        #18C8
        #instruction: LD   HL,3311
        advance (10)
        #18CB
        #instruction: LD   A,26
        advance (7)
        #18CD
        #instruction: NOP
        advance (4)
        #18CE
        #instruction: CALL 08FF
        let:16 a7 = (-1 + (SPH,SPL)) in
        M[a7] := 18;
        let:16 a8 = (-1 + a7) in
        M[a8] := D1;
        #return-to: 18D1
        advance (17)
        #08FF
        #instruction: LD   DE,1E00
        advance (10)
        #0902
        #instruction: PUSH HL
        let:16 a9 = (-1 + a8) in
        M[a9] := 33;
        let:16 a10 = (-1 + a9) in
        M[a10] := 11;
        advance (11)
        #0903
        #instruction: LD   H,00
        advance (7)
        #0905
        #instruction: LD   L,A
        advance (5)
        #0906
        #instruction: ADD  HL,HL
        let:17 a11 = add17(0026,0026) in
        advance (10)
        #0907
        #instruction: ADD  HL,HL
        let:17 a12 = add17(a11[15:0],a11[15:0]) in
        advance (10)
        #0908
        #instruction: ADD  HL,HL
        let:17 a13 = add17(a12[15:0],a12[15:0]) in
        advance (10)
        #0909
        #instruction: ADD  HL,DE
        let:17 a14 = add17(1E00,a13[15:0]) in
        advance (10)
        #090A
        #instruction: EX   DE,HL
        advance (4)
        #090B
        #instruction: POP  HL
        let:16 a15 = (1 + a10) in
        let:8 a16 = M[a10] in
        let:16 a17 = (1 + a15) in
        let:8 a18 = M[a15] in
        advance (10)
        #090C
        #instruction: LD   B,08
        advance (7)
        #090E
        #instruction: OUT  06
        advance (10)
        #0910
        #instruction: JP   1439
        advance (10)
        #1439
        #instruction: PUSH BC
        let:16 a19 = (-1 + a17) in
        M[a19] := 08;
        let:16 a20 = (-1 + a19) in
        M[a20] := C;
        advance (11)
        #143A
        #instruction: LD   A,(DE)
        let:8 a21 = M[a14[15:0]] in
        advance (7)
        #143B
        #instruction: LD   (HL),A
        M[(a18,a16)] := a21;
        advance (7)
        #143C
        #instruction: INC  DE
        let:16 a22 = (1 + a14[15:0]) in
        advance (5)
        #143D
        #instruction: LD   BC,0020
        advance (10)
        #1440
        #instruction: ADD  HL,BC
        let:17 a23 = add17(0020,(a18,a16)) in
        advance (10)
        #1441
        #instruction: POP  BC
        let:16 a24 = (1 + a20) in
        let:8 a25 = M[a20] in
        let:16 a26 = (1 + a24) in
        let:8 a27 = M[a24] in
        advance (10)
        #1442
        #instruction: DEC  B
        let:16 a28 = addWithCarry(!true,a27,~00) in
        let:8 a29 = (a27 & 0F) in
        let:8 a30 = (~00 & 0F) in
        let:16 a31 = addWithCarry(!true,a29,a30) in
        advance (5)
        #1443
        #instruction: JP   NZ,1439
        if (!is_zero(a28[7:0])) {
          advance (10)
          A := a21;
          B := a28[7:0];
          C := a25;
          D := a22[15:8];
          E := a22[7:0];
          H := a23[15:0][15:8];
          L := a23[15:0][7:0];
          SPH := a26[15:8];
          SPL := a26[7:0];
          FlagS := a28[7:0][7];
          FlagZ := is_zero(a28[7:0]);
          FlagA := a31[7:0][4];
          FlagP := parity(a28[7:0]);
          FlagCY := a23[16];
          jump (1439);
        } else {
          advance (10)
          #1446
          #instruction: RET
          let:16 a32 = (1 + a26) in
          let:8 a33 = M[a26] in
          let:16 a34 = (1 + a32) in
          let:8 a35 = M[a32] in
          advance (10)
          A := a21;
          B := a28[7:0];
          C := a25;
          D := a22[15:8];
          E := a22[7:0];
          H := a23[15:0][15:8];
          L := a23[15:0][7:0];
          SPH := a34[15:8];
          SPL := a34[7:0];
          FlagS := a28[7:0][7];
          FlagZ := is_zero(a28[7:0]);
          FlagA := a31[7:0][4];
          FlagP := parity(a28[7:0]);
          FlagCY := a23[16];
          jump ((a35,a33));
        }
      }
    }

18D1:

    #18D1
    #instruction: JP   0AB6
    advance (10)
    #0AB6
    #instruction: LD   A,80
    advance (7)
    #0AB8
    #instruction: JP   0AD7
    advance (10)
    #0AD7
    #instruction: LD   (20C0),A
    M[20C0] := 80;
    advance (13)
    #0ADA
    #instruction: LD   A,(20C0)
    let:8 a1 = M[20C0] in
    advance (13)
    #0ADD
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #0ADE
    #instruction: JP   NZ,0ADA
    if (!is_zero(a2)) {
      advance (10)
      A := a2;
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump (0ADA);
    } else {
      advance (10)
      #0AE1
      #instruction: RET
      let:16 a4 = (1 + (SPH,SPL)) in
      let:8 a5 = M[(SPH,SPL)] in
      let:16 a6 = (1 + a4) in
      let:8 a7 = M[a4] in
      advance (10)
      A := a2;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump ((a7,a5));
    }

18DC:

    #18DC
    #instruction: CALL 1956
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := DF;
    #return-to: 18DF
    advance (17)
    #1956
    #instruction: CALL 1A5C
    let:16 a3 = (-1 + a2) in
    M[a3] := 19;
    let:16 a4 = (-1 + a3) in
    M[a4] := 59;
    #return-to: 1959
    advance (17)
    #1A5C
    #instruction: LD   HL,2400
    advance (10)
    #1A5F
    #instruction: LD   (HL),00
    M[2400] := 00;
    advance (10)
    #1A61
    #instruction: INC  HL
    advance (5)
    #1A62
    #instruction: LD   A,H
    advance (5)
    #1A63
    #instruction: CP   40
    let:16 a5 = addWithCarry(!false,24,~40) in
    let:8 a6 = (24 & 0F) in
    let:8 a7 = (~40 & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    advance (7)
    #1A65
    #instruction: JP   NZ,1A5F
    if (!is_zero(a5[7:0])) {
      advance (10)
      A := 24;
      H := 24;
      L := 01;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a5[15:8][0];
      jump (1A5F);
    } else {
      advance (10)
      #1A68
      #instruction: RET
      let:16 a9 = (1 + a4) in
      let:8 a10 = M[a4] in
      let:16 a11 = (1 + a9) in
      let:8 a12 = M[a9] in
      advance (10)
      A := 24;
      H := 24;
      L := 01;
      SPH := a11[15:8];
      SPL := a11[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a5[15:8][0];
      jump ((a12,a10));
    }

18DF:

    #18DF
    #instruction: LD   A,08
    advance (7)
    #18E1
    #instruction: LD   (20CF),A
    M[20CF] := 08;
    advance (13)
    #18E4
    #instruction: JP   0AEA
    advance (10)
    #0AEA
    #instruction: XOR  A
    let:8 a1 = (08 ^ 08) in
    advance (4)
    #0AEB
    #instruction: OUT  03
    sound_control(Ufo,a1[0]);
    sound_control(Shot,a1[1]);
    sound_control(PlayerDie,a1[2]);
    sound_control(InvaderDie,a1[3]);
    sound_control(ExtraLife,a1[4]);
    advance (10)
    #0AED
    #instruction: OUT  05
    sound_control(FleetMovement1,a1[0]);
    sound_control(FleetMovement2,a1[1]);
    sound_control(FleetMovement3,a1[2]);
    sound_control(FleetMovement4,a1[3]);
    sound_control(UfoHit,a1[4]);
    advance (10)
    #0AEF
    #instruction: CALL 1982
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 0A;
    let:16 a3 = (-1 + a2) in
    M[a3] := F2;
    #return-to: 0AF2
    advance (17)
    #1982
    #instruction: LD   (20C1),A
    M[20C1] := a1;
    advance (13)
    #1985
    #instruction: RET
    let:16 a4 = (1 + a3) in
    let:8 a5 = M[a3] in
    let:16 a6 = (1 + a4) in
    let:8 a7 = M[a4] in
    advance (10)
    A := a1;
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump ((a7,a5));

190D:

    #190D
    #instruction: JP   1597
    advance (10)
    #1597
    #instruction: LD   A,(200D)
    let:8 a1 = M[200D] in
    advance (13)
    #159A
    #instruction: AND  A
    let:8 a2 = (a1 & a1) in
    let:8 a3 = (a1 | a1) in
    advance (4)
    #159B
    #instruction: JP   NZ,15B7
    if (!is_zero(a2)) {
      advance (10)
      #15B7
      #instruction: LD   HL,2524
      advance (10)
      #15BA
      #instruction: CALL 15C5
      let:16 a4 = (-1 + (SPH,SPL)) in
      M[a4] := 15;
      let:16 a5 = (-1 + a4) in
      M[a5] := BD;
      #return-to: 15BD
      advance (17)
      #15C5
      #instruction: LD   B,17
      advance (7)
      #15C7
      #instruction: LD   A,(HL)
      let:8 a6 = M[2524] in
      advance (7)
      #15C8
      #instruction: AND  A
      let:8 a7 = (a6 & a6) in
      let:8 a8 = (a6 | a6) in
      advance (4)
      #15C9
      #instruction: JP   NZ,166B
      if (!is_zero(a7)) {
        advance (10)
        #166B
        #instruction: SCF
        advance (4)
        #166C
        #instruction: RET
        let:16 a9 = (1 + a5) in
        let:8 a10 = M[a5] in
        let:16 a11 = (1 + a9) in
        let:8 a12 = M[a9] in
        advance (10)
        A := a7;
        B := 17;
        H := 25;
        L := 24;
        SPH := a11[15:8];
        SPL := a11[7:0];
        FlagS := a7[7];
        FlagZ := is_zero(a7);
        FlagA := a8[3];
        FlagP := parity(a7);
        FlagCY := true;
        jump ((a12,a10));
      } else {
        advance (10)
        #15CC
        #instruction: INC  HL
        advance (5)
        #15CD
        #instruction: DEC  B
        let:16 a13 = addWithCarry(!true,17,~00) in
        let:8 a14 = (17 & 0F) in
        let:8 a15 = (~00 & 0F) in
        let:16 a16 = addWithCarry(!true,a14,a15) in
        advance (5)
        #15CE
        #instruction: JP   NZ,15C7
        if (!is_zero(a13[7:0])) {
          advance (10)
          A := a7;
          B := a13[7:0];
          H := 25;
          L := 25;
          SPH := a5[15:8];
          SPL := a5[7:0];
          FlagS := a13[7:0][7];
          FlagZ := is_zero(a13[7:0]);
          FlagA := a16[7:0][4];
          FlagP := parity(a13[7:0]);
          FlagCY := false;
          jump (15C7);
        } else {
          advance (10)
          #15D1
          #instruction: RET
          let:16 a17 = (1 + a5) in
          let:8 a18 = M[a5] in
          let:16 a19 = (1 + a17) in
          let:8 a20 = M[a17] in
          advance (10)
          A := a7;
          B := a13[7:0];
          H := 25;
          L := 25;
          SPH := a19[15:8];
          SPL := a19[7:0];
          FlagS := a13[7:0][7];
          FlagZ := is_zero(a13[7:0]);
          FlagA := a16[7:0][4];
          FlagP := parity(a13[7:0]);
          FlagCY := false;
          jump ((a20,a18));
        }
      }
    } else {
      advance (10)
      #159E
      #instruction: LD   HL,3EA4
      advance (10)
      #15A1
      #instruction: CALL 15C5
      let:16 a21 = (-1 + (SPH,SPL)) in
      M[a21] := 15;
      let:16 a22 = (-1 + a21) in
      M[a22] := A4;
      #return-to: 15A4
      advance (17)
      #15C5
      #instruction: LD   B,17
      advance (7)
      #15C7
      #instruction: LD   A,(HL)
      let:8 a23 = M[3EA4] in
      advance (7)
      #15C8
      #instruction: AND  A
      let:8 a24 = (a23 & a23) in
      let:8 a25 = (a23 | a23) in
      advance (4)
      #15C9
      #instruction: JP   NZ,166B
      if (!is_zero(a24)) {
        advance (10)
        #166B
        #instruction: SCF
        advance (4)
        #166C
        #instruction: RET
        let:16 a26 = (1 + a22) in
        let:8 a27 = M[a22] in
        let:16 a28 = (1 + a26) in
        let:8 a29 = M[a26] in
        advance (10)
        A := a24;
        B := 17;
        H := 3E;
        L := A4;
        SPH := a28[15:8];
        SPL := a28[7:0];
        FlagS := a24[7];
        FlagZ := is_zero(a24);
        FlagA := a25[3];
        FlagP := parity(a24);
        FlagCY := true;
        jump ((a29,a27));
      } else {
        advance (10)
        #15CC
        #instruction: INC  HL
        advance (5)
        #15CD
        #instruction: DEC  B
        let:16 a30 = addWithCarry(!true,17,~00) in
        let:8 a31 = (17 & 0F) in
        let:8 a32 = (~00 & 0F) in
        let:16 a33 = addWithCarry(!true,a31,a32) in
        advance (5)
        #15CE
        #instruction: JP   NZ,15C7
        if (!is_zero(a30[7:0])) {
          advance (10)
          A := a24;
          B := a30[7:0];
          H := 3E;
          L := A5;
          SPH := a22[15:8];
          SPL := a22[7:0];
          FlagS := a30[7:0][7];
          FlagZ := is_zero(a30[7:0]);
          FlagA := a33[7:0][4];
          FlagP := parity(a30[7:0]);
          FlagCY := false;
          jump (15C7);
        } else {
          advance (10)
          #15D1
          #instruction: RET
          let:16 a34 = (1 + a22) in
          let:8 a35 = M[a22] in
          let:16 a36 = (1 + a34) in
          let:8 a37 = M[a34] in
          advance (10)
          A := a24;
          B := a30[7:0];
          H := 3E;
          L := A5;
          SPH := a36[15:8];
          SPL := a36[7:0];
          FlagS := a30[7:0][7];
          FlagZ := is_zero(a30[7:0]);
          FlagA := a33[7:0][4];
          FlagP := parity(a30[7:0]);
          FlagCY := false;
          jump ((a37,a35));
        }
      }
    }

1959:

    #1959
    #instruction: CALL 191A
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5C;
    #return-to: 195C
    advance (17)
    #191A
    #instruction: LD   C,1C
    advance (7)
    #191C
    #instruction: LD   HL,241E
    advance (10)
    #191F
    #instruction: LD   DE,1AE4
    advance (10)
    #1922
    #instruction: JP   08F3
    advance (10)
    #08F3
    #instruction: LD   A,(DE)
    advance (7)
    #08F4
    #instruction: PUSH DE
    let:16 a3 = (-1 + a2) in
    M[a3] := 1A;
    let:16 a4 = (-1 + a3) in
    M[a4] := E4;
    advance (11)
    #08F5
    #instruction: CALL 08FF
    let:16 a5 = (-1 + a4) in
    M[a5] := 08;
    let:16 a6 = (-1 + a5) in
    M[a6] := F8;
    #return-to: 08F8
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a7 = (-1 + a6) in
    M[a7] := 24;
    let:16 a8 = (-1 + a7) in
    M[a8] := 1E;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a9 = add17(0026,0026) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a10 = add17(a9[15:0],a9[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a11 = add17(a10[15:0],a10[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a12 = add17(1E00,a11[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a13 = (1 + a8) in
    let:8 a14 = M[a8] in
    let:16 a15 = (1 + a13) in
    let:8 a16 = M[a13] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a17 = (-1 + a15) in
    M[a17] := 08;
    let:16 a18 = (-1 + a17) in
    M[a18] := 1C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a19 = M[a12[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a16,a14)] := a19;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a20 = (1 + a12[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a21 = add17(0020,(a16,a14)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a22 = (1 + a18) in
    let:8 a23 = M[a18] in
    let:16 a24 = (1 + a22) in
    let:8 a25 = M[a22] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a26 = addWithCarry(!true,a25,~00) in
    let:8 a27 = (a25 & 0F) in
    let:8 a28 = (~00 & 0F) in
    let:16 a29 = addWithCarry(!true,a27,a28) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a26[7:0])) {
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a24[15:8];
      SPL := a24[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a30 = (1 + a24) in
      let:8 a31 = M[a24] in
      let:16 a32 = (1 + a30) in
      let:8 a33 = M[a30] in
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a32[15:8];
      SPL := a32[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump ((a33,a31));
    }

195C:

    #195C
    #instruction: CALL 1925
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5F;
    #return-to: 195F
    advance (17)
    #1925
    #instruction: LD   HL,20F8
    advance (10)
    #1928
    #instruction: JP   1931
    advance (10)
    #1931
    #instruction: LD   E,(HL)
    let:8 a3 = M[20F8] in
    advance (7)
    #1932
    #instruction: INC  HL
    advance (5)
    #1933
    #instruction: LD   D,(HL)
    let:8 a4 = M[20F9] in
    advance (7)
    #1934
    #instruction: INC  HL
    advance (5)
    #1935
    #instruction: LD   A,(HL)
    let:8 a5 = M[20FA] in
    advance (7)
    #1936
    #instruction: INC  HL
    advance (5)
    #1937
    #instruction: LD   H,(HL)
    let:8 a6 = M[20FB] in
    advance (7)
    #1938
    #instruction: LD   L,A
    advance (5)
    #1939
    #instruction: JP   09AD
    advance (10)
    #09AD
    #instruction: LD   A,D
    advance (5)
    #09AE
    #instruction: CALL 09B2
    let:16 a7 = (-1 + a2) in
    M[a7] := 09;
    let:16 a8 = (-1 + a7) in
    M[a8] := B1;
    #return-to: 09B1
    advance (17)
    #09B2
    #instruction: PUSH DE
    let:16 a9 = (-1 + a8) in
    M[a9] := a4;
    let:16 a10 = (-1 + a9) in
    M[a10] := a3;
    advance (11)
    #09B3
    #instruction: PUSH PSW
    let:16 a11 = (-1 + a10) in
    M[a11] := a4;
    let:16 a12 = (-1 + a11) in
    M[a12] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #09B4
    #instruction: RRCA
    advance (4)
    #09B5
    #instruction: RRCA
    advance (4)
    #09B6
    #instruction: RRCA
    advance (4)
    #09B7
    #instruction: RRCA
    advance (4)
    #09B8
    #instruction: AND  0F
    let:8 a13 = (0F & updateBit((updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0])[0])) in
    let:8 a14 = (0F | updateBit((updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0])[0])) in
    advance (7)
    #09BA
    #instruction: CALL 09C5
    let:16 a15 = (-1 + a12) in
    M[a15] := 09;
    let:16 a16 = (-1 + a15) in
    M[a16] := BD;
    #return-to: 09BD
    advance (17)
    #09C5
    #instruction: ADD  1A
    let:16 a17 = addWithCarry(false,1A,a13) in
    let:8 a18 = (1A & 0F) in
    let:8 a19 = (a13 & 0F) in
    let:16 a20 = addWithCarry(false,a18,a19) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a21 = (-1 + a16) in
    M[a21] := a6;
    let:16 a22 = (-1 + a21) in
    M[a22] := a5;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a23 = add17((00,a17[7:0]),(00,a17[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a24 = add17(a23[15:0],a23[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a25 = add17(a24[15:0],a24[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a26 = add17(1E00,a25[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a27 = (1 + a22) in
    let:8 a28 = M[a22] in
    let:16 a29 = (1 + a27) in
    let:8 a30 = M[a27] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a31 = (-1 + a29) in
    M[a31] := 08;
    let:16 a32 = (-1 + a31) in
    M[a32] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a33 = M[a26[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a30,a28)] := a33;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a34 = (1 + a26[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a35 = add17(0020,(a30,a28)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a36 = (1 + a32) in
    let:8 a37 = M[a32] in
    let:16 a38 = (1 + a36) in
    let:8 a39 = M[a36] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a40 = addWithCarry(!true,a39,~00) in
    let:8 a41 = (a39 & 0F) in
    let:8 a42 = (~00 & 0F) in
    let:16 a43 = addWithCarry(!true,a41,a42) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a40[7:0])) {
      advance (10)
      A := a33;
      B := a40[7:0];
      C := a37;
      D := a34[15:8];
      E := a34[7:0];
      H := a35[15:0][15:8];
      L := a35[15:0][7:0];
      SPH := a38[15:8];
      SPL := a38[7:0];
      FlagS := a40[7:0][7];
      FlagZ := is_zero(a40[7:0]);
      FlagA := a43[7:0][4];
      FlagP := parity(a40[7:0]);
      FlagCY := a35[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a44 = (1 + a38) in
      let:8 a45 = M[a38] in
      let:16 a46 = (1 + a44) in
      let:8 a47 = M[a44] in
      advance (10)
      A := a33;
      B := a40[7:0];
      C := a37;
      D := a34[15:8];
      E := a34[7:0];
      H := a35[15:0][15:8];
      L := a35[15:0][7:0];
      SPH := a46[15:8];
      SPL := a46[7:0];
      FlagS := a40[7:0][7];
      FlagZ := is_zero(a40[7:0]);
      FlagA := a43[7:0][4];
      FlagP := parity(a40[7:0]);
      FlagCY := a35[16];
      jump ((a47,a45));
    }

195F:

    #195F
    #instruction: CALL 192B
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 62;
    #return-to: 1962
    advance (17)
    #192B
    #instruction: LD   HL,20FC
    advance (10)
    #192E
    #instruction: JP   1931
    advance (10)
    #1931
    #instruction: LD   E,(HL)
    let:8 a3 = M[20FC] in
    advance (7)
    #1932
    #instruction: INC  HL
    advance (5)
    #1933
    #instruction: LD   D,(HL)
    let:8 a4 = M[20FD] in
    advance (7)
    #1934
    #instruction: INC  HL
    advance (5)
    #1935
    #instruction: LD   A,(HL)
    let:8 a5 = M[20FE] in
    advance (7)
    #1936
    #instruction: INC  HL
    advance (5)
    #1937
    #instruction: LD   H,(HL)
    let:8 a6 = M[20FF] in
    advance (7)
    #1938
    #instruction: LD   L,A
    advance (5)
    #1939
    #instruction: JP   09AD
    advance (10)
    #09AD
    #instruction: LD   A,D
    advance (5)
    #09AE
    #instruction: CALL 09B2
    let:16 a7 = (-1 + a2) in
    M[a7] := 09;
    let:16 a8 = (-1 + a7) in
    M[a8] := B1;
    #return-to: 09B1
    advance (17)
    #09B2
    #instruction: PUSH DE
    let:16 a9 = (-1 + a8) in
    M[a9] := a4;
    let:16 a10 = (-1 + a9) in
    M[a10] := a3;
    advance (11)
    #09B3
    #instruction: PUSH PSW
    let:16 a11 = (-1 + a10) in
    M[a11] := a4;
    let:16 a12 = (-1 + a11) in
    M[a12] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #09B4
    #instruction: RRCA
    advance (4)
    #09B5
    #instruction: RRCA
    advance (4)
    #09B6
    #instruction: RRCA
    advance (4)
    #09B7
    #instruction: RRCA
    advance (4)
    #09B8
    #instruction: AND  0F
    let:8 a13 = (0F & updateBit((updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0])[0])) in
    let:8 a14 = (0F | updateBit((updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0])[0])) in
    advance (7)
    #09BA
    #instruction: CALL 09C5
    let:16 a15 = (-1 + a12) in
    M[a15] := 09;
    let:16 a16 = (-1 + a15) in
    M[a16] := BD;
    #return-to: 09BD
    advance (17)
    #09C5
    #instruction: ADD  1A
    let:16 a17 = addWithCarry(false,1A,a13) in
    let:8 a18 = (1A & 0F) in
    let:8 a19 = (a13 & 0F) in
    let:16 a20 = addWithCarry(false,a18,a19) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a21 = (-1 + a16) in
    M[a21] := a6;
    let:16 a22 = (-1 + a21) in
    M[a22] := a5;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a23 = add17((00,a17[7:0]),(00,a17[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a24 = add17(a23[15:0],a23[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a25 = add17(a24[15:0],a24[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a26 = add17(1E00,a25[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a27 = (1 + a22) in
    let:8 a28 = M[a22] in
    let:16 a29 = (1 + a27) in
    let:8 a30 = M[a27] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a31 = (-1 + a29) in
    M[a31] := 08;
    let:16 a32 = (-1 + a31) in
    M[a32] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a33 = M[a26[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a30,a28)] := a33;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a34 = (1 + a26[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a35 = add17(0020,(a30,a28)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a36 = (1 + a32) in
    let:8 a37 = M[a32] in
    let:16 a38 = (1 + a36) in
    let:8 a39 = M[a36] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a40 = addWithCarry(!true,a39,~00) in
    let:8 a41 = (a39 & 0F) in
    let:8 a42 = (~00 & 0F) in
    let:16 a43 = addWithCarry(!true,a41,a42) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a40[7:0])) {
      advance (10)
      A := a33;
      B := a40[7:0];
      C := a37;
      D := a34[15:8];
      E := a34[7:0];
      H := a35[15:0][15:8];
      L := a35[15:0][7:0];
      SPH := a38[15:8];
      SPL := a38[7:0];
      FlagS := a40[7:0][7];
      FlagZ := is_zero(a40[7:0]);
      FlagA := a43[7:0][4];
      FlagP := parity(a40[7:0]);
      FlagCY := a35[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a44 = (1 + a38) in
      let:8 a45 = M[a38] in
      let:16 a46 = (1 + a44) in
      let:8 a47 = M[a44] in
      advance (10)
      A := a33;
      B := a40[7:0];
      C := a37;
      D := a34[15:8];
      E := a34[7:0];
      H := a35[15:0][15:8];
      L := a35[15:0][7:0];
      SPH := a46[15:8];
      SPL := a46[7:0];
      FlagS := a40[7:0][7];
      FlagZ := is_zero(a40[7:0]);
      FlagA := a43[7:0][4];
      FlagP := parity(a40[7:0]);
      FlagCY := a35[16];
      jump ((a47,a45));
    }

1962:

    #1962
    #instruction: CALL 1950
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 65;
    #return-to: 1965
    advance (17)
    #1950
    #instruction: LD   HL,20F4
    advance (10)
    #1953
    #instruction: JP   1931
    advance (10)
    #1931
    #instruction: LD   E,(HL)
    let:8 a3 = M[20F4] in
    advance (7)
    #1932
    #instruction: INC  HL
    advance (5)
    #1933
    #instruction: LD   D,(HL)
    let:8 a4 = M[20F5] in
    advance (7)
    #1934
    #instruction: INC  HL
    advance (5)
    #1935
    #instruction: LD   A,(HL)
    let:8 a5 = M[20F6] in
    advance (7)
    #1936
    #instruction: INC  HL
    advance (5)
    #1937
    #instruction: LD   H,(HL)
    let:8 a6 = M[20F7] in
    advance (7)
    #1938
    #instruction: LD   L,A
    advance (5)
    #1939
    #instruction: JP   09AD
    advance (10)
    #09AD
    #instruction: LD   A,D
    advance (5)
    #09AE
    #instruction: CALL 09B2
    let:16 a7 = (-1 + a2) in
    M[a7] := 09;
    let:16 a8 = (-1 + a7) in
    M[a8] := B1;
    #return-to: 09B1
    advance (17)
    #09B2
    #instruction: PUSH DE
    let:16 a9 = (-1 + a8) in
    M[a9] := a4;
    let:16 a10 = (-1 + a9) in
    M[a10] := a3;
    advance (11)
    #09B3
    #instruction: PUSH PSW
    let:16 a11 = (-1 + a10) in
    M[a11] := a4;
    let:16 a12 = (-1 + a11) in
    M[a12] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #09B4
    #instruction: RRCA
    advance (4)
    #09B5
    #instruction: RRCA
    advance (4)
    #09B6
    #instruction: RRCA
    advance (4)
    #09B7
    #instruction: RRCA
    advance (4)
    #09B8
    #instruction: AND  0F
    let:8 a13 = (0F & updateBit((updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0])[0])) in
    let:8 a14 = (0F | updateBit((updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0]) >> 01),7,updateBit((updateBit((a4 >> 01),7,a4[0]) >> 01),7,updateBit((a4 >> 01),7,a4[0])[0])[0])[0])) in
    advance (7)
    #09BA
    #instruction: CALL 09C5
    let:16 a15 = (-1 + a12) in
    M[a15] := 09;
    let:16 a16 = (-1 + a15) in
    M[a16] := BD;
    #return-to: 09BD
    advance (17)
    #09C5
    #instruction: ADD  1A
    let:16 a17 = addWithCarry(false,1A,a13) in
    let:8 a18 = (1A & 0F) in
    let:8 a19 = (a13 & 0F) in
    let:16 a20 = addWithCarry(false,a18,a19) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a21 = (-1 + a16) in
    M[a21] := a6;
    let:16 a22 = (-1 + a21) in
    M[a22] := a5;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a23 = add17((00,a17[7:0]),(00,a17[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a24 = add17(a23[15:0],a23[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a25 = add17(a24[15:0],a24[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a26 = add17(1E00,a25[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a27 = (1 + a22) in
    let:8 a28 = M[a22] in
    let:16 a29 = (1 + a27) in
    let:8 a30 = M[a27] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a31 = (-1 + a29) in
    M[a31] := 08;
    let:16 a32 = (-1 + a31) in
    M[a32] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a33 = M[a26[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a30,a28)] := a33;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a34 = (1 + a26[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a35 = add17(0020,(a30,a28)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a36 = (1 + a32) in
    let:8 a37 = M[a32] in
    let:16 a38 = (1 + a36) in
    let:8 a39 = M[a36] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a40 = addWithCarry(!true,a39,~00) in
    let:8 a41 = (a39 & 0F) in
    let:8 a42 = (~00 & 0F) in
    let:16 a43 = addWithCarry(!true,a41,a42) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a40[7:0])) {
      advance (10)
      A := a33;
      B := a40[7:0];
      C := a37;
      D := a34[15:8];
      E := a34[7:0];
      H := a35[15:0][15:8];
      L := a35[15:0][7:0];
      SPH := a38[15:8];
      SPL := a38[7:0];
      FlagS := a40[7:0][7];
      FlagZ := is_zero(a40[7:0]);
      FlagA := a43[7:0][4];
      FlagP := parity(a40[7:0]);
      FlagCY := a35[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a44 = (1 + a38) in
      let:8 a45 = M[a38] in
      let:16 a46 = (1 + a44) in
      let:8 a47 = M[a44] in
      advance (10)
      A := a33;
      B := a40[7:0];
      C := a37;
      D := a34[15:8];
      E := a34[7:0];
      H := a35[15:0][15:8];
      L := a35[15:0][7:0];
      SPH := a46[15:8];
      SPL := a46[7:0];
      FlagS := a40[7:0][7];
      FlagZ := is_zero(a40[7:0]);
      FlagA := a43[7:0][4];
      FlagP := parity(a40[7:0]);
      FlagCY := a35[16];
      jump ((a47,a45));
    }

1965:

    #1965
    #instruction: CALL 193C
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 68;
    #return-to: 1968
    advance (17)
    #193C
    #instruction: LD   C,07
    advance (7)
    #193E
    #instruction: LD   HL,3501
    advance (10)
    #1941
    #instruction: LD   DE,1FA9
    advance (10)
    #1944
    #instruction: JP   08F3
    advance (10)
    #08F3
    #instruction: LD   A,(DE)
    advance (7)
    #08F4
    #instruction: PUSH DE
    let:16 a3 = (-1 + a2) in
    M[a3] := 1F;
    let:16 a4 = (-1 + a3) in
    M[a4] := A9;
    advance (11)
    #08F5
    #instruction: CALL 08FF
    let:16 a5 = (-1 + a4) in
    M[a5] := 08;
    let:16 a6 = (-1 + a5) in
    M[a6] := F8;
    #return-to: 08F8
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a7 = (-1 + a6) in
    M[a7] := 35;
    let:16 a8 = (-1 + a7) in
    M[a8] := 01;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a9 = add17(0002,0002) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a10 = add17(a9[15:0],a9[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a11 = add17(a10[15:0],a10[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a12 = add17(1E00,a11[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a13 = (1 + a8) in
    let:8 a14 = M[a8] in
    let:16 a15 = (1 + a13) in
    let:8 a16 = M[a13] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a17 = (-1 + a15) in
    M[a17] := 08;
    let:16 a18 = (-1 + a17) in
    M[a18] := 07;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a19 = M[a12[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a16,a14)] := a19;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a20 = (1 + a12[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a21 = add17(0020,(a16,a14)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a22 = (1 + a18) in
    let:8 a23 = M[a18] in
    let:16 a24 = (1 + a22) in
    let:8 a25 = M[a22] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a26 = addWithCarry(!true,a25,~00) in
    let:8 a27 = (a25 & 0F) in
    let:8 a28 = (~00 & 0F) in
    let:16 a29 = addWithCarry(!true,a27,a28) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a26[7:0])) {
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a24[15:8];
      SPL := a24[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a30 = (1 + a24) in
      let:8 a31 = M[a24] in
      let:16 a32 = (1 + a30) in
      let:8 a33 = M[a30] in
      advance (10)
      A := a19;
      B := a26[7:0];
      C := a23;
      D := a20[15:8];
      E := a20[7:0];
      H := a21[15:0][15:8];
      L := a21[15:0][7:0];
      SPH := a32[15:8];
      SPL := a32[7:0];
      FlagS := a26[7:0][7];
      FlagZ := is_zero(a26[7:0]);
      FlagA := a29[7:0][4];
      FlagP := parity(a26[7:0]);
      FlagCY := a21[16];
      jump ((a33,a31));
    }

1968:

    #1968
    #instruction: JP   1947
    advance (10)
    #1947
    #instruction: LD   A,(20EB)
    let:8 a1 = M[20EB] in
    advance (13)
    #194A
    #instruction: LD   HL,3C01
    advance (10)
    #194D
    #instruction: JP   09B2
    advance (10)
    #09B2
    #instruction: PUSH DE
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := D;
    let:16 a3 = (-1 + a2) in
    M[a3] := E;
    advance (11)
    #09B3
    #instruction: PUSH PSW
    let:16 a4 = (-1 + a3) in
    M[a4] := a1;
    let:16 a5 = (-1 + a4) in
    M[a5] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #09B4
    #instruction: RRCA
    advance (4)
    #09B5
    #instruction: RRCA
    advance (4)
    #09B6
    #instruction: RRCA
    advance (4)
    #09B7
    #instruction: RRCA
    advance (4)
    #09B8
    #instruction: AND  0F
    let:8 a6 = (0F & updateBit((updateBit((updateBit((updateBit((a1 >> 01),7,a1[0]) >> 01),7,updateBit((a1 >> 01),7,a1[0])[0]) >> 01),7,updateBit((updateBit((a1 >> 01),7,a1[0]) >> 01),7,updateBit((a1 >> 01),7,a1[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a1 >> 01),7,a1[0]) >> 01),7,updateBit((a1 >> 01),7,a1[0])[0]) >> 01),7,updateBit((updateBit((a1 >> 01),7,a1[0]) >> 01),7,updateBit((a1 >> 01),7,a1[0])[0])[0])[0])) in
    let:8 a7 = (0F | updateBit((updateBit((updateBit((updateBit((a1 >> 01),7,a1[0]) >> 01),7,updateBit((a1 >> 01),7,a1[0])[0]) >> 01),7,updateBit((updateBit((a1 >> 01),7,a1[0]) >> 01),7,updateBit((a1 >> 01),7,a1[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a1 >> 01),7,a1[0]) >> 01),7,updateBit((a1 >> 01),7,a1[0])[0]) >> 01),7,updateBit((updateBit((a1 >> 01),7,a1[0]) >> 01),7,updateBit((a1 >> 01),7,a1[0])[0])[0])[0])) in
    advance (7)
    #09BA
    #instruction: CALL 09C5
    let:16 a8 = (-1 + a5) in
    M[a8] := 09;
    let:16 a9 = (-1 + a8) in
    M[a9] := BD;
    #return-to: 09BD
    advance (17)
    #09C5
    #instruction: ADD  1A
    let:16 a10 = addWithCarry(false,1A,a6) in
    let:8 a11 = (1A & 0F) in
    let:8 a12 = (a6 & 0F) in
    let:16 a13 = addWithCarry(false,a11,a12) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a14 = (-1 + a9) in
    M[a14] := 3C;
    let:16 a15 = (-1 + a14) in
    M[a15] := 01;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a16 = add17((00,a10[7:0]),(00,a10[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a17 = add17(a16[15:0],a16[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a18 = add17(a17[15:0],a17[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a19 = add17(1E00,a18[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a20 = (1 + a15) in
    let:8 a21 = M[a15] in
    let:16 a22 = (1 + a20) in
    let:8 a23 = M[a20] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a24 = (-1 + a22) in
    M[a24] := 08;
    let:16 a25 = (-1 + a24) in
    M[a25] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a26 = M[a19[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a23,a21)] := a26;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a27 = (1 + a19[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a28 = add17(0020,(a23,a21)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a29 = (1 + a25) in
    let:8 a30 = M[a25] in
    let:16 a31 = (1 + a29) in
    let:8 a32 = M[a29] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a33 = addWithCarry(!true,a32,~00) in
    let:8 a34 = (a32 & 0F) in
    let:8 a35 = (~00 & 0F) in
    let:16 a36 = addWithCarry(!true,a34,a35) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a33[7:0])) {
      advance (10)
      A := a26;
      B := a33[7:0];
      C := a30;
      D := a27[15:8];
      E := a27[7:0];
      H := a28[15:0][15:8];
      L := a28[15:0][7:0];
      SPH := a31[15:8];
      SPL := a31[7:0];
      FlagS := a33[7:0][7];
      FlagZ := is_zero(a33[7:0]);
      FlagA := a36[7:0][4];
      FlagP := parity(a33[7:0]);
      FlagCY := a28[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a37 = (1 + a31) in
      let:8 a38 = M[a31] in
      let:16 a39 = (1 + a37) in
      let:8 a40 = M[a37] in
      advance (10)
      A := a26;
      B := a33[7:0];
      C := a30;
      D := a27[15:8];
      E := a27[7:0];
      H := a28[15:0][15:8];
      L := a28[15:0][7:0];
      SPH := a39[15:8];
      SPL := a39[7:0];
      FlagS := a33[7:0][7];
      FlagZ := is_zero(a33[7:0]);
      FlagA := a36[7:0][4];
      FlagP := parity(a33[7:0]);
      FlagCY := a28[16];
      jump ((a40,a38));
    }

196E:

    #196E
    #instruction: JP   1671
    advance (10)
    jump (1671);

197C:

    #197C
    #instruction: CALL 1947
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7F;
    #return-to: 197F
    advance (17)
    #1947
    #instruction: LD   A,(20EB)
    let:8 a3 = M[20EB] in
    advance (13)
    #194A
    #instruction: LD   HL,3C01
    advance (10)
    #194D
    #instruction: JP   09B2
    advance (10)
    #09B2
    #instruction: PUSH DE
    let:16 a4 = (-1 + a2) in
    M[a4] := D;
    let:16 a5 = (-1 + a4) in
    M[a5] := E;
    advance (11)
    #09B3
    #instruction: PUSH PSW
    let:16 a6 = (-1 + a5) in
    M[a6] := a3;
    let:16 a7 = (-1 + a6) in
    M[a7] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    advance (11)
    #09B4
    #instruction: RRCA
    advance (4)
    #09B5
    #instruction: RRCA
    advance (4)
    #09B6
    #instruction: RRCA
    advance (4)
    #09B7
    #instruction: RRCA
    advance (4)
    #09B8
    #instruction: AND  0F
    let:8 a8 = (0F & updateBit((updateBit((updateBit((updateBit((a3 >> 01),7,a3[0]) >> 01),7,updateBit((a3 >> 01),7,a3[0])[0]) >> 01),7,updateBit((updateBit((a3 >> 01),7,a3[0]) >> 01),7,updateBit((a3 >> 01),7,a3[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a3 >> 01),7,a3[0]) >> 01),7,updateBit((a3 >> 01),7,a3[0])[0]) >> 01),7,updateBit((updateBit((a3 >> 01),7,a3[0]) >> 01),7,updateBit((a3 >> 01),7,a3[0])[0])[0])[0])) in
    let:8 a9 = (0F | updateBit((updateBit((updateBit((updateBit((a3 >> 01),7,a3[0]) >> 01),7,updateBit((a3 >> 01),7,a3[0])[0]) >> 01),7,updateBit((updateBit((a3 >> 01),7,a3[0]) >> 01),7,updateBit((a3 >> 01),7,a3[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((a3 >> 01),7,a3[0]) >> 01),7,updateBit((a3 >> 01),7,a3[0])[0]) >> 01),7,updateBit((updateBit((a3 >> 01),7,a3[0]) >> 01),7,updateBit((a3 >> 01),7,a3[0])[0])[0])[0])) in
    advance (7)
    #09BA
    #instruction: CALL 09C5
    let:16 a10 = (-1 + a7) in
    M[a10] := 09;
    let:16 a11 = (-1 + a10) in
    M[a11] := BD;
    #return-to: 09BD
    advance (17)
    #09C5
    #instruction: ADD  1A
    let:16 a12 = addWithCarry(false,1A,a8) in
    let:8 a13 = (1A & 0F) in
    let:8 a14 = (a8 & 0F) in
    let:16 a15 = addWithCarry(false,a13,a14) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a16 = (-1 + a11) in
    M[a16] := 3C;
    let:16 a17 = (-1 + a16) in
    M[a17] := 01;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a18 = add17((00,a12[7:0]),(00,a12[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a19 = add17(a18[15:0],a18[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a20 = add17(a19[15:0],a19[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a21 = add17(1E00,a20[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a22 = (1 + a17) in
    let:8 a23 = M[a17] in
    let:16 a24 = (1 + a22) in
    let:8 a25 = M[a22] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a26 = (-1 + a24) in
    M[a26] := 08;
    let:16 a27 = (-1 + a26) in
    M[a27] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a28 = M[a21[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a25,a23)] := a28;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a29 = (1 + a21[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a30 = add17(0020,(a25,a23)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a31 = (1 + a27) in
    let:8 a32 = M[a27] in
    let:16 a33 = (1 + a31) in
    let:8 a34 = M[a31] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a35 = addWithCarry(!true,a34,~00) in
    let:8 a36 = (a34 & 0F) in
    let:8 a37 = (~00 & 0F) in
    let:16 a38 = addWithCarry(!true,a36,a37) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a35[7:0])) {
      advance (10)
      A := a28;
      B := a35[7:0];
      C := a32;
      D := a29[15:8];
      E := a29[7:0];
      H := a30[15:0][15:8];
      L := a30[15:0][7:0];
      SPH := a33[15:8];
      SPL := a33[7:0];
      FlagS := a35[7:0][7];
      FlagZ := is_zero(a35[7:0]);
      FlagA := a38[7:0][4];
      FlagP := parity(a35[7:0]);
      FlagCY := a30[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a39 = (1 + a33) in
      let:8 a40 = M[a33] in
      let:16 a41 = (1 + a39) in
      let:8 a42 = M[a39] in
      advance (10)
      A := a28;
      B := a35[7:0];
      C := a32;
      D := a29[15:8];
      E := a29[7:0];
      H := a30[15:0][15:8];
      L := a30[15:0][7:0];
      SPH := a41[15:8];
      SPL := a41[7:0];
      FlagS := a35[7:0][7];
      FlagZ := is_zero(a35[7:0]);
      FlagA := a38[7:0][4];
      FlagP := parity(a35[7:0]);
      FlagCY := a30[16];
      jump ((a42,a40));
    }

197F:

    #197F
    #instruction: JP   193C
    advance (10)
    #193C
    #instruction: LD   C,07
    advance (7)
    #193E
    #instruction: LD   HL,3501
    advance (10)
    #1941
    #instruction: LD   DE,1FA9
    advance (10)
    #1944
    #instruction: JP   08F3
    advance (10)
    #08F3
    #instruction: LD   A,(DE)
    advance (7)
    #08F4
    #instruction: PUSH DE
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 1F;
    let:16 a2 = (-1 + a1) in
    M[a2] := A9;
    advance (11)
    #08F5
    #instruction: CALL 08FF
    let:16 a3 = (-1 + a2) in
    M[a3] := 08;
    let:16 a4 = (-1 + a3) in
    M[a4] := F8;
    #return-to: 08F8
    advance (17)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a5 = (-1 + a4) in
    M[a5] := 35;
    let:16 a6 = (-1 + a5) in
    M[a6] := 01;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a7 = add17(0002,0002) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a8 = add17(a7[15:0],a7[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a9 = add17(a8[15:0],a8[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a10 = add17(1E00,a9[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a11 = (1 + a6) in
    let:8 a12 = M[a6] in
    let:16 a13 = (1 + a11) in
    let:8 a14 = M[a11] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a15 = (-1 + a13) in
    M[a15] := 08;
    let:16 a16 = (-1 + a15) in
    M[a16] := 07;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a17 = M[a10[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a14,a12)] := a17;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a18 = (1 + a10[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a19 = add17(0020,(a14,a12)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a20 = (1 + a16) in
    let:8 a21 = M[a16] in
    let:16 a22 = (1 + a20) in
    let:8 a23 = M[a20] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a24 = addWithCarry(!true,a23,~00) in
    let:8 a25 = (a23 & 0F) in
    let:8 a26 = (~00 & 0F) in
    let:16 a27 = addWithCarry(!true,a25,a26) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a24[7:0])) {
      advance (10)
      A := a17;
      B := a24[7:0];
      C := a21;
      D := a18[15:8];
      E := a18[7:0];
      H := a19[15:0][15:8];
      L := a19[15:0][7:0];
      SPH := a22[15:8];
      SPL := a22[7:0];
      FlagS := a24[7:0][7];
      FlagZ := is_zero(a24[7:0]);
      FlagA := a27[7:0][4];
      FlagP := parity(a24[7:0]);
      FlagCY := a19[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a28 = (1 + a22) in
      let:8 a29 = M[a22] in
      let:16 a30 = (1 + a28) in
      let:8 a31 = M[a28] in
      advance (10)
      A := a17;
      B := a24[7:0];
      C := a21;
      D := a18[15:8];
      E := a18[7:0];
      H := a19[15:0][15:8];
      L := a19[15:0][7:0];
      SPH := a30[15:8];
      SPL := a30[7:0];
      FlagS := a24[7:0][7];
      FlagZ := is_zero(a24[7:0]);
      FlagA := a27[7:0][4];
      FlagP := parity(a24[7:0]);
      FlagCY := a19[16];
      jump ((a31,a29));
    }

19F5:

    #19F5
    #instruction: LD   A,C
    advance (5)
    #19F6
    #instruction: DEC  A
    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    advance (5)
    #19F7
    #instruction: JP   NZ,19EC
    if (!is_zero(a1[7:0])) {
      advance (10)
      #19EC
      #instruction: LD   DE,1C60
      advance (10)
      #19EF
      #instruction: LD   B,10
      advance (7)
      #19F1
      #instruction: LD   C,A
      advance (5)
      #19F2
      #instruction: CALL 1439
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 19;
      let:16 a6 = (-1 + a5) in
      M[a6] := F5;
      #return-to: 19F5
      advance (17)
      #1439
      #instruction: PUSH BC
      let:16 a7 = (-1 + a6) in
      M[a7] := 10;
      let:16 a8 = (-1 + a7) in
      M[a8] := a1[7:0];
      advance (11)
      #143A
      #instruction: LD   A,(DE)
      advance (7)
      #143B
      #instruction: LD   (HL),A
      M[(H,L)] := 00;
      advance (7)
      #143C
      #instruction: INC  DE
      advance (5)
      #143D
      #instruction: LD   BC,0020
      advance (10)
      #1440
      #instruction: ADD  HL,BC
      let:17 a9 = add17(0020,(H,L)) in
      advance (10)
      #1441
      #instruction: POP  BC
      let:16 a10 = (1 + a8) in
      let:8 a11 = M[a8] in
      let:16 a12 = (1 + a10) in
      let:8 a13 = M[a10] in
      advance (10)
      #1442
      #instruction: DEC  B
      let:16 a14 = addWithCarry(!true,a13,~00) in
      let:8 a15 = (a13 & 0F) in
      let:8 a16 = (~00 & 0F) in
      let:16 a17 = addWithCarry(!true,a15,a16) in
      advance (5)
      #1443
      #instruction: JP   NZ,1439
      if (!is_zero(a14[7:0])) {
        advance (10)
        A := 00;
        B := a14[7:0];
        C := a11;
        D := 1C;
        E := 61;
        H := a9[15:0][15:8];
        L := a9[15:0][7:0];
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a14[7:0][7];
        FlagZ := is_zero(a14[7:0]);
        FlagA := a17[7:0][4];
        FlagP := parity(a14[7:0]);
        FlagCY := a9[16];
        jump (1439);
      } else {
        advance (10)
        #1446
        #instruction: RET
        let:16 a18 = (1 + a12) in
        let:8 a19 = M[a12] in
        let:16 a20 = (1 + a18) in
        let:8 a21 = M[a18] in
        advance (10)
        A := 00;
        B := a14[7:0];
        C := a11;
        D := 1C;
        E := 61;
        H := a9[15:0][15:8];
        L := a9[15:0][7:0];
        SPH := a20[15:8];
        SPL := a20[7:0];
        FlagS := a14[7:0][7];
        FlagZ := is_zero(a14[7:0]);
        FlagA := a17[7:0][4];
        FlagP := parity(a14[7:0]);
        FlagCY := a9[16];
        jump ((a21,a19));
      }
    } else {
      advance (10)
      #19FA
      #instruction: LD   B,10
      advance (7)
      #19FC
      #instruction: CALL 14CB
      let:16 a22 = (-1 + (SPH,SPL)) in
      M[a22] := 19;
      let:16 a23 = (-1 + a22) in
      M[a23] := FF;
      #return-to: 19FF
      advance (17)
      #14CB
      #instruction: XOR  A
      let:8 a24 = (a1[7:0] ^ a1[7:0]) in
      advance (4)
      #14CC
      #instruction: PUSH BC
      let:16 a25 = (-1 + a23) in
      M[a25] := 10;
      let:16 a26 = (-1 + a25) in
      M[a26] := C;
      advance (11)
      #14CD
      #instruction: LD   (HL),A
      M[(H,L)] := a24;
      advance (7)
      #14CE
      #instruction: LD   BC,0020
      advance (10)
      #14D1
      #instruction: ADD  HL,BC
      let:17 a27 = add17(0020,(H,L)) in
      advance (10)
      #14D2
      #instruction: POP  BC
      let:16 a28 = (1 + a26) in
      let:8 a29 = M[a26] in
      let:16 a30 = (1 + a28) in
      let:8 a31 = M[a28] in
      advance (10)
      #14D3
      #instruction: DEC  B
      let:16 a32 = addWithCarry(!true,a31,~00) in
      let:8 a33 = (a31 & 0F) in
      let:8 a34 = (~00 & 0F) in
      let:16 a35 = addWithCarry(!true,a33,a34) in
      advance (5)
      #14D4
      #instruction: JP   NZ,14CC
      if (!is_zero(a32[7:0])) {
        advance (10)
        A := a24;
        B := a32[7:0];
        C := a29;
        H := a27[15:0][15:8];
        L := a27[15:0][7:0];
        SPH := a30[15:8];
        SPL := a30[7:0];
        FlagS := a32[7:0][7];
        FlagZ := is_zero(a32[7:0]);
        FlagA := a35[7:0][4];
        FlagP := parity(a32[7:0]);
        FlagCY := a27[16];
        jump (14CC);
      } else {
        advance (10)
        #14D7
        #instruction: RET
        let:16 a36 = (1 + a30) in
        let:8 a37 = M[a30] in
        let:16 a38 = (1 + a36) in
        let:8 a39 = M[a36] in
        advance (10)
        A := a24;
        B := a32[7:0];
        C := a29;
        H := a27[15:0][15:8];
        L := a27[15:0][7:0];
        SPH := a38[15:8];
        SPL := a38[7:0];
        FlagS := a32[7:0][7];
        FlagZ := is_zero(a32[7:0]);
        FlagA := a35[7:0][4];
        FlagP := parity(a32[7:0]);
        FlagCY := a27[16];
        jump ((a39,a37));
      }
    }

19FF:

    #19FF
    #instruction: LD   A,H
    advance (5)
    #1A00
    #instruction: CP   35
    let:16 a1 = addWithCarry(!false,H,~35) in
    let:8 a2 = (H & 0F) in
    let:8 a3 = (~35 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    advance (7)
    #1A02
    #instruction: JP   NZ,19FA
    if (!is_zero(a1[7:0])) {
      advance (10)
      #19FA
      #instruction: LD   B,10
      advance (7)
      #19FC
      #instruction: CALL 14CB
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 19;
      let:16 a6 = (-1 + a5) in
      M[a6] := FF;
      #return-to: 19FF
      advance (17)
      #14CB
      #instruction: XOR  A
      let:8 a7 = (H ^ H) in
      advance (4)
      #14CC
      #instruction: PUSH BC
      let:16 a8 = (-1 + a6) in
      M[a8] := 10;
      let:16 a9 = (-1 + a8) in
      M[a9] := C;
      advance (11)
      #14CD
      #instruction: LD   (HL),A
      M[(H,L)] := a7;
      advance (7)
      #14CE
      #instruction: LD   BC,0020
      advance (10)
      #14D1
      #instruction: ADD  HL,BC
      let:17 a10 = add17(0020,(H,L)) in
      advance (10)
      #14D2
      #instruction: POP  BC
      let:16 a11 = (1 + a9) in
      let:8 a12 = M[a9] in
      let:16 a13 = (1 + a11) in
      let:8 a14 = M[a11] in
      advance (10)
      #14D3
      #instruction: DEC  B
      let:16 a15 = addWithCarry(!true,a14,~00) in
      let:8 a16 = (a14 & 0F) in
      let:8 a17 = (~00 & 0F) in
      let:16 a18 = addWithCarry(!true,a16,a17) in
      advance (5)
      #14D4
      #instruction: JP   NZ,14CC
      if (!is_zero(a15[7:0])) {
        advance (10)
        A := a7;
        B := a15[7:0];
        C := a12;
        H := a10[15:0][15:8];
        L := a10[15:0][7:0];
        SPH := a13[15:8];
        SPL := a13[7:0];
        FlagS := a15[7:0][7];
        FlagZ := is_zero(a15[7:0]);
        FlagA := a18[7:0][4];
        FlagP := parity(a15[7:0]);
        FlagCY := a10[16];
        jump (14CC);
      } else {
        advance (10)
        #14D7
        #instruction: RET
        let:16 a19 = (1 + a13) in
        let:8 a20 = M[a13] in
        let:16 a21 = (1 + a19) in
        let:8 a22 = M[a19] in
        advance (10)
        A := a7;
        B := a15[7:0];
        C := a12;
        H := a10[15:0][15:8];
        L := a10[15:0][7:0];
        SPH := a21[15:8];
        SPL := a21[7:0];
        FlagS := a15[7:0][7];
        FlagZ := is_zero(a15[7:0]);
        FlagA := a18[7:0][4];
        FlagP := parity(a15[7:0]);
        FlagCY := a10[16];
        jump ((a22,a20));
      }
    } else {
      advance (10)
      #1A05
      #instruction: RET
      let:16 a23 = (1 + (SPH,SPL)) in
      let:8 a24 = M[(SPH,SPL)] in
      let:16 a25 = (1 + a23) in
      let:8 a26 = M[a23] in
      advance (10)
      A := H;
      SPH := a25[15:8];
      SPL := a25[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump ((a26,a24));
    }

1A82:

    #1A82
    #instruction: AND  A
    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    advance (4)
    #1A83
    #instruction: RET  Z
    if (is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:8 a4 = M[(SPH,SPL)] in
      let:16 a5 = (1 + a3) in
      let:8 a6 = M[a3] in
      advance (11)
      A := a1;
      SPH := a5[15:8];
      SPL := a5[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((a6,a4));
    } else {
      advance (5)
      #1A84
      #instruction: PUSH PSW
      let:16 a7 = (-1 + (SPH,SPL)) in
      M[a7] := a1;
      let:16 a8 = (-1 + a7) in
      M[a8] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a1[7]),6,is_zero(a1)),4,a2[3]),2,parity(a1)),0,false);
      advance (11)
      #1A85
      #instruction: DEC  A
      let:16 a9 = addWithCarry(!true,a1,~00) in
      let:8 a10 = (a1 & 0F) in
      let:8 a11 = (~00 & 0F) in
      let:16 a12 = addWithCarry(!true,a10,a11) in
      advance (5)
      #1A86
      #instruction: LD   (HL),A
      M[(H,L)] := a9[7:0];
      advance (7)
      #1A87
      #instruction: CALL 19E6
      let:16 a13 = (-1 + a8) in
      M[a13] := 1A;
      let:16 a14 = (-1 + a13) in
      M[a14] := 8A;
      #return-to: 1A8A
      advance (17)
      #19E6
      #instruction: LD   HL,2701
      advance (10)
      #19E9
      #instruction: JP   Z,19FA
      if (is_zero(a9[7:0])) {
        advance (10)
        #19FA
        #instruction: LD   B,10
        advance (7)
        #19FC
        #instruction: CALL 14CB
        let:16 a15 = (-1 + a14) in
        M[a15] := 19;
        let:16 a16 = (-1 + a15) in
        M[a16] := FF;
        #return-to: 19FF
        advance (17)
        #14CB
        #instruction: XOR  A
        let:8 a17 = (a9[7:0] ^ a9[7:0]) in
        advance (4)
        #14CC
        #instruction: PUSH BC
        let:16 a18 = (-1 + a16) in
        M[a18] := 10;
        let:16 a19 = (-1 + a18) in
        M[a19] := C;
        advance (11)
        #14CD
        #instruction: LD   (HL),A
        M[2701] := a17;
        advance (7)
        #14CE
        #instruction: LD   BC,0020
        advance (10)
        #14D1
        #instruction: ADD  HL,BC
        let:17 a20 = add17(0020,2701) in
        advance (10)
        #14D2
        #instruction: POP  BC
        let:16 a21 = (1 + a19) in
        let:8 a22 = M[a19] in
        let:16 a23 = (1 + a21) in
        let:8 a24 = M[a21] in
        advance (10)
        #14D3
        #instruction: DEC  B
        let:16 a25 = addWithCarry(!true,a24,~00) in
        let:8 a26 = (a24 & 0F) in
        let:8 a27 = (~00 & 0F) in
        let:16 a28 = addWithCarry(!true,a26,a27) in
        advance (5)
        #14D4
        #instruction: JP   NZ,14CC
        if (!is_zero(a25[7:0])) {
          advance (10)
          A := a17;
          B := a25[7:0];
          C := a22;
          H := a20[15:0][15:8];
          L := a20[15:0][7:0];
          SPH := a23[15:8];
          SPL := a23[7:0];
          FlagS := a25[7:0][7];
          FlagZ := is_zero(a25[7:0]);
          FlagA := a28[7:0][4];
          FlagP := parity(a25[7:0]);
          FlagCY := a20[16];
          jump (14CC);
        } else {
          advance (10)
          #14D7
          #instruction: RET
          let:16 a29 = (1 + a23) in
          let:8 a30 = M[a23] in
          let:16 a31 = (1 + a29) in
          let:8 a32 = M[a29] in
          advance (10)
          A := a17;
          B := a25[7:0];
          C := a22;
          H := a20[15:0][15:8];
          L := a20[15:0][7:0];
          SPH := a31[15:8];
          SPL := a31[7:0];
          FlagS := a25[7:0][7];
          FlagZ := is_zero(a25[7:0]);
          FlagA := a28[7:0][4];
          FlagP := parity(a25[7:0]);
          FlagCY := a20[16];
          jump ((a32,a30));
        }
      } else {
        advance (10)
        #19EC
        #instruction: LD   DE,1C60
        advance (10)
        #19EF
        #instruction: LD   B,10
        advance (7)
        #19F1
        #instruction: LD   C,A
        advance (5)
        #19F2
        #instruction: CALL 1439
        let:16 a33 = (-1 + a14) in
        M[a33] := 19;
        let:16 a34 = (-1 + a33) in
        M[a34] := F5;
        #return-to: 19F5
        advance (17)
        #1439
        #instruction: PUSH BC
        let:16 a35 = (-1 + a34) in
        M[a35] := 10;
        let:16 a36 = (-1 + a35) in
        M[a36] := a9[7:0];
        advance (11)
        #143A
        #instruction: LD   A,(DE)
        advance (7)
        #143B
        #instruction: LD   (HL),A
        M[2701] := 00;
        advance (7)
        #143C
        #instruction: INC  DE
        advance (5)
        #143D
        #instruction: LD   BC,0020
        advance (10)
        #1440
        #instruction: ADD  HL,BC
        let:17 a37 = add17(0020,2701) in
        advance (10)
        #1441
        #instruction: POP  BC
        let:16 a38 = (1 + a36) in
        let:8 a39 = M[a36] in
        let:16 a40 = (1 + a38) in
        let:8 a41 = M[a38] in
        advance (10)
        #1442
        #instruction: DEC  B
        let:16 a42 = addWithCarry(!true,a41,~00) in
        let:8 a43 = (a41 & 0F) in
        let:8 a44 = (~00 & 0F) in
        let:16 a45 = addWithCarry(!true,a43,a44) in
        advance (5)
        #1443
        #instruction: JP   NZ,1439
        if (!is_zero(a42[7:0])) {
          advance (10)
          A := 00;
          B := a42[7:0];
          C := a39;
          D := 1C;
          E := 61;
          H := a37[15:0][15:8];
          L := a37[15:0][7:0];
          SPH := a40[15:8];
          SPL := a40[7:0];
          FlagS := a42[7:0][7];
          FlagZ := is_zero(a42[7:0]);
          FlagA := a45[7:0][4];
          FlagP := parity(a42[7:0]);
          FlagCY := a37[16];
          jump (1439);
        } else {
          advance (10)
          #1446
          #instruction: RET
          let:16 a46 = (1 + a40) in
          let:8 a47 = M[a40] in
          let:16 a48 = (1 + a46) in
          let:8 a49 = M[a46] in
          advance (10)
          A := 00;
          B := a42[7:0];
          C := a39;
          D := 1C;
          E := 61;
          H := a37[15:0][15:8];
          L := a37[15:0][7:0];
          SPH := a48[15:8];
          SPL := a48[7:0];
          FlagS := a42[7:0][7];
          FlagZ := is_zero(a42[7:0]);
          FlagA := a45[7:0][4];
          FlagP := parity(a42[7:0]);
          FlagCY := a37[16];
          jump ((a49,a47));
        }
      }
    }

1A8A:

    #1A8A
    #instruction: POP  PSW
    let:16 a1 = (1 + (SPH,SPL)) in
    let:8 a2 = M[(SPH,SPL)] in
    let:16 a3 = (1 + a1) in
    let:8 a4 = M[a1] in
    advance (10)
    #1A8B
    #instruction: LD   HL,2501
    advance (10)
    #1A8E
    #instruction: AND  0F
    let:8 a5 = (0F & a4) in
    let:8 a6 = (0F | a4) in
    advance (7)
    #1A90
    #instruction: JP   09C5
    advance (10)
    #09C5
    #instruction: ADD  1A
    let:16 a7 = addWithCarry(false,1A,a5) in
    let:8 a8 = (1A & 0F) in
    let:8 a9 = (a5 & 0F) in
    let:16 a10 = addWithCarry(false,a8,a9) in
    advance (7)
    #09C7
    #instruction: JP   08FF
    advance (10)
    #08FF
    #instruction: LD   DE,1E00
    advance (10)
    #0902
    #instruction: PUSH HL
    let:16 a11 = (-1 + a3) in
    M[a11] := 25;
    let:16 a12 = (-1 + a11) in
    M[a12] := 01;
    advance (11)
    #0903
    #instruction: LD   H,00
    advance (7)
    #0905
    #instruction: LD   L,A
    advance (5)
    #0906
    #instruction: ADD  HL,HL
    let:17 a13 = add17((00,a7[7:0]),(00,a7[7:0])) in
    advance (10)
    #0907
    #instruction: ADD  HL,HL
    let:17 a14 = add17(a13[15:0],a13[15:0]) in
    advance (10)
    #0908
    #instruction: ADD  HL,HL
    let:17 a15 = add17(a14[15:0],a14[15:0]) in
    advance (10)
    #0909
    #instruction: ADD  HL,DE
    let:17 a16 = add17(1E00,a15[15:0]) in
    advance (10)
    #090A
    #instruction: EX   DE,HL
    advance (4)
    #090B
    #instruction: POP  HL
    let:16 a17 = (1 + a12) in
    let:8 a18 = M[a12] in
    let:16 a19 = (1 + a17) in
    let:8 a20 = M[a17] in
    advance (10)
    #090C
    #instruction: LD   B,08
    advance (7)
    #090E
    #instruction: OUT  06
    advance (10)
    #0910
    #instruction: JP   1439
    advance (10)
    #1439
    #instruction: PUSH BC
    let:16 a21 = (-1 + a19) in
    M[a21] := 08;
    let:16 a22 = (-1 + a21) in
    M[a22] := C;
    advance (11)
    #143A
    #instruction: LD   A,(DE)
    let:8 a23 = M[a16[15:0]] in
    advance (7)
    #143B
    #instruction: LD   (HL),A
    M[(a20,a18)] := a23;
    advance (7)
    #143C
    #instruction: INC  DE
    let:16 a24 = (1 + a16[15:0]) in
    advance (5)
    #143D
    #instruction: LD   BC,0020
    advance (10)
    #1440
    #instruction: ADD  HL,BC
    let:17 a25 = add17(0020,(a20,a18)) in
    advance (10)
    #1441
    #instruction: POP  BC
    let:16 a26 = (1 + a22) in
    let:8 a27 = M[a22] in
    let:16 a28 = (1 + a26) in
    let:8 a29 = M[a26] in
    advance (10)
    #1442
    #instruction: DEC  B
    let:16 a30 = addWithCarry(!true,a29,~00) in
    let:8 a31 = (a29 & 0F) in
    let:8 a32 = (~00 & 0F) in
    let:16 a33 = addWithCarry(!true,a31,a32) in
    advance (5)
    #1443
    #instruction: JP   NZ,1439
    if (!is_zero(a30[7:0])) {
      advance (10)
      A := a23;
      B := a30[7:0];
      C := a27;
      D := a24[15:8];
      E := a24[7:0];
      H := a25[15:0][15:8];
      L := a25[15:0][7:0];
      SPH := a28[15:8];
      SPL := a28[7:0];
      FlagS := a30[7:0][7];
      FlagZ := is_zero(a30[7:0]);
      FlagA := a33[7:0][4];
      FlagP := parity(a30[7:0]);
      FlagCY := a25[16];
      jump (1439);
    } else {
      advance (10)
      #1446
      #instruction: RET
      let:16 a34 = (1 + a28) in
      let:8 a35 = M[a28] in
      let:16 a36 = (1 + a34) in
      let:8 a37 = M[a34] in
      advance (10)
      A := a23;
      B := a30[7:0];
      C := a27;
      D := a24[15:8];
      E := a24[7:0];
      H := a25[15:0][15:8];
      L := a25[15:0][7:0];
      SPH := a36[15:8];
      SPL := a36[7:0];
      FlagS := a30[7:0][7];
      FlagZ := is_zero(a30[7:0]);
      FlagA := a33[7:0][4];
      FlagP := parity(a30[7:0]);
      FlagCY := a25[16];
      jump ((a37,a35));
    }
