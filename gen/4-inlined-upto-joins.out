
0000:

    #0001
    #0002
    #0003
    #18D4
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a1 = (-1 + (SPH,SPL)) in
        M[a1] := 18;
        let:16 a2 = (-1 + a1) in
        M[a2] := D4;
        SPH := a2[15:8];
        SPL := a2[7:0];
        jump (0008);
      } else {
        let:16 a3 = (-1 + (SPH,SPL)) in
        M[a3] := 18;
        let:16 a4 = (-1 + a3) in
        M[a4] := D4;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0010);
      }
    } else {
      #18D7
      #18D9
      M[23FF] := 18;
      M[23FE] := DC;
      #return-to: 18DC
      B := 00;
      SPH := 23;
      SPL := FE;
      jump (01E6);
    }

0008:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    #0009
    let:16 a3 = (-1 + a2) in
    M[a3] := B;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    #000A
    let:16 a5 = (-1 + a4) in
    M[a5] := D;
    let:16 a6 = (-1 + a5) in
    M[a6] := E;
    #000B
    let:16 a7 = (-1 + a6) in
    M[a7] := H;
    let:16 a8 = (-1 + a7) in
    M[a8] := L;
    #000C
    #008C
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a9 = (-1 + a8) in
        M[a9] := 00;
        let:16 a10 = (-1 + a9) in
        M[a10] := 8C;
        SPH := a10[15:8];
        SPL := a10[7:0];
        jump (0008);
      } else {
        let:16 a11 = (-1 + a8) in
        M[a11] := 00;
        let:16 a12 = (-1 + a11) in
        M[a12] := 8C;
        SPH := a12[15:8];
        SPL := a12[7:0];
        jump (0010);
      }
    } else {
      let:8 a13 = (A ^ A) in
      #008D
      M[2072] := a13;
      #0090
      #0093
      let:8 a14 = (M[20E9] & M[20E9]) in
      let:8 a15 = (M[20E9] | M[20E9]) in
      #0094
      if (is_zero(a14)) {
        A := a14;
        SPH := a8[15:8];
        SPL := a8[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := a15[3];
        FlagP := parity(a14);
        FlagCY := false;
        jump (0082);
      } else {
        #0097
        #009A
        let:8 a16 = (M[20EF] & M[20EF]) in
        let:8 a17 = (M[20EF] | M[20EF]) in
        #009B
        if (!is_zero(a16)) {
          A := a16;
          SPH := a8[15:8];
          SPL := a8[7:0];
          FlagS := a16[7];
          FlagZ := is_zero(a16);
          FlagA := a17[3];
          FlagP := parity(a16);
          FlagCY := false;
          jump (00A5);
        } else {
          #009E
          #00A1
          #00A2
          if (!M[20C1][0]) {
            A := updateBit((M[20C1] >> 01),7,M[20C1][0]);
            SPH := a8[15:8];
            SPL := a8[7:0];
            FlagS := a16[7];
            FlagZ := is_zero(a16);
            FlagA := a17[3];
            FlagP := parity(a16);
            FlagCY := M[20C1][0];
            jump (0082);
          } else {
            A := updateBit((M[20C1] >> 01),7,M[20C1][0]);
            SPH := a8[15:8];
            SPL := a8[7:0];
            FlagS := a16[7];
            FlagZ := is_zero(a16);
            FlagA := a17[3];
            FlagP := parity(a16);
            FlagCY := M[20C1][0];
            jump (00A5);
          }
        }
      }
    }

0010:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    #0011
    let:16 a3 = (-1 + a2) in
    M[a3] := B;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    #0012
    let:16 a5 = (-1 + a4) in
    M[a5] := D;
    let:16 a6 = (-1 + a5) in
    M[a6] := E;
    #0013
    let:16 a7 = (-1 + a6) in
    M[a7] := H;
    let:16 a8 = (-1 + a7) in
    M[a8] := L;
    #0014
    #0016
    M[2072] := 80;
    #0019
    #001C
    let:16 a9 = addWithCarry(!true,M[20C0],~00) in
    let:8 a10 = (M[20C0] & 0F) in
    let:8 a11 = (~00 & 0F) in
    let:16 a12 = addWithCarry(!true,a10,a11) in
    M[20C0] := a9[7:0];
    #001D
    let:16 a13 = (-1 + a8) in
    M[a13] := 00;
    let:16 a14 = (-1 + a13) in
    M[a14] := 20;
    #return-to: 0020
    #17CD
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a15 = (-1 + a14) in
        M[a15] := 17;
        let:16 a16 = (-1 + a15) in
        M[a16] := CD;
        A := 80;
        H := 20;
        L := C0;
        SPH := a16[15:8];
        SPL := a16[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        jump (0008);
      } else {
        let:16 a17 = (-1 + a14) in
        M[a17] := 17;
        let:16 a18 = (-1 + a17) in
        M[a18] := CD;
        A := 80;
        H := 20;
        L := C0;
        SPH := a18[15:8];
        SPL := a18[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        jump (0010);
      }
    } else {
      #17CF
      let:8 a19 = (04 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
      let:8 a20 = (04 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
      #17D1
      if (is_zero(a19)) {
        let:16 a21 = (1 + a14) in
        let:16 a22 = (1 + a21) in
        A := a19;
        H := 20;
        L := C0;
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a19[7];
        FlagZ := is_zero(a19);
        FlagA := a20[3];
        FlagP := parity(a19);
        FlagCY := false;
        jump ((M[a21],M[a14]));
      } else {
        #17D2
        #17D5
        let:8 a23 = (M[209A] & M[209A]) in
        let:8 a24 = (M[209A] | M[209A]) in
        #17D6
        if (!is_zero(a23)) {
          let:16 a25 = (1 + a14) in
          let:16 a26 = (1 + a25) in
          A := a23;
          H := 20;
          L := C0;
          SPH := a26[15:8];
          SPL := a26[7:0];
          FlagS := a23[7];
          FlagZ := is_zero(a23);
          FlagA := a24[3];
          FlagP := parity(a23);
          FlagCY := false;
          jump ((M[a25],M[a14]));
        } else {
          #17D7
          #17DA
          A := a23;
          B := 04;
          H := 20;
          L := C0;
          SPH := 24;
          SPL := 00;
          FlagS := a23[7];
          FlagZ := is_zero(a23);
          FlagA := a24[3];
          FlagP := parity(a23);
          FlagCY := false;
          jump (17DC);
        }
      }
    }

0020:

    #0022
    #0023
    if (updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) {
      #0067
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a1 = (-1 + (SPH,SPL)) in
          M[a1] := 00;
          let:16 a2 = (-1 + a1) in
          M[a2] := 67;
          A := updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]);
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagCY := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0];
          jump (0008);
        } else {
          let:16 a3 = (-1 + (SPH,SPL)) in
          M[a3] := 00;
          let:16 a4 = (-1 + a3) in
          M[a4] := 67;
          A := updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]);
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagCY := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0];
          jump (0010);
        }
      } else {
        #0069
        M[20EA] := 01;
        #006C
        A := 01;
        FlagCY := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0];
        jump (003F);
      }
    } else {
      #0026
      #0029
      let:8 a5 = (M[20EA] & M[20EA]) in
      let:8 a6 = (M[20EA] | M[20EA]) in
      #002A
      if (is_zero(a5)) {
        A := a5;
        FlagS := a5[7];
        FlagZ := is_zero(a5);
        FlagA := a6[3];
        FlagP := parity(a5);
        FlagCY := false;
        jump (0042);
      } else {
        #002D
        #0030
        let:16 a7 = addWithCarry(!false,M[20EB],~99) in
        let:8 a8 = (M[20EB] & 0F) in
        let:8 a9 = (~99 & 0F) in
        let:16 a10 = addWithCarry(!false,a8,a9) in
        #0032
        if (is_zero(a7[7:0])) {
          A := M[20EB];
          FlagS := a7[7:0][7];
          FlagZ := is_zero(a7[7:0]);
          FlagA := a10[7:0][4];
          FlagP := parity(a7[7:0]);
          FlagCY := !a7[15:8][0];
          jump (003E);
        } else {
          #0035
          let:16 a11 = addWithCarry(false,01,M[20EB]) in
          let:8 a12 = (01 & 0F) in
          let:8 a13 = (M[20EB] & 0F) in
          let:16 a14 = addWithCarry(false,a12,a13) in
          #0037
          let:8 a15 = (a11[7:0] & 0F) in
          let:16 a16 = addWithCarry(false,a15,06) in
          let:16 a17 = addWithCarry(((((a15[1] || a15[2]) && a15[3]) || a14[7:0][4]) ? a16[7:0] : a15)[4],(a11[7:0] >> 04),00) in
          let:16 a18 = addWithCarry(false,a17[7:0],06) in
          let:8 a19 = (((((a15[1] || a15[2]) && a15[3]) || a14[7:0][4]) ? a16[7:0] : a15) & 0F) in
          let:8 a20 = ((((((a17[7:0][1] || a17[7:0][2]) && a17[7:0][3]) || a11[15:8][0]) ? a18[7:0] : a17[7:0]) << 04) | a19) in
          #0038
          M[20EB] := a20;
          #003B
          let:16 a21 = (-1 + (SPH,SPL)) in
          M[a21] := 00;
          let:16 a22 = (-1 + a21) in
          M[a22] := 3E;
          #return-to: 003E
          A := a20;
          SPH := a22[15:8];
          SPL := a22[7:0];
          FlagS := a20[7];
          FlagZ := is_zero(a20);
          FlagA := ((((a15[1] || a15[2]) && a15[3]) || a14[7:0][4]) ? a16[7:0] : a15)[4];
          FlagP := parity(a20);
          FlagCY := (((((a17[7:0][1] || a17[7:0][2]) && a17[7:0][3]) || a11[15:8][0]) ? a18[7:0] : a17[7:0])[4] || a11[15:8][0]);
          jump (1947);
        }
      }
    }

003E:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (003F);

003F:

    M[20EA] := A;
    jump (0042);

0042:

    #0045
    let:8 a1 = (M[20E9] & M[20E9]) in
    let:8 a2 = (M[20E9] | M[20E9]) in
    #0046
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0082);
    } else {
      #0049
      #004C
      let:8 a3 = (M[20EF] & M[20EF]) in
      let:8 a4 = (M[20EF] | M[20EF]) in
      #004D
      if (!is_zero(a3)) {
        #006F
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a5 = (-1 + (SPH,SPL)) in
            M[a5] := 00;
            let:16 a6 = (-1 + a5) in
            M[a6] := 6F;
            A := a3;
            SPH := a6[15:8];
            SPL := a6[7:0];
            FlagS := a3[7];
            FlagZ := is_zero(a3);
            FlagA := a4[3];
            FlagP := parity(a3);
            FlagCY := false;
            jump (0008);
          } else {
            let:16 a7 = (-1 + (SPH,SPL)) in
            M[a7] := 00;
            let:16 a8 = (-1 + a7) in
            M[a8] := 6F;
            A := a3;
            SPH := a8[15:8];
            SPL := a8[7:0];
            FlagS := a3[7];
            FlagZ := is_zero(a3);
            FlagA := a4[3];
            FlagP := parity(a3);
            FlagCY := false;
            jump (0010);
          }
        } else {
          let:16 a9 = (-1 + (SPH,SPL)) in
          M[a9] := 00;
          let:16 a10 = (-1 + a9) in
          M[a10] := 72;
          #return-to: 0072
          #1740
          if ((g_time_to_wakeup && g_interrupts_enabled)) {
            disable_interrupts()
            if (g_half_frame) {
              let:16 a11 = (-1 + a10) in
              M[a11] := 17;
              let:16 a12 = (-1 + a11) in
              M[a12] := 40;
              A := a3;
              SPH := a12[15:8];
              SPL := a12[7:0];
              FlagS := a3[7];
              FlagZ := is_zero(a3);
              FlagA := a4[3];
              FlagP := parity(a3);
              FlagCY := false;
              jump (0008);
            } else {
              let:16 a13 = (-1 + a10) in
              M[a13] := 17;
              let:16 a14 = (-1 + a13) in
              M[a14] := 40;
              A := a3;
              SPH := a14[15:8];
              SPL := a14[7:0];
              FlagS := a3[7];
              FlagZ := is_zero(a3);
              FlagA := a4[3];
              FlagP := parity(a3);
              FlagCY := false;
              jump (0010);
            }
          } else {
            #1743
            let:16 a15 = addWithCarry(!true,M[209B],~00) in
            let:8 a16 = (M[209B] & 0F) in
            let:8 a17 = (~00 & 0F) in
            let:16 a18 = addWithCarry(!true,a16,a17) in
            M[209B] := a15[7:0];
            #1744
            if (is_zero(a15[7:0])) {
              let:16 a19 = (-1 + a10) in
              M[a19] := 17;
              let:16 a20 = (-1 + a19) in
              M[a20] := 47;
              #return-to: 1747
              A := a3;
              H := 20;
              L := 9B;
              SPH := a20[15:8];
              SPL := a20[7:0];
              FlagS := a15[7:0][7];
              FlagZ := is_zero(a15[7:0]);
              FlagA := a18[7:0][4];
              FlagP := parity(a15[7:0]);
              FlagCY := false;
              jump (176D);
            } else {
              A := a3;
              H := 20;
              L := 9B;
              SPH := a10[15:8];
              SPL := a10[7:0];
              FlagS := a15[7:0][7];
              FlagZ := is_zero(a15[7:0]);
              FlagA := a18[7:0][4];
              FlagP := parity(a15[7:0]);
              FlagCY := false;
              jump (1747);
            }
          }
        }
      } else {
        #0050
        #0053
        let:8 a21 = (M[20EB] & M[20EB]) in
        let:8 a22 = (M[20EB] | M[20EB]) in
        #0054
        if (!is_zero(a21)) {
          #005D
          if ((g_time_to_wakeup && g_interrupts_enabled)) {
            disable_interrupts()
            if (g_half_frame) {
              let:16 a23 = (-1 + (SPH,SPL)) in
              M[a23] := 00;
              let:16 a24 = (-1 + a23) in
              M[a24] := 5D;
              A := a21;
              SPH := a24[15:8];
              SPL := a24[7:0];
              FlagS := a21[7];
              FlagZ := is_zero(a21);
              FlagA := a22[3];
              FlagP := parity(a21);
              FlagCY := false;
              jump (0008);
            } else {
              let:16 a25 = (-1 + (SPH,SPL)) in
              M[a25] := 00;
              let:16 a26 = (-1 + a25) in
              M[a26] := 5D;
              A := a21;
              SPH := a26[15:8];
              SPL := a26[7:0];
              FlagS := a21[7];
              FlagZ := is_zero(a21);
              FlagA := a22[3];
              FlagP := parity(a21);
              FlagCY := false;
              jump (0010);
            }
          } else {
            #0060
            let:8 a27 = (M[2093] & M[2093]) in
            let:8 a28 = (M[2093] | M[2093]) in
            #0061
            if (!is_zero(a27)) {
              A := a27;
              FlagS := a27[7];
              FlagZ := is_zero(a27);
              FlagA := a28[3];
              FlagP := parity(a27);
              FlagCY := false;
              jump (0082);
            } else {
              #0064
              #0765
              if ((g_time_to_wakeup && g_interrupts_enabled)) {
                disable_interrupts()
                if (g_half_frame) {
                  let:16 a29 = (-1 + (SPH,SPL)) in
                  M[a29] := 07;
                  let:16 a30 = (-1 + a29) in
                  M[a30] := 65;
                  A := a27;
                  SPH := a30[15:8];
                  SPL := a30[7:0];
                  FlagS := a27[7];
                  FlagZ := is_zero(a27);
                  FlagA := a28[3];
                  FlagP := parity(a27);
                  FlagCY := false;
                  jump (0008);
                } else {
                  let:16 a31 = (-1 + (SPH,SPL)) in
                  M[a31] := 07;
                  let:16 a32 = (-1 + a31) in
                  M[a32] := 65;
                  A := a27;
                  SPH := a32[15:8];
                  SPL := a32[7:0];
                  FlagS := a27[7];
                  FlagZ := is_zero(a27);
                  FlagA := a28[3];
                  FlagP := parity(a27);
                  FlagCY := false;
                  jump (0010);
                }
              } else {
                #0767
                M[2093] := 01;
                #076A
                #076D
                enable_interrupts()
                #076E
                M[23FF] := 07;
                M[23FE] := 71;
                #return-to: 0771
                #1979
                if ((g_time_to_wakeup && g_interrupts_enabled)) {
                  disable_interrupts()
                  if (g_half_frame) {
                    M[23FD] := 19;
                    M[23FC] := 79;
                    A := 01;
                    SPH := 23;
                    SPL := FC;
                    FlagS := a27[7];
                    FlagZ := is_zero(a27);
                    FlagA := a28[3];
                    FlagP := parity(a27);
                    FlagCY := false;
                    jump (0008);
                  } else {
                    M[23FD] := 19;
                    M[23FC] := 79;
                    A := 01;
                    SPH := 23;
                    SPL := FC;
                    FlagS := a27[7];
                    FlagZ := is_zero(a27);
                    FlagA := a28[3];
                    FlagP := parity(a27);
                    FlagCY := false;
                    jump (0010);
                  }
                } else {
                  M[23FD] := 19;
                  M[23FC] := 7C;
                  #return-to: 197C
                  A := 01;
                  SPH := 23;
                  SPL := FC;
                  FlagS := a27[7];
                  FlagZ := is_zero(a27);
                  FlagA := a28[3];
                  FlagP := parity(a27);
                  FlagCY := false;
                  jump (19D7);
                }
              }
            }
          }
        } else {
          #0057
          let:16 a33 = (-1 + (SPH,SPL)) in
          M[a33] := 00;
          let:16 a34 = (-1 + a33) in
          M[a34] := 5A;
          #return-to: 005A
          #0ABF
          if ((g_time_to_wakeup && g_interrupts_enabled)) {
            disable_interrupts()
            if (g_half_frame) {
              let:16 a35 = (-1 + a34) in
              M[a35] := 0A;
              let:16 a36 = (-1 + a35) in
              M[a36] := BF;
              A := a21;
              SPH := a36[15:8];
              SPL := a36[7:0];
              FlagS := a21[7];
              FlagZ := is_zero(a21);
              FlagA := a22[3];
              FlagP := parity(a21);
              FlagCY := false;
              jump (0008);
            } else {
              let:16 a37 = (-1 + a34) in
              M[a37] := 0A;
              let:16 a38 = (-1 + a37) in
              M[a38] := BF;
              A := a21;
              SPH := a38[15:8];
              SPL := a38[7:0];
              FlagS := a21[7];
              FlagZ := is_zero(a21);
              FlagA := a22[3];
              FlagP := parity(a21);
              FlagCY := false;
              jump (0010);
            }
          } else {
            #0AC2
            #0AC3
            if (M[20C1][0]) {
              #0ABB
              if ((g_time_to_wakeup && g_interrupts_enabled)) {
                disable_interrupts()
                if (g_half_frame) {
                  let:16 a39 = (-1 + a34) in
                  M[a39] := 0A;
                  let:16 a40 = (-1 + a39) in
                  M[a40] := BB;
                  A := updateBit((M[20C1] >> 01),7,M[20C1][0]);
                  SPH := a40[15:8];
                  SPL := a40[7:0];
                  FlagS := a21[7];
                  FlagZ := is_zero(a21);
                  FlagA := a22[3];
                  FlagP := parity(a21);
                  FlagCY := M[20C1][0];
                  jump (0008);
                } else {
                  let:16 a41 = (-1 + a34) in
                  M[a41] := 0A;
                  let:16 a42 = (-1 + a41) in
                  M[a42] := BB;
                  A := updateBit((M[20C1] >> 01),7,M[20C1][0]);
                  SPH := a42[15:8];
                  SPL := a42[7:0];
                  FlagS := a21[7];
                  FlagZ := is_zero(a21);
                  FlagA := a22[3];
                  FlagP := parity(a21);
                  FlagCY := M[20C1][0];
                  jump (0010);
                }
              } else {
                let:16 a43 = (1 + a34) in
                let:16 a44 = (1 + a43) in
                #0ABC
                A := updateBit((M[20C1] >> 01),7,M[20C1][0]);
                H := M[a43];
                L := M[a34];
                SPH := a44[15:8];
                SPL := a44[7:0];
                FlagS := a21[7];
                FlagZ := is_zero(a21);
                FlagA := a22[3];
                FlagP := parity(a21);
                FlagCY := M[20C1][0];
                jump (0072);
              }
            } else {
              #0AC6
              #0AC7
              if (updateBit((M[20C1] >> 01),7,M[20C1][0])[0]) {
                #1868
                if ((g_time_to_wakeup && g_interrupts_enabled)) {
                  disable_interrupts()
                  if (g_half_frame) {
                    let:16 a45 = (-1 + a34) in
                    M[a45] := 18;
                    let:16 a46 = (-1 + a45) in
                    M[a46] := 68;
                    A := updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0]);
                    SPH := a46[15:8];
                    SPL := a46[7:0];
                    FlagS := a21[7];
                    FlagZ := is_zero(a21);
                    FlagA := a22[3];
                    FlagP := parity(a21);
                    FlagCY := updateBit((M[20C1] >> 01),7,M[20C1][0])[0];
                    jump (0008);
                  } else {
                    let:16 a47 = (-1 + a34) in
                    M[a47] := 18;
                    let:16 a48 = (-1 + a47) in
                    M[a48] := 68;
                    A := updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0]);
                    SPH := a48[15:8];
                    SPL := a48[7:0];
                    FlagS := a21[7];
                    FlagZ := is_zero(a21);
                    FlagA := a22[3];
                    FlagP := parity(a21);
                    FlagCY := updateBit((M[20C1] >> 01),7,M[20C1][0])[0];
                    jump (0010);
                  }
                } else {
                  #186B
                  let:16 a49 = addWithCarry(true,M[20C2],00) in
                  let:8 a50 = (M[20C2] & 0F) in
                  let:8 a51 = (00 & 0F) in
                  let:16 a52 = addWithCarry(true,a50,a51) in
                  M[20C2] := a49[7:0];
                  #186C
                  #186D
                  #186E
                  let:16 a53 = (-1 + a34) in
                  M[a53] := 18;
                  let:16 a54 = (-1 + a53) in
                  M[a54] := 71;
                  #return-to: 1871
                  A := updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0]);
                  C := M[20C3];
                  H := 20;
                  L := C3;
                  SPH := a54[15:8];
                  SPL := a54[7:0];
                  FlagS := a49[7:0][7];
                  FlagZ := is_zero(a49[7:0]);
                  FlagA := a52[7:0][4];
                  FlagP := parity(a49[7:0]);
                  FlagCY := updateBit((M[20C1] >> 01),7,M[20C1][0])[0];
                  jump (01D9);
                }
              } else {
                #0ACA
                #0ACB
                if (updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0])[0]) {
                  #0AAB
                  if ((g_time_to_wakeup && g_interrupts_enabled)) {
                    disable_interrupts()
                    if (g_half_frame) {
                      let:16 a55 = (-1 + a34) in
                      M[a55] := 0A;
                      let:16 a56 = (-1 + a55) in
                      M[a56] := AB;
                      A := updateBit((updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0]) >> 01),7,updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0])[0]);
                      SPH := a56[15:8];
                      SPL := a56[7:0];
                      FlagS := a21[7];
                      FlagZ := is_zero(a21);
                      FlagA := a22[3];
                      FlagP := parity(a21);
                      FlagCY := updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0])[0];
                      jump (0008);
                    } else {
                      let:16 a57 = (-1 + a34) in
                      M[a57] := 0A;
                      let:16 a58 = (-1 + a57) in
                      M[a58] := AB;
                      A := updateBit((updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0]) >> 01),7,updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0])[0]);
                      SPH := a58[15:8];
                      SPL := a58[7:0];
                      FlagS := a21[7];
                      FlagZ := is_zero(a21);
                      FlagA := a22[3];
                      FlagP := parity(a21);
                      FlagCY := updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0])[0];
                      jump (0010);
                    }
                  } else {
                    #0AAE
                    A := updateBit((updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0]) >> 01),7,updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0])[0]);
                    H := 20;
                    L := 50;
                    SPH := a34[15:8];
                    SPL := a34[7:0];
                    FlagS := a21[7];
                    FlagZ := is_zero(a21);
                    FlagA := a22[3];
                    FlagP := parity(a21);
                    FlagCY := updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0])[0];
                    jump (024B);
                  }
                } else {
                  #0ACE
                  let:16 a59 = (1 + a34) in
                  let:16 a60 = (1 + a59) in
                  A := updateBit((updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0]) >> 01),7,updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0])[0]);
                  SPH := a60[15:8];
                  SPL := a60[7:0];
                  FlagS := a21[7];
                  FlagZ := is_zero(a21);
                  FlagA := a22[3];
                  FlagP := parity(a21);
                  FlagCY := updateBit((updateBit((M[20C1] >> 01),7,M[20C1][0]) >> 01),7,updateBit((M[20C1] >> 01),7,M[20C1][0])[0])[0];
                  jump ((M[a59],M[a34]));
                }
              }
            }
          }
        }
      }
    }

005A:

    jump (0082);

0072:

    #0075
    M[2080] := M[2032];
    #0078
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7B;
    #return-to: 007B
    #0100
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 01;
        let:16 a4 = (-1 + a3) in
        M[a4] := 00;
        A := M[2032];
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 01;
        let:16 a6 = (-1 + a5) in
        M[a6] := 00;
        A := M[2032];
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #0103
      #0104
      let:8 a7 = (M[2002] & M[2002]) in
      let:8 a8 = (M[2002] | M[2002]) in
      #0105
      if (!is_zero(a7)) {
        #1538
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a9 = (-1 + a2) in
            M[a9] := 15;
            let:16 a10 = (-1 + a9) in
            M[a10] := 38;
            A := a7;
            H := 20;
            L := 02;
            SPH := a10[15:8];
            SPL := a10[7:0];
            FlagS := a7[7];
            FlagZ := is_zero(a7);
            FlagA := a8[3];
            FlagP := parity(a7);
            FlagCY := false;
            jump (0008);
          } else {
            let:16 a11 = (-1 + a2) in
            M[a11] := 15;
            let:16 a12 = (-1 + a11) in
            M[a12] := 38;
            A := a7;
            H := 20;
            L := 02;
            SPH := a12[15:8];
            SPL := a12[7:0];
            FlagS := a7[7];
            FlagZ := is_zero(a7);
            FlagA := a8[3];
            FlagP := parity(a7);
            FlagCY := false;
            jump (0010);
          }
        } else {
          #153B
          let:16 a13 = addWithCarry(!true,M[2003],~00) in
          let:8 a14 = (M[2003] & 0F) in
          let:8 a15 = (~00 & 0F) in
          let:16 a16 = addWithCarry(!true,a14,a15) in
          M[2003] := a13[7:0];
          #153C
          if (!is_zero(a13[7:0])) {
            let:16 a17 = (1 + a2) in
            let:16 a18 = (1 + a17) in
            A := a7;
            H := 20;
            L := 03;
            SPH := a18[15:8];
            SPL := a18[7:0];
            FlagS := a13[7:0][7];
            FlagZ := is_zero(a13[7:0]);
            FlagA := a16[7:0][4];
            FlagP := parity(a13[7:0]);
            FlagCY := false;
            jump ((M[a17],M[a2]));
          } else {
            #153D
            #1540
            #1542
            let:16 a19 = (-1 + a2) in
            M[a19] := 15;
            let:16 a20 = (-1 + a19) in
            M[a20] := 45;
            #return-to: 1545
            A := a7;
            B := 10;
            H := M[2065];
            L := M[2064];
            SPH := a20[15:8];
            SPL := a20[7:0];
            FlagS := a13[7:0][7];
            FlagZ := is_zero(a13[7:0]);
            FlagA := a16[7:0][4];
            FlagP := parity(a13[7:0]);
            FlagCY := false;
            jump (1424);
          }
        }
      } else {
        #0108
        let:16 a21 = (-1 + a2) in
        M[a21] := 20;
        let:16 a22 = (-1 + a21) in
        M[a22] := 02;
        #0109
        #010C
        #010D
        #0110
        #0111
        #0112
        let:8 a23 = (M[(M[2067],M[2006])] & M[(M[2067],M[2006])]) in
        let:8 a24 = (M[(M[2067],M[2006])] | M[(M[2067],M[2006])]) in
        #0113
        let:16 a25 = (1 + a22) in
        let:16 a26 = (1 + a25) in
        #0114
        if (is_zero(a23)) {
          A := a23;
          H := M[a25];
          L := M[a22];
          SPH := a26[15:8];
          SPL := a26[7:0];
          FlagS := a23[7];
          FlagZ := is_zero(a23);
          FlagA := a24[3];
          FlagP := parity(a23);
          FlagCY := false;
          jump (0136);
        } else {
          #0117
          let:16 a27 = (1 + (M[a25],M[a22])) in
          #0118
          let:16 a28 = (1 + a27) in
          #0119
          #011A
          let:16 a29 = (1 + a28) in
          #011B
          #011C
          let:8 a30 = (FE & M[a28]) in
          let:8 a31 = (FE | M[a28]) in
          #011E
          #011F
          #0120
          #0121
          #0122
          #0124
          #0127
          let:17 a32 = add17((00,updateBit((updateBit((updateBit((a30 << 01),0,a30[7]) << 01),0,updateBit((a30 << 01),0,a30[7])[7]) << 01),0,updateBit((updateBit((a30 << 01),0,a30[7]) << 01),0,updateBit((a30 << 01),0,a30[7])[7])[7])),1C00) in
          #0128
          #0129
          #012A
          let:8 a33 = (M[a29] & M[a29]) in
          let:8 a34 = (M[a29] | M[a29]) in
          #012B
          if (!is_zero(a33)) {
            let:16 a35 = (-1 + a26) in
            M[a35] := 01;
            let:16 a36 = (-1 + a35) in
            M[a36] := 2E;
            #return-to: 012E
            #013B
            if ((g_time_to_wakeup && g_interrupts_enabled)) {
              disable_interrupts()
              if (g_half_frame) {
                let:16 a37 = (-1 + a36) in
                M[a37] := 01;
                let:16 a38 = (-1 + a37) in
                M[a38] := 3B;
                A := a33;
                B := M[a29];
                D := a32[15:0][15:8];
                E := a32[15:0][7:0];
                H := 00;
                L := updateBit((updateBit((updateBit((a30 << 01),0,a30[7]) << 01),0,updateBit((a30 << 01),0,a30[7])[7]) << 01),0,updateBit((updateBit((a30 << 01),0,a30[7]) << 01),0,updateBit((a30 << 01),0,a30[7])[7])[7]);
                SPH := a38[15:8];
                SPL := a38[7:0];
                FlagS := a33[7];
                FlagZ := is_zero(a33);
                FlagA := a34[3];
                FlagP := parity(a33);
                FlagCY := false;
                jump (0008);
              } else {
                let:16 a39 = (-1 + a36) in
                M[a39] := 01;
                let:16 a40 = (-1 + a39) in
                M[a40] := 3B;
                A := a33;
                B := M[a29];
                D := a32[15:0][15:8];
                E := a32[15:0][7:0];
                H := 00;
                L := updateBit((updateBit((updateBit((a30 << 01),0,a30[7]) << 01),0,updateBit((a30 << 01),0,a30[7])[7]) << 01),0,updateBit((updateBit((a30 << 01),0,a30[7]) << 01),0,updateBit((a30 << 01),0,a30[7])[7])[7]);
                SPH := a40[15:8];
                SPL := a40[7:0];
                FlagS := a33[7];
                FlagZ := is_zero(a33);
                FlagA := a34[3];
                FlagP := parity(a33);
                FlagCY := false;
                jump (0010);
              }
            } else {
              #013E
              let:17 a41 = add17(a32[15:0],0030) in
              #013F
              #0140
              let:16 a42 = (1 + a36) in
              let:16 a43 = (1 + a42) in
              A := a33;
              B := M[a29];
              D := a41[15:0][15:8];
              E := a41[15:0][7:0];
              H := a32[15:0][15:8];
              L := a32[15:0][7:0];
              SPH := a43[15:8];
              SPL := a43[7:0];
              FlagS := a33[7];
              FlagZ := is_zero(a33);
              FlagA := a34[3];
              FlagP := parity(a33);
              FlagCY := a41[16];
              jump ((M[a42],M[a36]));
            }
          } else {
            A := a33;
            B := M[a29];
            D := a32[15:0][15:8];
            E := a32[15:0][7:0];
            H := 00;
            L := updateBit((updateBit((updateBit((a30 << 01),0,a30[7]) << 01),0,updateBit((a30 << 01),0,a30[7])[7]) << 01),0,updateBit((updateBit((a30 << 01),0,a30[7]) << 01),0,updateBit((a30 << 01),0,a30[7])[7])[7]);
            SPH := a26[15:8];
            SPL := a26[7:0];
            FlagS := a33[7];
            FlagZ := is_zero(a33);
            FlagA := a34[3];
            FlagP := parity(a33);
            FlagCY := false;
            jump (012E);
          }
        }
      }
    }

007B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7E;
    #return-to: 007E
    #0248
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 02;
        let:16 a4 = (-1 + a3) in
        M[a4] := 48;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 02;
        let:16 a6 = (-1 + a5) in
        M[a6] := 48;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      H := 20;
      L := 10;
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (024B);
    }

007E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 81;
    #return-to: 0081
    #0913
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 09;
        let:16 a4 = (-1 + a3) in
        M[a4] := 13;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 09;
        let:16 a6 = (-1 + a5) in
        M[a6] := 13;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #0916
      let:16 a7 = addWithCarry(!false,M[2009],~78) in
      let:8 a8 = (M[2009] & 0F) in
      let:8 a9 = (~78 & 0F) in
      let:16 a10 = addWithCarry(!false,a8,a9) in
      #0918
      if (!!a7[15:8][0]) {
        let:16 a11 = (1 + a2) in
        let:16 a12 = (1 + a11) in
        A := M[2009];
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a7[15:8][0];
        jump ((M[a11],M[a2]));
      } else {
        #0919
        #091C
        #091D
        let:8 a13 = (M[2092] | M[2091]) in
        #091E
        if (!is_zero(a13)) {
          A := a13;
          H := M[2092];
          L := M[2091];
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagS := a13[7];
          FlagZ := is_zero(a13);
          FlagA := false;
          FlagP := parity(a13);
          FlagCY := false;
          jump (0929);
        } else {
          #0921
          #0924
          #0926
          M[2083] := 01;
          A := 01;
          H := 06;
          L := 00;
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagS := a13[7];
          FlagZ := is_zero(a13);
          FlagA := false;
          FlagP := parity(a13);
          FlagCY := false;
          jump (0929);
        }
      }
    }

0081:

    jump (0082);

0082:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0083
    let:16 a3 = (1 + a2) in
    let:16 a4 = (1 + a3) in
    #0084
    let:16 a5 = (1 + a4) in
    let:16 a6 = (1 + a5) in
    #0085
    let:16 a7 = (1 + a6) in
    let:16 a8 = (1 + a7) in
    #0086
    enable_interrupts()
    #0087
    let:16 a9 = (1 + a8) in
    let:16 a10 = (1 + a9) in
    A := M[a7];
    B := M[a5];
    C := M[a4];
    D := M[a3];
    E := M[a2];
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a10[15:8];
    SPL := a10[7:0];
    FlagS := M[a6][7];
    FlagZ := M[a6][6];
    FlagA := M[a6][4];
    FlagP := M[a6][2];
    FlagCY := M[a6][0];
    jump ((M[a9],M[a8]));

00A5:

    #00A8
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := AB;
    #return-to: 00AB
    H := 20;
    L := 20;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (024B);

00AB:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := AE;
    #return-to: 00AE
    #0141
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 01;
        let:16 a4 = (-1 + a3) in
        M[a4] := 41;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 01;
        let:16 a6 = (-1 + a5) in
        M[a6] := 41;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #0144
      let:8 a7 = (M[2068] & M[2068]) in
      let:8 a8 = (M[2068] | M[2068]) in
      #0145
      if (is_zero(a7)) {
        let:16 a9 = (1 + a2) in
        let:16 a10 = (1 + a9) in
        A := a7;
        SPH := a10[15:8];
        SPL := a10[7:0];
        FlagS := a7[7];
        FlagZ := is_zero(a7);
        FlagA := a8[3];
        FlagP := parity(a7);
        FlagCY := false;
        jump ((M[a9],M[a2]));
      } else {
        #0146
        #0149
        let:8 a11 = (M[2000] & M[2000]) in
        let:8 a12 = (M[2000] | M[2000]) in
        #014A
        if (!is_zero(a11)) {
          let:16 a13 = (1 + a2) in
          let:16 a14 = (1 + a13) in
          A := a11;
          SPH := a14[15:8];
          SPL := a14[7:0];
          FlagS := a11[7];
          FlagZ := is_zero(a11);
          FlagA := a12[3];
          FlagP := parity(a11);
          FlagCY := false;
          jump ((M[a13],M[a2]));
        } else {
          #014B
          #014E
          #014F
          #0152
          A := M[2006];
          D := 02;
          H := M[2067];
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagS := a11[7];
          FlagZ := is_zero(a11);
          FlagA := a12[3];
          FlagP := parity(a11);
          FlagCY := false;
          jump (0154);
        }
      }
    }

00AE:

    jump (0082);

00B4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    #00B5
    #00B6
    let:16 a3 = (1 + (H,L)) in
    #00B7
    #00B8
    #00B9
    M[2009] := M[(H,L)];
    M[200A] := M[a3];
    #00BC
    M[200B] := M[(H,L)];
    M[200C] := M[a3];
    #00BF
    let:16 a4 = (1 + a2) in
    let:16 a5 = (1 + a4) in
    #00C0
    let:16 a6 = (-1 + (M[a4],M[a2])) in
    #00C1
    #00C2
    let:16 a7 = addWithCarry(!false,M[a6],~03) in
    let:8 a8 = (M[a6] & 0F) in
    let:8 a9 = (~03 & 0F) in
    let:16 a10 = addWithCarry(!false,a8,a9) in
    #00C4
    if (!is_zero(a7[7:0])) {
      A := M[a6];
      H := a6[15:8];
      L := a6[7:0];
      SPH := a5[15:8];
      SPL := a5[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      FlagCY := !a7[15:8][0];
      jump (00C8);
    } else {
      #00C7
      let:16 a11 = addWithCarry(!true,M[a6],~00) in
      let:8 a12 = (M[a6] & 0F) in
      let:8 a13 = (~00 & 0F) in
      let:16 a14 = addWithCarry(!true,a12,a13) in
      A := a11[7:0];
      H := a6[15:8];
      L := a6[7:0];
      SPH := a5[15:8];
      SPL := a5[7:0];
      FlagS := a11[7:0][7];
      FlagZ := is_zero(a11[7:0]);
      FlagA := a14[7:0][4];
      FlagP := parity(a11[7:0]);
      FlagCY := !a7[15:8][0];
      jump (00C8);
    }

00C8:

    M[2008] := A;
    #00CB
    let:16 a1 = addWithCarry(!false,A,~FE) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~FE & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #00CD
    #00CF
    if (!is_zero(a1[7:0])) {
      A := 00;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (00D3);
    } else {
      #00D2
      let:16 a5 = addWithCarry(true,00,00) in
      let:8 a6 = (00 & 0F) in
      let:8 a7 = (00 & 0F) in
      let:16 a8 = addWithCarry(true,a6,a7) in
      A := a5[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a1[15:8][0];
      jump (00D3);
    }

00D3:

    M[200D] := A;
    #00D6
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

012E:

    #0131
    #0133
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 01;
    let:16 a2 = (-1 + a1) in
    M[a2] := 36;
    #return-to: 0136
    B := 10;
    H := M[200C];
    L := M[200B];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15D3);

0136:

    let:8 a1 = (A ^ A) in
    #0137
    M[2000] := a1;
    #013A
    let:16 a2 = (1 + (SPH,SPL)) in
    let:16 a3 = (1 + a2) in
    A := a1;
    SPH := a3[15:8];
    SPL := a3[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump ((M[a2],M[(SPH,SPL)]));

0154:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    #0155
    let:16 a5 = addWithCarry(!false,a1[7:0],~37) in
    let:8 a6 = (a1[7:0] & 0F) in
    let:8 a7 = (~37 & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    #0157
    if (is_zero(a5[7:0])) {
      let:16 a9 = (-1 + (SPH,SPL)) in
      M[a9] := 01;
      let:16 a10 = (-1 + a9) in
      M[a10] := 5A;
      #return-to: 015A
      #01A1
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a11 = (-1 + a10) in
          M[a11] := 01;
          let:16 a12 = (-1 + a11) in
          M[a12] := A1;
          A := a1[7:0];
          SPH := a12[15:8];
          SPL := a12[7:0];
          FlagS := a5[7:0][7];
          FlagZ := is_zero(a5[7:0]);
          FlagA := a8[7:0][4];
          FlagP := parity(a5[7:0]);
          FlagCY := !a5[15:8][0];
          jump (0008);
        } else {
          let:16 a13 = (-1 + a10) in
          M[a13] := 01;
          let:16 a14 = (-1 + a13) in
          M[a14] := A1;
          A := a1[7:0];
          SPH := a14[15:8];
          SPL := a14[7:0];
          FlagS := a5[7:0][7];
          FlagZ := is_zero(a5[7:0]);
          FlagA := a8[7:0][4];
          FlagP := parity(a5[7:0]);
          FlagCY := !a5[15:8][0];
          jump (0010);
        }
      } else {
        let:16 a15 = addWithCarry(!true,D,~00) in
        let:8 a16 = (D & 0F) in
        let:8 a17 = (~00 & 0F) in
        let:16 a18 = addWithCarry(!true,a16,a17) in
        #01A2
        if (is_zero(a15[7:0])) {
          #01CD
          if ((g_time_to_wakeup && g_interrupts_enabled)) {
            disable_interrupts()
            if (g_half_frame) {
              let:16 a19 = (-1 + a10) in
              M[a19] := 01;
              let:16 a20 = (-1 + a19) in
              M[a20] := CD;
              A := a1[7:0];
              D := a15[7:0];
              SPH := a20[15:8];
              SPL := a20[7:0];
              FlagS := a15[7:0][7];
              FlagZ := is_zero(a15[7:0]);
              FlagA := a18[7:0][4];
              FlagP := parity(a15[7:0]);
              FlagCY := !a5[15:8][0];
              jump (0008);
            } else {
              let:16 a21 = (-1 + a10) in
              M[a21] := 01;
              let:16 a22 = (-1 + a21) in
              M[a22] := CD;
              A := a1[7:0];
              D := a15[7:0];
              SPH := a22[15:8];
              SPL := a22[7:0];
              FlagS := a15[7:0][7];
              FlagZ := is_zero(a15[7:0]);
              FlagA := a18[7:0][4];
              FlagP := parity(a15[7:0]);
              FlagCY := !a5[15:8][0];
              jump (0010);
            }
          } else {
            let:16 a23 = (1 + a10) in
            let:16 a24 = (1 + a23) in
            #01CE
            let:16 a25 = (1 + a24) in
            let:16 a26 = (1 + a25) in
            A := a1[7:0];
            D := a15[7:0];
            H := M[a23];
            L := M[a10];
            SPH := a26[15:8];
            SPL := a26[7:0];
            FlagS := a15[7:0][7];
            FlagZ := is_zero(a15[7:0]);
            FlagA := a18[7:0][4];
            FlagP := parity(a15[7:0]);
            FlagCY := !a5[15:8][0];
            jump ((M[a25],M[a24]));
          }
        } else {
          #01A5
          #01A8
          M[2006] := 00;
          #01AA
          #01AB
          #01AC
          M[2007] := 00;
          #01AE
          let:16 a27 = (-1 + a10) in
          M[a27] := 01;
          let:16 a28 = (-1 + a27) in
          M[a28] := B1;
          #return-to: 01B1
          A := a1[7:0];
          C := M[2007];
          D := a15[7:0];
          H := 20;
          L := 07;
          SPH := a28[15:8];
          SPL := a28[7:0];
          FlagS := a15[7:0][7];
          FlagZ := is_zero(a15[7:0]);
          FlagA := a18[7:0][4];
          FlagP := parity(a15[7:0]);
          FlagCY := !a5[15:8][0];
          jump (01D9);
        }
      }
    } else {
      A := a1[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a5[15:8][0];
      jump (015A);
    }

015A:

    #015B
    #015C
    let:16 a1 = addWithCarry(!true,M[(H,A)],~00) in
    let:8 a2 = (M[(H,A)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    #015D
    if (!is_zero(a1[7:0])) {
      B := a1[7:0];
      L := A;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (0154);
    } else {
      #0160
      M[2006] := A;
      #0163
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 01;
      let:16 a6 = (-1 + a5) in
      M[a6] := 66;
      #return-to: 0166
      B := a1[7:0];
      L := A;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (017A);
    }

0166:

    #0167
    M[200B] := L;
    M[200C] := C;
    #016A
    #016B
    let:16 a1 = addWithCarry(!false,L,~28) in
    let:8 a2 = (L & 0F) in
    let:8 a3 = (~28 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #016D
    if (!a1[15:8][0]) {
      #1971
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 19;
          let:16 a6 = (-1 + a5) in
          M[a6] := 71;
          A := L;
          H := C;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7:0][7];
          FlagZ := is_zero(a1[7:0]);
          FlagA := a4[7:0][4];
          FlagP := parity(a1[7:0]);
          FlagCY := !a1[15:8][0];
          jump (0008);
        } else {
          let:16 a7 = (-1 + (SPH,SPL)) in
          M[a7] := 19;
          let:16 a8 = (-1 + a7) in
          M[a8] := 71;
          A := L;
          H := C;
          SPH := a8[15:8];
          SPL := a8[7:0];
          FlagS := a1[7:0][7];
          FlagZ := is_zero(a1[7:0]);
          FlagA := a4[7:0][4];
          FlagP := parity(a1[7:0]);
          FlagCY := !a1[15:8][0];
          jump (0010);
        }
      } else {
        #1973
        M[206D] := 01;
        #1976
        #16E6
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a9 = (-1 + (SPH,SPL)) in
            M[a9] := 16;
            let:16 a10 = (-1 + a9) in
            M[a10] := E6;
            A := 01;
            H := C;
            SPH := a10[15:8];
            SPL := a10[7:0];
            FlagS := a1[7:0][7];
            FlagZ := is_zero(a1[7:0]);
            FlagA := a4[7:0][4];
            FlagP := parity(a1[7:0]);
            FlagCY := !a1[15:8][0];
            jump (0008);
          } else {
            let:16 a11 = (-1 + (SPH,SPL)) in
            M[a11] := 16;
            let:16 a12 = (-1 + a11) in
            M[a12] := E6;
            A := 01;
            H := C;
            SPH := a12[15:8];
            SPL := a12[7:0];
            FlagS := a1[7:0][7];
            FlagZ := is_zero(a1[7:0]);
            FlagA := a4[7:0][4];
            FlagP := parity(a1[7:0]);
            FlagCY := !a1[15:8][0];
            jump (0010);
          }
        } else {
          #16E9
          enable_interrupts()
          #16EA
          let:8 a13 = (01 ^ 01) in
          #16EB
          M[2015] := a13;
          A := a13;
          H := C;
          SPH := 24;
          SPL := 00;
          FlagS := a13[7];
          FlagZ := is_zero(a13);
          FlagA := false;
          FlagP := parity(a13);
          FlagCY := false;
          jump (16EE);
        }
      }
    } else {
      #0170
      #0171
      M[2004] := D;
      #0174
      #0176
      M[2000] := 01;
      #0179
      let:16 a14 = (1 + (SPH,SPL)) in
      let:16 a15 = (1 + a14) in
      A := 01;
      H := C;
      SPH := a15[15:8];
      SPL := a15[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump ((M[a14],M[(SPH,SPL)]));
    }

017A:

    #017C
    #017D
    #0180
    #0181
    #0182
    A := L;
    B := M[2009];
    C := M[200A];
    D := 00;
    H := 20;
    L := 0A;
    jump (0183);

0183:

    let:16 a1 = addWithCarry(!false,A,~0B) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~0B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #0185
    if (a1[7:0][7]) {
      #0194
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 01;
          let:16 a6 = (-1 + a5) in
          M[a6] := 94;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7:0][7];
          FlagZ := is_zero(a1[7:0]);
          FlagA := a4[7:0][4];
          FlagP := parity(a1[7:0]);
          FlagCY := !a1[15:8][0];
          jump (0008);
        } else {
          let:16 a7 = (-1 + (SPH,SPL)) in
          M[a7] := 01;
          let:16 a8 = (-1 + a7) in
          M[a8] := 94;
          SPH := a8[15:8];
          SPL := a8[7:0];
          FlagS := a1[7:0][7];
          FlagZ := is_zero(a1[7:0]);
          FlagA := a4[7:0][4];
          FlagP := parity(a1[7:0]);
          FlagCY := !a1[15:8][0];
          jump (0010);
        }
      } else {
        L := B;
        FlagS := a1[7:0][7];
        FlagZ := is_zero(a1[7:0]);
        FlagA := a4[7:0][4];
        FlagP := parity(a1[7:0]);
        FlagCY := !a1[15:8][0];
        jump (0195);
      }
    } else {
      #0188
      let:16 a9 = addWithCarry(!!a1[15:8][0],A,~0B) in
      let:8 a10 = (A & 0F) in
      let:8 a11 = (~0B & 0F) in
      let:16 a12 = addWithCarry(!!a1[15:8][0],a10,a11) in
      #018A
      #018B
      #018C
      let:16 a13 = addWithCarry(false,10,B) in
      let:8 a14 = (10 & 0F) in
      let:8 a15 = (B & 0F) in
      let:16 a16 = addWithCarry(false,a14,a15) in
      #018E
      #018F
      #0190
      let:16 a17 = addWithCarry(true,D,00) in
      let:8 a18 = (D & 0F) in
      let:8 a19 = (00 & 0F) in
      let:16 a20 = addWithCarry(true,a18,a19) in
      #0191
      A := a9[7:0];
      B := a13[7:0];
      D := a17[7:0];
      E := a9[7:0];
      FlagS := a17[7:0][7];
      FlagZ := is_zero(a17[7:0]);
      FlagA := a20[7:0][4];
      FlagP := parity(a17[7:0]);
      FlagCY := a13[15:8][0];
      jump (0183);
    }

0195:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    #0196
    if (is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a3],M[(SPH,SPL)]));
    } else {
      #0197
      #0198
      #0199
      let:16 a5 = addWithCarry(false,10,C) in
      let:8 a6 = (10 & 0F) in
      let:8 a7 = (C & 0F) in
      let:16 a8 = addWithCarry(false,a6,a7) in
      #019B
      #019C
      #019D
      let:16 a9 = addWithCarry(!true,a1,~00) in
      let:8 a10 = (a1 & 0F) in
      let:8 a11 = (~00 & 0F) in
      let:16 a12 = addWithCarry(!true,a10,a11) in
      #019E
      A := a9[7:0];
      C := a5[7:0];
      E := a1;
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      FlagCY := a5[15:8][0];
      jump (0195);
    }

01B1:

    #01B4
    #01B5
    let:16 a1 = addWithCarry(true,M[2005],00) in
    let:8 a2 = (M[2005] & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    #01B6
    let:8 a5 = (01 & a1[7:0]) in
    let:8 a6 = (01 | a1[7:0]) in
    #01B8
    M[2005] := a5;
    #01B9
    let:8 a7 = (a5 ^ a5) in
    #01BA
    #01BD
    #01BE
    let:16 a8 = (1 + (SPH,SPL)) in
    let:16 a9 = (1 + a8) in
    A := a7;
    H := M[2067];
    L := 67;
    SPH := a9[15:8];
    SPL := a9[7:0];
    FlagS := a7[7];
    FlagZ := is_zero(a7);
    FlagA := false;
    FlagP := parity(a7);
    FlagCY := false;
    jump ((M[a8],M[(SPH,SPL)]));

01C0:

    H := 21;
    L := 00;
    jump (01C3);

01C3:

    B := 37;
    jump (01C5);

01C5:

    M[(H,L)] := 01;
    #01C7
    let:16 a1 = (1 + (H,L)) in
    #01C8
    let:16 a2 = addWithCarry(!true,B,~00) in
    let:8 a3 = (B & 0F) in
    let:8 a4 = (~00 & 0F) in
    let:16 a5 = addWithCarry(!true,a3,a4) in
    #01C9
    if (!is_zero(a2[7:0])) {
      B := a2[7:0];
      H := a1[15:8];
      L := a1[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      jump (01C5);
    } else {
      #01CC
      let:16 a6 = (1 + (SPH,SPL)) in
      let:16 a7 = (1 + a6) in
      B := a2[7:0];
      H := a1[15:8];
      L := a1[7:0];
      SPH := a7[15:8];
      SPL := a7[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      jump ((M[a6],M[(SPH,SPL)]));
    }

01CF:

    #01D1
    #01D3
    #01D6
    A := 01;
    B := E0;
    H := 24;
    L := 02;
    jump (14CC);

01D9:

    let:16 a1 = (1 + (H,L)) in
    #01DA
    #01DB
    let:16 a2 = (1 + a1) in
    #01DC
    #01DD
    let:16 a3 = addWithCarry(false,M[a2],C) in
    let:8 a4 = (M[a2] & 0F) in
    let:8 a5 = (C & 0F) in
    let:16 a6 = addWithCarry(false,a4,a5) in
    #01DE
    M[a2] := a3[7:0];
    #01DF
    let:16 a7 = (1 + a2) in
    #01E0
    #01E1
    let:16 a8 = addWithCarry(false,M[a7],M[a1]) in
    let:8 a9 = (M[a7] & 0F) in
    let:8 a10 = (M[a1] & 0F) in
    let:16 a11 = addWithCarry(false,a9,a10) in
    #01E2
    M[a7] := a8[7:0];
    #01E3
    let:16 a12 = (1 + (SPH,SPL)) in
    let:16 a13 = (1 + a12) in
    A := a8[7:0];
    B := M[a1];
    H := a7[15:8];
    L := a7[7:0];
    SPH := a13[15:8];
    SPL := a13[7:0];
    FlagS := a8[7:0][7];
    FlagZ := is_zero(a8[7:0]);
    FlagA := a11[7:0][4];
    FlagP := parity(a8[7:0]);
    FlagCY := a8[15:8][0];
    jump ((M[a12],M[(SPH,SPL)]));

01E4:

    B := C0;
    jump (01E6);

01E6:

    #01E9
    #01EC
    D := 1B;
    E := 00;
    H := 20;
    L := 00;
    jump (1A32);

01EF:

    #01F2
    H := 21;
    L := 42;
    jump (01F8);

01F5:

    H := 22;
    L := 42;
    jump (01F8);

01F8:

    #01FA
    C := 04;
    D := 1D;
    E := 20;
    jump (01FD);

01FD:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    #01FE
    #0200
    let:16 a3 = (-1 + a2) in
    M[a3] := 02;
    let:16 a4 = (-1 + a3) in
    M[a4] := 03;
    #return-to: 0203
    B := 2C;
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump (1A32);

0203:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0204
    let:16 a3 = addWithCarry(!true,C,~00) in
    let:8 a4 = (C & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    #0205
    if (!is_zero(a3[7:0])) {
      C := a3[7:0];
      D := M[a1];
      E := M[(SPH,SPL)];
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (01FD);
    } else {
      #0208
      let:16 a7 = (1 + a2) in
      let:16 a8 = (1 + a7) in
      C := a3[7:0];
      D := M[a1];
      E := M[(SPH,SPL)];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((M[a7],M[a2]));
    }

0214:

    #0217
    D := 22;
    E := 42;
    jump (021E);

021A:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (021B);

021B:

    D := 21;
    E := 42;
    jump (021E);

021E:

    M[2081] := A;
    #0221
    #0224
    #0227
    A := 04;
    B := 16;
    C := 02;
    H := 28;
    L := 06;
    jump (0229);

0229:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    #022A
    let:16 a3 = (-1 + a2) in
    M[a3] := B;
    let:16 a4 = (-1 + a3) in
    M[a4] := C;
    #022B
    #022E
    let:8 a5 = (M[2081] & M[2081]) in
    let:8 a6 = (M[2081] | M[2081]) in
    #022F
    if (!is_zero(a5)) {
      #0242
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a7 = (-1 + a4) in
          M[a7] := 02;
          let:16 a8 = (-1 + a7) in
          M[a8] := 42;
          A := a5;
          SPH := a8[15:8];
          SPL := a8[7:0];
          FlagS := a5[7];
          FlagZ := is_zero(a5);
          FlagA := a6[3];
          FlagP := parity(a5);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a9 = (-1 + a4) in
          M[a9] := 02;
          let:16 a10 = (-1 + a9) in
          M[a10] := 42;
          A := a5;
          SPH := a10[15:8];
          SPL := a10[7:0];
          FlagS := a5[7];
          FlagZ := is_zero(a5);
          FlagA := a6[3];
          FlagP := parity(a5);
          FlagCY := false;
          jump (0010);
        }
      } else {
        let:16 a11 = (-1 + a4) in
        M[a11] := 02;
        let:16 a12 = (-1 + a11) in
        M[a12] := 45;
        #return-to: 0245
        A := a5;
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a5[7];
        FlagZ := is_zero(a5);
        FlagA := a6[3];
        FlagP := parity(a5);
        FlagCY := false;
        jump (147C);
      }
    } else {
      #0232
      let:16 a13 = (-1 + a4) in
      M[a13] := 02;
      let:16 a14 = (-1 + a13) in
      M[a14] := 35;
      #return-to: 0235
      A := a5;
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a5[7];
      FlagZ := is_zero(a5);
      FlagA := a6[3];
      FlagP := parity(a5);
      FlagCY := false;
      jump (1A69);
    }

0235:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0236
    let:16 a3 = (1 + a2) in
    let:16 a4 = (1 + a3) in
    #0237
    let:16 a5 = addWithCarry(!true,M[a3],~00) in
    let:8 a6 = (M[a3] & 0F) in
    let:8 a7 = (~00 & 0F) in
    let:16 a8 = addWithCarry(!true,a6,a7) in
    #0238
    if (is_zero(a5[7:0])) {
      let:16 a9 = (1 + a4) in
      let:16 a10 = (1 + a9) in
      A := a5[7:0];
      B := M[a1];
      C := M[(SPH,SPL)];
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := M[a2][0];
      jump ((M[a9],M[a4]));
    } else {
      #0239
      let:16 a11 = (-1 + a4) in
      M[a11] := D;
      let:16 a12 = (-1 + a11) in
      M[a12] := E;
      #023A
      #023D
      let:17 a13 = add17(02E0,(H,L)) in
      #023E
      let:16 a14 = (1 + a12) in
      let:16 a15 = (1 + a14) in
      #023F
      A := a5[7:0];
      B := M[a1];
      C := M[(SPH,SPL)];
      D := M[a14];
      E := M[a12];
      H := a13[15:0][15:8];
      L := a13[15:0][7:0];
      SPH := a15[15:8];
      SPL := a15[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := a13[16];
      jump (0229);
    }

0245:

    jump (0235);

024B:

    #024C
    let:16 a1 = addWithCarry(!false,M[(H,L)],~FF) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~FF & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #024E
    if (is_zero(a1[7:0])) {
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      A := M[(H,L)];
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump ((M[a5],M[(SPH,SPL)]));
    } else {
      #024F
      let:16 a7 = addWithCarry(!false,M[(H,L)],~FE) in
      let:8 a8 = (M[(H,L)] & 0F) in
      let:8 a9 = (~FE & 0F) in
      let:16 a10 = addWithCarry(!false,a8,a9) in
      #0251
      if (is_zero(a7[7:0])) {
        A := M[(H,L)];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a7[15:8][0];
        jump (0281);
      } else {
        #0254
        let:16 a11 = (1 + (H,L)) in
        #0255
        #0256
        #0257
        let:8 a12 = (M[a11] | M[(H,L)]) in
        #0258
        #0259
        if (!is_zero(a12)) {
          #0277
          if ((g_time_to_wakeup && g_interrupts_enabled)) {
            disable_interrupts()
            if (g_half_frame) {
              let:16 a13 = (-1 + (SPH,SPL)) in
              M[a13] := 02;
              let:16 a14 = (-1 + a13) in
              M[a14] := 77;
              A := M[(H,L)];
              B := M[a11];
              C := M[(H,L)];
              H := a11[15:8];
              L := a11[7:0];
              SPH := a14[15:8];
              SPL := a14[7:0];
              FlagS := a12[7];
              FlagZ := is_zero(a12);
              FlagA := false;
              FlagP := parity(a12);
              FlagCY := false;
              jump (0008);
            } else {
              let:16 a15 = (-1 + (SPH,SPL)) in
              M[a15] := 02;
              let:16 a16 = (-1 + a15) in
              M[a16] := 77;
              A := M[(H,L)];
              B := M[a11];
              C := M[(H,L)];
              H := a11[15:8];
              L := a11[7:0];
              SPH := a16[15:8];
              SPL := a16[7:0];
              FlagS := a12[7];
              FlagZ := is_zero(a12);
              FlagA := false;
              FlagP := parity(a12);
              FlagCY := false;
              jump (0010);
            }
          } else {
            let:16 a17 = addWithCarry(!true,M[a11],~00) in
            let:8 a18 = (M[a11] & 0F) in
            let:8 a19 = (~00 & 0F) in
            let:16 a20 = addWithCarry(!true,a18,a19) in
            #0278
            let:16 a21 = addWithCarry(true,a17[7:0],00) in
            let:8 a22 = (a17[7:0] & 0F) in
            let:8 a23 = (00 & 0F) in
            let:16 a24 = addWithCarry(true,a22,a23) in
            #0279
            if (!is_zero(a21[7:0])) {
              A := M[(H,L)];
              B := a21[7:0];
              C := M[(H,L)];
              H := a11[15:8];
              L := a11[7:0];
              FlagS := a21[7:0][7];
              FlagZ := is_zero(a21[7:0]);
              FlagA := a24[7:0][4];
              FlagP := parity(a21[7:0]);
              FlagCY := false;
              jump (027D);
            } else {
              #027C
              let:16 a25 = addWithCarry(!true,M[(H,L)],~00) in
              let:8 a26 = (M[(H,L)] & 0F) in
              let:8 a27 = (~00 & 0F) in
              let:16 a28 = addWithCarry(!true,a26,a27) in
              A := a25[7:0];
              B := a21[7:0];
              C := M[(H,L)];
              H := a11[15:8];
              L := a11[7:0];
              FlagS := a25[7:0][7];
              FlagZ := is_zero(a25[7:0]);
              FlagA := a28[7:0][4];
              FlagP := parity(a25[7:0]);
              FlagCY := false;
              jump (027D);
            }
          }
        } else {
          #025C
          let:16 a29 = (1 + a11) in
          #025D
          #025E
          let:8 a30 = (M[a29] & M[a29]) in
          let:8 a31 = (M[a29] | M[a29]) in
          #025F
          if (!is_zero(a30)) {
            #0288
            if ((g_time_to_wakeup && g_interrupts_enabled)) {
              disable_interrupts()
              if (g_half_frame) {
                let:16 a32 = (-1 + (SPH,SPL)) in
                M[a32] := 02;
                let:16 a33 = (-1 + a32) in
                M[a33] := 88;
                A := a30;
                B := M[a11];
                C := M[(H,L)];
                H := a29[15:8];
                L := a29[7:0];
                SPH := a33[15:8];
                SPL := a33[7:0];
                FlagS := a30[7];
                FlagZ := is_zero(a30);
                FlagA := a31[3];
                FlagP := parity(a30);
                FlagCY := false;
                jump (0008);
              } else {
                let:16 a34 = (-1 + (SPH,SPL)) in
                M[a34] := 02;
                let:16 a35 = (-1 + a34) in
                M[a35] := 88;
                A := a30;
                B := M[a11];
                C := M[(H,L)];
                H := a29[15:8];
                L := a29[7:0];
                SPH := a35[15:8];
                SPL := a35[7:0];
                FlagS := a30[7];
                FlagZ := is_zero(a30);
                FlagA := a31[3];
                FlagP := parity(a30);
                FlagCY := false;
                jump (0010);
              }
            } else {
              let:16 a36 = addWithCarry(!true,M[a29],~00) in
              let:8 a37 = (M[a29] & 0F) in
              let:8 a38 = (~00 & 0F) in
              let:16 a39 = addWithCarry(!true,a37,a38) in
              M[a29] := a36[7:0];
              #0289
              let:16 a40 = (-1 + a29) in
              #028A
              let:16 a41 = (-1 + a40) in
              #028B
              A := a30;
              B := M[a11];
              C := M[(H,L)];
              H := a41[15:8];
              L := a41[7:0];
              FlagS := a36[7:0][7];
              FlagZ := is_zero(a36[7:0]);
              FlagA := a39[7:0][4];
              FlagP := parity(a36[7:0]);
              FlagCY := false;
              jump (0281);
            }
          } else {
            #0262
            let:16 a42 = (1 + a29) in
            #0263
            #0264
            let:16 a43 = (1 + a42) in
            #0265
            #0266
            let:16 a44 = (-1 + (SPH,SPL)) in
            M[a44] := a43[15:8];
            let:16 a45 = (-1 + a44) in
            M[a45] := a43[7:0];
            #0267
            #0268
            let:16 a46 = (-1 + a45) in
            M[a46] := M[a43];
            let:16 a47 = (-1 + a46) in
            M[a47] := M[a42];
            #0269
            #026C
            let:16 a48 = (1 + a47) in
            M[a47] := 6F;
            M[a48] := 02;
            #026D
            let:16 a49 = (-1 + a47) in
            M[a49] := a43[15:8];
            let:16 a50 = (-1 + a49) in
            M[a50] := a43[7:0];
            #026E
            A := a30;
            B := M[a11];
            C := M[(H,L)];
            D := a43[15:8];
            E := a43[7:0];
            H := M[a48];
            L := M[a47];
            SPH := a50[15:8];
            SPL := a50[7:0];
            FlagS := a30[7];
            FlagZ := is_zero(a30);
            FlagA := a31[3];
            FlagP := parity(a30);
            FlagCY := false;
            jump ((M[a48],M[a47]));
          }
        }
      }
    }

026F:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0270
    #0273
    let:17 a3 = add17(000C,(M[a1],M[(SPH,SPL)])) in
    #0274
    D := 00;
    E := 0C;
    H := a3[15:0][15:8];
    L := a3[15:0][7:0];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagCY := a3[16];
    jump (024B);

027D:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    #027E
    M[(H,L)] := a1[7:0];
    #027F
    let:16 a5 = (-1 + (H,L)) in
    #0280
    M[a5] := A;
    B := a1[7:0];
    H := a5[15:8];
    L := a5[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0281);

0281:

    #0284
    let:17 a1 = add17(0010,(H,L)) in
    #0285
    D := 00;
    E := 10;
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (024B);

028E:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #028F
    let:16 a3 = (1 + (M[a1],M[(SPH,SPL)])) in
    #0290
    #0291
    let:16 a4 = addWithCarry(!false,M[a3],~FF) in
    let:8 a5 = (M[a3] & 0F) in
    let:8 a6 = (~FF & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    #0293
    if (is_zero(a4[7:0])) {
      #033B
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a8 = (-1 + a2) in
          M[a8] := 03;
          let:16 a9 = (-1 + a8) in
          M[a9] := 3B;
          A := M[a3];
          H := a3[15:8];
          L := a3[7:0];
          SPH := a9[15:8];
          SPL := a9[7:0];
          FlagS := a4[7:0][7];
          FlagZ := is_zero(a4[7:0]);
          FlagA := a7[7:0][4];
          FlagP := parity(a4[7:0]);
          FlagCY := !a4[15:8][0];
          jump (0008);
        } else {
          let:16 a10 = (-1 + a2) in
          M[a10] := 03;
          let:16 a11 = (-1 + a10) in
          M[a11] := 3B;
          A := M[a3];
          H := a3[15:8];
          L := a3[7:0];
          SPH := a11[15:8];
          SPL := a11[7:0];
          FlagS := a4[7:0][7];
          FlagZ := is_zero(a4[7:0]);
          FlagA := a7[7:0][4];
          FlagP := parity(a4[7:0]);
          FlagCY := !a4[15:8][0];
          jump (0010);
        }
      } else {
        #033E
        M[2068] := 01;
        #0340
        #0341
        #0342
        let:8 a12 = (M[2069] & M[2069]) in
        let:8 a13 = (M[2069] | M[2069]) in
        #0343
        #03B0
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a14 = (-1 + a2) in
            M[a14] := 03;
            let:16 a15 = (-1 + a14) in
            M[a15] := B0;
            A := a12;
            H := 20;
            L := 69;
            SPH := a15[15:8];
            SPL := a15[7:0];
            FlagS := a12[7];
            FlagZ := is_zero(a12);
            FlagA := a13[3];
            FlagP := parity(a12);
            FlagCY := false;
            jump (0008);
          } else {
            let:16 a16 = (-1 + a2) in
            M[a16] := 03;
            let:16 a17 = (-1 + a16) in
            M[a17] := B0;
            A := a12;
            H := 20;
            L := 69;
            SPH := a17[15:8];
            SPL := a17[7:0];
            FlagS := a12[7];
            FlagZ := is_zero(a12);
            FlagA := a13[3];
            FlagP := parity(a12);
            FlagCY := false;
            jump (0010);
          }
        } else {
          if (!is_zero(a12)) {
            A := a12;
            H := 20;
            L := 69;
            SPH := a2[15:8];
            SPL := a2[7:0];
            FlagS := a12[7];
            FlagZ := is_zero(a12);
            FlagA := a13[3];
            FlagP := parity(a12);
            FlagCY := false;
            jump (034A);
          } else {
            #03B3
            #03B4
            let:16 a18 = addWithCarry(!true,M[206A],~00) in
            let:8 a19 = (M[206A] & 0F) in
            let:8 a20 = (~00 & 0F) in
            let:16 a21 = addWithCarry(!true,a19,a20) in
            M[206A] := a18[7:0];
            #03B5
            if (!is_zero(a18[7:0])) {
              A := a12;
              H := 20;
              L := 6A;
              SPH := a2[15:8];
              SPL := a2[7:0];
              FlagS := a18[7:0][7];
              FlagZ := is_zero(a18[7:0]);
              FlagA := a21[7:0][4];
              FlagP := parity(a18[7:0]);
              FlagCY := false;
              jump (034A);
            } else {
              #03B8
              #0346
              if ((g_time_to_wakeup && g_interrupts_enabled)) {
                disable_interrupts()
                if (g_half_frame) {
                  let:16 a22 = (-1 + a2) in
                  M[a22] := 03;
                  let:16 a23 = (-1 + a22) in
                  M[a23] := 46;
                  A := a12;
                  H := 20;
                  L := 6A;
                  SPH := a23[15:8];
                  SPL := a23[7:0];
                  FlagS := a18[7:0][7];
                  FlagZ := is_zero(a18[7:0]);
                  FlagA := a21[7:0][4];
                  FlagP := parity(a18[7:0]);
                  FlagCY := false;
                  jump (0008);
                } else {
                  let:16 a24 = (-1 + a2) in
                  M[a24] := 03;
                  let:16 a25 = (-1 + a24) in
                  M[a25] := 46;
                  A := a12;
                  H := 20;
                  L := 6A;
                  SPH := a25[15:8];
                  SPL := a25[7:0];
                  FlagS := a18[7:0][7];
                  FlagZ := is_zero(a18[7:0]);
                  FlagA := a21[7:0][4];
                  FlagP := parity(a18[7:0]);
                  FlagCY := false;
                  jump (0010);
                }
              } else {
                #0347
                #0348
                M[2069] := 01;
                A := a12;
                H := 20;
                L := 69;
                SPH := a2[15:8];
                SPL := a2[7:0];
                FlagS := a18[7:0][7];
                FlagZ := is_zero(a18[7:0]);
                FlagA := a21[7:0][4];
                FlagP := parity(a18[7:0]);
                FlagCY := false;
                jump (034A);
              }
            }
          }
        }
      }
    } else {
      #0296
      let:16 a26 = (1 + a3) in
      #0297
      let:16 a27 = addWithCarry(!true,M[a26],~00) in
      let:8 a28 = (M[a26] & 0F) in
      let:8 a29 = (~00 & 0F) in
      let:16 a30 = addWithCarry(!true,a28,a29) in
      M[a26] := a27[7:0];
      #0298
      if (!is_zero(a27[7:0])) {
        let:16 a31 = (1 + a2) in
        let:16 a32 = (1 + a31) in
        A := M[a3];
        H := a26[15:8];
        L := a26[7:0];
        SPH := a32[15:8];
        SPL := a32[7:0];
        FlagS := a27[7:0][7];
        FlagZ := is_zero(a27[7:0]);
        FlagA := a30[7:0][4];
        FlagP := parity(a27[7:0]);
        FlagCY := !a4[15:8][0];
        jump ((M[a31],M[a2]));
      } else {
        #0299
        #029A
        let:8 a33 = (M[a3] ^ M[a3]) in
        #029B
        M[2068] := a33;
        #029E
        M[2069] := a33;
        #02A1
        #02A3
        M[206A] := 30;
        #02A6
        #02A7
        M[a26] := 05;
        #02A9
        let:16 a34 = (1 + a26) in
        #02AA
        let:16 a35 = addWithCarry(!true,M[a34],~00) in
        let:8 a36 = (M[a34] & 0F) in
        let:8 a37 = (~00 & 0F) in
        let:16 a38 = addWithCarry(!true,a36,a37) in
        M[a34] := a35[7:0];
        #02AB
        if (!is_zero(a35[7:0])) {
          #039B
          if ((g_time_to_wakeup && g_interrupts_enabled)) {
            disable_interrupts()
            if (g_half_frame) {
              let:16 a39 = (-1 + a2) in
              M[a39] := 03;
              let:16 a40 = (-1 + a39) in
              M[a40] := 9B;
              A := M[a3];
              B := M[a3];
              H := a34[15:8];
              L := a34[7:0];
              SPH := a40[15:8];
              SPL := a40[7:0];
              FlagS := a35[7:0][7];
              FlagZ := is_zero(a35[7:0]);
              FlagA := a38[7:0][4];
              FlagP := parity(a35[7:0]);
              FlagCY := false;
              jump (0008);
            } else {
              let:16 a41 = (-1 + a2) in
              M[a41] := 03;
              let:16 a42 = (-1 + a41) in
              M[a42] := 9B;
              A := M[a3];
              B := M[a3];
              H := a34[15:8];
              L := a34[7:0];
              SPH := a42[15:8];
              SPL := a42[7:0];
              FlagS := a35[7:0][7];
              FlagZ := is_zero(a35[7:0]);
              FlagA := a38[7:0][4];
              FlagP := parity(a35[7:0]);
              FlagCY := false;
              jump (0010);
            }
          } else {
            let:16 a43 = addWithCarry(true,M[a3],00) in
            let:8 a44 = (M[a3] & 0F) in
            let:8 a45 = (00 & 0F) in
            let:16 a46 = addWithCarry(true,a44,a45) in
            #039C
            let:8 a47 = (01 & a43[7:0]) in
            let:8 a48 = (01 | a43[7:0]) in
            #039E
            M[2015] := a47;
            #03A1
            #03A2
            #03A3
            #03A4
            #03A5
            #03A8
            let:16 a49 = addWithCarry(false,70,updateBit((updateBit((updateBit((updateBit((a47 << 01),0,a47[7]) << 01),0,updateBit((a47 << 01),0,a47[7])[7]) << 01),0,updateBit((updateBit((a47 << 01),0,a47[7]) << 01),0,updateBit((a47 << 01),0,a47[7])[7])[7]) << 01),0,updateBit((updateBit((updateBit((a47 << 01),0,a47[7]) << 01),0,updateBit((a47 << 01),0,a47[7])[7]) << 01),0,updateBit((updateBit((a47 << 01),0,a47[7]) << 01),0,updateBit((a47 << 01),0,a47[7])[7])[7])[7])) in
            let:8 a50 = (70 & 0F) in
            let:8 a51 = (updateBit((updateBit((updateBit((updateBit((a47 << 01),0,a47[7]) << 01),0,updateBit((a47 << 01),0,a47[7])[7]) << 01),0,updateBit((updateBit((a47 << 01),0,a47[7]) << 01),0,updateBit((a47 << 01),0,a47[7])[7])[7]) << 01),0,updateBit((updateBit((updateBit((a47 << 01),0,a47[7]) << 01),0,updateBit((a47 << 01),0,a47[7])[7]) << 01),0,updateBit((updateBit((a47 << 01),0,a47[7]) << 01),0,updateBit((a47 << 01),0,a47[7])[7])[7])[7]) & 0F) in
            let:16 a52 = addWithCarry(false,a50,a51) in
            #03A9
            #03AA
            M[2018] := a49[7:0];
            M[2019] := 1C;
            #03AD
            A := a49[7:0];
            B := M[a3];
            H := 1C;
            L := a49[7:0];
            SPH := a2[15:8];
            SPL := a2[7:0];
            FlagS := a49[7:0][7];
            FlagZ := is_zero(a49[7:0]);
            FlagA := a52[7:0][4];
            FlagP := parity(a49[7:0]);
            FlagCY := a49[15:8][0];
            jump (036F);
          }
        } else {
          #02AE
          #02B1
          #02B3
          let:16 a53 = (-1 + a2) in
          M[a53] := 02;
          let:16 a54 = (-1 + a53) in
          M[a54] := B6;
          #return-to: 02B6
          A := M[a3];
          B := 10;
          H := M[201B];
          L := M[201A];
          SPH := a54[15:8];
          SPL := a54[7:0];
          FlagS := a35[7:0][7];
          FlagZ := is_zero(a35[7:0]);
          FlagA := a38[7:0][4];
          FlagP := parity(a35[7:0]);
          FlagCY := false;
          jump (1424);
        }
      }
    }

02B6:

    #02B9
    #02BC
    #02BE
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := C1;
    #return-to: 02C1
    B := 10;
    D := 1B;
    E := 10;
    H := 20;
    L := 10;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A32);

02C1:

    #02C3
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := C6;
    #return-to: 02C6
    B := 00;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19DC);

02C6:

    #02C9
    let:8 a1 = (M[206D] & M[206D]) in
    let:8 a2 = (M[206D] | M[206D]) in
    #02CA
    if (!is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a3],M[(SPH,SPL)]));
    } else {
      #02CB
      #02CE
      let:8 a5 = (M[20EF] & M[20EF]) in
      let:8 a6 = (M[20EF] | M[20EF]) in
      #02CF
      if (is_zero(a5)) {
        let:16 a7 = (1 + (SPH,SPL)) in
        let:16 a8 = (1 + a7) in
        A := a5;
        SPH := a8[15:8];
        SPL := a8[7:0];
        FlagS := a5[7];
        FlagZ := is_zero(a5);
        FlagA := a6[3];
        FlagP := parity(a5);
        FlagCY := false;
        jump ((M[a7],M[(SPH,SPL)]));
      } else {
        #02D0
        #02D3
        enable_interrupts()
        #02D4
        M[23FF] := 02;
        M[23FE] := D7;
        #return-to: 02D7
        A := a5;
        SPH := 23;
        SPL := FE;
        FlagS := a5[7];
        FlagZ := is_zero(a5);
        FlagA := a6[3];
        FlagP := parity(a5);
        FlagCY := false;
        jump (19D7);
      }
    }

02D7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := DA;
    #return-to: 02DA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (092E);

02DA:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    #02DB
    if (is_zero(a1)) {
      #166D
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a3 = (-1 + (SPH,SPL)) in
          M[a3] := 16;
          let:16 a4 = (-1 + a3) in
          M[a4] := 6D;
          A := a1;
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 16;
          let:16 a6 = (-1 + a5) in
          M[a6] := 6D;
          A := a1;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0010);
        }
      } else {
        let:8 a7 = (a1 ^ a1) in
        #166E
        let:16 a8 = (-1 + (SPH,SPL)) in
        M[a8] := 16;
        let:16 a9 = (-1 + a8) in
        M[a9] := 71;
        #return-to: 1671
        A := a7;
        SPH := a9[15:8];
        SPL := a9[7:0];
        FlagS := a7[7];
        FlagZ := is_zero(a7);
        FlagA := false;
        FlagP := parity(a7);
        FlagCY := false;
        jump (1A8B);
      }
    } else {
      #02DE
      let:16 a10 = (-1 + (SPH,SPL)) in
      M[a10] := 02;
      let:16 a11 = (-1 + a10) in
      M[a11] := E1;
      #return-to: 02E1
      A := a1;
      SPH := a11[15:8];
      SPL := a11[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (18E7);
    }

02E1:

    #02E2
    let:8 a1 = (M[(H,L)] & M[(H,L)]) in
    let:8 a2 = (M[(H,L)] | M[(H,L)]) in
    #02E3
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (032C);
    } else {
      #02E6
      #02E9
      let:8 a3 = (M[20CE] & M[20CE]) in
      let:8 a4 = (M[20CE] | M[20CE]) in
      #02EA
      if (is_zero(a3)) {
        A := a3;
        FlagS := a3[7];
        FlagZ := is_zero(a3);
        FlagA := a4[3];
        FlagP := parity(a3);
        FlagCY := false;
        jump (032C);
      } else {
        A := a3;
        FlagS := a3[7];
        FlagZ := is_zero(a3);
        FlagA := a4[3];
        FlagP := parity(a3);
        FlagCY := false;
        jump (02ED);
      }
    }

02ED:

    #02F0
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := M[2067];
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    #02F1
    #02F2
    if (M[2067][0]) {
      #0332
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a3 = (-1 + a2) in
          M[a3] := 03;
          let:16 a4 = (-1 + a3) in
          M[a4] := 32;
          A := updateBit((M[2067] >> 01),7,M[2067][0]);
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagCY := M[2067][0];
          jump (0008);
        } else {
          let:16 a5 = (-1 + a2) in
          M[a5] := 03;
          let:16 a6 = (-1 + a5) in
          M[a6] := 32;
          A := updateBit((M[2067] >> 01),7,M[2067][0]);
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagCY := M[2067][0];
          jump (0010);
        }
      } else {
        let:16 a7 = (-1 + a2) in
        M[a7] := 03;
        let:16 a8 = (-1 + a7) in
        M[a8] := 35;
        #return-to: 0335
        #0209
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a9 = (-1 + a8) in
            M[a9] := 02;
            let:16 a10 = (-1 + a9) in
            M[a10] := 09;
            A := updateBit((M[2067] >> 01),7,M[2067][0]);
            SPH := a10[15:8];
            SPL := a10[7:0];
            FlagCY := M[2067][0];
            jump (0008);
          } else {
            let:16 a11 = (-1 + a8) in
            M[a11] := 02;
            let:16 a12 = (-1 + a11) in
            M[a12] := 09;
            A := updateBit((M[2067] >> 01),7,M[2067][0]);
            SPH := a12[15:8];
            SPL := a12[7:0];
            FlagCY := M[2067][0];
            jump (0010);
          }
        } else {
          #020B
          A := 01;
          SPH := a8[15:8];
          SPL := a8[7:0];
          FlagCY := M[2067][0];
          jump (021B);
        }
      }
    } else {
      #02F5
      let:16 a13 = (-1 + a2) in
      M[a13] := 02;
      let:16 a14 = (-1 + a13) in
      M[a14] := F8;
      #return-to: 02F8
      #020E
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a15 = (-1 + a14) in
          M[a15] := 02;
          let:16 a16 = (-1 + a15) in
          M[a16] := 0E;
          A := updateBit((M[2067] >> 01),7,M[2067][0]);
          SPH := a16[15:8];
          SPL := a16[7:0];
          FlagCY := M[2067][0];
          jump (0008);
        } else {
          let:16 a17 = (-1 + a14) in
          M[a17] := 02;
          let:16 a18 = (-1 + a17) in
          M[a18] := 0E;
          A := updateBit((M[2067] >> 01),7,M[2067][0]);
          SPH := a18[15:8];
          SPL := a18[7:0];
          FlagCY := M[2067][0];
          jump (0010);
        }
      } else {
        #0210
        A := 01;
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagCY := M[2067][0];
        jump (0214);
      }
    }

02F8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := FB;
    #return-to: 02FB
    #0878
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 08;
        let:16 a4 = (-1 + a3) in
        M[a4] := 78;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 08;
        let:16 a6 = (-1 + a5) in
        M[a6] := 78;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #087B
      #087C
      #087F
      #0880
      A := M[2008];
      B := M[2008];
      D := M[200A];
      E := M[2009];
      H := D;
      L := E;
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (0886);
    }

02FB:

    M[(H,L)] := E;
    #02FC
    let:16 a1 = (1 + (H,L)) in
    #02FD
    M[a1] := D;
    #02FE
    let:16 a2 = (-1 + a1) in
    #02FF
    let:16 a3 = (-1 + a2) in
    #0300
    M[a3] := B;
    #0301
    #0302
    let:16 a4 = (-1 + (SPH,SPL)) in
    M[a4] := 03;
    let:16 a5 = (-1 + a4) in
    M[a5] := 05;
    #return-to: 0305
    H := a3[15:8];
    L := a3[7:0];
    SPH := a5[15:8];
    SPL := a5[7:0];
    jump (01E4);

0305:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0306
    #0307
    #0309
    #030B
    if (!M[a1][0]) {
      A := 21;
      B := 00;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := M[(SPH,SPL)][7];
      FlagZ := M[(SPH,SPL)][6];
      FlagA := M[(SPH,SPL)][4];
      FlagP := M[(SPH,SPL)][2];
      FlagCY := M[a1][0];
      jump (0312);
    } else {
      #030E
      #0310
      A := 22;
      B := 20;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := M[(SPH,SPL)][7];
      FlagZ := M[(SPH,SPL)][6];
      FlagA := M[(SPH,SPL)][4];
      FlagP := M[(SPH,SPL)][2];
      FlagCY := M[a1][0];
      jump (0312);
    }

0312:

    M[2067] := A;
    #0315
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 18;
    #return-to: 0318
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB6);

0318:

    let:8 a1 = (A ^ A) in
    #0319
    M[2011] := a1;
    #031C
    #031D
    sound_control(FleetMovement1,B[0]);
    sound_control(FleetMovement2,B[1]);
    sound_control(FleetMovement3,B[2]);
    sound_control(FleetMovement4,B[3]);
    sound_control(UfoHit,B[4]);
    #031F
    let:16 a2 = addWithCarry(true,B,00) in
    let:8 a3 = (B & 0F) in
    let:8 a4 = (00 & 0F) in
    let:16 a5 = addWithCarry(true,a3,a4) in
    #0320
    M[2098] := a2[7:0];
    #0323
    let:16 a6 = (-1 + (SPH,SPL)) in
    M[a6] := 03;
    let:16 a7 = (-1 + a6) in
    M[a7] := 26;
    #return-to: 0326
    A := a2[7:0];
    SPH := a7[15:8];
    SPL := a7[7:0];
    FlagS := a2[7:0][7];
    FlagZ := is_zero(a2[7:0]);
    FlagA := a5[7:0][4];
    FlagP := parity(a2[7:0]);
    FlagCY := false;
    jump (09D6);

0326:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 29;
    #return-to: 0329
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A7F);

0329:

    jump (07F9);

032C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2F;
    #return-to: 032F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A7F);

032F:

    jump (0817);

0335:

    jump (02F8);

034A:

    #034D
    #034E
    #0351
    let:8 a1 = (M[20EF] & M[20EF]) in
    let:8 a2 = (M[20EF] | M[20EF]) in
    #0352
    if (!is_zero(a1)) {
      #0363
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a3 = (-1 + (SPH,SPL)) in
          M[a3] := 03;
          let:16 a4 = (-1 + a3) in
          M[a4] := 63;
          A := a1;
          B := M[201B];
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 03;
          let:16 a6 = (-1 + a5) in
          M[a6] := 63;
          A := a1;
          B := M[201B];
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0010);
        }
      } else {
        let:16 a7 = (-1 + (SPH,SPL)) in
        M[a7] := 03;
        let:16 a8 = (-1 + a7) in
        M[a8] := 66;
        #return-to: 0366
        A := a1;
        B := M[201B];
        SPH := a8[15:8];
        SPL := a8[7:0];
        FlagS := a1[7];
        FlagZ := is_zero(a1);
        FlagA := a2[3];
        FlagP := parity(a1);
        FlagCY := false;
        jump (17C0);
      }
    } else {
      #0355
      #0358
      #0359
      if (M[201D][0]) {
        A := updateBit((M[201D] >> 01),7,M[201D][0]);
        B := M[201B];
        FlagS := a1[7];
        FlagZ := is_zero(a1);
        FlagA := a2[3];
        FlagP := parity(a1);
        FlagCY := M[201D][0];
        jump (0381);
      } else {
        #035C
        #035D
        if (updateBit((M[201D] >> 01),7,M[201D][0])[0]) {
          A := updateBit((updateBit((M[201D] >> 01),7,M[201D][0]) >> 01),7,updateBit((M[201D] >> 01),7,M[201D][0])[0]);
          B := M[201B];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := updateBit((M[201D] >> 01),7,M[201D][0])[0];
          jump (038E);
        } else {
          #0360
          A := updateBit((updateBit((M[201D] >> 01),7,M[201D][0]) >> 01),7,updateBit((M[201D] >> 01),7,M[201D][0])[0]);
          B := M[201B];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := updateBit((M[201D] >> 01),7,M[201D][0])[0];
          jump (036F);
        }
      }
    }

0366:

    #0367
    #0368
    if (updateBit((A << 01),0,A[7])[7]) {
      A := updateBit((updateBit((A << 01),0,A[7]) << 01),0,updateBit((A << 01),0,A[7])[7]);
      FlagCY := updateBit((A << 01),0,A[7])[7];
      jump (0381);
    } else {
      #036B
      #036C
      if (updateBit((updateBit((A << 01),0,A[7]) << 01),0,updateBit((A << 01),0,A[7])[7])[7]) {
        A := updateBit((updateBit((updateBit((A << 01),0,A[7]) << 01),0,updateBit((A << 01),0,A[7])[7]) << 01),0,updateBit((updateBit((A << 01),0,A[7]) << 01),0,updateBit((A << 01),0,A[7])[7])[7]);
        FlagCY := updateBit((updateBit((A << 01),0,A[7]) << 01),0,updateBit((A << 01),0,A[7])[7])[7];
        jump (038E);
      } else {
        A := updateBit((updateBit((updateBit((A << 01),0,A[7]) << 01),0,updateBit((A << 01),0,A[7])[7]) << 01),0,updateBit((updateBit((A << 01),0,A[7]) << 01),0,updateBit((A << 01),0,A[7])[7])[7]);
        FlagCY := updateBit((updateBit((A << 01),0,A[7]) << 01),0,updateBit((A << 01),0,A[7])[7])[7];
        jump (036F);
      }
    }

036F:

    #0372
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 75;
    #return-to: 0375
    H := 20;
    L := 18;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

0375:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 78;
    #return-to: 0378
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A47);

0378:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7B;
    #return-to: 037B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1439);

037B:

    #037D
    M[2012] := 00;
    #0380
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := 00;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0381:

    #0382
    let:16 a1 = addWithCarry(!false,B,~D9) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~D9 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #0384
    if (is_zero(a1[7:0])) {
      A := B;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (036F);
    } else {
      #0387
      let:16 a5 = addWithCarry(true,B,00) in
      let:8 a6 = (B & 0F) in
      let:8 a7 = (00 & 0F) in
      let:16 a8 = addWithCarry(true,a6,a7) in
      #0388
      M[201B] := a5[7:0];
      #038B
      A := a5[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a1[15:8][0];
      jump (036F);
    }

038E:

    #038F
    let:16 a1 = addWithCarry(!false,B,~30) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~30 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #0391
    if (is_zero(a1[7:0])) {
      A := B;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (036F);
    } else {
      #0394
      let:16 a5 = addWithCarry(!true,B,~00) in
      let:8 a6 = (B & 0F) in
      let:8 a7 = (~00 & 0F) in
      let:16 a8 = addWithCarry(!true,a6,a7) in
      #0395
      M[201B] := a5[7:0];
      #0398
      A := a5[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a1[15:8][0];
      jump (036F);
    }

03BB:

    #03BE
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := C1;
    #return-to: 03C1
    D := 20;
    E := 2A;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A06);

03C1:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #03C2
    if (!FlagCY) {
      let:16 a3 = (1 + a2) in
      let:16 a4 = (1 + a3) in
      H := M[a1];
      L := M[(SPH,SPL)];
      SPH := a4[15:8];
      SPL := a4[7:0];
      jump ((M[a3],M[a2]));
    } else {
      #03C3
      let:16 a5 = (1 + (M[a1],M[(SPH,SPL)])) in
      #03C4
      #03C5
      let:8 a6 = (M[a5] & M[a5]) in
      let:8 a7 = (M[a5] | M[a5]) in
      #03C6
      if (is_zero(a6)) {
        let:16 a8 = (1 + a2) in
        let:16 a9 = (1 + a8) in
        A := a6;
        H := a5[15:8];
        L := a5[7:0];
        SPH := a9[15:8];
        SPL := a9[7:0];
        FlagS := a6[7];
        FlagZ := is_zero(a6);
        FlagA := a7[3];
        FlagP := parity(a6);
        FlagCY := false;
        jump ((M[a8],M[a2]));
      } else {
        #03C7
        let:16 a10 = addWithCarry(!false,a6,~01) in
        let:8 a11 = (a6 & 0F) in
        let:8 a12 = (~01 & 0F) in
        let:16 a13 = addWithCarry(!false,a11,a12) in
        #03C9
        if (is_zero(a10[7:0])) {
          #03FA
          if ((g_time_to_wakeup && g_interrupts_enabled)) {
            disable_interrupts()
            if (g_half_frame) {
              let:16 a14 = (-1 + a2) in
              M[a14] := 03;
              let:16 a15 = (-1 + a14) in
              M[a15] := FA;
              A := a6;
              H := a5[15:8];
              L := a5[7:0];
              SPH := a15[15:8];
              SPL := a15[7:0];
              FlagS := a10[7:0][7];
              FlagZ := is_zero(a10[7:0]);
              FlagA := a13[7:0][4];
              FlagP := parity(a10[7:0]);
              FlagCY := !a10[15:8][0];
              jump (0008);
            } else {
              let:16 a16 = (-1 + a2) in
              M[a16] := 03;
              let:16 a17 = (-1 + a16) in
              M[a17] := FA;
              A := a6;
              H := a5[15:8];
              L := a5[7:0];
              SPH := a17[15:8];
              SPL := a17[7:0];
              FlagS := a10[7:0][7];
              FlagZ := is_zero(a10[7:0]);
              FlagA := a13[7:0][4];
              FlagP := parity(a10[7:0]);
              FlagCY := !a10[15:8][0];
              jump (0010);
            }
          } else {
            let:16 a18 = addWithCarry(true,a6,00) in
            let:8 a19 = (a6 & 0F) in
            let:8 a20 = (00 & 0F) in
            let:16 a21 = addWithCarry(true,a19,a20) in
            #03FB
            M[a5] := a18[7:0];
            #03FC
            #03FF
            let:16 a22 = addWithCarry(false,08,M[201B]) in
            let:8 a23 = (08 & 0F) in
            let:8 a24 = (M[201B] & 0F) in
            let:16 a25 = addWithCarry(false,a23,a24) in
            #0401
            M[202A] := a22[7:0];
            #0404
            let:16 a26 = (-1 + a2) in
            M[a26] := 04;
            let:16 a27 = (-1 + a26) in
            M[a27] := 07;
            #return-to: 0407
            A := a22[7:0];
            H := a5[15:8];
            L := a5[7:0];
            SPH := a27[15:8];
            SPL := a27[7:0];
            FlagS := a22[7:0][7];
            FlagZ := is_zero(a22[7:0]);
            FlagA := a25[7:0][4];
            FlagP := parity(a22[7:0]);
            FlagCY := a22[15:8][0];
            jump (0430);
          }
        } else {
          #03CC
          let:16 a28 = addWithCarry(!false,a6,~02) in
          let:8 a29 = (a6 & 0F) in
          let:8 a30 = (~02 & 0F) in
          let:16 a31 = addWithCarry(!false,a29,a30) in
          #03CE
          if (is_zero(a28[7:0])) {
            #040A
            if ((g_time_to_wakeup && g_interrupts_enabled)) {
              disable_interrupts()
              if (g_half_frame) {
                let:16 a32 = (-1 + a2) in
                M[a32] := 04;
                let:16 a33 = (-1 + a32) in
                M[a33] := 0A;
                A := a6;
                H := a5[15:8];
                L := a5[7:0];
                SPH := a33[15:8];
                SPL := a33[7:0];
                FlagS := a28[7:0][7];
                FlagZ := is_zero(a28[7:0]);
                FlagA := a31[7:0][4];
                FlagP := parity(a28[7:0]);
                FlagCY := !a28[15:8][0];
                jump (0008);
              } else {
                let:16 a34 = (-1 + a2) in
                M[a34] := 04;
                let:16 a35 = (-1 + a34) in
                M[a35] := 0A;
                A := a6;
                H := a5[15:8];
                L := a5[7:0];
                SPH := a35[15:8];
                SPL := a35[7:0];
                FlagS := a28[7:0][7];
                FlagZ := is_zero(a28[7:0]);
                FlagA := a31[7:0][4];
                FlagP := parity(a28[7:0]);
                FlagCY := !a28[15:8][0];
                jump (0010);
              }
            } else {
              let:16 a36 = (-1 + a2) in
              M[a36] := 04;
              let:16 a37 = (-1 + a36) in
              M[a37] := 0D;
              #return-to: 040D
              A := a6;
              H := a5[15:8];
              L := a5[7:0];
              SPH := a37[15:8];
              SPL := a37[7:0];
              FlagS := a28[7:0][7];
              FlagZ := is_zero(a28[7:0]);
              FlagA := a31[7:0][4];
              FlagP := parity(a28[7:0]);
              FlagCY := !a28[15:8][0];
              jump (0430);
            }
          } else {
            #03D1
            let:16 a38 = (1 + a5) in
            #03D2
            let:16 a39 = addWithCarry(!false,a6,~03) in
            let:8 a40 = (a6 & 0F) in
            let:8 a41 = (~03 & 0F) in
            let:16 a42 = addWithCarry(!false,a40,a41) in
            #03D4
            if (!is_zero(a39[7:0])) {
              #042A
              if ((g_time_to_wakeup && g_interrupts_enabled)) {
                disable_interrupts()
                if (g_half_frame) {
                  let:16 a43 = (-1 + a2) in
                  M[a43] := 04;
                  let:16 a44 = (-1 + a43) in
                  M[a44] := 2A;
                  A := a6;
                  H := a38[15:8];
                  L := a38[7:0];
                  SPH := a44[15:8];
                  SPL := a44[7:0];
                  FlagS := a39[7:0][7];
                  FlagZ := is_zero(a39[7:0]);
                  FlagA := a42[7:0][4];
                  FlagP := parity(a39[7:0]);
                  FlagCY := !a39[15:8][0];
                  jump (0008);
                } else {
                  let:16 a45 = (-1 + a2) in
                  M[a45] := 04;
                  let:16 a46 = (-1 + a45) in
                  M[a46] := 2A;
                  A := a6;
                  H := a38[15:8];
                  L := a38[7:0];
                  SPH := a46[15:8];
                  SPL := a46[7:0];
                  FlagS := a39[7:0][7];
                  FlagZ := is_zero(a39[7:0]);
                  FlagA := a42[7:0][4];
                  FlagP := parity(a39[7:0]);
                  FlagCY := !a39[15:8][0];
                  jump (0010);
                }
              } else {
                let:16 a47 = addWithCarry(!false,a6,~05) in
                let:8 a48 = (a6 & 0F) in
                let:8 a49 = (~05 & 0F) in
                let:16 a50 = addWithCarry(!false,a48,a49) in
                #042C
                if (is_zero(a47[7:0])) {
                  let:16 a51 = (1 + a2) in
                  let:16 a52 = (1 + a51) in
                  A := a6;
                  H := a38[15:8];
                  L := a38[7:0];
                  SPH := a52[15:8];
                  SPL := a52[7:0];
                  FlagS := a47[7:0][7];
                  FlagZ := is_zero(a47[7:0]);
                  FlagA := a50[7:0][4];
                  FlagP := parity(a47[7:0]);
                  FlagCY := !a47[15:8][0];
                  jump ((M[a51],M[a2]));
                } else {
                  #042D
                  A := a6;
                  H := a38[15:8];
                  L := a38[7:0];
                  SPH := a2[15:8];
                  SPL := a2[7:0];
                  FlagS := a47[7:0][7];
                  FlagZ := is_zero(a47[7:0]);
                  FlagA := a50[7:0][4];
                  FlagP := parity(a47[7:0]);
                  FlagCY := !a47[15:8][0];
                  jump (0436);
                }
              }
            } else {
              #03D7
              let:16 a53 = addWithCarry(!true,M[a38],~00) in
              let:8 a54 = (M[a38] & 0F) in
              let:8 a55 = (~00 & 0F) in
              let:16 a56 = addWithCarry(!true,a54,a55) in
              M[a38] := a53[7:0];
              #03D8
              if (is_zero(a53[7:0])) {
                A := a6;
                H := a38[15:8];
                L := a38[7:0];
                SPH := a2[15:8];
                SPL := a2[7:0];
                FlagS := a53[7:0][7];
                FlagZ := is_zero(a53[7:0]);
                FlagA := a56[7:0][4];
                FlagP := parity(a53[7:0]);
                FlagCY := !a39[15:8][0];
                jump (0436);
              } else {
                #03DB
                #03DC
                let:16 a57 = addWithCarry(!false,M[a38],~0F) in
                let:8 a58 = (M[a38] & 0F) in
                let:8 a59 = (~0F & 0F) in
                let:16 a60 = addWithCarry(!false,a58,a59) in
                #03DE
                if (!is_zero(a57[7:0])) {
                  let:16 a61 = (1 + a2) in
                  let:16 a62 = (1 + a61) in
                  A := M[a38];
                  H := a38[15:8];
                  L := a38[7:0];
                  SPH := a62[15:8];
                  SPL := a62[7:0];
                  FlagS := a57[7:0][7];
                  FlagZ := is_zero(a57[7:0]);
                  FlagA := a60[7:0][4];
                  FlagP := parity(a57[7:0]);
                  FlagCY := !a57[15:8][0];
                  jump ((M[a61],M[a2]));
                } else {
                  #03DF
                  let:16 a63 = (-1 + a2) in
                  M[a63] := a38[15:8];
                  let:16 a64 = (-1 + a63) in
                  M[a64] := a38[7:0];
                  #03E0
                  let:16 a65 = (-1 + a64) in
                  M[a65] := 03;
                  let:16 a66 = (-1 + a65) in
                  M[a66] := E3;
                  #return-to: 03E3
                  A := M[a38];
                  H := a38[15:8];
                  L := a38[7:0];
                  SPH := a66[15:8];
                  SPL := a66[7:0];
                  FlagS := a57[7:0][7];
                  FlagZ := is_zero(a57[7:0]);
                  FlagA := a60[7:0][4];
                  FlagP := parity(a57[7:0]);
                  FlagCY := !a57[15:8][0];
                  jump (0430);
                }
              }
            }
          }
        }
      }
    }

03E3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := E6;
    #return-to: 03E6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1452);

03E6:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #03E7
    let:16 a3 = (1 + (M[a1],M[(SPH,SPL)])) in
    #03E8
    let:16 a4 = addWithCarry(true,M[a3],00) in
    let:8 a5 = (M[a3] & 0F) in
    let:8 a6 = (00 & 0F) in
    let:16 a7 = addWithCarry(true,a5,a6) in
    M[a3] := a4[7:0];
    #03E9
    let:16 a8 = (1 + a3) in
    #03EA
    let:16 a9 = (1 + a8) in
    #03EB
    let:16 a10 = addWithCarry(!true,M[a9],~00) in
    let:8 a11 = (M[a9] & 0F) in
    let:8 a12 = (~00 & 0F) in
    let:16 a13 = addWithCarry(!true,a11,a12) in
    M[a9] := a10[7:0];
    #03EC
    let:16 a14 = addWithCarry(!true,M[a9],~00) in
    let:8 a15 = (M[a9] & 0F) in
    let:8 a16 = (~00 & 0F) in
    let:16 a17 = addWithCarry(!true,a15,a16) in
    M[a9] := a14[7:0];
    #03ED
    let:16 a18 = (1 + a9) in
    #03EE
    let:16 a19 = addWithCarry(!true,M[a18],~00) in
    let:8 a20 = (M[a18] & 0F) in
    let:8 a21 = (~00 & 0F) in
    let:16 a22 = addWithCarry(!true,a20,a21) in
    M[a18] := a19[7:0];
    #03EF
    let:16 a23 = addWithCarry(!true,M[a18],~00) in
    let:8 a24 = (M[a18] & 0F) in
    let:8 a25 = (~00 & 0F) in
    let:16 a26 = addWithCarry(!true,a24,a25) in
    M[a18] := a23[7:0];
    #03F0
    let:16 a27 = addWithCarry(!true,M[a18],~00) in
    let:8 a28 = (M[a18] & 0F) in
    let:8 a29 = (~00 & 0F) in
    let:16 a30 = addWithCarry(!true,a28,a29) in
    M[a18] := a27[7:0];
    #03F1
    let:16 a31 = (1 + a18) in
    #03F2
    M[a31] := 08;
    #03F4
    let:16 a32 = (-1 + a2) in
    M[a32] := 03;
    let:16 a33 = (-1 + a32) in
    M[a33] := F7;
    #return-to: 03F7
    H := a31[15:8];
    L := a31[7:0];
    SPH := a33[15:8];
    SPL := a33[7:0];
    FlagS := a27[7:0][7];
    FlagZ := is_zero(a27[7:0]);
    FlagA := a30[7:0][4];
    FlagP := parity(a27[7:0]);
    jump (0430);

03F7:

    jump (1400);

0407:

    jump (1400);

040D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    #040E
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    #040F
    let:16 a5 = (-1 + a4) in
    M[a5] := B;
    let:16 a6 = (-1 + a5) in
    M[a6] := C;
    #0410
    let:16 a7 = (-1 + a6) in
    M[a7] := 04;
    let:16 a8 = (-1 + a7) in
    M[a8] := 13;
    #return-to: 0413
    SPH := a8[15:8];
    SPL := a8[7:0];
    jump (1452);

0413:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0414
    let:16 a3 = (1 + a2) in
    let:16 a4 = (1 + a3) in
    #0415
    let:16 a5 = (1 + a4) in
    let:16 a6 = (1 + a5) in
    #0416
    #0419
    let:16 a7 = addWithCarry(false,M[a2],M[202C]) in
    let:8 a8 = (M[a2] & 0F) in
    let:8 a9 = (M[202C] & 0F) in
    let:16 a10 = addWithCarry(false,a8,a9) in
    #041A
    #041B
    M[2029] := a7[7:0];
    #041E
    let:16 a11 = (-1 + a6) in
    M[a11] := 04;
    let:16 a12 = (-1 + a11) in
    M[a12] := 21;
    #return-to: 0421
    A := a7[7:0];
    B := M[a1];
    C := M[(SPH,SPL)];
    D := M[a5];
    E := M[a4];
    H := M[a3];
    L := a7[7:0];
    SPH := a12[15:8];
    SPL := a12[7:0];
    FlagS := a7[7:0][7];
    FlagZ := is_zero(a7[7:0]);
    FlagA := a10[7:0][4];
    FlagP := parity(a7[7:0]);
    FlagCY := a7[15:8][0];
    jump (1491);

0421:

    #0424
    let:8 a1 = (M[2061] & M[2061]) in
    let:8 a2 = (M[2061] | M[2061]) in
    #0425
    if (is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a3],M[(SPH,SPL)]));
    } else {
      #0426
      M[2002] := a1;
      #0429
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      A := a1;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a5],M[(SPH,SPL)]));
    }

0430:

    #0433
    H := 20;
    L := 27;
    jump (1A3B);

0436:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 39;
    #return-to: 0439
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0430);

0439:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3C;
    #return-to: 043C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1452);

043C:

    #043F
    #0442
    #0444
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 47;
    #return-to: 0447
    B := 07;
    D := 1B;
    E := 25;
    H := 20;
    L := 25;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A32);

0447:

    #044A
    let:16 a1 = addWithCarry(true,M[208D],00) in
    let:8 a2 = (M[208D] & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    #044B
    #044C
    let:16 a5 = addWithCarry(!false,a1[7:0],~63) in
    let:8 a6 = (a1[7:0] & 0F) in
    let:8 a7 = (~63 & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    #044E
    if (!a5[15:8][0]) {
      A := a1[7:0];
      H := M[208E];
      L := a1[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a5[15:8][0];
      jump (0453);
    } else {
      #0451
      A := a1[7:0];
      H := M[208E];
      L := 54;
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a5[15:8][0];
      jump (0453);
    }

0453:

    M[208D] := L;
    M[208E] := H;
    #0456
    #0459
    let:16 a1 = addWithCarry(true,M[208F],00) in
    let:8 a2 = (M[208F] & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    #045A
    M[208F] := a1[7:0];
    M[2090] := M[2090];
    #045D
    #0460
    let:8 a5 = (M[2084] & M[2084]) in
    let:8 a6 = (M[2084] | M[2084]) in
    #0461
    if (!is_zero(a5)) {
      let:16 a7 = (1 + (SPH,SPL)) in
      let:16 a8 = (1 + a7) in
      A := a5;
      H := M[2090];
      L := a1[7:0];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a5[7];
      FlagZ := is_zero(a5);
      FlagA := a6[3];
      FlagP := parity(a5);
      FlagCY := false;
      jump ((M[a7],M[(SPH,SPL)]));
    } else {
      #0462
      #0463
      let:8 a9 = (01 & M[(M[2090],a1[7:0])]) in
      let:8 a10 = (01 | M[(M[2090],a1[7:0])]) in
      #0465
      #0468
      if (!is_zero(a9)) {
        A := a9;
        B := 02;
        C := 29;
        H := M[2090];
        L := a1[7:0];
        FlagS := a9[7];
        FlagZ := is_zero(a9);
        FlagA := a10[3];
        FlagP := parity(a9);
        FlagCY := false;
        jump (046E);
      } else {
        #046B
        A := a9;
        B := FE;
        C := E0;
        H := M[2090];
        L := a1[7:0];
        FlagS := a9[7];
        FlagZ := is_zero(a9);
        FlagA := a10[3];
        FlagP := parity(a9);
        FlagCY := false;
        jump (046E);
      }
    }

046E:

    #0471
    M[208A] := C;
    #0472
    #0473
    #0474
    M[208C] := B;
    #0475
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := 20;
    L := 8C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0476:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0477
    #047A
    M[2032] := 02;
    #047D
    #0480
    #0481
    let:8 a3 = (M[2039] | M[2038]) in
    #0482
    if (!is_zero(a3)) {
      #048A
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a4 = (-1 + a2) in
          M[a4] := 04;
          let:16 a5 = (-1 + a4) in
          M[a5] := 8A;
          A := a3;
          H := M[2039];
          L := M[2038];
          SPH := a5[15:8];
          SPL := a5[7:0];
          FlagS := a3[7];
          FlagZ := is_zero(a3);
          FlagA := false;
          FlagP := parity(a3);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a6 = (-1 + a2) in
          M[a6] := 04;
          let:16 a7 = (-1 + a6) in
          M[a7] := 8A;
          A := a3;
          H := M[2039];
          L := M[2038];
          SPH := a7[15:8];
          SPL := a7[7:0];
          FlagS := a3[7];
          FlagZ := is_zero(a3);
          FlagA := false;
          FlagP := parity(a3);
          FlagCY := false;
          jump (0010);
        }
      } else {
        #048D
        #048F
        let:16 a8 = (-1 + a2) in
        M[a8] := 04;
        let:16 a9 = (-1 + a8) in
        M[a9] := 92;
        #return-to: 0492
        A := F9;
        D := 20;
        E := 35;
        H := M[2039];
        L := M[2038];
        SPH := a9[15:8];
        SPL := a9[7:0];
        FlagS := a3[7];
        FlagZ := is_zero(a3);
        FlagA := false;
        FlagP := parity(a3);
        FlagCY := false;
        jump (0550);
      }
    } else {
      #0485
      let:16 a10 = (-1 + (M[2039],M[2038])) in
      #0486
      M[2038] := a10[7:0];
      M[2039] := a10[15:8];
      #0489
      let:16 a11 = (1 + a2) in
      let:16 a12 = (1 + a11) in
      A := a3;
      H := a10[15:8];
      L := a10[7:0];
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagS := a3[7];
      FlagZ := is_zero(a3);
      FlagA := false;
      FlagP := parity(a3);
      FlagCY := false;
      jump ((M[a11],M[a2]));
    }

0492:

    #0495
    M[2070] := M[2046];
    #0498
    #049B
    M[2071] := M[2056];
    #049E
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := A1;
    #return-to: 04A1
    A := M[2056];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0563);

04A1:

    #04A4
    let:8 a1 = (M[2078] & M[2078]) in
    let:8 a2 = (M[2078] | M[2078]) in
    #04A5
    #04A8
    if (!is_zero(a1)) {
      A := a1;
      H := 20;
      L := 35;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (055B);
    } else {
      #04AB
      #04AE
      #04B1
      #04B3
      A := a1;
      B := 10;
      D := 1B;
      E := 30;
      H := 20;
      L := 30;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (1A32);
    }

04B6:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #04B7
    #04BA
    let:8 a3 = (M[206E] & M[206E]) in
    let:8 a4 = (M[206E] | M[206E]) in
    #04BB
    if (!is_zero(a3)) {
      let:16 a5 = (1 + a2) in
      let:16 a6 = (1 + a5) in
      A := a3;
      H := M[a1];
      L := M[(SPH,SPL)];
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a3[7];
      FlagZ := is_zero(a3);
      FlagA := a4[3];
      FlagP := parity(a3);
      FlagCY := false;
      jump ((M[a5],M[a2]));
    } else {
      #04BC
      #04BF
      let:16 a7 = addWithCarry(!false,M[2080],~01) in
      let:8 a8 = (M[2080] & 0F) in
      let:8 a9 = (~01 & 0F) in
      let:16 a10 = addWithCarry(!false,a8,a9) in
      #04C1
      if (!is_zero(a7[7:0])) {
        let:16 a11 = (1 + a2) in
        let:16 a12 = (1 + a11) in
        A := M[2080];
        H := M[a1];
        L := M[(SPH,SPL)];
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a7[15:8][0];
        jump ((M[a11],M[a2]));
      } else {
        #04C2
        #04C5
        #04C7
        let:16 a13 = (-1 + a2) in
        M[a13] := 04;
        let:16 a14 = (-1 + a13) in
        M[a14] := CA;
        #return-to: 04CA
        A := ED;
        D := 20;
        E := 45;
        H := M[a1];
        L := M[(SPH,SPL)];
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a7[15:8][0];
        jump (0550);
      }
    }

04CA:

    #04CD
    M[2070] := M[2036];
    #04D0
    #04D3
    M[2071] := M[2056];
    #04D6
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := D9;
    #return-to: 04D9
    A := M[2056];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0563);

04D9:

    #04DC
    let:16 a1 = addWithCarry(!false,M[2076],~10) in
    let:8 a2 = (M[2076] & 0F) in
    let:8 a3 = (~10 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #04DE
    if (!a1[15:8][0]) {
      A := M[2076];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (04E7);
    } else {
      #04E1
      #04E4
      M[2076] := 00;
      A := 00;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (04E7);
    }

04E7:

    #04EA
    let:8 a1 = (M[2078] & M[2078]) in
    let:8 a2 = (M[2078] | M[2078]) in
    #04EB
    #04EE
    if (!is_zero(a1)) {
      A := a1;
      H := 20;
      L := 45;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (055B);
    } else {
      #04F1
      #04F4
      #04F7
      #04F9
      let:16 a3 = (-1 + (SPH,SPL)) in
      M[a3] := 04;
      let:16 a4 = (-1 + a3) in
      M[a4] := FC;
      #return-to: 04FC
      A := a1;
      B := 10;
      D := 1B;
      E := 40;
      H := 20;
      L := 40;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (1A32);
    }

04FC:

    #04FF
    let:16 a1 = addWithCarry(!true,M[2082],~00) in
    let:8 a2 = (M[2082] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    #0500
    if (!is_zero(a1[7:0])) {
      A := a1[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (0508);
    } else {
      #0503
      #0505
      M[206E] := 01;
      A := 01;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (0508);
    }

0508:

    #050B
    #067E
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a1 = (-1 + (SPH,SPL)) in
        M[a1] := 06;
        let:16 a2 = (-1 + a1) in
        M[a2] := 7E;
        H := M[2077];
        L := M[2076];
        SPH := a2[15:8];
        SPL := a2[7:0];
        jump (0008);
      } else {
        let:16 a3 = (-1 + (SPH,SPL)) in
        M[a3] := 06;
        let:16 a4 = (-1 + a3) in
        M[a4] := 7E;
        H := M[2077];
        L := M[2076];
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0010);
      }
    } else {
      M[2048] := M[2076];
      M[2049] := M[2077];
      #0681
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      H := M[2077];
      L := M[2076];
      SPH := a6[15:8];
      SPL := a6[7:0];
      jump ((M[a5],M[(SPH,SPL)]));
    }

050E:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (050F);

050F:

    #0512
    #0514
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := 17;
    #return-to: 0517
    A := DB;
    D := 20;
    E := 55;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0550);

0517:

    #051A
    M[2070] := M[2046];
    #051D
    #0520
    M[2071] := M[2036];
    #0523
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := 26;
    #return-to: 0526
    A := M[2036];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0563);

0526:

    #0529
    let:16 a1 = addWithCarry(!false,M[2076],~15) in
    let:8 a2 = (M[2076] & 0F) in
    let:8 a3 = (~15 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #052B
    if (!a1[15:8][0]) {
      A := M[2076];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (0534);
    } else {
      #052E
      #0531
      M[2076] := 06;
      A := 06;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (0534);
    }

0534:

    #0537
    let:8 a1 = (M[2078] & M[2078]) in
    let:8 a2 = (M[2078] | M[2078]) in
    #0538
    #053B
    if (!is_zero(a1)) {
      A := a1;
      H := 20;
      L := 55;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (055B);
    } else {
      #053E
      #0541
      #0544
      #0546
      let:16 a3 = (-1 + (SPH,SPL)) in
      M[a3] := 05;
      let:16 a4 = (-1 + a3) in
      M[a4] := 49;
      #return-to: 0549
      A := a1;
      B := 10;
      D := 1B;
      E := 50;
      H := 20;
      L := 50;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (1A32);
    }

0549:

    #054C
    M[2058] := M[2076];
    M[2059] := M[2077];
    #054F
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[2077];
    L := M[2076];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0550:

    M[207F] := A;
    #0553
    #0556
    #0558
    B := 0B;
    H := 20;
    L := 73;
    jump (1A32);

055B:

    #055E
    #0560
    B := 0B;
    D := 20;
    E := 73;
    jump (1A32);

0563:

    #0566
    #0567
    let:8 a1 = (80 & M[2073]) in
    let:8 a2 = (80 | M[2073]) in
    #0569
    if (!is_zero(a1)) {
      #05C1
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a3 = (-1 + (SPH,SPL)) in
          M[a3] := 05;
          let:16 a4 = (-1 + a3) in
          M[a4] := C1;
          A := a1;
          H := 20;
          L := 73;
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 05;
          let:16 a6 = (-1 + a5) in
          M[a6] := C1;
          A := a1;
          H := 20;
          L := 73;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0010);
        }
      } else {
        #05C4
        let:16 a7 = (-1 + (SPH,SPL)) in
        M[a7] := 05;
        let:16 a8 = (-1 + a7) in
        M[a8] := C7;
        #return-to: 05C7
        A := a1;
        D := 20;
        E := 7C;
        H := 20;
        L := 73;
        SPH := a8[15:8];
        SPL := a8[7:0];
        FlagS := a1[7];
        FlagZ := is_zero(a1);
        FlagA := a2[3];
        FlagP := parity(a1);
        FlagCY := false;
        jump (1A06);
      }
    } else {
      #056C
      #056F
      let:16 a9 = addWithCarry(!false,M[20C1],~04) in
      let:8 a10 = (M[20C1] & 0F) in
      let:8 a11 = (~04 & 0F) in
      let:16 a12 = addWithCarry(!false,a10,a11) in
      #0571
      #0574
      if (is_zero(a9[7:0])) {
        A := M[2069];
        H := 20;
        L := 73;
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := !a9[15:8][0];
        jump (05B7);
      } else {
        #0577
        let:8 a13 = (M[2069] & M[2069]) in
        let:8 a14 = (M[2069] | M[2069]) in
        #0578
        if (is_zero(a13)) {
          let:16 a15 = (1 + (SPH,SPL)) in
          let:16 a16 = (1 + a15) in
          A := a13;
          H := 20;
          L := 73;
          SPH := a16[15:8];
          SPL := a16[7:0];
          FlagS := a13[7];
          FlagZ := is_zero(a13);
          FlagA := a14[3];
          FlagP := parity(a13);
          FlagCY := false;
          jump ((M[a15],M[(SPH,SPL)]));
        } else {
          #0579
          #057A
          M[2074] := 00;
          #057C
          #057F
          let:8 a17 = (M[2070] & M[2070]) in
          let:8 a18 = (M[2070] | M[2070]) in
          #0580
          if (is_zero(a17)) {
            A := a17;
            H := 20;
            L := 74;
            FlagS := a17[7];
            FlagZ := is_zero(a17);
            FlagA := a18[3];
            FlagP := parity(a17);
            FlagCY := false;
            jump (0589);
          } else {
            #0583
            #0584
            #0587
            let:16 a19 = addWithCarry(!false,M[20CF],~a17) in
            let:8 a20 = (M[20CF] & 0F) in
            let:8 a21 = (~a17 & 0F) in
            let:16 a22 = addWithCarry(!false,a20,a21) in
            #0588
            if (!!a19[15:8][0]) {
              let:16 a23 = (1 + (SPH,SPL)) in
              let:16 a24 = (1 + a23) in
              A := M[20CF];
              B := a17;
              H := 20;
              L := 74;
              SPH := a24[15:8];
              SPL := a24[7:0];
              FlagS := a19[7:0][7];
              FlagZ := is_zero(a19[7:0]);
              FlagA := a22[7:0][4];
              FlagP := parity(a19[7:0]);
              FlagCY := !a19[15:8][0];
              jump ((M[a23],M[(SPH,SPL)]));
            } else {
              A := M[20CF];
              B := a17;
              H := 20;
              L := 74;
              FlagS := a19[7:0][7];
              FlagZ := is_zero(a19[7:0]);
              FlagA := a22[7:0][4];
              FlagP := parity(a19[7:0]);
              FlagCY := !a19[15:8][0];
              jump (0589);
            }
          }
        }
      }
    }

0589:

    #058C
    let:8 a1 = (M[2071] & M[2071]) in
    let:8 a2 = (M[2071] | M[2071]) in
    #058D
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0596);
    } else {
      #0590
      #0591
      #0594
      let:16 a3 = addWithCarry(!false,M[20CF],~a1) in
      let:8 a4 = (M[20CF] & 0F) in
      let:8 a5 = (~a1 & 0F) in
      let:16 a6 = addWithCarry(!false,a4,a5) in
      #0595
      if (!!a3[15:8][0]) {
        let:16 a7 = (1 + (SPH,SPL)) in
        let:16 a8 = (1 + a7) in
        A := M[20CF];
        B := a1;
        SPH := a8[15:8];
        SPL := a8[7:0];
        FlagS := a3[7:0][7];
        FlagZ := is_zero(a3[7:0]);
        FlagA := a6[7:0][4];
        FlagP := parity(a3[7:0]);
        FlagCY := !a3[15:8][0];
        jump ((M[a7],M[(SPH,SPL)]));
      } else {
        A := M[20CF];
        B := a1;
        FlagS := a3[7:0][7];
        FlagZ := is_zero(a3[7:0]);
        FlagA := a6[7:0][4];
        FlagP := parity(a3[7:0]);
        FlagCY := !a3[15:8][0];
        jump (0596);
      }
    }

0596:

    let:16 a1 = (1 + (H,L)) in
    #0597
    #0598
    let:8 a2 = (M[a1] & M[a1]) in
    let:8 a3 = (M[a1] | M[a1]) in
    #0599
    if (is_zero(a2)) {
      #061B
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a4 = (-1 + (SPH,SPL)) in
          M[a4] := 06;
          let:16 a5 = (-1 + a4) in
          M[a5] := 1B;
          A := a2;
          H := a1[15:8];
          L := a1[7:0];
          SPH := a5[15:8];
          SPL := a5[7:0];
          FlagS := a2[7];
          FlagZ := is_zero(a2);
          FlagA := a3[3];
          FlagP := parity(a2);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a6 = (-1 + (SPH,SPL)) in
          M[a6] := 06;
          let:16 a7 = (-1 + a6) in
          M[a7] := 1B;
          A := a2;
          H := a1[15:8];
          L := a1[7:0];
          SPH := a7[15:8];
          SPL := a7[7:0];
          FlagS := a2[7];
          FlagZ := is_zero(a2);
          FlagA := a3[3];
          FlagP := parity(a2);
          FlagCY := false;
          jump (0010);
        }
      } else {
        #061E
        let:16 a8 = addWithCarry(false,08,M[201B]) in
        let:8 a9 = (08 & 0F) in
        let:8 a10 = (M[201B] & 0F) in
        let:16 a11 = addWithCarry(false,a9,a10) in
        #0620
        #0621
        let:16 a12 = (-1 + (SPH,SPL)) in
        M[a12] := 06;
        let:16 a13 = (-1 + a12) in
        M[a13] := 24;
        #return-to: 0624
        A := a8[7:0];
        H := a8[7:0];
        L := a1[7:0];
        SPH := a13[15:8];
        SPL := a13[7:0];
        FlagS := a8[7:0][7];
        FlagZ := is_zero(a8[7:0]);
        FlagA := a11[7:0][4];
        FlagP := parity(a8[7:0]);
        FlagCY := a8[15:8][0];
        jump (156F);
      }
    } else {
      #059C
      #059F
      #05A0
      let:16 a14 = (1 + (M[2077],M[2076])) in
      #05A1
      #05A2
      M[2076] := a14[7:0];
      M[2077] := a14[15:8];
      A := a2;
      C := M[(M[2077],M[2076])];
      H := a14[15:8];
      L := a14[7:0];
      FlagS := a2[7];
      FlagZ := is_zero(a2);
      FlagA := a3[3];
      FlagP := parity(a2);
      FlagCY := false;
      jump (05A5);
    }

05A5:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := A8;
    #return-to: 05A8
    #062F
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 06;
        let:16 a4 = (-1 + a3) in
        M[a4] := 2F;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 06;
        let:16 a6 = (-1 + a5) in
        M[a6] := 2F;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      let:16 a7 = addWithCarry(!true,C,~00) in
      let:8 a8 = (C & 0F) in
      let:8 a9 = (~00 & 0F) in
      let:16 a10 = addWithCarry(!true,a8,a9) in
      #0630
      #0633
      #0634
      #0635
      A := M[2067];
      C := a7[7:0];
      D := 05;
      H := M[2067];
      L := a7[7:0];
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      jump (0637);
    }

05A8:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      #05A9
      let:16 a3 = (-1 + (SPH,SPL)) in
      M[a3] := 05;
      let:16 a4 = (-1 + a3) in
      M[a4] := AC;
      #return-to: 05AC
      SPH := a4[15:8];
      SPL := a4[7:0];
      jump (017A);
    }

05AC:

    #05AD
    let:16 a1 = addWithCarry(false,07,C) in
    let:8 a2 = (07 & 0F) in
    let:8 a3 = (C & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    #05AF
    #05B0
    #05B1
    let:16 a5 = addWithCarry(!false,L,~0A) in
    let:8 a6 = (L & 0F) in
    let:8 a7 = (~0A & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    #05B3
    #05B4
    M[207B] := a5[7:0];
    M[207C] := a1[7:0];
    A := a5[7:0];
    H := a1[7:0];
    L := a5[7:0];
    FlagS := a5[7:0][7];
    FlagZ := is_zero(a5[7:0]);
    FlagA := a8[7:0][4];
    FlagP := parity(a5[7:0]);
    FlagCY := !a5[15:8][0];
    jump (05B7);

05B7:

    #05BA
    #05BB
    let:8 a1 = (80 | M[2073]) in
    #05BD
    M[2073] := a1;
    #05BE
    #05BF
    let:16 a2 = addWithCarry(true,M[2074],00) in
    let:8 a3 = (M[2074] & 0F) in
    let:8 a4 = (00 & 0F) in
    let:16 a5 = addWithCarry(true,a3,a4) in
    M[2074] := a2[7:0];
    #05C0
    let:16 a6 = (1 + (SPH,SPL)) in
    let:16 a7 = (1 + a6) in
    A := a1;
    H := 20;
    L := 74;
    SPH := a7[15:8];
    SPL := a7[7:0];
    FlagS := a2[7:0][7];
    FlagZ := is_zero(a2[7:0]);
    FlagA := a5[7:0][4];
    FlagP := parity(a2[7:0]);
    FlagCY := false;
    jump ((M[a6],M[(SPH,SPL)]));

05C7:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      #05C8
      let:16 a3 = (1 + (H,L)) in
      #05C9
      #05CA
      let:8 a4 = (01 & M[a3]) in
      let:8 a5 = (01 | M[a3]) in
      #05CC
      if (!is_zero(a4)) {
        #0644
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a6 = (-1 + (SPH,SPL)) in
            M[a6] := 06;
            let:16 a7 = (-1 + a6) in
            M[a7] := 44;
            A := a4;
            H := a3[15:8];
            L := a3[7:0];
            SPH := a7[15:8];
            SPL := a7[7:0];
            FlagS := a4[7];
            FlagZ := is_zero(a4);
            FlagA := a5[3];
            FlagP := parity(a4);
            FlagCY := false;
            jump (0008);
          } else {
            let:16 a8 = (-1 + (SPH,SPL)) in
            M[a8] := 06;
            let:16 a9 = (-1 + a8) in
            M[a9] := 44;
            A := a4;
            H := a3[15:8];
            L := a3[7:0];
            SPH := a9[15:8];
            SPL := a9[7:0];
            FlagS := a4[7];
            FlagZ := is_zero(a4);
            FlagA := a5[3];
            FlagP := parity(a4);
            FlagCY := false;
            jump (0010);
          }
        } else {
          #0647
          let:16 a10 = addWithCarry(!true,M[2078],~00) in
          let:8 a11 = (M[2078] & 0F) in
          let:8 a12 = (~00 & 0F) in
          let:16 a13 = addWithCarry(!true,a11,a12) in
          M[2078] := a10[7:0];
          #0648
          #0649
          let:16 a14 = addWithCarry(!false,M[2078],~03) in
          let:8 a15 = (M[2078] & 0F) in
          let:8 a16 = (~03 & 0F) in
          let:16 a17 = addWithCarry(!false,a15,a16) in
          #064B
          if (!is_zero(a14[7:0])) {
            #0667
            if ((g_time_to_wakeup && g_interrupts_enabled)) {
              disable_interrupts()
              if (g_half_frame) {
                let:16 a18 = (-1 + (SPH,SPL)) in
                M[a18] := 06;
                let:16 a19 = (-1 + a18) in
                M[a19] := 67;
                A := M[2078];
                H := 20;
                L := 78;
                SPH := a19[15:8];
                SPL := a19[7:0];
                FlagS := a14[7:0][7];
                FlagZ := is_zero(a14[7:0]);
                FlagA := a17[7:0][4];
                FlagP := parity(a14[7:0]);
                FlagCY := !a14[15:8][0];
                jump (0008);
              } else {
                let:16 a20 = (-1 + (SPH,SPL)) in
                M[a20] := 06;
                let:16 a21 = (-1 + a20) in
                M[a21] := 67;
                A := M[2078];
                H := 20;
                L := 78;
                SPH := a21[15:8];
                SPL := a21[7:0];
                FlagS := a14[7:0][7];
                FlagZ := is_zero(a14[7:0]);
                FlagA := a17[7:0][4];
                FlagP := parity(a14[7:0]);
                FlagCY := !a14[15:8][0];
                jump (0010);
              }
            } else {
              let:8 a22 = (M[2078] & M[2078]) in
              let:8 a23 = (M[2078] | M[2078]) in
              #0668
              if (!is_zero(a22)) {
                let:16 a24 = (1 + (SPH,SPL)) in
                let:16 a25 = (1 + a24) in
                A := a22;
                H := 20;
                L := 78;
                SPH := a25[15:8];
                SPL := a25[7:0];
                FlagS := a22[7];
                FlagZ := is_zero(a22);
                FlagA := a23[3];
                FlagP := parity(a22);
                FlagCY := false;
                jump ((M[a24],M[(SPH,SPL)]));
              } else {
                #0669
                A := a22;
                H := 20;
                L := 78;
                FlagS := a22[7];
                FlagZ := is_zero(a22);
                FlagA := a23[3];
                FlagP := parity(a22);
                FlagCY := false;
                jump (0675);
              }
            }
          } else {
            #064E
            let:16 a26 = (-1 + (SPH,SPL)) in
            M[a26] := 06;
            let:16 a27 = (-1 + a26) in
            M[a27] := 51;
            #return-to: 0651
            A := M[2078];
            H := 20;
            L := 78;
            SPH := a27[15:8];
            SPL := a27[7:0];
            FlagS := a14[7:0][7];
            FlagZ := is_zero(a14[7:0]);
            FlagA := a17[7:0][4];
            FlagP := parity(a14[7:0]);
            FlagCY := !a14[15:8][0];
            jump (0675);
          }
        }
      } else {
        #05CF
        let:16 a28 = (1 + a3) in
        #05D0
        let:16 a29 = addWithCarry(true,M[a28],00) in
        let:8 a30 = (M[a28] & 0F) in
        let:8 a31 = (00 & 0F) in
        let:16 a32 = addWithCarry(true,a30,a31) in
        M[a28] := a29[7:0];
        #05D1
        let:16 a33 = (-1 + (SPH,SPL)) in
        M[a33] := 05;
        let:16 a34 = (-1 + a33) in
        M[a34] := D4;
        #return-to: 05D4
        A := a4;
        H := a28[15:8];
        L := a28[7:0];
        SPH := a34[15:8];
        SPL := a34[7:0];
        FlagS := a29[7:0][7];
        FlagZ := is_zero(a29[7:0]);
        FlagA := a32[7:0][4];
        FlagP := parity(a29[7:0]);
        FlagCY := false;
        jump (0675);
      }
    }

05D4:

    #05D7
    let:16 a1 = addWithCarry(false,03,M[2079]) in
    let:8 a2 = (03 & 0F) in
    let:8 a3 = (M[2079] & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    #05D9
    #05DC
    let:16 a5 = addWithCarry(!false,a1[7:0],~M[207F]) in
    let:8 a6 = (a1[7:0] & 0F) in
    let:8 a7 = (~M[207F] & 0F) in
    let:16 a8 = addWithCarry(!false,a6,a7) in
    #05DD
    if (!a5[15:8][0]) {
      A := a1[7:0];
      H := 20;
      L := 7F;
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := !a5[15:8][0];
      jump (05E2);
    } else {
      #05E0
      let:16 a9 = addWithCarry(!false,a1[7:0],~0C) in
      let:8 a10 = (a1[7:0] & 0F) in
      let:8 a11 = (~0C & 0F) in
      let:16 a12 = addWithCarry(!false,a10,a11) in
      A := a9[7:0];
      H := 20;
      L := 7F;
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      FlagCY := !a9[15:8][0];
      jump (05E2);
    }

05E2:

    M[2079] := A;
    #05E5
    #05E8
    #05E9
    #05EC
    let:16 a1 = addWithCarry(false,M[207B],M[207E]) in
    let:8 a2 = (M[207B] & 0F) in
    let:8 a3 = (M[207E] & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    #05ED
    M[207B] := a1[7:0];
    #05F0
    let:16 a5 = (-1 + (SPH,SPL)) in
    M[a5] := 05;
    let:16 a6 = (-1 + a5) in
    M[a6] := F3;
    #return-to: 05F3
    A := a1[7:0];
    B := M[207B];
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (066C);

05F3:

    #05F6
    let:16 a1 = addWithCarry(!false,M[207B],~15) in
    let:8 a2 = (M[207B] & 0F) in
    let:8 a3 = (~15 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #05F8
    if (!a1[15:8][0]) {
      A := M[207B];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (0612);
    } else {
      #05FB
      #05FE
      let:8 a5 = (M[2061] & M[2061]) in
      let:8 a6 = (M[2061] | M[2061]) in
      #05FF
      if (is_zero(a5)) {
        let:16 a7 = (1 + (SPH,SPL)) in
        let:16 a8 = (1 + a7) in
        A := a5;
        SPH := a8[15:8];
        SPL := a8[7:0];
        FlagS := a5[7];
        FlagZ := is_zero(a5);
        FlagA := a6[3];
        FlagP := parity(a5);
        FlagCY := false;
        jump ((M[a7],M[(SPH,SPL)]));
      } else {
        #0600
        #0603
        let:16 a9 = addWithCarry(!false,M[207B],~1E) in
        let:8 a10 = (M[207B] & 0F) in
        let:8 a11 = (~1E & 0F) in
        let:16 a12 = addWithCarry(!false,a10,a11) in
        #0605
        if (!a9[15:8][0]) {
          A := M[207B];
          FlagS := a9[7:0][7];
          FlagZ := is_zero(a9[7:0]);
          FlagA := a12[7:0][4];
          FlagP := parity(a9[7:0]);
          FlagCY := !a9[15:8][0];
          jump (0612);
        } else {
          #0608
          let:16 a13 = addWithCarry(!false,M[207B],~27) in
          let:8 a14 = (M[207B] & 0F) in
          let:8 a15 = (~27 & 0F) in
          let:16 a16 = addWithCarry(!false,a14,a15) in
          #060A
          #060B
          if (!!a13[15:8][0]) {
            A := M[207B];
            FlagS := a13[7:0][7];
            FlagZ := is_zero(a13[7:0]);
            FlagA := a16[7:0][4];
            FlagP := parity(a13[7:0]);
            FlagCY := !a13[15:8][0];
            jump (0612);
          } else {
            #060E
            let:16 a17 = addWithCarry(!false,M[207B],~M[207B]) in
            let:8 a18 = (M[207B] & 0F) in
            let:8 a19 = (~M[207B] & 0F) in
            let:16 a20 = addWithCarry(!false,a18,a19) in
            #060F
            M[2015] := a17[7:0];
            A := a17[7:0];
            FlagS := a17[7:0][7];
            FlagZ := is_zero(a17[7:0]);
            FlagA := a20[7:0][4];
            FlagP := parity(a17[7:0]);
            FlagCY := !a17[15:8][0];
            jump (0612);
          }
        }
      }
    }

0612:

    #0615
    let:8 a1 = (01 | M[2073]) in
    #0617
    M[2073] := a1;
    #061A
    let:16 a2 = (1 + (SPH,SPL)) in
    let:16 a3 = (1 + a2) in
    A := a1;
    SPH := a3[15:8];
    SPL := a3[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump ((M[a2],M[(SPH,SPL)]));

0624:

    #0625
    let:16 a1 = addWithCarry(!false,C,~0C) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~0C & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #0627
    if (!a1[15:8][0]) {
      A := C;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (05A5);
    } else {
      #062A
      #062C
      A := C;
      C := 0B;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (05A5);
    }

0637:

    #0638
    let:8 a1 = (M[(H,L)] & M[(H,L)]) in
    let:8 a2 = (M[(H,L)] | M[(H,L)]) in
    #0639
    #063A
    if (!is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := true;
      jump ((M[a3],M[(SPH,SPL)]));
    } else {
      #063B
      #063C
      let:16 a5 = addWithCarry(false,0B,L) in
      let:8 a6 = (0B & 0F) in
      let:8 a7 = (L & 0F) in
      let:16 a8 = addWithCarry(false,a6,a7) in
      #063E
      #063F
      let:16 a9 = addWithCarry(!true,D,~00) in
      let:8 a10 = (D & 0F) in
      let:8 a11 = (~00 & 0F) in
      let:16 a12 = addWithCarry(!true,a10,a11) in
      #0640
      if (!is_zero(a9[7:0])) {
        A := a5[7:0];
        D := a9[7:0];
        L := a5[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := a5[15:8][0];
        jump (0637);
      } else {
        #0643
        let:16 a13 = (1 + (SPH,SPL)) in
        let:16 a14 = (1 + a13) in
        A := a5[7:0];
        D := a9[7:0];
        L := a5[7:0];
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagS := a9[7:0][7];
        FlagZ := is_zero(a9[7:0]);
        FlagA := a12[7:0][4];
        FlagP := parity(a9[7:0]);
        FlagCY := a5[15:8][0];
        jump ((M[a13],M[(SPH,SPL)]));
      }
    }

0651:

    #0654
    M[2079] := DC;
    M[207A] := 1C;
    #0657
    #065A
    let:16 a1 = addWithCarry(!true,M[207C],~00) in
    let:8 a2 = (M[207C] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[207C] := a1[7:0];
    #065B
    let:16 a5 = addWithCarry(!true,M[207C],~00) in
    let:8 a6 = (M[207C] & 0F) in
    let:8 a7 = (~00 & 0F) in
    let:16 a8 = addWithCarry(!true,a6,a7) in
    M[207C] := a5[7:0];
    #065C
    #065D
    let:16 a9 = addWithCarry(!true,M[207B],~00) in
    let:8 a10 = (M[207B] & 0F) in
    let:8 a11 = (~00 & 0F) in
    let:16 a12 = addWithCarry(!true,a10,a11) in
    M[207B] := a9[7:0];
    #065E
    let:16 a13 = addWithCarry(!true,M[207B],~00) in
    let:8 a14 = (M[207B] & 0F) in
    let:8 a15 = (~00 & 0F) in
    let:16 a16 = addWithCarry(!true,a14,a15) in
    M[207B] := a13[7:0];
    #065F
    #0661
    M[207D] := 06;
    #0664
    A := 06;
    H := 20;
    L := 7B;
    FlagS := a13[7:0][7];
    FlagZ := is_zero(a13[7:0]);
    FlagA := a16[7:0][4];
    FlagP := parity(a13[7:0]);
    jump (066C);

066C:

    #066F
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := 72;
    #return-to: 0672
    H := 20;
    L := 79;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

0672:

    jump (1491);

0675:

    #0678
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7B;
    #return-to: 067B
    H := 20;
    L := 79;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

067B:

    jump (1452);

0682:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0683
    #0686
    let:16 a3 = addWithCarry(!false,M[2080],~02) in
    let:8 a4 = (M[2080] & 0F) in
    let:8 a5 = (~02 & 0F) in
    let:16 a6 = addWithCarry(!false,a4,a5) in
    #0688
    if (!is_zero(a3[7:0])) {
      let:16 a7 = (1 + a2) in
      let:16 a8 = (1 + a7) in
      A := M[2080];
      H := M[a1];
      L := M[(SPH,SPL)];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := !a3[15:8][0];
      jump ((M[a7],M[a2]));
    } else {
      #0689
      #068C
      #068D
      let:8 a9 = (M[2083] & M[2083]) in
      let:8 a10 = (M[2083] | M[2083]) in
      #068E
      if (is_zero(a9)) {
        A := a9;
        H := 20;
        L := 83;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a9[7];
        FlagZ := is_zero(a9);
        FlagA := a10[3];
        FlagP := parity(a9);
        FlagCY := false;
        jump (050F);
      } else {
        #0691
        #0694
        let:8 a11 = (M[2056] & M[2056]) in
        let:8 a12 = (M[2056] | M[2056]) in
        #0695
        if (!is_zero(a11)) {
          A := a11;
          H := 20;
          L := 83;
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagS := a11[7];
          FlagZ := is_zero(a11);
          FlagA := a12[3];
          FlagP := parity(a11);
          FlagCY := false;
          jump (050F);
        } else {
          #0698
          #0699
          #069A
          let:8 a13 = (M[2084] & M[2084]) in
          let:8 a14 = (M[2084] | M[2084]) in
          #069B
          if (!is_zero(a13)) {
            A := a13;
            H := 20;
            L := 84;
            SPH := a2[15:8];
            SPL := a2[7:0];
            FlagS := a13[7];
            FlagZ := is_zero(a13);
            FlagA := a14[3];
            FlagP := parity(a13);
            FlagCY := false;
            jump (06AB);
          } else {
            #069E
            #06A1
            let:16 a15 = addWithCarry(!false,M[2082],~08) in
            let:8 a16 = (M[2082] & 0F) in
            let:8 a17 = (~08 & 0F) in
            let:16 a18 = addWithCarry(!false,a16,a17) in
            #06A3
            if (!a15[15:8][0]) {
              A := M[2082];
              H := 20;
              L := 84;
              SPH := a2[15:8];
              SPL := a2[7:0];
              FlagS := a15[7:0][7];
              FlagZ := is_zero(a15[7:0]);
              FlagA := a18[7:0][4];
              FlagP := parity(a15[7:0]);
              FlagCY := !a15[15:8][0];
              jump (050F);
            } else {
              #06A6
              M[2084] := 01;
              #06A8
              let:16 a19 = (-1 + a2) in
              M[a19] := 06;
              let:16 a20 = (-1 + a19) in
              M[a20] := AB;
              #return-to: 06AB
              A := M[2082];
              H := 20;
              L := 84;
              SPH := a20[15:8];
              SPL := a20[7:0];
              FlagS := a15[7:0][7];
              FlagZ := is_zero(a15[7:0]);
              FlagA := a18[7:0][4];
              FlagP := parity(a15[7:0]);
              FlagCY := !a15[15:8][0];
              jump (073C);
            }
          }
        }
      }
    }

06AB:

    #06AE
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := B1;
    #return-to: 06B1
    D := 20;
    E := 8A;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A06);

06B1:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      #06B2
      #06B5
      #06B6
      let:8 a3 = (M[2085] & M[2085]) in
      let:8 a4 = (M[2085] | M[2085]) in
      #06B7
      if (!is_zero(a3)) {
        #06D6
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a5 = (-1 + (SPH,SPL)) in
            M[a5] := 06;
            let:16 a6 = (-1 + a5) in
            M[a6] := D6;
            A := a3;
            H := 20;
            L := 85;
            SPH := a6[15:8];
            SPL := a6[7:0];
            FlagS := a3[7];
            FlagZ := is_zero(a3);
            FlagA := a4[3];
            FlagP := parity(a3);
            FlagCY := false;
            jump (0008);
          } else {
            let:16 a7 = (-1 + (SPH,SPL)) in
            M[a7] := 06;
            let:16 a8 = (-1 + a7) in
            M[a8] := D6;
            A := a3;
            H := 20;
            L := 85;
            SPH := a8[15:8];
            SPL := a8[7:0];
            FlagS := a3[7];
            FlagZ := is_zero(a3);
            FlagA := a4[3];
            FlagP := parity(a3);
            FlagCY := false;
            jump (0010);
          }
        } else {
          #06D8
          let:16 a9 = (-1 + (SPH,SPL)) in
          M[a9] := 06;
          let:16 a10 = (-1 + a9) in
          M[a10] := DB;
          #return-to: 06DB
          A := a3;
          B := FE;
          H := 20;
          L := 85;
          SPH := a10[15:8];
          SPL := a10[7:0];
          FlagS := a3[7];
          FlagZ := is_zero(a3);
          FlagA := a4[3];
          FlagP := parity(a3);
          FlagCY := false;
          jump (19DC);
        }
      } else {
        #06BA
        #06BD
        #06BE
        #06BF
        #06C0
        let:16 a11 = addWithCarry(false,M[208C],M[208A]) in
        let:8 a12 = (M[208C] & 0F) in
        let:8 a13 = (M[208A] & 0F) in
        let:16 a14 = addWithCarry(false,a12,a13) in
        #06C1
        M[208A] := a11[7:0];
        #06C4
        let:16 a15 = (-1 + (SPH,SPL)) in
        M[a15] := 06;
        let:16 a16 = (-1 + a15) in
        M[a16] := C7;
        #return-to: 06C7
        A := a11[7:0];
        H := 20;
        L := 8C;
        SPH := a16[15:8];
        SPL := a16[7:0];
        FlagS := a11[7:0][7];
        FlagZ := is_zero(a11[7:0]);
        FlagA := a14[7:0][4];
        FlagP := parity(a11[7:0]);
        FlagCY := a11[15:8][0];
        jump (073C);
      }
    }

06C7:

    #06CA
    #06CB
    let:16 a1 = addWithCarry(!false,M[208A],~28) in
    let:8 a2 = (M[208A] & 0F) in
    let:8 a3 = (~28 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #06CD
    if (!a1[15:8][0]) {
      A := M[208A];
      H := 20;
      L := 8A;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (06F9);
    } else {
      #06D0
      let:16 a5 = addWithCarry(!false,M[208A],~E1) in
      let:8 a6 = (M[208A] & 0F) in
      let:8 a7 = (~E1 & 0F) in
      let:16 a8 = addWithCarry(!false,a6,a7) in
      #06D2
      if (!!a5[15:8][0]) {
        A := M[208A];
        H := 20;
        L := 8A;
        FlagS := a5[7:0][7];
        FlagZ := is_zero(a5[7:0]);
        FlagA := a8[7:0][4];
        FlagP := parity(a5[7:0]);
        FlagCY := !a5[15:8][0];
        jump (06F9);
      } else {
        #06D5
        let:16 a9 = (1 + (SPH,SPL)) in
        let:16 a10 = (1 + a9) in
        A := M[208A];
        H := 20;
        L := 8A;
        SPH := a10[15:8];
        SPL := a10[7:0];
        FlagS := a5[7:0][7];
        FlagZ := is_zero(a5[7:0]);
        FlagA := a8[7:0][4];
        FlagP := parity(a5[7:0]);
        FlagCY := !a5[15:8][0];
        jump ((M[a9],M[(SPH,SPL)]));
      }
    }

06DB:

    let:16 a1 = (1 + (H,L)) in
    #06DC
    let:16 a2 = addWithCarry(!true,M[a1],~00) in
    let:8 a3 = (M[a1] & 0F) in
    let:8 a4 = (~00 & 0F) in
    let:16 a5 = addWithCarry(!true,a3,a4) in
    M[a1] := a2[7:0];
    #06DD
    #06DE
    let:16 a6 = addWithCarry(!false,M[a1],~1F) in
    let:8 a7 = (M[a1] & 0F) in
    let:8 a8 = (~1F & 0F) in
    let:16 a9 = addWithCarry(!false,a7,a8) in
    #06E0
    if (is_zero(a6[7:0])) {
      #074B
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a10 = (-1 + (SPH,SPL)) in
          M[a10] := 07;
          let:16 a11 = (-1 + a10) in
          M[a11] := 4B;
          A := M[a1];
          H := a1[15:8];
          L := a1[7:0];
          SPH := a11[15:8];
          SPL := a11[7:0];
          FlagS := a6[7:0][7];
          FlagZ := is_zero(a6[7:0]);
          FlagA := a9[7:0][4];
          FlagP := parity(a6[7:0]);
          FlagCY := !a6[15:8][0];
          jump (0008);
        } else {
          let:16 a12 = (-1 + (SPH,SPL)) in
          M[a12] := 07;
          let:16 a13 = (-1 + a12) in
          M[a13] := 4B;
          A := M[a1];
          H := a1[15:8];
          L := a1[7:0];
          SPH := a13[15:8];
          SPL := a13[7:0];
          FlagS := a6[7:0][7];
          FlagZ := is_zero(a6[7:0]);
          FlagA := a9[7:0][4];
          FlagP := parity(a6[7:0]);
          FlagCY := !a6[15:8][0];
          jump (0010);
        }
      } else {
        #074D
        #0750
        #0751
        let:8 a14 = (10 | M[2098]) in
        #0752
        M[2098] := a14;
        #0753
        let:16 a15 = (-1 + (SPH,SPL)) in
        M[a15] := 07;
        let:16 a16 = (-1 + a15) in
        M[a16] := 56;
        #return-to: 0756
        A := a14;
        B := 10;
        H := 20;
        L := 98;
        SPH := a16[15:8];
        SPL := a16[7:0];
        FlagS := a14[7];
        FlagZ := is_zero(a14);
        FlagA := false;
        FlagP := parity(a14);
        FlagCY := false;
        jump (1770);
      }
    } else {
      #06E3
      let:16 a17 = addWithCarry(!false,M[a1],~18) in
      let:8 a18 = (M[a1] & 0F) in
      let:8 a19 = (~18 & 0F) in
      let:16 a20 = addWithCarry(!false,a18,a19) in
      #06E5
      if (is_zero(a17[7:0])) {
        #070C
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a21 = (-1 + (SPH,SPL)) in
            M[a21] := 07;
            let:16 a22 = (-1 + a21) in
            M[a22] := 0C;
            A := M[a1];
            H := a1[15:8];
            L := a1[7:0];
            SPH := a22[15:8];
            SPL := a22[7:0];
            FlagS := a17[7:0][7];
            FlagZ := is_zero(a17[7:0]);
            FlagA := a20[7:0][4];
            FlagP := parity(a17[7:0]);
            FlagCY := !a17[15:8][0];
            jump (0008);
          } else {
            let:16 a23 = (-1 + (SPH,SPL)) in
            M[a23] := 07;
            let:16 a24 = (-1 + a23) in
            M[a24] := 0C;
            A := M[a1];
            H := a1[15:8];
            L := a1[7:0];
            SPH := a24[15:8];
            SPL := a24[7:0];
            FlagS := a17[7:0][7];
            FlagZ := is_zero(a17[7:0]);
            FlagA := a20[7:0][4];
            FlagP := parity(a17[7:0]);
            FlagCY := !a17[15:8][0];
            jump (0010);
          }
        } else {
          #070E
          M[20F1] := 01;
          #0711
          #0714
          #0715
          #0717
          #071A
          A := 01;
          B := M[(M[208E],M[208D])];
          C := 04;
          D := 1D;
          E := 4C;
          H := 1D;
          L := 50;
          FlagS := a17[7:0][7];
          FlagZ := is_zero(a17[7:0]);
          FlagA := a20[7:0][4];
          FlagP := parity(a17[7:0]);
          FlagCY := !a17[15:8][0];
          jump (071D);
        }
      } else {
        #06E8
        let:8 a25 = (M[a1] & M[a1]) in
        let:8 a26 = (M[a1] | M[a1]) in
        #06E9
        if (!is_zero(a25)) {
          let:16 a27 = (1 + (SPH,SPL)) in
          let:16 a28 = (1 + a27) in
          A := a25;
          H := a1[15:8];
          L := a1[7:0];
          SPH := a28[15:8];
          SPL := a28[7:0];
          FlagS := a25[7];
          FlagZ := is_zero(a25);
          FlagA := a26[3];
          FlagP := parity(a25);
          FlagCY := false;
          jump ((M[a27],M[(SPH,SPL)]));
        } else {
          #06EA
          #06EC
          #06EF
          #06F0
          let:8 a29 = (EF & M[2098]) in
          let:8 a30 = (EF | M[2098]) in
          #06F1
          M[2098] := a29;
          #06F2
          let:8 a31 = (20 & a29) in
          let:8 a32 = (20 | a29) in
          #06F4
          sound_control(FleetMovement1,a31[0]);
          sound_control(FleetMovement2,a31[1]);
          sound_control(FleetMovement3,a31[2]);
          sound_control(FleetMovement4,a31[3]);
          sound_control(UfoHit,a31[4]);
          #06F6
          #06F7
          #06F8
          A := a31;
          B := EF;
          H := 20;
          L := 98;
          FlagS := a31[7];
          FlagZ := is_zero(a31);
          FlagA := a32[3];
          FlagP := parity(a31);
          FlagCY := false;
          jump (06F9);
        }
      }
    }

06F9:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := FC;
    #return-to: 06FC
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0742);

06FC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := FF;
    #return-to: 06FF
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14CB);

06FF:

    #0702
    #0704
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 07;
    #return-to: 0707
    #075F
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 07;
        let:16 a4 = (-1 + a3) in
        M[a4] := 5F;
        B := 0A;
        H := 20;
        L := 83;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 07;
        let:16 a6 = (-1 + a5) in
        M[a6] := 5F;
        B := 0A;
        H := 20;
        L := 83;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #0762
      B := 0A;
      D := 1B;
      E := 83;
      H := 20;
      L := 83;
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (1A32);
    }

0707:

    #0709
    B := FE;
    jump (19DC);

071D:

    #071E
    let:16 a1 = addWithCarry(!false,M[(D,E)],~B) in
    let:8 a2 = (M[(D,E)] & 0F) in
    let:8 a3 = (~B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #071F
    if (is_zero(a1[7:0])) {
      A := M[(D,E)];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (0728);
    } else {
      #0722
      let:16 a5 = (1 + (H,L)) in
      #0723
      let:16 a6 = (1 + (D,E)) in
      #0724
      let:16 a7 = addWithCarry(!true,C,~00) in
      let:8 a8 = (C & 0F) in
      let:8 a9 = (~00 & 0F) in
      let:16 a10 = addWithCarry(!true,a8,a9) in
      #0725
      if (!is_zero(a7[7:0])) {
        A := M[(D,E)];
        C := a7[7:0];
        D := a6[15:8];
        E := a6[7:0];
        H := a5[15:8];
        L := a5[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a1[15:8][0];
        jump (071D);
      } else {
        A := M[(D,E)];
        C := a7[7:0];
        D := a6[15:8];
        E := a6[7:0];
        H := a5[15:8];
        L := a5[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a1[15:8][0];
        jump (0728);
      }
    }

0728:

    #0729
    M[2087] := M[(H,L)];
    #072C
    #072E
    #072F
    let:17 a1 = add17((00,B),(00,B)) in
    #0730
    let:17 a2 = add17(a1[15:0],a1[15:0]) in
    #0731
    let:17 a3 = add17(a2[15:0],a2[15:0]) in
    #0732
    let:17 a4 = add17(a3[15:0],a3[15:0]) in
    #0733
    M[20F2] := a4[15:0][7:0];
    M[20F3] := a4[15:0][15:8];
    #0736
    let:16 a5 = (-1 + (SPH,SPL)) in
    M[a5] := 07;
    let:16 a6 = (-1 + a5) in
    M[a6] := 39;
    #return-to: 0739
    A := M[(H,L)];
    H := a4[15:0][15:8];
    L := a4[15:0][7:0];
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagCY := a4[16];
    jump (0742);

0739:

    #08F1
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a1 = (-1 + (SPH,SPL)) in
        M[a1] := 08;
        let:16 a2 = (-1 + a1) in
        M[a2] := F1;
        SPH := a2[15:8];
        SPL := a2[7:0];
        jump (0008);
      } else {
        let:16 a3 = (-1 + (SPH,SPL)) in
        M[a3] := 08;
        let:16 a4 = (-1 + a3) in
        M[a4] := F1;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0010);
      }
    } else {
      C := 03;
      jump (08F3);
    }

073C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3F;
    #return-to: 073F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0742);

073F:

    jump (1439);

0742:

    #0745
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 48;
    #return-to: 0748
    H := 20;
    L := 87;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

0748:

    jump (1A47);

0756:

    #0759
    M[2087] := 7C;
    M[2088] := 1D;
    #075C
    H := 1D;
    L := 7C;
    jump (073C);

0771:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 74;
    #return-to: 0774
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

0774:

    #0777
    #077A
    #077C
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7F;
    #return-to: 077F
    C := 04;
    D := 1F;
    E := F3;
    H := 30;
    L := 13;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08F3);

077F:

    #0782
    let:16 a1 = addWithCarry(!true,M[20EB],~00) in
    let:8 a2 = (M[20EB] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    #0783
    #0786
    #0788
    if (!is_zero(a1[7:0])) {
      #0857
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 08;
          let:16 a6 = (-1 + a5) in
          M[a6] := 57;
          A := a1[7:0];
          C := 14;
          H := 28;
          L := 10;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7:0][7];
          FlagZ := is_zero(a1[7:0]);
          FlagA := a4[7:0][4];
          FlagP := parity(a1[7:0]);
          jump (0008);
        } else {
          let:16 a7 = (-1 + (SPH,SPL)) in
          M[a7] := 08;
          let:16 a8 = (-1 + a7) in
          M[a8] := 57;
          A := a1[7:0];
          C := 14;
          H := 28;
          L := 10;
          SPH := a8[15:8];
          SPL := a8[7:0];
          FlagS := a1[7:0][7];
          FlagZ := is_zero(a1[7:0]);
          FlagA := a4[7:0][4];
          FlagP := parity(a1[7:0]);
          jump (0010);
        }
      } else {
        #085A
        let:16 a9 = (-1 + (SPH,SPL)) in
        M[a9] := 08;
        let:16 a10 = (-1 + a9) in
        M[a10] := 5D;
        #return-to: 085D
        A := a1[7:0];
        C := 14;
        D := 1A;
        E := BA;
        H := 28;
        L := 10;
        SPH := a10[15:8];
        SPL := a10[7:0];
        FlagS := a1[7:0][7];
        FlagZ := is_zero(a1[7:0]);
        FlagA := a4[7:0][4];
        FlagP := parity(a1[7:0]);
        jump (08F3);
      }
    } else {
      #078B
      #078E
      let:16 a11 = (-1 + (SPH,SPL)) in
      M[a11] := 07;
      let:16 a12 = (-1 + a11) in
      M[a12] := 91;
      #return-to: 0791
      A := a1[7:0];
      C := 14;
      D := 1A;
      E := CF;
      H := 28;
      L := 10;
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (08F3);
    }

0791:

    #0793
    let:8 a1 = (04 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
    let:8 a2 = (04 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
    #0795
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (077F);
    } else {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0798);
    }

0798:

    #079A
    let:8 a1 = (A ^ A) in
    A := a1;
    B := 99;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (079B);

079B:

    M[20CE] := A;
    #079E
    #07A1
    let:16 a1 = addWithCarry(false,B,M[20EB]) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (M[20EB] & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    #07A2
    let:8 a5 = (a1[7:0] & 0F) in
    let:16 a6 = addWithCarry(false,a5,06) in
    let:16 a7 = addWithCarry(((((a5[1] || a5[2]) && a5[3]) || a4[7:0][4]) ? a6[7:0] : a5)[4],(a1[7:0] >> 04),00) in
    let:16 a8 = addWithCarry(false,a7[7:0],06) in
    let:8 a9 = (((((a5[1] || a5[2]) && a5[3]) || a4[7:0][4]) ? a6[7:0] : a5) & 0F) in
    let:8 a10 = ((((((a7[7:0][1] || a7[7:0][2]) && a7[7:0][3]) || a1[15:8][0]) ? a8[7:0] : a7[7:0]) << 04) | a9) in
    #07A3
    M[20EB] := a10;
    #07A6
    let:16 a11 = (-1 + (SPH,SPL)) in
    M[a11] := 07;
    let:16 a12 = (-1 + a11) in
    M[a12] := A9;
    #return-to: 07A9
    A := a10;
    SPH := a12[15:8];
    SPL := a12[7:0];
    FlagS := a10[7];
    FlagZ := is_zero(a10);
    FlagA := ((((a5[1] || a5[2]) && a5[3]) || a4[7:0][4]) ? a6[7:0] : a5)[4];
    FlagP := parity(a10);
    FlagCY := (((((a7[7:0][1] || a7[7:0][2]) && a7[7:0][3]) || a1[15:8][0]) ? a8[7:0] : a7[7:0])[4] || a1[15:8][0]);
    jump (1947);

07A9:

    #07AC
    M[20F8] := 00;
    M[20F9] := 00;
    #07AF
    M[20FC] := 00;
    M[20FD] := 00;
    #07B2
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := B5;
    #return-to: 07B5
    H := 00;
    L := 00;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1925);

07B5:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := B8;
    #return-to: 07B8
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (192B);

07B8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := BB;
    #return-to: 07BB
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19D7);

07BB:

    #07BE
    #07BF
    M[20EF] := 01;
    #07C2
    M[20E7] := 01;
    M[20E8] := 01;
    #07C5
    M[20E5] := 01;
    M[20E6] := 01;
    #07C8
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := CB;
    #return-to: 07CB
    A := 01;
    H := 01;
    L := 01;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1956);

07CB:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := CE;
    #return-to: 07CE
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01EF);

07CE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := D1;
    #return-to: 07D1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01F5);

07D1:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := D4;
    #return-to: 07D4
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08D1);

07D4:

    M[21FF] := A;
    #07D7
    M[22FF] := A;
    #07DA
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := DD;
    #return-to: 07DD
    #00D7
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 00;
        let:16 a4 = (-1 + a3) in
        M[a4] := D7;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 00;
        let:16 a6 = (-1 + a5) in
        M[a6] := D7;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #00D9
      M[21FB] := 02;
      #00DC
      M[22FB] := 02;
      #00DF
      #08E4
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a7 = (-1 + a2) in
          M[a7] := 08;
          let:16 a8 = (-1 + a7) in
          M[a8] := E4;
          A := 02;
          SPH := a8[15:8];
          SPL := a8[7:0];
          jump (0008);
        } else {
          let:16 a9 = (-1 + a2) in
          M[a9] := 08;
          let:16 a10 = (-1 + a9) in
          M[a10] := E4;
          A := 02;
          SPH := a10[15:8];
          SPL := a10[7:0];
          jump (0010);
        }
      } else {
        #08E7
        let:8 a11 = (M[20CE] & M[20CE]) in
        let:8 a12 = (M[20CE] | M[20CE]) in
        #08E8
        if (!is_zero(a11)) {
          let:16 a13 = (1 + a2) in
          let:16 a14 = (1 + a13) in
          A := a11;
          SPH := a14[15:8];
          SPL := a14[7:0];
          FlagS := a11[7];
          FlagZ := is_zero(a11);
          FlagA := a12[3];
          FlagP := parity(a11);
          FlagCY := false;
          jump ((M[a13],M[a2]));
        } else {
          #08E9
          #08EC
          #08EE
          A := a11;
          B := 20;
          H := 39;
          L := 1C;
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagS := a11[7];
          FlagZ := is_zero(a11);
          FlagA := a12[3];
          FlagP := parity(a11);
          FlagCY := false;
          jump (14CB);
        }
      }
    }

07DD:

    let:8 a1 = (A ^ A) in
    #07DE
    M[21FE] := a1;
    #07E1
    M[22FE] := a1;
    #07E4
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 07;
    let:16 a3 = (-1 + a2) in
    M[a3] := E7;
    #return-to: 07E7
    A := a1;
    SPH := a3[15:8];
    SPL := a3[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (01C0);

07E7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := EA;
    #return-to: 07EA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1904);

07EA:

    #07ED
    M[21FC] := 78;
    M[21FD] := 38;
    #07F0
    M[22FC] := 78;
    M[22FD] := 38;
    #07F3
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := F6;
    #return-to: 07F6
    H := 38;
    L := 78;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01E4);

07F6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := F9;
    #return-to: 07F9
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A7F);

07F9:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := FC;
    #return-to: 07FC
    #088D
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 08;
        let:16 a4 = (-1 + a3) in
        M[a4] := 8D;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 08;
        let:16 a6 = (-1 + a5) in
        M[a6] := 8D;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #0890
      #0893
      #0895
      let:16 a7 = (-1 + a2) in
      M[a7] := 08;
      let:16 a8 = (-1 + a7) in
      M[a8] := 98;
      #return-to: 0898
      C := 0E;
      D := 1B;
      E := 70;
      H := 2B;
      L := 11;
      SPH := a8[15:8];
      SPL := a8[7:0];
      jump (08F3);
    }

07FC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := FF;
    #return-to: 07FF
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

07FF:

    #0800
    let:8 a1 = (A ^ A) in
    #0801
    M[20C1] := a1;
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0804);

0804:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 07;
    #return-to: 0807
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01CF);

0807:

    #080A
    #080B
    if (M[2067][0]) {
      #0872
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a1 = (-1 + (SPH,SPL)) in
          M[a1] := 08;
          let:16 a2 = (-1 + a1) in
          M[a2] := 72;
          A := updateBit((M[2067] >> 01),7,M[2067][0]);
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagCY := M[2067][0];
          jump (0008);
        } else {
          let:16 a3 = (-1 + (SPH,SPL)) in
          M[a3] := 08;
          let:16 a4 = (-1 + a3) in
          M[a4] := 72;
          A := updateBit((M[2067] >> 01),7,M[2067][0]);
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagCY := M[2067][0];
          jump (0010);
        }
      } else {
        let:16 a5 = (-1 + (SPH,SPL)) in
        M[a5] := 08;
        let:16 a6 = (-1 + a5) in
        M[a6] := 75;
        #return-to: 0875
        A := updateBit((M[2067] >> 01),7,M[2067][0]);
        SPH := a6[15:8];
        SPL := a6[7:0];
        FlagCY := M[2067][0];
        jump (021A);
      }
    } else {
      #080E
      let:16 a7 = (-1 + (SPH,SPL)) in
      M[a7] := 08;
      let:16 a8 = (-1 + a7) in
      M[a8] := 11;
      #return-to: 0811
      #0213
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a9 = (-1 + a8) in
          M[a9] := 02;
          let:16 a10 = (-1 + a9) in
          M[a10] := 13;
          A := updateBit((M[2067] >> 01),7,M[2067][0]);
          SPH := a10[15:8];
          SPL := a10[7:0];
          FlagCY := M[2067][0];
          jump (0008);
        } else {
          let:16 a11 = (-1 + a8) in
          M[a11] := 02;
          let:16 a12 = (-1 + a11) in
          M[a12] := 13;
          A := updateBit((M[2067] >> 01),7,M[2067][0]);
          SPH := a12[15:8];
          SPL := a12[7:0];
          FlagCY := M[2067][0];
          jump (0010);
        }
      } else {
        let:8 a13 = (updateBit((M[2067] >> 01),7,M[2067][0]) ^ updateBit((M[2067] >> 01),7,M[2067][0])) in
        A := a13;
        SPH := a8[15:8];
        SPL := a8[7:0];
        FlagS := a13[7];
        FlagZ := is_zero(a13);
        FlagA := false;
        FlagP := parity(a13);
        FlagCY := false;
        jump (0214);
      }
    }

0811:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 14;
    #return-to: 0814
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01CF);

0814:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 17;
    #return-to: 0817
    #00B1
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 00;
        let:16 a4 = (-1 + a3) in
        M[a4] := B1;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 00;
        let:16 a6 = (-1 + a5) in
        M[a6] := B1;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      let:16 a7 = (-1 + a2) in
      M[a7] := 00;
      let:16 a8 = (-1 + a7) in
      M[a8] := B4;
      #return-to: 00B4
      SPH := a8[15:8];
      SPL := a8[7:0];
      jump (0886);
    }

0817:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 1A;
    #return-to: 081A
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19D1);

081A:

    #081C
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 1F;
    #return-to: 081F
    B := 20;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (18FA);

081F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 22;
    #return-to: 0822
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1618);

0822:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 25;
    #return-to: 0825
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (190A);

0825:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 28;
    #return-to: 0828
    #15F3
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 15;
        let:16 a4 = (-1 + a3) in
        M[a4] := F3;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 15;
        let:16 a6 = (-1 + a5) in
        M[a6] := F3;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      let:16 a7 = (-1 + a2) in
      M[a7] := 15;
      let:16 a8 = (-1 + a7) in
      M[a8] := F6;
      #return-to: 15F6
      SPH := a8[15:8];
      SPL := a8[7:0];
      jump (1611);
    }

0828:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2B;
    #return-to: 082B
    #0988
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 09;
        let:16 a4 = (-1 + a3) in
        M[a4] := 88;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 09;
        let:16 a6 = (-1 + a5) in
        M[a6] := 88;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      let:16 a7 = (-1 + a2) in
      M[a7] := 09;
      let:16 a8 = (-1 + a7) in
      M[a8] := 8B;
      #return-to: 098B
      SPH := a8[15:8];
      SPL := a8[7:0];
      jump (09CA);
    }

082B:

    #082E
    let:8 a1 = (M[2082] & M[2082]) in
    let:8 a2 = (M[2082] | M[2082]) in
    #082F
    if (is_zero(a1)) {
      #09EF
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a3 = (-1 + (SPH,SPL)) in
          M[a3] := 09;
          let:16 a4 = (-1 + a3) in
          M[a4] := EF;
          A := a1;
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 09;
          let:16 a6 = (-1 + a5) in
          M[a6] := EF;
          A := a1;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0010);
        }
      } else {
        let:16 a7 = (-1 + (SPH,SPL)) in
        M[a7] := 09;
        let:16 a8 = (-1 + a7) in
        M[a8] := F2;
        #return-to: 09F2
        #0A3C
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a9 = (-1 + a8) in
            M[a9] := 0A;
            let:16 a10 = (-1 + a9) in
            M[a10] := 3C;
            A := a1;
            SPH := a10[15:8];
            SPL := a10[7:0];
            FlagS := a1[7];
            FlagZ := is_zero(a1);
            FlagA := a2[3];
            FlagP := parity(a1);
            FlagCY := false;
            jump (0008);
          } else {
            let:16 a11 = (-1 + a8) in
            M[a11] := 0A;
            let:16 a12 = (-1 + a11) in
            M[a12] := 3C;
            A := a1;
            SPH := a12[15:8];
            SPL := a12[7:0];
            FlagS := a1[7];
            FlagZ := is_zero(a1);
            FlagA := a2[3];
            FlagP := parity(a1);
            FlagCY := false;
            jump (0010);
          }
        } else {
          let:16 a13 = (-1 + a8) in
          M[a13] := 0A;
          let:16 a14 = (-1 + a13) in
          M[a14] := 3F;
          #return-to: 0A3F
          A := a1;
          SPH := a14[15:8];
          SPL := a14[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0A59);
        }
      }
    } else {
      #0832
      let:16 a15 = (-1 + (SPH,SPL)) in
      M[a15] := 08;
      let:16 a16 = (-1 + a15) in
      M[a16] := 35;
      #return-to: 0835
      #170E
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a17 = (-1 + a16) in
          M[a17] := 17;
          let:16 a18 = (-1 + a17) in
          M[a18] := 0E;
          A := a1;
          SPH := a18[15:8];
          SPL := a18[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a19 = (-1 + a16) in
          M[a19] := 17;
          let:16 a20 = (-1 + a19) in
          M[a20] := 0E;
          A := a1;
          SPH := a20[15:8];
          SPL := a20[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0010);
        }
      } else {
        let:16 a21 = (-1 + a16) in
        M[a21] := 17;
        let:16 a22 = (-1 + a21) in
        M[a22] := 11;
        #return-to: 1711
        A := a1;
        SPH := a22[15:8];
        SPL := a22[7:0];
        FlagS := a1[7];
        FlagZ := is_zero(a1);
        FlagA := a2[3];
        FlagP := parity(a1);
        FlagCY := false;
        jump (09CA);
      }
    }

0835:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 38;
    #return-to: 0838
    #0935
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 09;
        let:16 a4 = (-1 + a3) in
        M[a4] := 35;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 09;
        let:16 a6 = (-1 + a5) in
        M[a6] := 35;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      let:16 a7 = (-1 + a2) in
      M[a7] := 09;
      let:16 a8 = (-1 + a7) in
      M[a8] := 38;
      #return-to: 0938
      SPH := a8[15:8];
      SPL := a8[7:0];
      jump (1910);
    }

0838:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3B;
    #return-to: 083B
    #08D8
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 08;
        let:16 a4 = (-1 + a3) in
        M[a4] := D8;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 08;
        let:16 a6 = (-1 + a5) in
        M[a6] := D8;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #08DB
      let:16 a7 = addWithCarry(!false,M[2082],~09) in
      let:8 a8 = (M[2082] & 0F) in
      let:8 a9 = (~09 & 0F) in
      let:16 a10 = addWithCarry(!false,a8,a9) in
      #08DD
      if (!!a7[15:8][0]) {
        let:16 a11 = (1 + a2) in
        let:16 a12 = (1 + a11) in
        A := M[2082];
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a7[15:8][0];
        jump ((M[a11],M[a2]));
      } else {
        #08DE
        #08E0
        M[207E] := FB;
        #08E3
        let:16 a13 = (1 + a2) in
        let:16 a14 = (1 + a13) in
        A := FB;
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a7[15:8][0];
        jump ((M[a13],M[a2]));
      }
    }

083B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3E;
    #return-to: 083E
    #172C
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 17;
        let:16 a4 = (-1 + a3) in
        M[a4] := 2C;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 17;
        let:16 a6 = (-1 + a5) in
        M[a6] := 2C;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #172F
      let:16 a7 = addWithCarry(!false,M[2025],~00) in
      let:8 a8 = (M[2025] & 0F) in
      let:8 a9 = (~00 & 0F) in
      let:16 a10 = addWithCarry(!false,a8,a9) in
      #1731
      if (!is_zero(a7[7:0])) {
        #1739
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a11 = (-1 + a2) in
            M[a11] := 17;
            let:16 a12 = (-1 + a11) in
            M[a12] := 39;
            A := M[2025];
            SPH := a12[15:8];
            SPL := a12[7:0];
            FlagS := a7[7:0][7];
            FlagZ := is_zero(a7[7:0]);
            FlagA := a10[7:0][4];
            FlagP := parity(a7[7:0]);
            FlagCY := !a7[15:8][0];
            jump (0008);
          } else {
            let:16 a13 = (-1 + a2) in
            M[a13] := 17;
            let:16 a14 = (-1 + a13) in
            M[a14] := 39;
            A := M[2025];
            SPH := a14[15:8];
            SPL := a14[7:0];
            FlagS := a7[7:0][7];
            FlagZ := is_zero(a7[7:0]);
            FlagA := a10[7:0][4];
            FlagP := parity(a7[7:0]);
            FlagCY := !a7[15:8][0];
            jump (0010);
          }
        } else {
          #173B
          A := M[2025];
          B := 02;
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagS := a7[7:0][7];
          FlagZ := is_zero(a7[7:0]);
          FlagA := a10[7:0][4];
          FlagP := parity(a7[7:0]);
          FlagCY := !a7[15:8][0];
          jump (18FA);
        }
      } else {
        #1734
        #1736
        A := M[2025];
        B := FD;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a7[15:8][0];
        jump (19DC);
      }
    }

083E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 41;
    #return-to: 0841
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

0841:

    if (FlagZ) {
      jump (0849);
    } else {
      #0844
      #0846
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 08;
      let:16 a2 = (-1 + a1) in
      M[a2] := 49;
      #return-to: 0849
      B := 04;
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (18FA);
    }

0849:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4C;
    #return-to: 084C
    #1775
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 17;
        let:16 a4 = (-1 + a3) in
        M[a4] := 75;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 17;
        let:16 a6 = (-1 + a5) in
        M[a6] := 75;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #1778
      let:8 a7 = (M[2095] & M[2095]) in
      let:8 a8 = (M[2095] | M[2095]) in
      #1779
      if (is_zero(a7)) {
        A := a7;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a7[7];
        FlagZ := is_zero(a7);
        FlagA := a8[3];
        FlagP := parity(a7);
        FlagCY := false;
        jump (17AA);
      } else {
        #177C
        #177F
        #1782
        A := M[2082];
        D := 1A;
        E := 21;
        H := 1A;
        L := 11;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a7[7];
        FlagZ := is_zero(a7);
        FlagA := a8[3];
        FlagP := parity(a7);
        FlagCY := false;
        jump (1785);
      }
    }

084C:

    #084E
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 51;
    #return-to: 0851
    #1804
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 18;
        let:16 a4 = (-1 + a3) in
        M[a4] := 04;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 18;
        let:16 a6 = (-1 + a5) in
        M[a6] := 04;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #1807
      #1808
      let:8 a7 = (M[2084] & M[2084]) in
      let:8 a8 = (M[2084] | M[2084]) in
      #1809
      if (is_zero(a7)) {
        A := a7;
        H := 20;
        L := 84;
        SPH := a2[15:8];
        SPL := a2[7:0];
        FlagS := a7[7];
        FlagZ := is_zero(a7);
        FlagA := a8[3];
        FlagP := parity(a7);
        FlagCY := false;
        jump (0707);
      } else {
        #180C
        #180D
        #180E
        let:8 a9 = (M[2085] & M[2085]) in
        let:8 a10 = (M[2085] | M[2085]) in
        #180F
        if (!is_zero(a9)) {
          let:16 a11 = (1 + a2) in
          let:16 a12 = (1 + a11) in
          A := a9;
          H := 20;
          L := 85;
          SPH := a12[15:8];
          SPL := a12[7:0];
          FlagS := a9[7];
          FlagZ := is_zero(a9);
          FlagA := a10[3];
          FlagP := parity(a9);
          FlagCY := false;
          jump ((M[a11],M[a2]));
        } else {
          #1810
          #1812
          A := a9;
          B := 01;
          H := 20;
          L := 85;
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagS := a9[7];
          FlagZ := is_zero(a9);
          FlagA := a10[3];
          FlagP := parity(a9);
          FlagCY := false;
          jump (18FA);
        }
      }
    }

0851:

    jump (081F);

085D:

    #085F
    #0861
    #0862
    #0863
    if (updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0]) {
      #086D
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a1 = (-1 + (SPH,SPL)) in
          M[a1] := 08;
          let:16 a2 = (-1 + a1) in
          M[a2] := 6D;
          A := updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0]);
          B := 98;
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagCY := updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0];
          jump (0008);
        } else {
          let:16 a3 = (-1 + (SPH,SPL)) in
          M[a3] := 08;
          let:16 a4 = (-1 + a3) in
          M[a4] := 6D;
          A := updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0]);
          B := 98;
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagCY := updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0];
          jump (0010);
        }
      } else {
        #086F
        A := 01;
        B := 98;
        FlagCY := updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0];
        jump (079B);
      }
    } else {
      #0866
      #0867
      if (updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0])[0]) {
        A := updateBit((updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0]) >> 01),7,updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0])[0]);
        B := 98;
        FlagCY := updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0])[0];
        jump (0798);
      } else {
        #086A
        A := updateBit((updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0]) >> 01),7,updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0])[0]);
        B := 98;
        FlagCY := updateBit((updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0]) >> 01),7,updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right)) >> 01),7,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))[0])[0])[0];
        jump (077F);
      }
    }

0875:

    jump (0814);

0886:

    #0889
    #088A
    #088C
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[2067];
    H := M[2067];
    L := FC;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0898:

    #089B
    #089C
    #089E
    #08A1
    if (!M[2067][0]) {
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 08;
      let:16 a2 = (-1 + a1) in
      M[a2] := A4;
      #return-to: 08A4
      A := 1C;
      H := 37;
      L := 11;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagCY := M[2067][0];
      jump (08FF);
    } else {
      A := 1C;
      H := 37;
      L := 11;
      FlagCY := M[2067][0];
      jump (08A4);
    }

08A4:

    #08A6
    M[20C0] := B0;
    A := B0;
    jump (08A9);

08A9:

    #08AC
    let:8 a1 = (M[20C0] & M[20C0]) in
    let:8 a2 = (M[20C0] | M[20C0]) in
    #08AD
    if (is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a3],M[(SPH,SPL)]));
    } else {
      #08AE
      let:8 a5 = (04 & a1) in
      let:8 a6 = (04 | a1) in
      #08B0
      if (!is_zero(a5)) {
        #08BC
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a7 = (-1 + (SPH,SPL)) in
            M[a7] := 08;
            let:16 a8 = (-1 + a7) in
            M[a8] := BC;
            A := a5;
            SPH := a8[15:8];
            SPL := a8[7:0];
            FlagS := a5[7];
            FlagZ := is_zero(a5);
            FlagA := a6[3];
            FlagP := parity(a5);
            FlagCY := false;
            jump (0008);
          } else {
            let:16 a9 = (-1 + (SPH,SPL)) in
            M[a9] := 08;
            let:16 a10 = (-1 + a9) in
            M[a10] := BC;
            A := a5;
            SPH := a10[15:8];
            SPL := a10[7:0];
            FlagS := a5[7];
            FlagZ := is_zero(a5);
            FlagA := a6[3];
            FlagP := parity(a5);
            FlagCY := false;
            jump (0010);
          }
        } else {
          #08BE
          #08C1
          #08C4
          #08C5
          if (M[2067][0]) {
            A := updateBit((M[2067] >> 01),7,M[2067][0]);
            B := 20;
            H := 27;
            L := 1C;
            FlagS := a5[7];
            FlagZ := is_zero(a5);
            FlagA := a6[3];
            FlagP := parity(a5);
            FlagCY := M[2067][0];
            jump (08CB);
          } else {
            #08C8
            A := updateBit((M[2067] >> 01),7,M[2067][0]);
            B := 20;
            H := 39;
            L := 1C;
            FlagS := a5[7];
            FlagZ := is_zero(a5);
            FlagA := a6[3];
            FlagP := parity(a5);
            FlagCY := M[2067][0];
            jump (08CB);
          }
        }
      } else {
        #08B3
        let:16 a11 = (-1 + (SPH,SPL)) in
        M[a11] := 08;
        let:16 a12 = (-1 + a11) in
        M[a12] := B6;
        #return-to: 08B6
        A := a5;
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a5[7];
        FlagZ := is_zero(a5);
        FlagA := a6[3];
        FlagP := parity(a5);
        FlagCY := false;
        jump (09CA);
      }
    }

08B6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := B9;
    #return-to: 08B9
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1931);

08B9:

    jump (08A9);

08CB:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := CE;
    #return-to: 08CE
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14CB);

08CE:

    jump (08A9);

08D1:

    #08D3
    let:8 a1 = (03 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
    let:8 a2 = (03 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
    #08D5
    let:16 a3 = addWithCarry(false,03,a1) in
    let:8 a4 = (03 & 0F) in
    let:8 a5 = (a1 & 0F) in
    let:16 a6 = addWithCarry(false,a4,a5) in
    #08D7
    let:16 a7 = (1 + (SPH,SPL)) in
    let:16 a8 = (1 + a7) in
    A := a3[7:0];
    SPH := a8[15:8];
    SPL := a8[7:0];
    FlagS := a3[7:0][7];
    FlagZ := is_zero(a3[7:0]);
    FlagA := a6[7:0][4];
    FlagP := parity(a3[7:0]);
    FlagCY := a3[15:8][0];
    jump ((M[a7],M[(SPH,SPL)]));

08F3:

    #08F4
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    #08F5
    let:16 a3 = (-1 + a2) in
    M[a3] := 08;
    let:16 a4 = (-1 + a3) in
    M[a4] := F8;
    #return-to: 08F8
    A := M[(D,E)];
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump (08FF);

08F8:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #08F9
    let:16 a3 = (1 + (M[a1],M[(SPH,SPL)])) in
    #08FA
    let:16 a4 = addWithCarry(!true,C,~00) in
    let:8 a5 = (C & 0F) in
    let:8 a6 = (~00 & 0F) in
    let:16 a7 = addWithCarry(!true,a5,a6) in
    #08FB
    if (!is_zero(a4[7:0])) {
      C := a4[7:0];
      D := a3[15:8];
      E := a3[7:0];
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      jump (08F3);
    } else {
      #08FE
      let:16 a8 = (1 + a2) in
      let:16 a9 = (1 + a8) in
      C := a4[7:0];
      D := a3[15:8];
      E := a3[7:0];
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      jump ((M[a8],M[a2]));
    }

08FF:

    #0902
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    #0903
    #0905
    #0906
    let:17 a3 = add17((00,A),(00,A)) in
    #0907
    let:17 a4 = add17(a3[15:0],a3[15:0]) in
    #0908
    let:17 a5 = add17(a4[15:0],a4[15:0]) in
    #0909
    let:17 a6 = add17(1E00,a5[15:0]) in
    #090A
    #090B
    let:16 a7 = (1 + a2) in
    let:16 a8 = (1 + a7) in
    #090C
    #090E
    #0910
    B := 08;
    D := a6[15:0][15:8];
    E := a6[15:0][7:0];
    H := M[a7];
    L := M[a2];
    SPH := a8[15:8];
    SPL := a8[7:0];
    FlagCY := a6[16];
    jump (1439);

0929:

    let:16 a1 = (-1 + (H,L)) in
    #092A
    M[2091] := a1[7:0];
    M[2092] := a1[15:8];
    #092D
    let:16 a2 = (1 + (SPH,SPL)) in
    let:16 a3 = (1 + a2) in
    H := a1[15:8];
    L := a1[7:0];
    SPH := a3[15:8];
    SPL := a3[7:0];
    jump ((M[a2],M[(SPH,SPL)]));

092E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 31;
    #return-to: 0931
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1611);

0931:

    #0933
    #0934
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[(H,FF)];
    L := FF;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0938:

    let:16 a1 = (-1 + (H,L)) in
    #0939
    let:16 a2 = (-1 + a1) in
    #093A
    #093B
    let:8 a3 = (M[a2] & M[a2]) in
    let:8 a4 = (M[a2] | M[a2]) in
    #093C
    if (is_zero(a3)) {
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      A := a3;
      H := a2[15:8];
      L := a2[7:0];
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a3[7];
      FlagZ := is_zero(a3);
      FlagA := a4[3];
      FlagP := parity(a3);
      FlagCY := false;
      jump ((M[a5],M[(SPH,SPL)]));
    } else {
      #093D
      #093F
      #0941
      let:8 a7 = (08 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
      let:8 a8 = (08 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))) in
      #0943
      if (is_zero(a7)) {
        A := a7;
        B := 15;
        H := a2[15:8];
        L := a2[7:0];
        FlagS := a7[7];
        FlagZ := is_zero(a7);
        FlagA := a8[3];
        FlagP := parity(a7);
        FlagCY := false;
        jump (0948);
      } else {
        #0946
        A := a7;
        B := 10;
        H := a2[15:8];
        L := a2[7:0];
        FlagS := a7[7];
        FlagZ := is_zero(a7);
        FlagA := a8[3];
        FlagP := parity(a7);
        FlagCY := false;
        jump (0948);
      }
    }

0948:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4B;
    #return-to: 094B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09CA);

094B:

    let:16 a1 = (1 + (H,L)) in
    #094C
    #094D
    let:16 a2 = addWithCarry(!false,M[a1],~B) in
    let:8 a3 = (M[a1] & 0F) in
    let:8 a4 = (~B & 0F) in
    let:16 a5 = addWithCarry(!false,a3,a4) in
    #094E
    if (!a2[15:8][0]) {
      let:16 a6 = (1 + (SPH,SPL)) in
      let:16 a7 = (1 + a6) in
      A := M[a1];
      H := a1[15:8];
      L := a1[7:0];
      SPH := a7[15:8];
      SPL := a7[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      FlagCY := !a2[15:8][0];
      jump ((M[a6],M[(SPH,SPL)]));
    } else {
      #094F
      let:16 a8 = (-1 + (SPH,SPL)) in
      M[a8] := 09;
      let:16 a9 = (-1 + a8) in
      M[a9] := 52;
      #return-to: 0952
      A := M[a1];
      H := a1[15:8];
      L := a1[7:0];
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      FlagCY := !a2[15:8][0];
      jump (092E);
    }

0952:

    let:16 a1 = addWithCarry(true,M[(H,L)],00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    M[(H,L)] := a1[7:0];
    #0953
    #0954
    let:16 a5 = (-1 + (SPH,SPL)) in
    M[a5] := M[(H,L)];
    let:16 a6 = (-1 + a5) in
    M[a6] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a1[7:0][7]),6,is_zero(a1[7:0])),4,a4[7:0][4]),2,parity(a1[7:0])),0,FlagCY);
    #0955
    A := M[(H,L)];
    H := 25;
    L := 01;
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0958);

0958:

    let:16 a1 = addWithCarry(true,H,00) in
    let:8 a2 = (H & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    #0959
    let:16 a5 = addWithCarry(true,a1[7:0],00) in
    let:8 a6 = (a1[7:0] & 0F) in
    let:8 a7 = (00 & 0F) in
    let:16 a8 = addWithCarry(true,a6,a7) in
    #095A
    let:16 a9 = addWithCarry(!true,A,~00) in
    let:8 a10 = (A & 0F) in
    let:8 a11 = (~00 & 0F) in
    let:16 a12 = addWithCarry(!true,a10,a11) in
    #095B
    if (!is_zero(a9[7:0])) {
      A := a9[7:0];
      H := a5[7:0];
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      jump (0958);
    } else {
      #095E
      #0960
      #0963
      let:16 a13 = (-1 + (SPH,SPL)) in
      M[a13] := 09;
      let:16 a14 = (-1 + a13) in
      M[a14] := 66;
      #return-to: 0966
      A := a9[7:0];
      B := 10;
      D := 1C;
      E := 60;
      H := a5[7:0];
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      jump (1439);
    }

0966:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0967
    let:16 a3 = addWithCarry(true,M[a1],00) in
    let:8 a4 = (M[a1] & 0F) in
    let:8 a5 = (00 & 0F) in
    let:16 a6 = addWithCarry(true,a4,a5) in
    #0968
    let:16 a7 = (-1 + a2) in
    M[a7] := 09;
    let:16 a8 = (-1 + a7) in
    M[a8] := 6B;
    #return-to: 096B
    A := a3[7:0];
    SPH := a8[15:8];
    SPL := a8[7:0];
    FlagS := a3[7:0][7];
    FlagZ := is_zero(a3[7:0]);
    FlagA := a6[7:0][4];
    FlagP := parity(a3[7:0]);
    FlagCY := M[(SPH,SPL)][0];
    jump (1A8B);

096B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 6E;
    #return-to: 096E
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1910);

096E:

    let:16 a1 = (-1 + (H,L)) in
    #096F
    let:16 a2 = (-1 + a1) in
    #0970
    M[a2] := 00;
    #0972
    #0974
    M[2099] := FF;
    #0977
    #0979
    A := FF;
    B := 10;
    H := a2[15:8];
    L := a2[7:0];
    jump (18FA);

098B:

    #098E
    let:8 a1 = (M[20F1] & M[20F1]) in
    let:8 a2 = (M[20F1] | M[20F1]) in
    #098F
    if (is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a3],M[(SPH,SPL)]));
    } else {
      #0990
      let:8 a5 = (a1 ^ a1) in
      #0991
      M[20F1] := a5;
      #0994
      let:16 a6 = (-1 + (SPH,SPL)) in
      M[a6] := H;
      let:16 a7 = (-1 + a6) in
      M[a7] := L;
      #0995
      #0998
      #0999
      let:16 a8 = (1 + a7) in
      let:16 a9 = (1 + a8) in
      #099A
      #099B
      let:16 a10 = addWithCarry(false,M[20F2],M[(M[a8],M[a7])]) in
      let:8 a11 = (M[20F2] & 0F) in
      let:8 a12 = (M[(M[a8],M[a7])] & 0F) in
      let:16 a13 = addWithCarry(false,a11,a12) in
      #099C
      let:8 a14 = (a10[7:0] & 0F) in
      let:16 a15 = addWithCarry(false,a14,06) in
      let:16 a16 = addWithCarry(((((a14[1] || a14[2]) && a14[3]) || a13[7:0][4]) ? a15[7:0] : a14)[4],(a10[7:0] >> 04),00) in
      let:16 a17 = addWithCarry(false,a16[7:0],06) in
      let:8 a18 = (((((a14[1] || a14[2]) && a14[3]) || a13[7:0][4]) ? a15[7:0] : a14) & 0F) in
      let:8 a19 = ((((((a16[7:0][1] || a16[7:0][2]) && a16[7:0][3]) || a10[15:8][0]) ? a17[7:0] : a16[7:0]) << 04) | a18) in
      #099D
      M[(M[a8],M[a7])] := a19;
      #099E
      #099F
      let:16 a20 = (1 + (M[a8],M[a7])) in
      #09A0
      #09A1
      let:16 a21 = addWithCarry((((((a16[7:0][1] || a16[7:0][2]) && a16[7:0][3]) || a10[15:8][0]) ? a17[7:0] : a16[7:0])[4] || a10[15:8][0]),M[20F3],M[a20]) in
      let:8 a22 = (M[20F3] & 0F) in
      let:8 a23 = (M[a20] & 0F) in
      let:16 a24 = addWithCarry((((((a16[7:0][1] || a16[7:0][2]) && a16[7:0][3]) || a10[15:8][0]) ? a17[7:0] : a16[7:0])[4] || a10[15:8][0]),a22,a23) in
      #09A2
      let:8 a25 = (a21[7:0] & 0F) in
      let:16 a26 = addWithCarry(false,a25,06) in
      let:16 a27 = addWithCarry(((((a25[1] || a25[2]) && a25[3]) || a24[7:0][4]) ? a26[7:0] : a25)[4],(a21[7:0] >> 04),00) in
      let:16 a28 = addWithCarry(false,a27[7:0],06) in
      let:8 a29 = (((((a25[1] || a25[2]) && a25[3]) || a24[7:0][4]) ? a26[7:0] : a25) & 0F) in
      let:8 a30 = ((((((a27[7:0][1] || a27[7:0][2]) && a27[7:0][3]) || a21[15:8][0]) ? a28[7:0] : a27[7:0]) << 04) | a29) in
      #09A3
      M[a20] := a30;
      #09A4
      #09A5
      let:16 a31 = (1 + a20) in
      #09A6
      #09A7
      let:16 a32 = (1 + a31) in
      #09A8
      #09A9
      #09AA
      A := M[a31];
      D := a30;
      E := a19;
      H := M[a32];
      L := M[a31];
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a30[7];
      FlagZ := is_zero(a30);
      FlagA := ((((a25[1] || a25[2]) && a25[3]) || a24[7:0][4]) ? a26[7:0] : a25)[4];
      FlagP := parity(a30);
      FlagCY := (((((a27[7:0][1] || a27[7:0][2]) && a27[7:0][3]) || a21[15:8][0]) ? a28[7:0] : a27[7:0])[4] || a21[15:8][0]);
      jump (09AD);
    }

09AD:

    #09AE
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := B1;
    #return-to: 09B1
    A := D;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09B2);

09B1:

    A := E;
    jump (09B2);

09B2:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    #09B3
    let:16 a3 = (-1 + a2) in
    M[a3] := A;
    let:16 a4 = (-1 + a3) in
    M[a4] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    #09B4
    #09B5
    #09B6
    #09B7
    #09B8
    let:8 a5 = (0F & updateBit((updateBit((updateBit((updateBit((A >> 01),7,A[0]) >> 01),7,updateBit((A >> 01),7,A[0])[0]) >> 01),7,updateBit((updateBit((A >> 01),7,A[0]) >> 01),7,updateBit((A >> 01),7,A[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((A >> 01),7,A[0]) >> 01),7,updateBit((A >> 01),7,A[0])[0]) >> 01),7,updateBit((updateBit((A >> 01),7,A[0]) >> 01),7,updateBit((A >> 01),7,A[0])[0])[0])[0])) in
    let:8 a6 = (0F | updateBit((updateBit((updateBit((updateBit((A >> 01),7,A[0]) >> 01),7,updateBit((A >> 01),7,A[0])[0]) >> 01),7,updateBit((updateBit((A >> 01),7,A[0]) >> 01),7,updateBit((A >> 01),7,A[0])[0])[0]) >> 01),7,updateBit((updateBit((updateBit((A >> 01),7,A[0]) >> 01),7,updateBit((A >> 01),7,A[0])[0]) >> 01),7,updateBit((updateBit((A >> 01),7,A[0]) >> 01),7,updateBit((A >> 01),7,A[0])[0])[0])[0])) in
    #09BA
    let:16 a7 = (-1 + a4) in
    M[a7] := 09;
    let:16 a8 = (-1 + a7) in
    M[a8] := BD;
    #return-to: 09BD
    A := a5;
    SPH := a8[15:8];
    SPL := a8[7:0];
    FlagS := a5[7];
    FlagZ := is_zero(a5);
    FlagA := a6[3];
    FlagP := parity(a5);
    FlagCY := false;
    jump (09C5);

09BD:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #09BE
    let:8 a3 = (0F & M[a1]) in
    let:8 a4 = (0F | M[a1]) in
    #09C0
    let:16 a5 = (-1 + a2) in
    M[a5] := 09;
    let:16 a6 = (-1 + a5) in
    M[a6] := C3;
    #return-to: 09C3
    A := a3;
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagS := a3[7];
    FlagZ := is_zero(a3);
    FlagA := a4[3];
    FlagP := parity(a3);
    FlagCY := false;
    jump (09C5);

09C3:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #09C4
    let:16 a3 = (1 + a2) in
    let:16 a4 = (1 + a3) in
    D := M[a1];
    E := M[(SPH,SPL)];
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump ((M[a3],M[a2]));

09C5:

    let:16 a1 = addWithCarry(false,1A,A) in
    let:8 a2 = (1A & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    #09C7
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (08FF);

09CA:

    #09CD
    #09CE
    #09D1
    if (M[2067][0]) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      A := updateBit((M[2067] >> 01),7,M[2067][0]);
      H := 20;
      L := F8;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagCY := M[2067][0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      #09D2
      #09D5
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := updateBit((M[2067] >> 01),7,M[2067][0]);
      H := 20;
      L := FC;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagCY := M[2067][0];
      jump ((M[a3],M[(SPH,SPL)]));
    }

09D6:

    H := 24;
    L := 02;
    jump (09D9);

09D9:

    M[(H,L)] := 00;
    #09DB
    let:16 a1 = (1 + (H,L)) in
    #09DC
    #09DD
    let:8 a2 = (1F & a1[7:0]) in
    let:8 a3 = (1F | a1[7:0]) in
    #09DF
    let:16 a4 = addWithCarry(!false,a2,~1C) in
    let:8 a5 = (a2 & 0F) in
    let:8 a6 = (~1C & 0F) in
    let:16 a7 = addWithCarry(!false,a5,a6) in
    #09E1
    if (!a4[15:8][0]) {
      A := a2;
      H := a1[15:8];
      L := a1[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := !a4[15:8][0];
      jump (09E8);
    } else {
      #09E4
      #09E7
      let:17 a8 = add17(0006,a1) in
      A := a2;
      D := 00;
      E := 06;
      H := a8[15:0][15:8];
      L := a8[15:0][7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := a8[16];
      jump (09E8);
    }

09E8:

    #09E9
    let:16 a1 = addWithCarry(!false,H,~40) in
    let:8 a2 = (H & 0F) in
    let:8 a3 = (~40 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #09EB
    if (!a1[15:8][0]) {
      A := H;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (09D9);
    } else {
      #09EE
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      A := H;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump ((M[a5],M[(SPH,SPL)]));
    }

09F2:

    let:8 a1 = (A ^ A) in
    #09F3
    M[20E9] := a1;
    #09F6
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 09;
    let:16 a3 = (-1 + a2) in
    M[a3] := F9;
    #return-to: 09F9
    A := a1;
    SPH := a3[15:8];
    SPL := a3[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (09D6);

09F9:

    #09FC
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := M[2067];
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    #09FD
    let:16 a3 = (-1 + a2) in
    M[a3] := 0A;
    let:16 a4 = (-1 + a3) in
    M[a4] := 00;
    #return-to: 0A00
    A := M[2067];
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump (01E4);

0A00:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0A01
    M[2067] := M[a1];
    #0A04
    #0A07
    #0A08
    let:16 a3 = (-1 + a2) in
    M[a3] := M[2067];
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    #0A09
    #0A0B
    #0A0C
    let:8 a5 = (07 & M[(M[2067],FE)]) in
    let:8 a6 = (07 | M[(M[2067],FE)]) in
    #0A0E
    let:16 a7 = addWithCarry(true,a5,00) in
    let:8 a8 = (a5 & 0F) in
    let:8 a9 = (00 & 0F) in
    let:16 a10 = addWithCarry(true,a8,a9) in
    #0A0F
    M[(M[2067],FE)] := a7[7:0];
    #0A10
    A := a7[7:0];
    H := 1D;
    L := A2;
    SPH := a4[15:8];
    SPL := a4[7:0];
    FlagS := a7[7:0][7];
    FlagZ := is_zero(a7[7:0]);
    FlagA := a10[7:0][4];
    FlagP := parity(a7[7:0]);
    FlagCY := false;
    jump (0A13);

0A13:

    let:16 a1 = (1 + (H,L)) in
    #0A14
    let:16 a2 = addWithCarry(!true,A,~00) in
    let:8 a3 = (A & 0F) in
    let:8 a4 = (~00 & 0F) in
    let:16 a5 = addWithCarry(!true,a3,a4) in
    #0A15
    if (!is_zero(a2[7:0])) {
      A := a2[7:0];
      H := a1[15:8];
      L := a1[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      jump (0A13);
    } else {
      #0A18
      #0A19
      let:16 a6 = (1 + (SPH,SPL)) in
      let:16 a7 = (1 + a6) in
      #0A1A
      #0A1C
      M[(M[a6],FC)] := M[a1];
      #0A1D
      let:16 a8 = (1 + (M[a6],FC)) in
      #0A1E
      M[a8] := 38;
      #0A20
      #0A21
      #0A22
      if (a8[15:8][0]) {
        #0A33
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a9 = (-1 + a7) in
            M[a9] := 0A;
            let:16 a10 = (-1 + a9) in
            M[a10] := 33;
            A := updateBit((a8[15:8] >> 01),7,a8[15:8][0]);
            H := a8[15:8];
            L := a8[7:0];
            SPH := a10[15:8];
            SPL := a10[7:0];
            FlagS := a2[7:0][7];
            FlagZ := is_zero(a2[7:0]);
            FlagA := a5[7:0][4];
            FlagP := parity(a2[7:0]);
            FlagCY := a8[15:8][0];
            jump (0008);
          } else {
            let:16 a11 = (-1 + a7) in
            M[a11] := 0A;
            let:16 a12 = (-1 + a11) in
            M[a12] := 33;
            A := updateBit((a8[15:8] >> 01),7,a8[15:8][0]);
            H := a8[15:8];
            L := a8[7:0];
            SPH := a12[15:8];
            SPL := a12[7:0];
            FlagS := a2[7:0][7];
            FlagZ := is_zero(a2[7:0]);
            FlagA := a5[7:0][4];
            FlagP := parity(a2[7:0]);
            FlagCY := a8[15:8][0];
            jump (0010);
          }
        } else {
          let:16 a13 = (-1 + a7) in
          M[a13] := 0A;
          let:16 a14 = (-1 + a13) in
          M[a14] := 36;
          #return-to: 0A36
          A := updateBit((a8[15:8] >> 01),7,a8[15:8][0]);
          H := a8[15:8];
          L := a8[7:0];
          SPH := a14[15:8];
          SPL := a14[7:0];
          FlagS := a2[7:0][7];
          FlagZ := is_zero(a2[7:0]);
          FlagA := a5[7:0][4];
          FlagP := parity(a2[7:0]);
          FlagCY := a8[15:8][0];
          jump (01EF);
        }
      } else {
        #0A25
        #0A27
        M[2098] := 21;
        #0A2A
        let:16 a15 = (-1 + a7) in
        M[a15] := 0A;
        let:16 a16 = (-1 + a15) in
        M[a16] := 2D;
        #return-to: 0A2D
        A := 21;
        H := a8[15:8];
        L := a8[7:0];
        SPH := a16[15:8];
        SPL := a16[7:0];
        FlagS := a2[7:0][7];
        FlagZ := is_zero(a2[7:0]);
        FlagA := a5[7:0][4];
        FlagP := parity(a2[7:0]);
        FlagCY := a8[15:8][0];
        jump (01F5);
      }
    }

0A2D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 30;
    #return-to: 0A30
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1904);

0A30:

    jump (0804);

0A36:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 39;
    #return-to: 0A39
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01C0);

0A39:

    jump (0804);

0A3F:

    if (!FlagZ) {
      jump (0A52);
    } else {
      #0A42
      #0A44
      M[20C0] := 30;
      A := 30;
      jump (0A47);
    }

0A47:

    #0A4A
    let:8 a1 = (M[20C0] & M[20C0]) in
    let:8 a2 = (M[20C0] | M[20C0]) in
    #0A4B
    if (is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a3],M[(SPH,SPL)]));
    } else {
      #0A4C
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 0A;
      let:16 a6 = (-1 + a5) in
      M[a6] := 4F;
      #return-to: 0A4F
      A := a1;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0A59);
    }

0A4F:

    if (FlagZ) {
      jump (0A47);
    } else {
      jump (0A52);
    }

0A52:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 55;
    #return-to: 0A55
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

0A55:

    if (!FlagZ) {
      jump (0A52);
    } else {
      #0A58
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    }

0A59:

    #0A5C
    let:16 a1 = addWithCarry(!false,M[2015],~FF) in
    let:8 a2 = (M[2015] & 0F) in
    let:8 a3 = (~FF & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #0A5E
    let:16 a5 = (1 + (SPH,SPL)) in
    let:16 a6 = (1 + a5) in
    A := M[2015];
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump ((M[a5],M[(SPH,SPL)]));

0A6C:

    #0A6D
    #0A6E
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 71;
    #return-to: 0A71
    #097C
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 09;
        let:16 a4 = (-1 + a3) in
        M[a4] := 7C;
        A := C;
        B := C;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 09;
        let:16 a6 = (-1 + a5) in
        M[a6] := 7C;
        A := C;
        B := C;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #097F
      let:16 a7 = addWithCarry(!false,C,~02) in
      let:8 a8 = (C & 0F) in
      let:8 a9 = (~02 & 0F) in
      let:16 a10 = addWithCarry(!false,a8,a9) in
      #0981
      if (!a7[15:8][0]) {
        let:16 a11 = (1 + a2) in
        let:16 a12 = (1 + a11) in
        A := C;
        B := C;
        H := 1D;
        L := A0;
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a7[15:8][0];
        jump ((M[a11],M[a2]));
      } else {
        #0982
        #0983
        let:16 a13 = addWithCarry(!false,C,~04) in
        let:8 a14 = (C & 0F) in
        let:8 a15 = (~04 & 0F) in
        let:16 a16 = addWithCarry(!false,a14,a15) in
        #0985
        if (!a13[15:8][0]) {
          let:16 a17 = (1 + a2) in
          let:16 a18 = (1 + a17) in
          A := C;
          B := C;
          H := 1D;
          L := A1;
          SPH := a18[15:8];
          SPL := a18[7:0];
          FlagS := a13[7:0][7];
          FlagZ := is_zero(a13[7:0]);
          FlagA := a16[7:0][4];
          FlagP := parity(a13[7:0]);
          FlagCY := !a13[15:8][0];
          jump ((M[a17],M[a2]));
        } else {
          #0986
          #0987
          let:16 a19 = (1 + a2) in
          let:16 a20 = (1 + a19) in
          A := C;
          B := C;
          H := 1D;
          L := A2;
          SPH := a20[15:8];
          SPL := a20[7:0];
          FlagS := a13[7:0][7];
          FlagZ := is_zero(a13[7:0]);
          FlagA := a16[7:0][4];
          FlagP := parity(a13[7:0]);
          FlagCY := !a13[15:8][0];
          jump ((M[a19],M[a2]));
        }
      }
    }

0A71:

    #0A72
    #0A75
    M[20F3] := 00;
    #0A77
    #0A78
    M[20F2] := M[(H,L)];
    #0A79
    #0A7A
    M[20F1] := 01;
    A := M[(H,L)];
    H := 20;
    L := F1;
    jump (0A7C);

0A7C:

    #0A7F
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := 20;
    L := 62;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0A80:

    #0A82
    M[20C1] := 02;
    A := 02;
    jump (0A85);

0A85:

    #0A87
    #0A8A
    let:8 a1 = (M[20CB] & M[20CB]) in
    let:8 a2 = (M[20CB] | M[20CB]) in
    #0A8B
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0A85);
    } else {
      #0A8E
      let:8 a3 = (a1 ^ a1) in
      #0A8F
      M[20C1] := a3;
      #0A92
      let:16 a4 = (1 + (SPH,SPL)) in
      let:16 a5 = (1 + a4) in
      A := a3;
      SPH := a5[15:8];
      SPL := a5[7:0];
      FlagS := a3[7];
      FlagZ := is_zero(a3);
      FlagA := false;
      FlagP := parity(a3);
      FlagCY := false;
      jump ((M[a4],M[(SPH,SPL)]));
    }

0A93:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    #0A94
    #0A95
    let:16 a3 = (-1 + a2) in
    M[a3] := 0A;
    let:16 a4 = (-1 + a3) in
    M[a4] := 98;
    #return-to: 0A98
    A := M[(D,E)];
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump (08FF);

0A98:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #0A99
    #0A9B
    M[20C0] := 07;
    A := 07;
    D := M[a1];
    E := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A9E);

0A9E:

    #0AA1
    let:16 a1 = addWithCarry(!true,M[20C0],~00) in
    let:8 a2 = (M[20C0] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    #0AA2
    if (!is_zero(a1[7:0])) {
      A := a1[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (0A9E);
    } else {
      #0AA5
      let:16 a5 = (1 + (D,E)) in
      #0AA6
      let:16 a6 = addWithCarry(!true,C,~00) in
      let:8 a7 = (C & 0F) in
      let:8 a8 = (~00 & 0F) in
      let:16 a9 = addWithCarry(!true,a7,a8) in
      #0AA7
      if (!is_zero(a6[7:0])) {
        A := a1[7:0];
        C := a6[7:0];
        D := a5[15:8];
        E := a5[7:0];
        FlagS := a6[7:0][7];
        FlagZ := is_zero(a6[7:0]);
        FlagA := a9[7:0][4];
        FlagP := parity(a6[7:0]);
        jump (0A93);
      } else {
        #0AAA
        let:16 a10 = (1 + (SPH,SPL)) in
        let:16 a11 = (1 + a10) in
        A := a1[7:0];
        C := a6[7:0];
        D := a5[15:8];
        E := a5[7:0];
        SPH := a11[15:8];
        SPL := a11[7:0];
        FlagS := a6[7:0][7];
        FlagZ := is_zero(a6[7:0]);
        FlagA := a9[7:0][4];
        FlagP := parity(a6[7:0]);
        jump ((M[a10],M[(SPH,SPL)]));
      }
    }

0AB1:

    #0AB3
    A := 40;
    jump (0AD7);

0AB6:

    #0AB8
    A := 80;
    jump (0AD7);

0AD7:

    M[20C0] := A;
    jump (0ADA);

0ADA:

    #0ADD
    let:8 a1 = (M[20C0] & M[20C0]) in
    let:8 a2 = (M[20C0] | M[20C0]) in
    #0ADE
    if (!is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0ADA);
    } else {
      #0AE1
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a3],M[(SPH,SPL)]));
    }

0AE2:

    #0AE5
    #0AE7
    B := 0C;
    H := 20;
    L := C2;
    jump (1A32);

0AF2:

    enable_interrupts()
    #0AF3
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := F6;
    #return-to: 0AF6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

0AF6:

    #0AF9
    let:8 a1 = (M[20EC] & M[20EC]) in
    let:8 a2 = (M[20EC] | M[20EC]) in
    #0AFA
    #0AFD
    #0AFF
    if (!is_zero(a1)) {
      #0BE8
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a3 = (-1 + (SPH,SPL)) in
          M[a3] := 0B;
          let:16 a4 = (-1 + a3) in
          M[a4] := E8;
          A := a1;
          C := 04;
          H := 30;
          L := 17;
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 0B;
          let:16 a6 = (-1 + a5) in
          M[a6] := E8;
          A := a1;
          C := 04;
          H := 30;
          L := 17;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0010);
        }
      } else {
        #0BEB
        let:16 a7 = (-1 + (SPH,SPL)) in
        M[a7] := 0B;
        let:16 a8 = (-1 + a7) in
        M[a8] := EE;
        #return-to: 0BEE
        A := a1;
        C := 04;
        D := 1D;
        E := AB;
        H := 30;
        L := 17;
        SPH := a8[15:8];
        SPL := a8[7:0];
        FlagS := a1[7];
        FlagZ := is_zero(a1);
        FlagA := a2[3];
        FlagP := parity(a1);
        FlagCY := false;
        jump (0A93);
      }
    } else {
      #0B02
      #0B05
      let:16 a9 = (-1 + (SPH,SPL)) in
      M[a9] := 0B;
      let:16 a10 = (-1 + a9) in
      M[a10] := 08;
      #return-to: 0B08
      A := a1;
      C := 04;
      D := 1C;
      E := FA;
      H := 30;
      L := 17;
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0A93);
    }

0B08:

    D := 1D;
    E := AF;
    jump (0B0B);

0B0B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 0E;
    #return-to: 0B0E
    #0ACF
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 0A;
        let:16 a4 = (-1 + a3) in
        M[a4] := CF;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 0A;
        let:16 a6 = (-1 + a5) in
        M[a6] := CF;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #0AD2
      #0AD4
      C := 0F;
      H := 2B;
      L := 14;
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (0A93);
    }

0B0E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 11;
    #return-to: 0B11
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

0B11:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 14;
    #return-to: 0B14
    #1815
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 18;
        let:16 a4 = (-1 + a3) in
        M[a4] := 15;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 18;
        let:16 a6 = (-1 + a5) in
        M[a6] := 15;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #1818
      #181B
      #181D
      let:16 a7 = (-1 + a2) in
      M[a7] := 18;
      let:16 a8 = (-1 + a7) in
      M[a8] := 20;
      #return-to: 1820
      C := 15;
      D := 1C;
      E := A3;
      H := 28;
      L := 10;
      SPH := a8[15:8];
      SPL := a8[7:0];
      jump (08F3);
    }

0B14:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 17;
    #return-to: 0B17
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB6);

0B17:

    #0B1A
    let:8 a1 = (M[20EC] & M[20EC]) in
    let:8 a2 = (M[20EC] | M[20EC]) in
    #0B1B
    if (!is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0B4A);
    } else {
      #0B1E
      #0B21
      let:16 a3 = (-1 + (SPH,SPL)) in
      M[a3] := 0B;
      let:16 a4 = (-1 + a3) in
      M[a4] := 24;
      #return-to: 0B24
      A := a1;
      D := 1A;
      E := 95;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0AE2);
    }

0B24:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 27;
    #return-to: 0B27
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A80);

0B27:

    #0B2A
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2D;
    #return-to: 0B2D
    D := 1B;
    E := B0;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AE2);

0B2D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 30;
    #return-to: 0B30
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A80);

0B30:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 33;
    #return-to: 0B33
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

0B33:

    #0B36
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 39;
    #return-to: 0B39
    D := 1F;
    E := C9;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AE2);

0B39:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3C;
    #return-to: 0B3C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A80);

0B3C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3F;
    #return-to: 0B3F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

0B3F:

    #0B42
    #0B44
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 47;
    #return-to: 0B47
    B := 0A;
    H := 33;
    L := B7;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14CB);

0B47:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4A;
    #return-to: 0B4A
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB6);

0B4A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4D;
    #return-to: 0B4D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

0B4D:

    #0B50
    let:8 a1 = (M[21FF] & M[21FF]) in
    let:8 a2 = (M[21FF] | M[21FF]) in
    #0B51
    if (!is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0B5D);
    } else {
      #0B54
      let:16 a3 = (-1 + (SPH,SPL)) in
      M[a3] := 0B;
      let:16 a4 = (-1 + a3) in
      M[a4] := 57;
      #return-to: 0B57
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (08D1);
    }

0B57:

    M[21FF] := A;
    #0B5A
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5D;
    #return-to: 0B5D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A7F);

0B5D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 60;
    #return-to: 0B60
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01E4);

0B60:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 63;
    #return-to: 0B63
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01C0);

0B63:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 66;
    #return-to: 0B66
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01EF);

0B66:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 69;
    #return-to: 0B69
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (021A);

0B69:

    #0B6B
    M[20C1] := 01;
    #0B6E
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 71;
    #return-to: 0B71
    A := 01;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01CF);

0B71:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 74;
    #return-to: 0B74
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1618);

0B74:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 77;
    #return-to: 0B77
    #0BF1
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 0B;
        let:16 a4 = (-1 + a3) in
        M[a4] := F1;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 0B;
        let:16 a6 = (-1 + a5) in
        M[a6] := F1;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      let:16 a7 = (-1 + a2) in
      M[a7] := 0B;
      let:16 a8 = (-1 + a7) in
      M[a8] := F4;
      #return-to: 0BF4
      SPH := a8[15:8];
      SPL := a8[7:0];
      jump (190A);
    }

0B77:

    #0B79
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7C;
    #return-to: 0B7C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

0B7C:

    if (FlagZ) {
      jump (0B71);
    } else {
      #0B7F
      let:8 a1 = (A ^ A) in
      #0B80
      M[2025] := a1;
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := false;
      FlagP := parity(a1);
      FlagCY := false;
      jump (0B83);
    }

0B83:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 86;
    #return-to: 0B86
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

0B86:

    if (!FlagZ) {
      jump (0B83);
    } else {
      jump (0B89);
    }

0B89:

    let:8 a1 = (A ^ A) in
    #0B8A
    M[20C1] := a1;
    #0B8D
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 0B;
    let:16 a3 = (-1 + a2) in
    M[a3] := 90;
    #return-to: 0B90
    A := a1;
    SPH := a3[15:8];
    SPL := a3[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0AB1);

0B90:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 93;
    #return-to: 0B93
    #1988
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 19;
        let:16 a4 = (-1 + a3) in
        M[a4] := 88;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 19;
        let:16 a6 = (-1 + a5) in
        M[a6] := 88;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (09D6);
    }

0B93:

    #0B95
    #0B98
    #0B9B
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 9E;
    #return-to: 0B9E
    C := 0C;
    D := 1F;
    E := 90;
    H := 2C;
    L := 11;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08F3);

0B9E:

    #0BA1
    let:16 a1 = addWithCarry(!false,M[20EC],~00) in
    let:8 a2 = (M[20EC] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #0BA3
    if (!is_zero(a1[7:0])) {
      A := M[20EC];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (0BAE);
    } else {
      #0BA6
      #0BA9
      #0BAB
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 0B;
      let:16 a6 = (-1 + a5) in
      M[a6] := AE;
      #return-to: 0BAE
      A := 02;
      H := 33;
      L := 11;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (08FF);
    }

0BAE:

    #0BB1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := B4;
    #return-to: 0BB4
    B := 1F;
    C := 9C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1856);

0BB4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := B7;
    #return-to: 0BB7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (184C);

0BB7:

    #0BB9
    #0BBA
    if (updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))[7]) {
      A := updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off)) << 01),0,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))[7]);
      FlagCY := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))[7];
      jump (0BC3);
    } else {
      #0BBD
      #0BC0
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 0B;
      let:16 a2 = (-1 + a1) in
      M[a2] := C3;
      #return-to: 0BC3
      A := updateBit((updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off)) << 01),0,updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))[7]);
      B := 1F;
      C := A0;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagCY := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off))[7];
      jump (183A);
    }

0BC3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C6;
    #return-to: 0BC6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB6);

0BC6:

    #0BC9
    let:16 a1 = addWithCarry(!false,M[20EC],~00) in
    let:8 a2 = (M[20EC] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #0BCB
    if (!is_zero(a1[7:0])) {
      A := M[20EC];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (0BDA);
    } else {
      #0BCE
      #0BD1
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 0B;
      let:16 a6 = (-1 + a5) in
      M[a6] := D4;
      #return-to: 0BD4
      A := M[20EC];
      D := 1F;
      E := D5;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (0AE2);
    }

0BD4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := D7;
    #return-to: 0BD7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A80);

0BD7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := DA;
    #return-to: 0BDA
    #189E
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 18;
        let:16 a4 = (-1 + a3) in
        M[a4] := 9E;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 18;
        let:16 a6 = (-1 + a5) in
        M[a6] := 9E;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #18A1
      #18A4
      #18A6
      let:16 a7 = (-1 + a2) in
      M[a7] := 18;
      let:16 a8 = (-1 + a7) in
      M[a8] := A9;
      #return-to: 18A9
      B := 10;
      D := 1B;
      E := C0;
      H := 20;
      L := 50;
      SPH := a8[15:8];
      SPL := a8[7:0];
      jump (1A32);
    }

0BDA:

    #0BDD
    #0BDE
    let:16 a1 = addWithCarry(true,M[20EC],00) in
    let:8 a2 = (M[20EC] & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    #0BDF
    let:8 a5 = (01 & a1[7:0]) in
    let:8 a6 = (01 | a1[7:0]) in
    #0BE1
    M[20EC] := a5;
    #0BE2
    let:16 a7 = (-1 + (SPH,SPL)) in
    M[a7] := 0B;
    let:16 a8 = (-1 + a7) in
    M[a8] := E5;
    #return-to: 0BE5
    A := a5;
    H := 20;
    L := EC;
    SPH := a8[15:8];
    SPL := a8[7:0];
    FlagS := a5[7];
    FlagZ := is_zero(a5);
    FlagA := a6[3];
    FlagP := parity(a5);
    FlagCY := false;
    jump (09D6);

0BE5:

    jump (18DF);

0BEE:

    jump (0B0B);

0BF4:

    #199A
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a1 = (-1 + (SPH,SPL)) in
        M[a1] := 19;
        let:16 a2 = (-1 + a1) in
        M[a2] := 9A;
        SPH := a2[15:8];
        SPL := a2[7:0];
        jump (0008);
      } else {
        let:16 a3 = (-1 + (SPH,SPL)) in
        M[a3] := 19;
        let:16 a4 = (-1 + a3) in
        M[a4] := 9A;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0010);
      }
    } else {
      #199D
      let:8 a5 = (M[201E] & M[201E]) in
      let:8 a6 = (M[201E] | M[201E]) in
      #199E
      if (!is_zero(a5)) {
        A := a5;
        FlagS := a5[7];
        FlagZ := is_zero(a5);
        FlagA := a6[3];
        FlagP := parity(a5);
        FlagCY := false;
        jump (19AC);
      } else {
        #19A1
        #19A3
        let:8 a7 = (76 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
        let:8 a8 = (76 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
        #19A5
        let:16 a9 = addWithCarry(!false,a7,~72) in
        let:8 a10 = (a7 & 0F) in
        let:8 a11 = (~72 & 0F) in
        let:16 a12 = addWithCarry(!false,a10,a11) in
        #19A7
        if (!is_zero(a9[7:0])) {
          let:16 a13 = (1 + (SPH,SPL)) in
          let:16 a14 = (1 + a13) in
          A := a9[7:0];
          SPH := a14[15:8];
          SPL := a14[7:0];
          FlagS := a9[7:0][7];
          FlagZ := is_zero(a9[7:0]);
          FlagA := a12[7:0][4];
          FlagP := parity(a9[7:0]);
          FlagCY := !a9[15:8][0];
          jump ((M[a13],M[(SPH,SPL)]));
        } else {
          #19A8
          let:16 a15 = addWithCarry(true,a9[7:0],00) in
          let:8 a16 = (a9[7:0] & 0F) in
          let:8 a17 = (00 & 0F) in
          let:16 a18 = addWithCarry(true,a16,a17) in
          #19A9
          M[201E] := a15[7:0];
          A := a15[7:0];
          FlagS := a15[7:0][7];
          FlagZ := is_zero(a15[7:0]);
          FlagA := a18[7:0][4];
          FlagP := parity(a15[7:0]);
          FlagCY := !a9[15:8][0];
          jump (19AC);
        }
      }
    }

1400:

    #1401
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 04;
    #return-to: 1404
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1474);

1404:

    jump (1405);

1405:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #1406
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    #1407
    #1408
    #140A
    let:8 a5 = (Shifter_OFF & 07) in
    let:8 a6 = (~Shifter_OFF & 07) in
    let:8 a7 = ((M[(D,E)] << a5) | ((Shifter_HI >> a6) >> 01)) in
    #140C
    let:8 a8 = (M[(H,L)] | a7) in
    #140D
    M[(H,L)] := a8;
    #140E
    let:16 a9 = (1 + (H,L)) in
    #140F
    let:16 a10 = (1 + (D,E)) in
    #1410
    let:8 a11 = (a8 ^ a8) in
    #1411
    #1413
    let:8 a12 = (Shifter_OFF & 07) in
    let:8 a13 = (~Shifter_OFF & 07) in
    let:8 a14 = ((a11 << a12) | ((M[(D,E)] >> a13) >> 01)) in
    #1415
    let:8 a15 = (M[a9] | a14) in
    #1416
    M[a9] := a15;
    #1417
    let:16 a16 = (1 + a4) in
    let:16 a17 = (1 + a16) in
    #1418
    #141B
    let:17 a18 = add17(0020,(M[a16],M[a4])) in
    #141C
    let:16 a19 = (1 + a17) in
    let:16 a20 = (1 + a19) in
    #141D
    let:16 a21 = addWithCarry(!true,M[a19],~00) in
    let:8 a22 = (M[a19] & 0F) in
    let:8 a23 = (~00 & 0F) in
    let:16 a24 = addWithCarry(!true,a22,a23) in
    #141E
    if (!is_zero(a21[7:0])) {
      A := a15;
      B := a21[7:0];
      C := M[a17];
      D := a10[15:8];
      E := a10[7:0];
      H := a18[15:0][15:8];
      L := a18[15:0][7:0];
      SPH := a20[15:8];
      SPL := a20[7:0];
      FlagS := a21[7:0][7];
      FlagZ := is_zero(a21[7:0]);
      FlagA := a24[7:0][4];
      FlagP := parity(a21[7:0]);
      FlagCY := a18[16];
      Shifter_HI := a11;
      Shifter_LO := M[(D,E)];
      jump (1405);
    } else {
      #1421
      let:16 a25 = (1 + a20) in
      let:16 a26 = (1 + a25) in
      A := a15;
      B := a21[7:0];
      C := M[a17];
      D := a10[15:8];
      E := a10[7:0];
      H := a18[15:0][15:8];
      L := a18[15:0][7:0];
      SPH := a26[15:8];
      SPL := a26[7:0];
      FlagS := a21[7:0][7];
      FlagZ := is_zero(a21[7:0]);
      FlagA := a24[7:0][4];
      FlagP := parity(a21[7:0]);
      FlagCY := a18[16];
      Shifter_HI := a11;
      Shifter_LO := M[(D,E)];
      jump ((M[a25],M[a20]));
    }

1424:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 27;
    #return-to: 1427
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1474);

1427:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #1428
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    #1429
    let:8 a5 = (A ^ A) in
    #142A
    M[(H,L)] := a5;
    #142B
    let:16 a6 = (1 + (H,L)) in
    #142C
    M[a6] := a5;
    #142D
    let:16 a7 = (1 + a6) in
    #142E
    let:16 a8 = (1 + a4) in
    let:16 a9 = (1 + a8) in
    #142F
    #1432
    let:17 a10 = add17(0020,(M[a8],M[a4])) in
    #1433
    let:16 a11 = (1 + a9) in
    let:16 a12 = (1 + a11) in
    #1434
    let:16 a13 = addWithCarry(!true,M[a11],~00) in
    let:8 a14 = (M[a11] & 0F) in
    let:8 a15 = (~00 & 0F) in
    let:16 a16 = addWithCarry(!true,a14,a15) in
    #1435
    if (!is_zero(a13[7:0])) {
      A := a5;
      B := a13[7:0];
      C := M[a9];
      H := a10[15:0][15:8];
      L := a10[15:0][7:0];
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagS := a13[7:0][7];
      FlagZ := is_zero(a13[7:0]);
      FlagA := a16[7:0][4];
      FlagP := parity(a13[7:0]);
      FlagCY := a10[16];
      jump (1427);
    } else {
      #1438
      let:16 a17 = (1 + a12) in
      let:16 a18 = (1 + a17) in
      A := a5;
      B := a13[7:0];
      C := M[a9];
      H := a10[15:0][15:8];
      L := a10[15:0][7:0];
      SPH := a18[15:8];
      SPL := a18[7:0];
      FlagS := a13[7:0][7];
      FlagZ := is_zero(a13[7:0]);
      FlagA := a16[7:0][4];
      FlagP := parity(a13[7:0]);
      FlagCY := a10[16];
      jump ((M[a17],M[a12]));
    }

1439:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #143A
    #143B
    M[(H,L)] := M[(D,E)];
    #143C
    let:16 a3 = (1 + (D,E)) in
    #143D
    #1440
    let:17 a4 = add17(0020,(H,L)) in
    #1441
    let:16 a5 = (1 + a2) in
    let:16 a6 = (1 + a5) in
    #1442
    let:16 a7 = addWithCarry(!true,M[a5],~00) in
    let:8 a8 = (M[a5] & 0F) in
    let:8 a9 = (~00 & 0F) in
    let:16 a10 = addWithCarry(!true,a8,a9) in
    #1443
    if (!is_zero(a7[7:0])) {
      A := M[(D,E)];
      B := a7[7:0];
      C := M[a2];
      D := a3[15:8];
      E := a3[7:0];
      H := a4[15:0][15:8];
      L := a4[15:0][7:0];
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      FlagCY := a4[16];
      jump (1439);
    } else {
      #1446
      let:16 a11 = (1 + a6) in
      let:16 a12 = (1 + a11) in
      A := M[(D,E)];
      B := a7[7:0];
      C := M[a2];
      D := a3[15:8];
      E := a3[7:0];
      H := a4[15:0][15:8];
      L := a4[15:0][7:0];
      SPH := a12[15:8];
      SPL := a12[7:0];
      FlagS := a7[7:0][7];
      FlagZ := is_zero(a7[7:0]);
      FlagA := a10[7:0][4];
      FlagP := parity(a7[7:0]);
      FlagCY := a4[16];
      jump ((M[a11],M[a6]));
    }

1452:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 55;
    #return-to: 1455
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1474);

1455:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #1456
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    #1457
    #1458
    #145A
    let:8 a5 = (Shifter_OFF & 07) in
    let:8 a6 = (~Shifter_OFF & 07) in
    let:8 a7 = ((M[(D,E)] << a5) | ((Shifter_HI >> a6) >> 01)) in
    #145C
    #145D
    let:8 a8 = (M[(H,L)] & ~a7) in
    let:8 a9 = (M[(H,L)] | ~a7) in
    #145E
    M[(H,L)] := a8;
    #145F
    let:16 a10 = (1 + (H,L)) in
    #1460
    let:16 a11 = (1 + (D,E)) in
    #1461
    let:8 a12 = (a8 ^ a8) in
    #1462
    #1464
    let:8 a13 = (Shifter_OFF & 07) in
    let:8 a14 = (~Shifter_OFF & 07) in
    let:8 a15 = ((a12 << a13) | ((M[(D,E)] >> a14) >> 01)) in
    #1466
    #1467
    let:8 a16 = (M[a10] & ~a15) in
    let:8 a17 = (M[a10] | ~a15) in
    #1468
    M[a10] := a16;
    #1469
    let:16 a18 = (1 + a4) in
    let:16 a19 = (1 + a18) in
    #146A
    #146D
    let:17 a20 = add17(0020,(M[a18],M[a4])) in
    #146E
    let:16 a21 = (1 + a19) in
    let:16 a22 = (1 + a21) in
    #146F
    let:16 a23 = addWithCarry(!true,M[a21],~00) in
    let:8 a24 = (M[a21] & 0F) in
    let:8 a25 = (~00 & 0F) in
    let:16 a26 = addWithCarry(!true,a24,a25) in
    #1470
    if (!is_zero(a23[7:0])) {
      A := a16;
      B := a23[7:0];
      C := M[a19];
      D := a11[15:8];
      E := a11[7:0];
      H := a20[15:0][15:8];
      L := a20[15:0][7:0];
      SPH := a22[15:8];
      SPL := a22[7:0];
      FlagS := a23[7:0][7];
      FlagZ := is_zero(a23[7:0]);
      FlagA := a26[7:0][4];
      FlagP := parity(a23[7:0]);
      FlagCY := a20[16];
      Shifter_HI := a12;
      Shifter_LO := M[(D,E)];
      jump (1455);
    } else {
      #1473
      let:16 a27 = (1 + a22) in
      let:16 a28 = (1 + a27) in
      A := a16;
      B := a23[7:0];
      C := M[a19];
      D := a11[15:8];
      E := a11[7:0];
      H := a20[15:0][15:8];
      L := a20[15:0][7:0];
      SPH := a28[15:8];
      SPL := a28[7:0];
      FlagS := a23[7:0][7];
      FlagZ := is_zero(a23[7:0]);
      FlagA := a26[7:0][4];
      FlagP := parity(a23[7:0]);
      FlagCY := a20[16];
      Shifter_HI := a12;
      Shifter_LO := M[(D,E)];
      jump ((M[a27],M[a22]));
    }

1474:

    #1475
    let:8 a1 = (07 & L) in
    let:8 a2 = (07 | L) in
    #1477
    #1479
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    Shifter_OFF := a1;
    jump (1A47);

147C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #147D
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump (147E);

147E:

    #147F
    M[(D,E)] := M[(H,L)];
    #1480
    let:16 a1 = (1 + (D,E)) in
    #1481
    let:16 a2 = (1 + (H,L)) in
    #1482
    let:16 a3 = addWithCarry(!true,C,~00) in
    let:8 a4 = (C & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    #1483
    if (!is_zero(a3[7:0])) {
      A := M[(H,L)];
      C := a3[7:0];
      D := a1[15:8];
      E := a1[7:0];
      H := a2[15:8];
      L := a2[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (147E);
    } else {
      #1486
      let:16 a7 = (1 + (SPH,SPL)) in
      let:16 a8 = (1 + a7) in
      #1487
      #148A
      let:17 a9 = add17(0020,(M[a7],M[(SPH,SPL)])) in
      #148B
      let:16 a10 = (1 + a8) in
      let:16 a11 = (1 + a10) in
      #148C
      let:16 a12 = addWithCarry(!true,M[a10],~00) in
      let:8 a13 = (M[a10] & 0F) in
      let:8 a14 = (~00 & 0F) in
      let:16 a15 = addWithCarry(!true,a13,a14) in
      #148D
      if (!is_zero(a12[7:0])) {
        A := M[(H,L)];
        B := a12[7:0];
        C := M[a8];
        D := a1[15:8];
        E := a1[7:0];
        H := a9[15:0][15:8];
        L := a9[15:0][7:0];
        SPH := a11[15:8];
        SPL := a11[7:0];
        FlagS := a12[7:0][7];
        FlagZ := is_zero(a12[7:0]);
        FlagA := a15[7:0][4];
        FlagP := parity(a12[7:0]);
        FlagCY := a9[16];
        jump (147C);
      } else {
        #1490
        let:16 a16 = (1 + a11) in
        let:16 a17 = (1 + a16) in
        A := M[(H,L)];
        B := a12[7:0];
        C := M[a8];
        D := a1[15:8];
        E := a1[7:0];
        H := a9[15:0][15:8];
        L := a9[15:0][7:0];
        SPH := a17[15:8];
        SPL := a17[7:0];
        FlagS := a12[7:0][7];
        FlagZ := is_zero(a12[7:0]);
        FlagA := a15[7:0][4];
        FlagP := parity(a12[7:0]);
        FlagCY := a9[16];
        jump ((M[a16],M[a11]));
      }
    }

1491:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 94;
    #return-to: 1494
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1474);

1494:

    let:8 a1 = (A ^ A) in
    #1495
    M[2061] := a1;
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1498);

1498:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #1499
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    #149A
    #149B
    #149D
    let:8 a5 = (Shifter_OFF & 07) in
    let:8 a6 = (~Shifter_OFF & 07) in
    let:8 a7 = ((M[(D,E)] << a5) | ((Shifter_HI >> a6) >> 01)) in
    #149F
    let:16 a8 = (-1 + a4) in
    M[a8] := a7;
    let:16 a9 = (-1 + a8) in
    M[a9] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    #14A0
    let:8 a10 = (M[(H,L)] & a7) in
    let:8 a11 = (M[(H,L)] | a7) in
    #14A1
    if (is_zero(a10)) {
      A := a10;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a10[7];
      FlagZ := is_zero(a10);
      FlagA := a11[3];
      FlagP := parity(a10);
      FlagCY := false;
      Shifter_HI := M[(D,E)];
      Shifter_LO := Shifter_HI;
      jump (14A9);
    } else {
      #14A4
      #14A6
      M[2061] := 01;
      A := 01;
      SPH := a9[15:8];
      SPL := a9[7:0];
      FlagS := a10[7];
      FlagZ := is_zero(a10);
      FlagA := a11[3];
      FlagP := parity(a10);
      FlagCY := false;
      Shifter_HI := M[(D,E)];
      Shifter_LO := Shifter_HI;
      jump (14A9);
    }

14A9:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #14AA
    let:8 a3 = (M[(H,L)] | M[a1]) in
    #14AB
    M[(H,L)] := a3;
    #14AC
    let:16 a4 = (1 + (H,L)) in
    #14AD
    let:16 a5 = (1 + (D,E)) in
    #14AE
    let:8 a6 = (a3 ^ a3) in
    #14AF
    #14B1
    let:8 a7 = (Shifter_OFF & 07) in
    let:8 a8 = (~Shifter_OFF & 07) in
    let:8 a9 = ((a6 << a7) | ((Shifter_HI >> a8) >> 01)) in
    #14B3
    let:16 a10 = (-1 + a2) in
    M[a10] := a9;
    let:16 a11 = (-1 + a10) in
    M[a11] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a6[7]),6,is_zero(a6)),4,false),2,parity(a6)),0,false);
    #14B4
    let:8 a12 = (M[a4] & a9) in
    let:8 a13 = (M[a4] | a9) in
    #14B5
    if (is_zero(a12)) {
      A := a12;
      D := a5[15:8];
      E := a5[7:0];
      H := a4[15:8];
      L := a4[7:0];
      SPH := a11[15:8];
      SPL := a11[7:0];
      FlagS := a12[7];
      FlagZ := is_zero(a12);
      FlagA := a13[3];
      FlagP := parity(a12);
      FlagCY := false;
      Shifter_HI := a6;
      Shifter_LO := Shifter_HI;
      jump (14BD);
    } else {
      #14B8
      #14BA
      M[2061] := 01;
      A := 01;
      D := a5[15:8];
      E := a5[7:0];
      H := a4[15:8];
      L := a4[7:0];
      SPH := a11[15:8];
      SPL := a11[7:0];
      FlagS := a12[7];
      FlagZ := is_zero(a12);
      FlagA := a13[3];
      FlagP := parity(a12);
      FlagCY := false;
      Shifter_HI := a6;
      Shifter_LO := Shifter_HI;
      jump (14BD);
    }

14BD:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #14BE
    let:8 a3 = (M[(H,L)] | M[a1]) in
    #14BF
    M[(H,L)] := a3;
    #14C0
    let:16 a4 = (1 + a2) in
    let:16 a5 = (1 + a4) in
    #14C1
    #14C4
    let:17 a6 = add17(0020,(M[a4],M[a2])) in
    #14C5
    let:16 a7 = (1 + a5) in
    let:16 a8 = (1 + a7) in
    #14C6
    let:16 a9 = addWithCarry(!true,M[a7],~00) in
    let:8 a10 = (M[a7] & 0F) in
    let:8 a11 = (~00 & 0F) in
    let:16 a12 = addWithCarry(!true,a10,a11) in
    #14C7
    if (!is_zero(a9[7:0])) {
      A := a3;
      B := a9[7:0];
      C := M[a5];
      H := a6[15:0][15:8];
      L := a6[15:0][7:0];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      FlagCY := a6[16];
      jump (1498);
    } else {
      #14CA
      let:16 a13 = (1 + a8) in
      let:16 a14 = (1 + a13) in
      A := a3;
      B := a9[7:0];
      C := M[a5];
      H := a6[15:0][15:8];
      L := a6[15:0][7:0];
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a9[7:0][7];
      FlagZ := is_zero(a9[7:0]);
      FlagA := a12[7:0][4];
      FlagP := parity(a9[7:0]);
      FlagCY := a6[16];
      jump ((M[a13],M[a8]));
    }

14CB:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (14CC);

14CC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #14CD
    M[(H,L)] := A;
    #14CE
    #14D1
    let:17 a3 = add17(0020,(H,L)) in
    #14D2
    let:16 a4 = (1 + a2) in
    let:16 a5 = (1 + a4) in
    #14D3
    let:16 a6 = addWithCarry(!true,M[a4],~00) in
    let:8 a7 = (M[a4] & 0F) in
    let:8 a8 = (~00 & 0F) in
    let:16 a9 = addWithCarry(!true,a7,a8) in
    #14D4
    if (!is_zero(a6[7:0])) {
      B := a6[7:0];
      C := M[a2];
      H := a3[15:0][15:8];
      L := a3[15:0][7:0];
      SPH := a5[15:8];
      SPL := a5[7:0];
      FlagS := a6[7:0][7];
      FlagZ := is_zero(a6[7:0]);
      FlagA := a9[7:0][4];
      FlagP := parity(a6[7:0]);
      FlagCY := a3[16];
      jump (14CC);
    } else {
      #14D7
      let:16 a10 = (1 + a5) in
      let:16 a11 = (1 + a10) in
      B := a6[7:0];
      C := M[a2];
      H := a3[15:0][15:8];
      L := a3[15:0][7:0];
      SPH := a11[15:8];
      SPL := a11[7:0];
      FlagS := a6[7:0][7];
      FlagZ := is_zero(a6[7:0]);
      FlagA := a9[7:0][4];
      FlagP := parity(a6[7:0]);
      FlagCY := a3[16];
      jump ((M[a10],M[a5]));
    }

14D8:

    #14DB
    let:16 a1 = addWithCarry(!false,M[2025],~05) in
    let:8 a2 = (M[2025] & 0F) in
    let:8 a3 = (~05 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #14DD
    if (is_zero(a1[7:0])) {
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      A := M[2025];
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump ((M[a5],M[(SPH,SPL)]));
    } else {
      #14DE
      let:16 a7 = addWithCarry(!false,M[2025],~02) in
      let:8 a8 = (M[2025] & 0F) in
      let:8 a9 = (~02 & 0F) in
      let:16 a10 = addWithCarry(!false,a8,a9) in
      #14E0
      if (!is_zero(a7[7:0])) {
        let:16 a11 = (1 + (SPH,SPL)) in
        let:16 a12 = (1 + a11) in
        A := M[2025];
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a7[15:8][0];
        jump ((M[a11],M[(SPH,SPL)]));
      } else {
        #14E1
        #14E4
        let:16 a13 = addWithCarry(!false,M[2029],~D8) in
        let:8 a14 = (M[2029] & 0F) in
        let:8 a15 = (~D8 & 0F) in
        let:16 a16 = addWithCarry(!false,a14,a15) in
        #14E6
        #14E7
        if (!!a13[15:8][0]) {
          A := M[2029];
          B := M[2029];
          FlagS := a13[7:0][7];
          FlagZ := is_zero(a13[7:0]);
          FlagA := a16[7:0][4];
          FlagP := parity(a13[7:0]);
          FlagCY := !a13[15:8][0];
          jump (1530);
        } else {
          #14EA
          #14ED
          let:8 a17 = (M[2002] & M[2002]) in
          let:8 a18 = (M[2002] | M[2002]) in
          #14EE
          if (is_zero(a17)) {
            let:16 a19 = (1 + (SPH,SPL)) in
            let:16 a20 = (1 + a19) in
            A := a17;
            B := M[2029];
            SPH := a20[15:8];
            SPL := a20[7:0];
            FlagS := a17[7];
            FlagZ := is_zero(a17);
            FlagA := a18[3];
            FlagP := parity(a17);
            FlagCY := false;
            jump ((M[a19],M[(SPH,SPL)]));
          } else {
            #14EF
            #14F0
            let:16 a21 = addWithCarry(!false,M[2029],~CE) in
            let:8 a22 = (M[2029] & 0F) in
            let:8 a23 = (~CE & 0F) in
            let:16 a24 = addWithCarry(!false,a22,a23) in
            #14F2
            if (!!a21[15:8][0]) {
              #1579
              if ((g_time_to_wakeup && g_interrupts_enabled)) {
                disable_interrupts()
                if (g_half_frame) {
                  let:16 a25 = (-1 + (SPH,SPL)) in
                  M[a25] := 15;
                  let:16 a26 = (-1 + a25) in
                  M[a26] := 79;
                  A := M[2029];
                  B := M[2029];
                  SPH := a26[15:8];
                  SPL := a26[7:0];
                  FlagS := a21[7:0][7];
                  FlagZ := is_zero(a21[7:0]);
                  FlagA := a24[7:0][4];
                  FlagP := parity(a21[7:0]);
                  FlagCY := !a21[15:8][0];
                  jump (0008);
                } else {
                  let:16 a27 = (-1 + (SPH,SPL)) in
                  M[a27] := 15;
                  let:16 a28 = (-1 + a27) in
                  M[a28] := 79;
                  A := M[2029];
                  B := M[2029];
                  SPH := a28[15:8];
                  SPL := a28[7:0];
                  FlagS := a21[7:0][7];
                  FlagZ := is_zero(a21[7:0]);
                  FlagA := a24[7:0][4];
                  FlagP := parity(a21[7:0]);
                  FlagCY := !a21[15:8][0];
                  jump (0010);
                }
              } else {
                #157B
                M[2085] := 01;
                #157E
                A := 01;
                B := M[2029];
                FlagS := a21[7:0][7];
                FlagZ := is_zero(a21[7:0]);
                FlagA := a24[7:0][4];
                FlagP := parity(a21[7:0]);
                FlagCY := !a21[15:8][0];
                jump (1545);
              }
            } else {
              #14F5
              let:16 a29 = addWithCarry(false,06,M[2029]) in
              let:8 a30 = (06 & 0F) in
              let:8 a31 = (M[2029] & 0F) in
              let:16 a32 = addWithCarry(false,a30,a31) in
              #14F7
              #14F8
              #14FB
              let:16 a33 = addWithCarry(!false,M[2009],~90) in
              let:8 a34 = (M[2009] & 0F) in
              let:8 a35 = (~90 & 0F) in
              let:16 a36 = addWithCarry(!false,a34,a35) in
              #14FD
              if (!!a33[15:8][0]) {
                A := M[2009];
                B := a29[7:0];
                FlagS := a33[7:0][7];
                FlagZ := is_zero(a33[7:0]);
                FlagA := a36[7:0][4];
                FlagP := parity(a33[7:0]);
                FlagCY := !a33[15:8][0];
                jump (1504);
              } else {
                #1500
                let:16 a37 = addWithCarry(!false,M[2009],~a29[7:0]) in
                let:8 a38 = (M[2009] & 0F) in
                let:8 a39 = (~a29[7:0] & 0F) in
                let:16 a40 = addWithCarry(!false,a38,a39) in
                #1501
                if (!!a37[15:8][0]) {
                  A := M[2009];
                  B := a29[7:0];
                  FlagS := a37[7:0][7];
                  FlagZ := is_zero(a37[7:0]);
                  FlagA := a40[7:0][4];
                  FlagP := parity(a37[7:0]);
                  FlagCY := !a37[15:8][0];
                  jump (1530);
                } else {
                  A := M[2009];
                  B := a29[7:0];
                  FlagS := a37[7:0][7];
                  FlagZ := is_zero(a37[7:0]);
                  FlagA := a40[7:0][4];
                  FlagP := parity(a37[7:0]);
                  FlagCY := !a37[15:8][0];
                  jump (1504);
                }
              }
            }
          }
        }
      }
    }

1504:

    #1505
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 08;
    #return-to: 1508
    #1562
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 15;
        let:16 a4 = (-1 + a3) in
        M[a4] := 62;
        L := B;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 15;
        let:16 a6 = (-1 + a5) in
        M[a6] := 62;
        L := B;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #1565
      #1566
      let:16 a7 = (-1 + a2) in
      M[a7] := 15;
      let:16 a8 = (-1 + a7) in
      M[a8] := 69;
      #return-to: 1569
      A := M[2009];
      H := B;
      L := B;
      SPH := a8[15:8];
      SPL := a8[7:0];
      jump (1554);
    }

1508:

    #150B
    #150C
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 0F;
    #return-to: 150F
    A := M[202A];
    H := M[202A];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (156F);

150F:

    M[2064] := L;
    M[2065] := H;
    #1512
    #1514
    M[2025] := 05;
    #1517
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 1A;
    #return-to: 151A
    #1581
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 15;
        let:16 a4 = (-1 + a3) in
        M[a4] := 81;
        A := 05;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 15;
        let:16 a6 = (-1 + a5) in
        M[a6] := 81;
        A := 05;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #1582
      #1583
      #1584
      #1585
      let:16 a7 = addWithCarry(false,B,updateBit((updateBit((updateBit((B << 01),0,B[7]) << 01),0,updateBit((B << 01),0,B[7])[7]) << 01),0,updateBit((updateBit((B << 01),0,B[7]) << 01),0,updateBit((B << 01),0,B[7])[7])[7])) in
      let:8 a8 = (B & 0F) in
      let:8 a9 = (updateBit((updateBit((updateBit((B << 01),0,B[7]) << 01),0,updateBit((B << 01),0,B[7])[7]) << 01),0,updateBit((updateBit((B << 01),0,B[7]) << 01),0,updateBit((B << 01),0,B[7])[7])[7]) & 0F) in
      let:16 a10 = addWithCarry(false,a8,a9) in
      #1586
      let:16 a11 = addWithCarry(false,B,a7[7:0]) in
      let:8 a12 = (B & 0F) in
      let:8 a13 = (a7[7:0] & 0F) in
      let:16 a14 = addWithCarry(false,a12,a13) in
      #1587
      let:16 a15 = addWithCarry(false,B,a11[7:0]) in
      let:8 a16 = (B & 0F) in
      let:8 a17 = (a11[7:0] & 0F) in
      let:16 a18 = addWithCarry(false,a16,a17) in
      #1588
      let:16 a19 = addWithCarry(false,C,a15[7:0]) in
      let:8 a20 = (C & 0F) in
      let:8 a21 = (a15[7:0] & 0F) in
      let:16 a22 = addWithCarry(false,a20,a21) in
      #1589
      let:16 a23 = addWithCarry(!true,a19[7:0],~00) in
      let:8 a24 = (a19[7:0] & 0F) in
      let:8 a25 = (~00 & 0F) in
      let:16 a26 = addWithCarry(!true,a24,a25) in
      #158A
      #158B
      #158E
      #158F
      let:16 a27 = (1 + a2) in
      let:16 a28 = (1 + a27) in
      A := M[2067];
      H := M[2067];
      L := a23[7:0];
      SPH := a28[15:8];
      SPL := a28[7:0];
      FlagS := a23[7:0][7];
      FlagZ := is_zero(a23[7:0]);
      FlagA := a26[7:0][4];
      FlagP := parity(a23[7:0]);
      FlagCY := a19[15:8][0];
      jump ((M[a27],M[a2]));
    }

151A:

    #151B
    let:8 a1 = (M[(H,L)] & M[(H,L)]) in
    let:8 a2 = (M[(H,L)] | M[(H,L)]) in
    #151C
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (1530);
    } else {
      #151F
      M[(H,L)] := 00;
      #1521
      let:16 a3 = (-1 + (SPH,SPL)) in
      M[a3] := 15;
      let:16 a4 = (-1 + a3) in
      M[a4] := 24;
      #return-to: 1524
      #0A5F
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a5 = (-1 + a4) in
          M[a5] := 0A;
          let:16 a6 = (-1 + a5) in
          M[a6] := 5F;
          A := a1;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a7 = (-1 + a4) in
          M[a7] := 0A;
          let:16 a8 = (-1 + a7) in
          M[a8] := 5F;
          A := a1;
          SPH := a8[15:8];
          SPL := a8[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0010);
        }
      } else {
        #0A62
        let:8 a9 = (M[20EF] & M[20EF]) in
        let:8 a10 = (M[20EF] | M[20EF]) in
        #0A63
        if (is_zero(a9)) {
          A := a9;
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagS := a9[7];
          FlagZ := is_zero(a9);
          FlagA := a10[3];
          FlagP := parity(a9);
          FlagCY := false;
          jump (0A7C);
        } else {
          #0A66
          #0A67
          #0A69
          let:16 a11 = (-1 + a4) in
          M[a11] := 0A;
          let:16 a12 = (-1 + a11) in
          M[a12] := 6C;
          #return-to: 0A6C
          A := a9;
          B := 08;
          C := B;
          SPH := a12[15:8];
          SPL := a12[7:0];
          FlagS := a9[7];
          FlagZ := is_zero(a9);
          FlagA := a10[3];
          FlagP := parity(a9);
          FlagCY := false;
          jump (18FA);
        }
      }
    }

1524:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 27;
    #return-to: 1527
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

1527:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2A;
    #return-to: 152A
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15D3);

152A:

    #152C
    M[2003] := 10;
    #152F
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := 10;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1530:

    #1532
    M[2025] := 03;
    #1535
    A := 03;
    jump (154A);

1545:

    #1547
    M[2025] := 04;
    A := 04;
    jump (154A);

154A:

    let:8 a1 = (A ^ A) in
    #154B
    M[2002] := a1;
    #154E
    #1550
    A := a1;
    B := F7;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (19DC);

1554:

    #1556
    let:16 a1 = addWithCarry(!false,A,~H) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~H & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #1557
    if (!!a1[15:8][0]) {
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 15;
      let:16 a6 = (-1 + a5) in
      M[a6] := 5A;
      #return-to: 155A
      C := 00;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (1590);
    } else {
      C := 00;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (155A);
    }

155A:

    let:16 a1 = addWithCarry(!false,A,~H) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~H & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #155B
    if (!!a1[15:8][0]) {
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump ((M[a5],M[(SPH,SPL)]));
    } else {
      #155C
      let:16 a7 = addWithCarry(false,10,A) in
      let:8 a8 = (10 & 0F) in
      let:8 a9 = (A & 0F) in
      let:16 a10 = addWithCarry(false,a8,a9) in
      #155E
      let:16 a11 = addWithCarry(true,C,00) in
      let:8 a12 = (C & 0F) in
      let:8 a13 = (00 & 0F) in
      let:16 a14 = addWithCarry(true,a12,a13) in
      #155F
      A := a7[7:0];
      C := a11[7:0];
      FlagS := a11[7:0][7];
      FlagZ := is_zero(a11[7:0]);
      FlagA := a14[7:0][4];
      FlagP := parity(a11[7:0]);
      FlagCY := a7[15:8][0];
      jump (155A);
    }

1569:

    #156A
    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    #156B
    let:16 a5 = addWithCarry(!FlagCY,A,~10) in
    let:8 a6 = (A & 0F) in
    let:8 a7 = (~10 & 0F) in
    let:16 a8 = addWithCarry(!FlagCY,a6,a7) in
    #156D
    #156E
    let:16 a9 = (1 + (SPH,SPL)) in
    let:16 a10 = (1 + a9) in
    A := a5[7:0];
    B := a1[7:0];
    L := a5[7:0];
    SPH := a10[15:8];
    SPL := a10[7:0];
    FlagS := a5[7:0][7];
    FlagZ := is_zero(a5[7:0]);
    FlagA := a8[7:0][4];
    FlagP := parity(a5[7:0]);
    FlagCY := !a5[15:8][0];
    jump ((M[a9],M[(SPH,SPL)]));

156F:

    #1572
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 75;
    #return-to: 1575
    A := M[200A];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1554);

1575:

    let:16 a1 = addWithCarry(!FlagCY,A,~10) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~10 & 0F) in
    let:16 a4 = addWithCarry(!FlagCY,a2,a3) in
    #1577
    #1578
    let:16 a5 = (1 + (SPH,SPL)) in
    let:16 a6 = (1 + a5) in
    A := a1[7:0];
    H := a1[7:0];
    SPH := a6[15:8];
    SPL := a6[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump ((M[a5],M[(SPH,SPL)]));

1590:

    let:16 a1 = addWithCarry(true,C,00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    #1591
    let:16 a5 = addWithCarry(false,10,A) in
    let:8 a6 = (10 & 0F) in
    let:8 a7 = (A & 0F) in
    let:16 a8 = addWithCarry(false,a6,a7) in
    #1593
    if (a5[7:0][7]) {
      A := a5[7:0];
      C := a1[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := a5[15:8][0];
      jump (1590);
    } else {
      #1596
      let:16 a9 = (1 + (SPH,SPL)) in
      let:16 a10 = (1 + a9) in
      A := a5[7:0];
      C := a1[7:0];
      SPH := a10[15:8];
      SPL := a10[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := a5[15:8][0];
      jump ((M[a9],M[(SPH,SPL)]));
    }

15A4:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      #15A5
      #15A7
      A := 01;
      B := FE;
      jump (15A9);
    }

15A9:

    M[200D] := A;
    #15AC
    #15AD
    M[2008] := B;
    #15B0
    #15B3
    M[2007] := M[200E];
    #15B6
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[200E];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

15BD:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      #15BE
      let:16 a3 = (-1 + (SPH,SPL)) in
      M[a3] := 15;
      let:16 a4 = (-1 + a3) in
      M[a4] := C1;
      #return-to: 15C1
      #18F1
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a5 = (-1 + a4) in
          M[a5] := 18;
          let:16 a6 = (-1 + a5) in
          M[a6] := F1;
          SPH := a6[15:8];
          SPL := a6[7:0];
          jump (0008);
        } else {
          let:16 a7 = (-1 + a4) in
          M[a7] := 18;
          let:16 a8 = (-1 + a7) in
          M[a8] := F1;
          SPH := a8[15:8];
          SPL := a8[7:0];
          jump (0010);
        }
      } else {
        #18F3
        #18F6
        let:16 a9 = addWithCarry(!true,M[2082],~00) in
        let:8 a10 = (M[2082] & 0F) in
        let:8 a11 = (~00 & 0F) in
        let:16 a12 = addWithCarry(!true,a10,a11) in
        #18F7
        if (!is_zero(a9[7:0])) {
          let:16 a13 = (1 + a4) in
          let:16 a14 = (1 + a13) in
          A := a9[7:0];
          B := 02;
          SPH := a14[15:8];
          SPL := a14[7:0];
          FlagS := a9[7:0][7];
          FlagZ := is_zero(a9[7:0]);
          FlagA := a12[7:0][4];
          FlagP := parity(a9[7:0]);
          jump ((M[a13],M[a4]));
        } else {
          #18F8
          let:16 a15 = addWithCarry(true,02,00) in
          let:8 a16 = (02 & 0F) in
          let:8 a17 = (00 & 0F) in
          let:16 a18 = addWithCarry(true,a16,a17) in
          #18F9
          let:16 a19 = (1 + a4) in
          let:16 a20 = (1 + a19) in
          A := a9[7:0];
          B := a15[7:0];
          SPH := a20[15:8];
          SPL := a20[7:0];
          FlagS := a15[7:0][7];
          FlagZ := is_zero(a15[7:0]);
          FlagA := a18[7:0][4];
          FlagP := parity(a15[7:0]);
          jump ((M[a19],M[a4]));
        }
      }
    }

15C1:

    let:8 a1 = (A ^ A) in
    #15C2
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (15A9);

15C5:

    B := 17;
    jump (15C7);

15C7:

    #15C8
    let:8 a1 = (M[(H,L)] & M[(H,L)]) in
    let:8 a2 = (M[(H,L)] | M[(H,L)]) in
    #15C9
    if (!is_zero(a1)) {
      #166B
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a3 = (-1 + (SPH,SPL)) in
          M[a3] := 16;
          let:16 a4 = (-1 + a3) in
          M[a4] := 6B;
          A := a1;
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 16;
          let:16 a6 = (-1 + a5) in
          M[a6] := 6B;
          A := a1;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7];
          FlagZ := is_zero(a1);
          FlagA := a2[3];
          FlagP := parity(a1);
          FlagCY := false;
          jump (0010);
        }
      } else {
        #166C
        let:16 a7 = (1 + (SPH,SPL)) in
        let:16 a8 = (1 + a7) in
        A := a1;
        SPH := a8[15:8];
        SPL := a8[7:0];
        FlagS := a1[7];
        FlagZ := is_zero(a1);
        FlagA := a2[3];
        FlagP := parity(a1);
        FlagCY := true;
        jump ((M[a7],M[(SPH,SPL)]));
      }
    } else {
      #15CC
      let:16 a9 = (1 + (H,L)) in
      #15CD
      let:16 a10 = addWithCarry(!true,B,~00) in
      let:8 a11 = (B & 0F) in
      let:8 a12 = (~00 & 0F) in
      let:16 a13 = addWithCarry(!true,a11,a12) in
      #15CE
      if (!is_zero(a10[7:0])) {
        A := a1;
        B := a10[7:0];
        H := a9[15:8];
        L := a9[7:0];
        FlagS := a10[7:0][7];
        FlagZ := is_zero(a10[7:0]);
        FlagA := a13[7:0][4];
        FlagP := parity(a10[7:0]);
        FlagCY := false;
        jump (15C7);
      } else {
        #15D1
        let:16 a14 = (1 + (SPH,SPL)) in
        let:16 a15 = (1 + a14) in
        A := a1;
        B := a10[7:0];
        H := a9[15:8];
        L := a9[7:0];
        SPH := a15[15:8];
        SPL := a15[7:0];
        FlagS := a10[7:0][7];
        FlagZ := is_zero(a10[7:0]);
        FlagA := a13[7:0][4];
        FlagP := parity(a10[7:0]);
        FlagCY := false;
        jump ((M[a14],M[(SPH,SPL)]));
      }
    }

15D3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := D6;
    #return-to: 15D6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1474);

15D6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15D7);

15D7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #15D8
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    #15D9
    #15DA
    #15DC
    let:8 a5 = (Shifter_OFF & 07) in
    let:8 a6 = (~Shifter_OFF & 07) in
    let:8 a7 = ((M[(D,E)] << a5) | ((Shifter_HI >> a6) >> 01)) in
    #15DE
    M[(H,L)] := a7;
    #15DF
    let:16 a8 = (1 + (H,L)) in
    #15E0
    let:16 a9 = (1 + (D,E)) in
    #15E1
    let:8 a10 = (a7 ^ a7) in
    #15E2
    #15E4
    let:8 a11 = (Shifter_OFF & 07) in
    let:8 a12 = (~Shifter_OFF & 07) in
    let:8 a13 = ((a10 << a11) | ((M[(D,E)] >> a12) >> 01)) in
    #15E6
    M[a8] := a13;
    #15E7
    let:16 a14 = (1 + a4) in
    let:16 a15 = (1 + a14) in
    #15E8
    #15EB
    let:17 a16 = add17(0020,(M[a14],M[a4])) in
    #15EC
    let:16 a17 = (1 + a15) in
    let:16 a18 = (1 + a17) in
    #15ED
    let:16 a19 = addWithCarry(!true,M[a17],~00) in
    let:8 a20 = (M[a17] & 0F) in
    let:8 a21 = (~00 & 0F) in
    let:16 a22 = addWithCarry(!true,a20,a21) in
    #15EE
    if (!is_zero(a19[7:0])) {
      A := a13;
      B := a19[7:0];
      C := M[a15];
      D := a9[15:8];
      E := a9[7:0];
      H := a16[15:0][15:8];
      L := a16[15:0][7:0];
      SPH := a18[15:8];
      SPL := a18[7:0];
      FlagS := a19[7:0][7];
      FlagZ := is_zero(a19[7:0]);
      FlagA := a22[7:0][4];
      FlagP := parity(a19[7:0]);
      FlagCY := a16[16];
      Shifter_HI := a10;
      Shifter_LO := M[(D,E)];
      jump (15D7);
    } else {
      #15F1
      let:16 a23 = (1 + a18) in
      let:16 a24 = (1 + a23) in
      #15F2
      let:16 a25 = (1 + a24) in
      let:16 a26 = (1 + a25) in
      A := a13;
      B := a19[7:0];
      C := M[a15];
      D := a9[15:8];
      E := a9[7:0];
      H := M[a23];
      L := M[a18];
      SPH := a26[15:8];
      SPL := a26[7:0];
      FlagS := a19[7:0][7];
      FlagZ := is_zero(a19[7:0]);
      FlagA := a22[7:0][4];
      FlagP := parity(a19[7:0]);
      FlagCY := a16[16];
      Shifter_HI := a10;
      Shifter_LO := M[(D,E)];
      jump ((M[a25],M[a24]));
    }

15F6:

    B := 37;
    C := 00;
    jump (15F9);

15F9:

    #15FA
    let:8 a1 = (M[(H,L)] & M[(H,L)]) in
    let:8 a2 = (M[(H,L)] | M[(H,L)]) in
    #15FB
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (15FF);
    } else {
      #15FE
      let:16 a3 = addWithCarry(true,C,00) in
      let:8 a4 = (C & 0F) in
      let:8 a5 = (00 & 0F) in
      let:16 a6 = addWithCarry(true,a4,a5) in
      A := a1;
      C := a3[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := false;
      jump (15FF);
    }

15FF:

    let:16 a1 = (1 + (H,L)) in
    #1600
    let:16 a2 = addWithCarry(!true,B,~00) in
    let:8 a3 = (B & 0F) in
    let:8 a4 = (~00 & 0F) in
    let:16 a5 = addWithCarry(!true,a3,a4) in
    #1601
    if (!is_zero(a2[7:0])) {
      B := a2[7:0];
      H := a1[15:8];
      L := a1[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      jump (15F9);
    } else {
      #1604
      #1605
      M[2082] := C;
      #1608
      let:16 a6 = addWithCarry(!false,C,~01) in
      let:8 a7 = (C & 0F) in
      let:8 a8 = (~01 & 0F) in
      let:16 a9 = addWithCarry(!false,a7,a8) in
      #160A
      if (!is_zero(a6[7:0])) {
        let:16 a10 = (1 + (SPH,SPL)) in
        let:16 a11 = (1 + a10) in
        A := C;
        B := a2[7:0];
        H := a1[15:8];
        L := a1[7:0];
        SPH := a11[15:8];
        SPL := a11[7:0];
        FlagS := a6[7:0][7];
        FlagZ := is_zero(a6[7:0]);
        FlagA := a9[7:0][4];
        FlagP := parity(a6[7:0]);
        FlagCY := !a6[15:8][0];
        jump ((M[a10],M[(SPH,SPL)]));
      } else {
        #160B
        #160E
        M[206B] := 01;
        #1610
        let:16 a12 = (1 + (SPH,SPL)) in
        let:16 a13 = (1 + a12) in
        A := C;
        B := a2[7:0];
        H := 20;
        L := 6B;
        SPH := a13[15:8];
        SPL := a13[7:0];
        FlagS := a6[7:0][7];
        FlagZ := is_zero(a6[7:0]);
        FlagA := a9[7:0][4];
        FlagP := parity(a6[7:0]);
        FlagCY := !a6[15:8][0];
        jump ((M[a12],M[(SPH,SPL)]));
      }
    }

1611:

    #1613
    #1616
    #1617
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[2067];
    H := M[2067];
    L := 00;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1618:

    #161B
    let:16 a1 = addWithCarry(!false,M[2015],~FF) in
    let:8 a2 = (M[2015] & 0F) in
    let:8 a3 = (~FF & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #161D
    if (!is_zero(a1[7:0])) {
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      A := M[2015];
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump ((M[a5],M[(SPH,SPL)]));
    } else {
      #161E
      #1621
      #1622
      #1623
      #1624
      let:8 a7 = (M[2011] | M[2010]) in
      #1625
      if (!is_zero(a7)) {
        let:16 a8 = (1 + (SPH,SPL)) in
        let:16 a9 = (1 + a8) in
        A := a7;
        B := M[2011];
        H := 20;
        L := 11;
        SPH := a9[15:8];
        SPL := a9[7:0];
        FlagS := a7[7];
        FlagZ := is_zero(a7);
        FlagA := false;
        FlagP := parity(a7);
        FlagCY := false;
        jump ((M[a8],M[(SPH,SPL)]));
      } else {
        #1626
        #1629
        let:8 a10 = (M[2025] & M[2025]) in
        let:8 a11 = (M[2025] | M[2025]) in
        #162A
        if (!is_zero(a10)) {
          let:16 a12 = (1 + (SPH,SPL)) in
          let:16 a13 = (1 + a12) in
          A := a10;
          B := M[2011];
          H := 20;
          L := 11;
          SPH := a13[15:8];
          SPL := a13[7:0];
          FlagS := a10[7];
          FlagZ := is_zero(a10);
          FlagA := a11[3];
          FlagP := parity(a10);
          FlagCY := false;
          jump ((M[a12],M[(SPH,SPL)]));
        } else {
          #162B
          #162E
          let:8 a14 = (M[20EF] & M[20EF]) in
          let:8 a15 = (M[20EF] | M[20EF]) in
          #162F
          if (is_zero(a14)) {
            #1652
            if ((g_time_to_wakeup && g_interrupts_enabled)) {
              disable_interrupts()
              if (g_half_frame) {
                let:16 a16 = (-1 + (SPH,SPL)) in
                M[a16] := 16;
                let:16 a17 = (-1 + a16) in
                M[a17] := 52;
                A := a14;
                B := M[2011];
                H := 20;
                L := 11;
                SPH := a17[15:8];
                SPL := a17[7:0];
                FlagS := a14[7];
                FlagZ := is_zero(a14);
                FlagA := a15[3];
                FlagP := parity(a14);
                FlagCY := false;
                jump (0008);
              } else {
                let:16 a18 = (-1 + (SPH,SPL)) in
                M[a18] := 16;
                let:16 a19 = (-1 + a18) in
                M[a19] := 52;
                A := a14;
                B := M[2011];
                H := 20;
                L := 11;
                SPH := a19[15:8];
                SPL := a19[7:0];
                FlagS := a14[7];
                FlagZ := is_zero(a14);
                FlagA := a15[3];
                FlagP := parity(a14);
                FlagCY := false;
                jump (0010);
              }
            } else {
              #1655
              M[2025] := 01;
              #1657
              #165A
              let:16 a20 = (1 + (M[20EE],M[20ED])) in
              #165B
              #165C
              let:16 a21 = addWithCarry(!false,a20[7:0],~7E) in
              let:8 a22 = (a20[7:0] & 0F) in
              let:8 a23 = (~7E & 0F) in
              let:16 a24 = addWithCarry(!false,a22,a23) in
              #165E
              if (!a21[15:8][0]) {
                A := a20[7:0];
                B := M[2011];
                H := a20[15:8];
                L := a20[7:0];
                FlagS := a21[7:0][7];
                FlagZ := is_zero(a21[7:0]);
                FlagA := a24[7:0][4];
                FlagP := parity(a21[7:0]);
                FlagCY := !a21[15:8][0];
                jump (1663);
              } else {
                #1661
                A := a20[7:0];
                B := M[2011];
                H := a20[15:8];
                L := 74;
                FlagS := a21[7:0][7];
                FlagZ := is_zero(a21[7:0]);
                FlagA := a24[7:0][4];
                FlagP := parity(a21[7:0]);
                FlagCY := !a21[15:8][0];
                jump (1663);
              }
            }
          } else {
            #1632
            #1635
            let:8 a25 = (M[202D] & M[202D]) in
            let:8 a26 = (M[202D] | M[202D]) in
            #1636
            if (!is_zero(a25)) {
              #1648
              if ((g_time_to_wakeup && g_interrupts_enabled)) {
                disable_interrupts()
                if (g_half_frame) {
                  let:16 a27 = (-1 + (SPH,SPL)) in
                  M[a27] := 16;
                  let:16 a28 = (-1 + a27) in
                  M[a28] := 48;
                  A := a25;
                  B := M[2011];
                  H := 20;
                  L := 11;
                  SPH := a28[15:8];
                  SPL := a28[7:0];
                  FlagS := a25[7];
                  FlagZ := is_zero(a25);
                  FlagA := a26[3];
                  FlagP := parity(a25);
                  FlagCY := false;
                  jump (0008);
                } else {
                  let:16 a29 = (-1 + (SPH,SPL)) in
                  M[a29] := 16;
                  let:16 a30 = (-1 + a29) in
                  M[a30] := 48;
                  A := a25;
                  B := M[2011];
                  H := 20;
                  L := 11;
                  SPH := a30[15:8];
                  SPL := a30[7:0];
                  FlagS := a25[7];
                  FlagZ := is_zero(a25);
                  FlagA := a26[3];
                  FlagP := parity(a25);
                  FlagCY := false;
                  jump (0010);
                }
              } else {
                let:16 a31 = (-1 + (SPH,SPL)) in
                M[a31] := 16;
                let:16 a32 = (-1 + a31) in
                M[a32] := 4B;
                #return-to: 164B
                A := a25;
                B := M[2011];
                H := 20;
                L := 11;
                SPH := a32[15:8];
                SPL := a32[7:0];
                FlagS := a25[7];
                FlagZ := is_zero(a25);
                FlagA := a26[3];
                FlagP := parity(a25);
                FlagCY := false;
                jump (17C0);
              }
            } else {
              #1639
              let:16 a33 = (-1 + (SPH,SPL)) in
              M[a33] := 16;
              let:16 a34 = (-1 + a33) in
              M[a34] := 3C;
              #return-to: 163C
              A := a25;
              B := M[2011];
              H := 20;
              L := 11;
              SPH := a34[15:8];
              SPL := a34[7:0];
              FlagS := a25[7];
              FlagZ := is_zero(a25);
              FlagA := a26[3];
              FlagP := parity(a25);
              FlagCY := false;
              jump (17C0);
            }
          }
        }
      }
    }

163C:

    let:8 a1 = (10 & A) in
    let:8 a2 = (10 | A) in
    #163E
    if (is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a3],M[(SPH,SPL)]));
    } else {
      #163F
      #1641
      M[2025] := 01;
      #1644
      M[202D] := 01;
      #1647
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      A := 01;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a5],M[(SPH,SPL)]));
    }

164B:

    let:8 a1 = (10 & A) in
    let:8 a2 = (10 | A) in
    #164D
    if (!is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a3],M[(SPH,SPL)]));
    } else {
      #164E
      M[202D] := a1;
      #1651
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      A := a1;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a5],M[(SPH,SPL)]));
    }

1663:

    M[20ED] := L;
    M[20EE] := H;
    #1666
    #1667
    M[201D] := M[(H,L)];
    #166A
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[(H,L)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1671:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := 74;
    #return-to: 1674
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1910);

1674:

    M[(H,L)] := 00;
    #1676
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := 79;
    #return-to: 1679
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09CA);

1679:

    let:16 a1 = (1 + (H,L)) in
    #167A
    #167D
    #167E
    let:16 a2 = addWithCarry(!false,M[20F5],~M[a1]) in
    let:8 a3 = (M[20F5] & 0F) in
    let:8 a4 = (~M[a1] & 0F) in
    let:16 a5 = addWithCarry(!false,a3,a4) in
    #167F
    #1680
    let:16 a6 = (-1 + a1) in
    #1681
    #1682
    if (is_zero(a2[7:0])) {
      #168B
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a7 = (-1 + (SPH,SPL)) in
          M[a7] := 16;
          let:16 a8 = (-1 + a7) in
          M[a8] := 8B;
          A := M[20F4];
          D := 20;
          E := F4;
          H := a6[15:8];
          L := a6[7:0];
          SPH := a8[15:8];
          SPL := a8[7:0];
          FlagS := a2[7:0][7];
          FlagZ := is_zero(a2[7:0]);
          FlagA := a5[7:0][4];
          FlagP := parity(a2[7:0]);
          FlagCY := !a2[15:8][0];
          jump (0008);
        } else {
          let:16 a9 = (-1 + (SPH,SPL)) in
          M[a9] := 16;
          let:16 a10 = (-1 + a9) in
          M[a10] := 8B;
          A := M[20F4];
          D := 20;
          E := F4;
          H := a6[15:8];
          L := a6[7:0];
          SPH := a10[15:8];
          SPL := a10[7:0];
          FlagS := a2[7:0][7];
          FlagZ := is_zero(a2[7:0]);
          FlagA := a5[7:0][4];
          FlagP := parity(a2[7:0]);
          FlagCY := !a2[15:8][0];
          jump (0010);
        }
      } else {
        let:16 a11 = addWithCarry(!false,M[20F4],~M[a6]) in
        let:8 a12 = (M[20F4] & 0F) in
        let:8 a13 = (~M[a6] & 0F) in
        let:16 a14 = addWithCarry(!false,a12,a13) in
        #168C
        if (!!a11[15:8][0]) {
          A := M[20F4];
          D := 20;
          E := F4;
          H := a6[15:8];
          L := a6[7:0];
          FlagS := a11[7:0][7];
          FlagZ := is_zero(a11[7:0]);
          FlagA := a14[7:0][4];
          FlagP := parity(a11[7:0]);
          FlagCY := !a11[15:8][0];
          jump (1698);
        } else {
          A := M[20F4];
          D := 20;
          E := F4;
          H := a6[15:8];
          L := a6[7:0];
          FlagS := a11[7:0][7];
          FlagZ := is_zero(a11[7:0]);
          FlagA := a14[7:0][4];
          FlagP := parity(a11[7:0]);
          FlagCY := !a11[15:8][0];
          jump (168F);
        }
      }
    } else {
      #1685
      if (!!a2[15:8][0]) {
        A := M[20F4];
        D := 20;
        E := F4;
        H := a6[15:8];
        L := a6[7:0];
        FlagS := a2[7:0][7];
        FlagZ := is_zero(a2[7:0]);
        FlagA := a5[7:0][4];
        FlagP := parity(a2[7:0]);
        FlagCY := !a2[15:8][0];
        jump (1698);
      } else {
        #1688
        A := M[20F4];
        D := 20;
        E := F4;
        H := a6[15:8];
        L := a6[7:0];
        FlagS := a2[7:0][7];
        FlagZ := is_zero(a2[7:0]);
        FlagA := a5[7:0][4];
        FlagP := parity(a2[7:0]);
        FlagCY := !a2[15:8][0];
        jump (168F);
      }
    }

168F:

    #1690
    M[(D,E)] := M[(H,L)];
    #1691
    let:16 a1 = (1 + (D,E)) in
    #1692
    let:16 a2 = (1 + (H,L)) in
    #1693
    #1694
    M[a1] := M[a2];
    #1695
    let:16 a3 = (-1 + (SPH,SPL)) in
    M[a3] := 16;
    let:16 a4 = (-1 + a3) in
    M[a4] := 98;
    #return-to: 1698
    A := M[a2];
    D := a1[15:8];
    E := a1[7:0];
    H := a2[15:8];
    L := a2[7:0];
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump (1950);

1698:

    #169B
    let:8 a1 = (M[20CE] & M[20CE]) in
    let:8 a2 = (M[20CE] | M[20CE]) in
    #169C
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (16C9);
    } else {
      #169F
      #16A2
      #16A5
      #16A7
      let:16 a3 = (-1 + (SPH,SPL)) in
      M[a3] := 16;
      let:16 a4 = (-1 + a3) in
      M[a4] := AA;
      #return-to: 16AA
      A := a1;
      C := 14;
      D := 1A;
      E := A6;
      H := 28;
      L := 03;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (0A93);
    }

16AA:

    let:16 a1 = addWithCarry(!true,H,~00) in
    let:8 a2 = (H & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    #16AB
    let:16 a5 = addWithCarry(!true,a1[7:0],~00) in
    let:8 a6 = (a1[7:0] & 0F) in
    let:8 a7 = (~00 & 0F) in
    let:16 a8 = addWithCarry(!true,a6,a7) in
    #16AC
    #16AE
    #16B1
    #16B2
    if (M[2067][0]) {
      A := updateBit((M[2067] >> 01),7,M[2067][0]);
      B := 1B;
      H := a5[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := M[2067][0];
      jump (16B7);
    } else {
      #16B5
      A := updateBit((M[2067] >> 01),7,M[2067][0]);
      B := 1C;
      H := a5[7:0];
      FlagS := a5[7:0][7];
      FlagZ := is_zero(a5[7:0]);
      FlagA := a8[7:0][4];
      FlagP := parity(a5[7:0]);
      FlagCY := M[2067][0];
      jump (16B7);
    }

16B7:

    #16B8
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := BB;
    #return-to: 16BB
    A := B;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08FF);

16BB:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := BE;
    #return-to: 16BE
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

16BE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := C1;
    #return-to: 16C1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (18E7);

16C1:

    #16C2
    let:8 a1 = (M[(H,L)] & M[(H,L)]) in
    let:8 a2 = (M[(H,L)] | M[(H,L)]) in
    #16C3
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (16C9);
    } else {
      #16C6
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (02ED);
    }

16C9:

    #16CC
    #16CF
    #16D1
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := D4;
    #return-to: 16D4
    C := 0A;
    D := 1A;
    E := A6;
    H := 2D;
    L := 18;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A93);

16D4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := D7;
    #return-to: 16D7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB6);

16D7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := DA;
    #return-to: 16DA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

16DA:

    let:8 a1 = (A ^ A) in
    #16DB
    M[20EF] := a1;
    #16DE
    sound_control(FleetMovement1,a1[0]);
    sound_control(FleetMovement2,a1[1]);
    sound_control(FleetMovement3,a1[2]);
    sound_control(FleetMovement4,a1[3]);
    sound_control(UfoHit,a1[4]);
    #16E0
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 16;
    let:16 a3 = (-1 + a2) in
    M[a3] := E3;
    #return-to: 16E3
    A := a1;
    SPH := a3[15:8];
    SPL := a3[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (19D1);

16E3:

    jump (0B89);

16EE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := F1;
    #return-to: 16F1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14D8);

16F1:

    #16F3
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := F6;
    #return-to: 16F6
    B := 04;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (18FA);

16F6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := F9;
    #return-to: 16F9
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

16F9:

    if (!FlagZ) {
      jump (16EE);
    } else {
      #16FC
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 16;
      let:16 a2 = (-1 + a1) in
      M[a2] := FF;
      #return-to: 16FF
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (19D7);
    }

16FF:

    #1702
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := 05;
    #return-to: 1705
    H := 27;
    L := 01;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19FA);

1705:

    let:8 a1 = (A ^ A) in
    #1706
    let:16 a2 = (-1 + (SPH,SPL)) in
    M[a2] := 17;
    let:16 a3 = (-1 + a2) in
    M[a3] := 09;
    #return-to: 1709
    A := a1;
    SPH := a3[15:8];
    SPL := a3[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1A8B);

1709:

    #170B
    #196B
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a1 = (-1 + (SPH,SPL)) in
        M[a1] := 19;
        let:16 a2 = (-1 + a1) in
        M[a2] := 6B;
        B := FB;
        SPH := a2[15:8];
        SPL := a2[7:0];
        jump (0008);
      } else {
        let:16 a3 = (-1 + (SPH,SPL)) in
        M[a3] := 19;
        let:16 a4 = (-1 + a3) in
        M[a4] := 6B;
        B := FB;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0010);
      }
    } else {
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 19;
      let:16 a6 = (-1 + a5) in
      M[a6] := 6E;
      #return-to: 196E
      B := FB;
      SPH := a6[15:8];
      SPL := a6[7:0];
      jump (19DC);
    }

1711:

    let:16 a1 = (1 + (H,L)) in
    #1712
    #1713
    #1716
    #1719
    #171B
    A := M[a1];
    B := M[a1];
    C := 04;
    D := 1C;
    E := B8;
    H := 1A;
    L := A1;
    jump (171C);

171C:

    #171D
    let:16 a1 = addWithCarry(!false,M[(D,E)],~B) in
    let:8 a2 = (M[(D,E)] & 0F) in
    let:8 a3 = (~B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #171E
    if (!!a1[15:8][0]) {
      A := M[(D,E)];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (1727);
    } else {
      #1721
      let:16 a5 = (1 + (H,L)) in
      #1722
      let:16 a6 = (1 + (D,E)) in
      #1723
      let:16 a7 = addWithCarry(!true,C,~00) in
      let:8 a8 = (C & 0F) in
      let:8 a9 = (~00 & 0F) in
      let:16 a10 = addWithCarry(!true,a8,a9) in
      #1724
      if (!is_zero(a7[7:0])) {
        A := M[(D,E)];
        C := a7[7:0];
        D := a6[15:8];
        E := a6[7:0];
        H := a5[15:8];
        L := a5[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a1[15:8][0];
        jump (171C);
      } else {
        A := M[(D,E)];
        C := a7[7:0];
        D := a6[15:8];
        E := a6[7:0];
        H := a5[15:8];
        L := a5[7:0];
        FlagS := a7[7:0][7];
        FlagZ := is_zero(a7[7:0]);
        FlagA := a10[7:0][4];
        FlagP := parity(a7[7:0]);
        FlagCY := !a1[15:8][0];
        jump (1727);
      }
    }

1727:

    #1728
    M[20CF] := M[(H,L)];
    #172B
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[(H,L)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1747:

    #174A
    let:8 a1 = (M[2068] & M[2068]) in
    let:8 a2 = (M[2068] | M[2068]) in
    #174B
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (176D);
    } else {
      #174E
      #1751
      let:16 a3 = addWithCarry(!true,M[2096],~00) in
      let:8 a4 = (M[2096] & 0F) in
      let:8 a5 = (~00 & 0F) in
      let:16 a6 = addWithCarry(!true,a4,a5) in
      M[2096] := a3[7:0];
      #1752
      if (!is_zero(a3[7:0])) {
        let:16 a7 = (1 + (SPH,SPL)) in
        let:16 a8 = (1 + a7) in
        A := a1;
        H := 20;
        L := 96;
        SPH := a8[15:8];
        SPL := a8[7:0];
        FlagS := a3[7:0][7];
        FlagZ := is_zero(a3[7:0]);
        FlagA := a6[7:0][4];
        FlagP := parity(a3[7:0]);
        FlagCY := false;
        jump ((M[a7],M[(SPH,SPL)]));
      } else {
        #1753
        #1756
        #1757
        sound_control(FleetMovement1,M[2098][0]);
        sound_control(FleetMovement2,M[2098][1]);
        sound_control(FleetMovement3,M[2098][2]);
        sound_control(FleetMovement4,M[2098][3]);
        sound_control(UfoHit,M[2098][4]);
        #1759
        #175C
        let:8 a9 = (M[2082] & M[2082]) in
        let:8 a10 = (M[2082] | M[2082]) in
        #175D
        if (is_zero(a9)) {
          A := a9;
          H := 20;
          L := 98;
          FlagS := a9[7];
          FlagZ := is_zero(a9);
          FlagA := a10[3];
          FlagP := parity(a9);
          FlagCY := false;
          jump (176D);
        } else {
          #1760
          #1761
          #1762
          #1763
          M[2096] := M[2097];
          #1764
          #1765
          M[2095] := 01;
          #1767
          #1769
          M[209B] := 04;
          #176C
          let:16 a11 = (1 + (SPH,SPL)) in
          let:16 a12 = (1 + a11) in
          A := 04;
          H := 20;
          L := 95;
          SPH := a12[15:8];
          SPL := a12[7:0];
          FlagS := a9[7];
          FlagZ := is_zero(a9);
          FlagA := a10[3];
          FlagP := parity(a9);
          FlagCY := false;
          jump ((M[a11],M[(SPH,SPL)]));
        }
      }
    }

176D:

    A := M[2098];
    jump (1770);

1770:

    let:8 a1 = (30 & A) in
    let:8 a2 = (30 | A) in
    #1772
    sound_control(FleetMovement1,a1[0]);
    sound_control(FleetMovement2,a1[1]);
    sound_control(FleetMovement3,a1[2]);
    sound_control(FleetMovement4,a1[3]);
    sound_control(UfoHit,a1[4]);
    #1774
    let:16 a3 = (1 + (SPH,SPL)) in
    let:16 a4 = (1 + a3) in
    A := a1;
    SPH := a4[15:8];
    SPL := a4[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump ((M[a3],M[(SPH,SPL)]));

1785:

    let:16 a1 = addWithCarry(!false,A,~M[(H,L)]) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~M[(H,L)] & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #1786
    if (!!a1[15:8][0]) {
      #178E
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 17;
          let:16 a6 = (-1 + a5) in
          M[a6] := 8E;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7:0][7];
          FlagZ := is_zero(a1[7:0]);
          FlagA := a4[7:0][4];
          FlagP := parity(a1[7:0]);
          FlagCY := !a1[15:8][0];
          jump (0008);
        } else {
          let:16 a7 = (-1 + (SPH,SPL)) in
          M[a7] := 17;
          let:16 a8 = (-1 + a7) in
          M[a8] := 8E;
          SPH := a8[15:8];
          SPL := a8[7:0];
          FlagS := a1[7:0][7];
          FlagZ := is_zero(a1[7:0]);
          FlagA := a4[7:0][4];
          FlagP := parity(a1[7:0]);
          FlagCY := !a1[15:8][0];
          jump (0010);
        }
      } else {
        #178F
        M[2097] := M[(D,E)];
        #1792
        #1795
        #1796
        let:8 a9 = (30 & M[2098]) in
        let:8 a10 = (30 | M[2098]) in
        #1798
        #1799
        #179A
        let:8 a11 = (0F & M[2098]) in
        let:8 a12 = (0F | M[2098]) in
        #179C
        #179D
        let:16 a13 = addWithCarry(!false,updateBit((a11 << 01),0,a11[7]),~10) in
        let:8 a14 = (updateBit((a11 << 01),0,a11[7]) & 0F) in
        let:8 a15 = (~10 & 0F) in
        let:16 a16 = addWithCarry(!false,a14,a15) in
        #179F
        if (!is_zero(a13[7:0])) {
          A := updateBit((a11 << 01),0,a11[7]);
          B := a9;
          H := 20;
          L := 98;
          FlagS := a13[7:0][7];
          FlagZ := is_zero(a13[7:0]);
          FlagA := a16[7:0][4];
          FlagP := parity(a13[7:0]);
          FlagCY := !a13[15:8][0];
          jump (17A4);
        } else {
          #17A2
          A := 01;
          B := a9;
          H := 20;
          L := 98;
          FlagS := a13[7:0][7];
          FlagZ := is_zero(a13[7:0]);
          FlagA := a16[7:0][4];
          FlagP := parity(a13[7:0]);
          FlagCY := !a13[15:8][0];
          jump (17A4);
        }
      }
    } else {
      #1789
      let:16 a17 = (1 + (H,L)) in
      #178A
      let:16 a18 = (1 + (D,E)) in
      #178B
      D := a18[15:8];
      E := a18[7:0];
      H := a17[15:8];
      L := a17[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (1785);
    }

17A4:

    let:8 a1 = (B | A) in
    #17A5
    M[(H,L)] := a1;
    #17A6
    let:8 a2 = (a1 ^ a1) in
    #17A7
    M[2095] := a2;
    A := a2;
    FlagS := a2[7];
    FlagZ := is_zero(a2);
    FlagA := false;
    FlagP := parity(a2);
    FlagCY := false;
    jump (17AA);

17AA:

    #17AD
    let:16 a1 = addWithCarry(!true,M[2099],~00) in
    let:8 a2 = (M[2099] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[2099] := a1[7:0];
    #17AE
    if (!is_zero(a1[7:0])) {
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      H := 20;
      L := 99;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump ((M[a5],M[(SPH,SPL)]));
    } else {
      #17AF
      #17B1
      B := EF;
      H := 20;
      L := 99;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (19DC);
    }

17B4:

    #17B6
    #17B9
    #17BA
    let:8 a1 = (EF & M[2098]) in
    let:8 a2 = (EF | M[2098]) in
    #17BB
    M[2098] := a1;
    #17BC
    sound_control(FleetMovement1,a1[0]);
    sound_control(FleetMovement2,a1[1]);
    sound_control(FleetMovement3,a1[2]);
    sound_control(FleetMovement4,a1[3]);
    sound_control(UfoHit,a1[4]);
    #17BE
    let:16 a3 = (1 + (SPH,SPL)) in
    let:16 a4 = (1 + a3) in
    A := a1;
    B := EF;
    H := 20;
    L := 98;
    SPH := a4[15:8];
    SPL := a4[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump ((M[a3],M[(SPH,SPL)]));

17C0:

    #17C3
    #17C4
    if (!M[2067][0]) {
      #17CA
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a1 = (-1 + (SPH,SPL)) in
          M[a1] := 17;
          let:16 a2 = (-1 + a1) in
          M[a2] := CA;
          A := updateBit((M[2067] >> 01),7,M[2067][0]);
          SPH := a2[15:8];
          SPL := a2[7:0];
          FlagCY := M[2067][0];
          jump (0008);
        } else {
          let:16 a3 = (-1 + (SPH,SPL)) in
          M[a3] := 17;
          let:16 a4 = (-1 + a3) in
          M[a4] := CA;
          A := updateBit((M[2067] >> 01),7,M[2067][0]);
          SPH := a4[15:8];
          SPL := a4[7:0];
          FlagCY := M[2067][0];
          jump (0010);
        }
      } else {
        #17CC
        let:16 a5 = (1 + (SPH,SPL)) in
        let:16 a6 = (1 + a5) in
        A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
        SPH := a6[15:8];
        SPL := a6[7:0];
        FlagCY := M[2067][0];
        jump ((M[a5],M[(SPH,SPL)]));
      }
    } else {
      #17C7
      #17C9
      let:16 a7 = (1 + (SPH,SPL)) in
      let:16 a8 = (1 + a7) in
      A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagCY := M[2067][0];
      jump ((M[a7],M[(SPH,SPL)]));
    }

17DC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := DF;
    #return-to: 17DF
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

17DF:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    #17E0
    if (!is_zero(a1[7:0])) {
      B := a1[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (17DC);
    } else {
      #17E3
      #17E5
      M[209A] := 01;
      #17E8
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := 17;
      let:16 a6 = (-1 + a5) in
      M[a6] := EB;
      #return-to: 17EB
      A := 01;
      B := a1[7:0];
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (19D7);
    }

17EB:

    enable_interrupts()
    #17EC
    #17EF
    #17F2
    #17F4
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := F7;
    #return-to: 17F7
    C := 04;
    D := 1C;
    E := BC;
    H := 30;
    L := 16;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A93);

17F7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := FA;
    #return-to: 17FA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

17FA:

    let:8 a1 = (A ^ A) in
    #17FB
    M[209A] := a1;
    #17FE
    M[2093] := a1;
    #1801
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (16C9);

1820:

    #1822
    M[206C] := 0A;
    #1825
    A := 0A;
    B := 1D;
    C := BE;
    jump (1828);

1828:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2B;
    #return-to: 182B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1856);

182B:

    if (FlagCY) {
      jump (1837);
    } else {
      #182E
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 18;
      let:16 a2 = (-1 + a1) in
      M[a2] := 31;
      #return-to: 1831
      #1844
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a3 = (-1 + a2) in
          M[a3] := 18;
          let:16 a4 = (-1 + a3) in
          M[a4] := 44;
          SPH := a4[15:8];
          SPL := a4[7:0];
          jump (0008);
        } else {
          let:16 a5 = (-1 + a2) in
          M[a5] := 18;
          let:16 a6 = (-1 + a5) in
          M[a6] := 44;
          SPH := a6[15:8];
          SPL := a6[7:0];
          jump (0010);
        }
      } else {
        let:16 a7 = (-1 + a2) in
        M[a7] := B;
        let:16 a8 = (-1 + a7) in
        M[a8] := C;
        #1845
        #1847
        let:16 a9 = (-1 + a8) in
        M[a9] := 18;
        let:16 a10 = (-1 + a9) in
        M[a10] := 4A;
        #return-to: 184A
        B := 10;
        SPH := a10[15:8];
        SPL := a10[7:0];
        jump (1439);
      }
    }

1831:

    jump (1828);

1834:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 37;
    #return-to: 1837
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

1837:

    B := 1D;
    C := CF;
    jump (183A);

183A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3D;
    #return-to: 183D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1856);

183D:

    if (FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      #183E
      let:16 a3 = (-1 + (SPH,SPL)) in
      M[a3] := 18;
      let:16 a4 = (-1 + a3) in
      M[a4] := 41;
      #return-to: 1841
      SPH := a4[15:8];
      SPL := a4[7:0];
      jump (184C);
    }

1841:

    jump (183A);

184A:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #184B
    let:16 a3 = (1 + a2) in
    let:16 a4 = (1 + a3) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump ((M[a3],M[a2]));

184C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #184D
    #1850
    #1851
    let:16 a3 = (-1 + a2) in
    M[a3] := 18;
    let:16 a4 = (-1 + a3) in
    M[a4] := 54;
    #return-to: 1854
    A := M[206C];
    C := M[206C];
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump (0A93);

1854:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    #1855
    let:16 a3 = (1 + a2) in
    let:16 a4 = (1 + a3) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump ((M[a3],M[a2]));

1856:

    #1857
    let:16 a1 = addWithCarry(!false,M[(B,C)],~FF) in
    let:8 a2 = (M[(B,C)] & 0F) in
    let:8 a3 = (~FF & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #1859
    #185A
    if (is_zero(a1[7:0])) {
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      A := M[(B,C)];
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := true;
      jump ((M[a5],M[(SPH,SPL)]));
    } else {
      #185B
      #185C
      let:16 a7 = (1 + (B,C)) in
      #185D
      #185E
      #185F
      let:16 a8 = (1 + a7) in
      #1860
      #1861
      #1862
      let:16 a9 = (1 + a8) in
      #1863
      #1864
      #1865
      let:16 a10 = (1 + a9) in
      #1866
      let:8 a11 = (M[a9] & M[a9]) in
      let:8 a12 = (M[a9] | M[a9]) in
      #1867
      let:16 a13 = (1 + (SPH,SPL)) in
      let:16 a14 = (1 + a13) in
      A := a11;
      B := a10[15:8];
      C := a10[7:0];
      D := M[a9];
      E := M[a8];
      H := M[a7];
      L := M[(B,C)];
      SPH := a14[15:8];
      SPL := a14[7:0];
      FlagS := a11[7];
      FlagZ := is_zero(a11);
      FlagA := a12[3];
      FlagP := parity(a11);
      FlagCY := false;
      jump ((M[a13],M[(SPH,SPL)]));
    }

1871:

    #1872
    #1875
    let:16 a1 = addWithCarry(!false,M[20CA],~A) in
    let:8 a2 = (M[20CA] & 0F) in
    let:8 a3 = (~A & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #1876
    if (is_zero(a1[7:0])) {
      #1898
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a5 = (-1 + (SPH,SPL)) in
          M[a5] := 18;
          let:16 a6 = (-1 + a5) in
          M[a6] := 98;
          A := M[20CA];
          B := A;
          SPH := a6[15:8];
          SPL := a6[7:0];
          FlagS := a1[7:0][7];
          FlagZ := is_zero(a1[7:0]);
          FlagA := a4[7:0][4];
          FlagP := parity(a1[7:0]);
          FlagCY := !a1[15:8][0];
          jump (0008);
        } else {
          let:16 a7 = (-1 + (SPH,SPL)) in
          M[a7] := 18;
          let:16 a8 = (-1 + a7) in
          M[a8] := 98;
          A := M[20CA];
          B := A;
          SPH := a8[15:8];
          SPL := a8[7:0];
          FlagS := a1[7:0][7];
          FlagZ := is_zero(a1[7:0]);
          FlagA := a4[7:0][4];
          FlagP := parity(a1[7:0]);
          FlagCY := !a1[15:8][0];
          jump (0010);
        }
      } else {
        #189A
        M[20CB] := 01;
        #189D
        let:16 a9 = (1 + (SPH,SPL)) in
        let:16 a10 = (1 + a9) in
        A := 01;
        B := A;
        SPH := a10[15:8];
        SPL := a10[7:0];
        FlagS := a1[7:0][7];
        FlagZ := is_zero(a1[7:0]);
        FlagA := a4[7:0][4];
        FlagP := parity(a1[7:0]);
        FlagCY := !a1[15:8][0];
        jump ((M[a9],M[(SPH,SPL)]));
      }
    } else {
      #1879
      #187C
      let:8 a11 = (04 & M[20C2]) in
      let:8 a12 = (04 | M[20C2]) in
      #187E
      #1881
      if (!is_zero(a11)) {
        A := a11;
        B := A;
        H := M[20CD];
        L := M[20CC];
        FlagS := a11[7];
        FlagZ := is_zero(a11);
        FlagA := a12[3];
        FlagP := parity(a11);
        FlagCY := false;
        jump (1888);
      } else {
        #1884
        #1887
        let:17 a13 = add17(0030,(M[20CD],M[20CC])) in
        A := a11;
        B := A;
        D := 00;
        E := 30;
        H := a13[15:0][15:8];
        L := a13[15:0][7:0];
        FlagS := a11[7];
        FlagZ := is_zero(a11);
        FlagA := a12[3];
        FlagP := parity(a11);
        FlagCY := a13[16];
        jump (1888);
      }
    }

1888:

    M[20C7] := L;
    M[20C8] := H;
    #188B
    #188E
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 91;
    #return-to: 1891
    H := 20;
    L := C5;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

1891:

    #1892
    D := H;
    E := L;
    H := D;
    L := E;
    jump (15D3);

18A9:

    #18AB
    M[2080] := 02;
    #18AE
    #18B0
    M[207E] := FF;
    #18B3
    #18B5
    M[20C1] := 04;
    A := 04;
    jump (18B8);

18B8:

    #18BB
    let:8 a1 = (01 & M[2055]) in
    let:8 a2 = (01 | M[2055]) in
    #18BD
    if (is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (18B8);
    } else {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (18C0);
    }

18C0:

    #18C3
    let:8 a1 = (01 & M[2055]) in
    let:8 a2 = (01 | M[2055]) in
    #18C5
    if (!is_zero(a1)) {
      A := a1;
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (18C0);
    } else {
      #18C8
      #18CB
      #18CD
      #18CE
      let:16 a3 = (-1 + (SPH,SPL)) in
      M[a3] := 18;
      let:16 a4 = (-1 + a3) in
      M[a4] := D1;
      #return-to: 18D1
      A := 26;
      H := 33;
      L := 11;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump (08FF);
    }

18D1:

    jump (0AB6);

18DC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := DF;
    #return-to: 18DF
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1956);

18DF:

    #18E1
    M[20CF] := 08;
    #18E4
    #0AEA
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a1 = (-1 + (SPH,SPL)) in
        M[a1] := 0A;
        let:16 a2 = (-1 + a1) in
        M[a2] := EA;
        A := 08;
        SPH := a2[15:8];
        SPL := a2[7:0];
        jump (0008);
      } else {
        let:16 a3 = (-1 + (SPH,SPL)) in
        M[a3] := 0A;
        let:16 a4 = (-1 + a3) in
        M[a4] := EA;
        A := 08;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0010);
      }
    } else {
      let:8 a5 = (08 ^ 08) in
      #0AEB
      sound_control(Ufo,a5[0]);
      sound_control(Shot,a5[1]);
      sound_control(PlayerDie,a5[2]);
      sound_control(InvaderDie,a5[3]);
      sound_control(ExtraLife,a5[4]);
      #0AED
      sound_control(FleetMovement1,a5[0]);
      sound_control(FleetMovement2,a5[1]);
      sound_control(FleetMovement3,a5[2]);
      sound_control(FleetMovement4,a5[3]);
      sound_control(UfoHit,a5[4]);
      #0AEF
      let:16 a6 = (-1 + (SPH,SPL)) in
      M[a6] := 0A;
      let:16 a7 = (-1 + a6) in
      M[a7] := F2;
      #return-to: 0AF2
      #1982
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a8 = (-1 + a7) in
          M[a8] := 19;
          let:16 a9 = (-1 + a8) in
          M[a9] := 82;
          A := a5;
          SPH := a9[15:8];
          SPL := a9[7:0];
          FlagS := a5[7];
          FlagZ := is_zero(a5);
          FlagA := false;
          FlagP := parity(a5);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a10 = (-1 + a7) in
          M[a10] := 19;
          let:16 a11 = (-1 + a10) in
          M[a11] := 82;
          A := a5;
          SPH := a11[15:8];
          SPL := a11[7:0];
          FlagS := a5[7];
          FlagZ := is_zero(a5);
          FlagA := false;
          FlagP := parity(a5);
          FlagCY := false;
          jump (0010);
        }
      } else {
        M[20C1] := a5;
        #1985
        let:16 a12 = (1 + a7) in
        let:16 a13 = (1 + a12) in
        A := a5;
        SPH := a13[15:8];
        SPL := a13[7:0];
        FlagS := a5[7];
        FlagZ := is_zero(a5);
        FlagA := false;
        FlagP := parity(a5);
        FlagCY := false;
        jump ((M[a12],M[a7]));
      }
    }

18E7:

    #18EA
    #18ED
    #18EE
    if (!M[2067][0]) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      A := updateBit((M[2067] >> 01),7,M[2067][0]);
      H := 20;
      L := E7;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagCY := M[2067][0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      #18EF
      #18F0
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := updateBit((M[2067] >> 01),7,M[2067][0]);
      H := 20;
      L := E8;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagCY := M[2067][0];
      jump ((M[a3],M[(SPH,SPL)]));
    }

18FA:

    #18FD
    let:8 a1 = (B | M[2094]) in
    #18FE
    M[2094] := a1;
    #1901
    sound_control(Ufo,a1[0]);
    sound_control(Shot,a1[1]);
    sound_control(PlayerDie,a1[2]);
    sound_control(InvaderDie,a1[3]);
    sound_control(ExtraLife,a1[4]);
    #1903
    let:16 a2 = (1 + (SPH,SPL)) in
    let:16 a3 = (1 + a2) in
    A := a1;
    SPH := a3[15:8];
    SPL := a3[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump ((M[a2],M[(SPH,SPL)]));

1904:

    #1907
    H := 22;
    L := 00;
    jump (01C3);

190A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 0D;
    #return-to: 190D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14D8);

190D:

    #1597
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a1 = (-1 + (SPH,SPL)) in
        M[a1] := 15;
        let:16 a2 = (-1 + a1) in
        M[a2] := 97;
        SPH := a2[15:8];
        SPL := a2[7:0];
        jump (0008);
      } else {
        let:16 a3 = (-1 + (SPH,SPL)) in
        M[a3] := 15;
        let:16 a4 = (-1 + a3) in
        M[a4] := 97;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0010);
      }
    } else {
      #159A
      let:8 a5 = (M[200D] & M[200D]) in
      let:8 a6 = (M[200D] | M[200D]) in
      #159B
      if (!is_zero(a5)) {
        #15B7
        if ((g_time_to_wakeup && g_interrupts_enabled)) {
          disable_interrupts()
          if (g_half_frame) {
            let:16 a7 = (-1 + (SPH,SPL)) in
            M[a7] := 15;
            let:16 a8 = (-1 + a7) in
            M[a8] := B7;
            A := a5;
            SPH := a8[15:8];
            SPL := a8[7:0];
            FlagS := a5[7];
            FlagZ := is_zero(a5);
            FlagA := a6[3];
            FlagP := parity(a5);
            FlagCY := false;
            jump (0008);
          } else {
            let:16 a9 = (-1 + (SPH,SPL)) in
            M[a9] := 15;
            let:16 a10 = (-1 + a9) in
            M[a10] := B7;
            A := a5;
            SPH := a10[15:8];
            SPL := a10[7:0];
            FlagS := a5[7];
            FlagZ := is_zero(a5);
            FlagA := a6[3];
            FlagP := parity(a5);
            FlagCY := false;
            jump (0010);
          }
        } else {
          #15BA
          let:16 a11 = (-1 + (SPH,SPL)) in
          M[a11] := 15;
          let:16 a12 = (-1 + a11) in
          M[a12] := BD;
          #return-to: 15BD
          A := a5;
          H := 25;
          L := 24;
          SPH := a12[15:8];
          SPL := a12[7:0];
          FlagS := a5[7];
          FlagZ := is_zero(a5);
          FlagA := a6[3];
          FlagP := parity(a5);
          FlagCY := false;
          jump (15C5);
        }
      } else {
        #159E
        #15A1
        let:16 a13 = (-1 + (SPH,SPL)) in
        M[a13] := 15;
        let:16 a14 = (-1 + a13) in
        M[a14] := A4;
        #return-to: 15A4
        A := a5;
        H := 3E;
        L := A4;
        SPH := a14[15:8];
        SPL := a14[7:0];
        FlagS := a5[7];
        FlagZ := is_zero(a5);
        FlagA := a6[3];
        FlagP := parity(a5);
        FlagCY := false;
        jump (15C5);
      }
    }

1910:

    #1913
    #1916
    #1917
    if (M[2067][0]) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      A := updateBit((M[2067] >> 01),7,M[2067][0]);
      H := 20;
      L := E7;
      SPH := a2[15:8];
      SPL := a2[7:0];
      FlagCY := M[2067][0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      #1918
      #1919
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := updateBit((M[2067] >> 01),7,M[2067][0]);
      H := 20;
      L := E8;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagCY := M[2067][0];
      jump ((M[a3],M[(SPH,SPL)]));
    }

1925:

    #1928
    H := 20;
    L := F8;
    jump (1931);

192B:

    #192E
    H := 20;
    L := FC;
    jump (1931);

1931:

    #1932
    let:16 a1 = (1 + (H,L)) in
    #1933
    #1934
    let:16 a2 = (1 + a1) in
    #1935
    #1936
    let:16 a3 = (1 + a2) in
    #1937
    #1938
    #1939
    A := M[a2];
    D := M[a1];
    E := M[(H,L)];
    H := M[a3];
    L := M[a2];
    jump (09AD);

193C:

    #193E
    #1941
    #1944
    C := 07;
    D := 1F;
    E := A9;
    H := 35;
    L := 01;
    jump (08F3);

1947:

    #194A
    #194D
    A := M[20EB];
    H := 3C;
    L := 01;
    jump (09B2);

1950:

    #1953
    H := 20;
    L := F4;
    jump (1931);

1956:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 59;
    #return-to: 1959
    #1A5C
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 1A;
        let:16 a4 = (-1 + a3) in
        M[a4] := 5C;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 1A;
        let:16 a6 = (-1 + a5) in
        M[a6] := 5C;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      H := 24;
      L := 00;
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (1A5F);
    }

1959:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5C;
    #return-to: 195C
    #191A
    if ((g_time_to_wakeup && g_interrupts_enabled)) {
      disable_interrupts()
      if (g_half_frame) {
        let:16 a3 = (-1 + a2) in
        M[a3] := 19;
        let:16 a4 = (-1 + a3) in
        M[a4] := 1A;
        SPH := a4[15:8];
        SPL := a4[7:0];
        jump (0008);
      } else {
        let:16 a5 = (-1 + a2) in
        M[a5] := 19;
        let:16 a6 = (-1 + a5) in
        M[a6] := 1A;
        SPH := a6[15:8];
        SPL := a6[7:0];
        jump (0010);
      }
    } else {
      #191C
      #191F
      #1922
      C := 1C;
      D := 1A;
      E := E4;
      H := 24;
      L := 1E;
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (08F3);
    }

195C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5F;
    #return-to: 195F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1925);

195F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 62;
    #return-to: 1962
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (192B);

1962:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 65;
    #return-to: 1965
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1950);

1965:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 68;
    #return-to: 1968
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (193C);

1968:

    jump (1947);

196E:

    jump (1671);

197C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7F;
    #return-to: 197F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1947);

197F:

    jump (193C);

19AC:

    #19AE
    let:8 a1 = (76 & updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
    let:8 a2 = (76 | updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right))) in
    #19B0
    let:16 a3 = addWithCarry(!false,a1,~34) in
    let:8 a4 = (a1 & 0F) in
    let:8 a5 = (~34 & 0F) in
    let:16 a6 = addWithCarry(!false,a4,a5) in
    #19B2
    if (!is_zero(a3[7:0])) {
      let:16 a7 = (1 + (SPH,SPL)) in
      let:16 a8 = (1 + a7) in
      A := a1;
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := !a3[15:8][0];
      jump ((M[a7],M[(SPH,SPL)]));
    } else {
      #19B3
      #19B6
      #19B9
      #19BB
      A := a1;
      C := 09;
      D := 0B;
      E := F7;
      H := 2E;
      L := 1B;
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      FlagCY := !a3[15:8][0];
      jump (08F3);
    }

19D1:

    A := 01;
    jump (19D3);

19D3:

    M[20E9] := A;
    #19D6
    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

19D7:

    let:8 a1 = (A ^ A) in
    #19D8
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (19D3);

19DC:

    #19DF
    let:8 a1 = (B & M[2094]) in
    let:8 a2 = (B | M[2094]) in
    #19E0
    M[2094] := a1;
    #19E3
    sound_control(Ufo,a1[0]);
    sound_control(Shot,a1[1]);
    sound_control(PlayerDie,a1[2]);
    sound_control(InvaderDie,a1[3]);
    sound_control(ExtraLife,a1[4]);
    #19E5
    let:16 a3 = (1 + (SPH,SPL)) in
    let:16 a4 = (1 + a3) in
    A := a1;
    SPH := a4[15:8];
    SPL := a4[7:0];
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump ((M[a3],M[(SPH,SPL)]));

19EC:

    #19EF
    #19F1
    #19F2
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := F5;
    #return-to: 19F5
    B := 10;
    C := A;
    D := 1C;
    E := 60;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1439);

19F5:

    #19F6
    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    #19F7
    if (!is_zero(a1[7:0])) {
      A := a1[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (19EC);
    } else {
      A := a1[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      jump (19FA);
    }

19FA:

    #19FC
    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := FF;
    #return-to: 19FF
    B := 10;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14CB);

19FF:

    #1A00
    let:16 a1 = addWithCarry(!false,H,~35) in
    let:8 a2 = (H & 0F) in
    let:8 a3 = (~35 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    #1A02
    if (!is_zero(a1[7:0])) {
      A := H;
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump (19FA);
    } else {
      #1A05
      let:16 a5 = (1 + (SPH,SPL)) in
      let:16 a6 = (1 + a5) in
      A := H;
      SPH := a6[15:8];
      SPL := a6[7:0];
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := !a1[15:8][0];
      jump ((M[a5],M[(SPH,SPL)]));
    }

1A06:

    #1A09
    #1A0A
    #1A0B
    let:8 a1 = (80 & M[(D,E)]) in
    let:8 a2 = (80 | M[(D,E)]) in
    #1A0D
    let:8 a3 = (M[2072] ^ a1) in
    #1A0E
    if (!is_zero(a3)) {
      let:16 a4 = (1 + (SPH,SPL)) in
      let:16 a5 = (1 + a4) in
      A := a3;
      B := M[2072];
      H := 20;
      L := 72;
      SPH := a5[15:8];
      SPL := a5[7:0];
      FlagS := a3[7];
      FlagZ := is_zero(a3);
      FlagA := false;
      FlagP := parity(a3);
      FlagCY := false;
      jump ((M[a4],M[(SPH,SPL)]));
    } else {
      #1A0F
      #1A10
      let:16 a6 = (1 + (SPH,SPL)) in
      let:16 a7 = (1 + a6) in
      A := a3;
      B := M[2072];
      H := 20;
      L := 72;
      SPH := a7[15:8];
      SPL := a7[7:0];
      FlagS := a3[7];
      FlagZ := is_zero(a3);
      FlagA := false;
      FlagP := parity(a3);
      FlagCY := true;
      jump ((M[a6],M[(SPH,SPL)]));
    }

1A32:

    #1A33
    M[(H,L)] := M[(D,E)];
    #1A34
    let:16 a1 = (1 + (H,L)) in
    #1A35
    let:16 a2 = (1 + (D,E)) in
    #1A36
    let:16 a3 = addWithCarry(!true,B,~00) in
    let:8 a4 = (B & 0F) in
    let:8 a5 = (~00 & 0F) in
    let:16 a6 = addWithCarry(!true,a4,a5) in
    #1A37
    if (!is_zero(a3[7:0])) {
      A := M[(D,E)];
      B := a3[7:0];
      D := a2[15:8];
      E := a2[7:0];
      H := a1[15:8];
      L := a1[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump (1A32);
    } else {
      #1A3A
      let:16 a7 = (1 + (SPH,SPL)) in
      let:16 a8 = (1 + a7) in
      A := M[(D,E)];
      B := a3[7:0];
      D := a2[15:8];
      E := a2[7:0];
      H := a1[15:8];
      L := a1[7:0];
      SPH := a8[15:8];
      SPL := a8[7:0];
      FlagS := a3[7:0][7];
      FlagZ := is_zero(a3[7:0]);
      FlagA := a6[7:0][4];
      FlagP := parity(a3[7:0]);
      jump ((M[a7],M[(SPH,SPL)]));
    }

1A3B:

    #1A3C
    let:16 a1 = (1 + (H,L)) in
    #1A3D
    #1A3E
    let:16 a2 = (1 + a1) in
    #1A3F
    #1A40
    let:16 a3 = (1 + a2) in
    #1A41
    #1A42
    let:16 a4 = (1 + a3) in
    #1A43
    #1A44
    #1A45
    #1A46
    let:16 a5 = (1 + (SPH,SPL)) in
    let:16 a6 = (1 + a5) in
    A := M[a2];
    B := M[a4];
    C := M[a3];
    D := M[a1];
    E := M[(H,L)];
    H := M[a3];
    L := M[a2];
    SPH := a6[15:8];
    SPL := a6[7:0];
    jump ((M[a5],M[(SPH,SPL)]));

1A47:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #1A48
    B := 03;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A4A);

1A4A:

    #1A4B
    #1A4C
    #1A4D
    #1A4E
    #1A4F
    #1A50
    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    #1A51
    if (!is_zero(a1[7:0])) {
      A := updateBit((L >> 01),7,H[0]);
      B := a1[7:0];
      H := updateBit((H >> 01),7,FlagCY);
      L := updateBit((L >> 01),7,H[0]);
      FlagS := a1[7:0][7];
      FlagZ := is_zero(a1[7:0]);
      FlagA := a4[7:0][4];
      FlagP := parity(a1[7:0]);
      FlagCY := L[0];
      jump (1A4A);
    } else {
      #1A54
      #1A55
      let:8 a5 = (3F & updateBit((H >> 01),7,FlagCY)) in
      let:8 a6 = (3F | updateBit((H >> 01),7,FlagCY)) in
      #1A57
      let:8 a7 = (20 | a5) in
      #1A59
      #1A5A
      let:16 a8 = (1 + (SPH,SPL)) in
      let:16 a9 = (1 + a8) in
      #1A5B
      let:16 a10 = (1 + a9) in
      let:16 a11 = (1 + a10) in
      A := a7;
      B := M[a8];
      C := M[(SPH,SPL)];
      H := a7;
      L := updateBit((L >> 01),7,H[0]);
      SPH := a11[15:8];
      SPL := a11[7:0];
      FlagS := a7[7];
      FlagZ := is_zero(a7);
      FlagA := false;
      FlagP := parity(a7);
      FlagCY := false;
      jump ((M[a10],M[a9]));
    }

1A5F:

    M[(H,L)] := 00;
    #1A61
    let:16 a1 = (1 + (H,L)) in
    #1A62
    #1A63
    let:16 a2 = addWithCarry(!false,a1[15:8],~40) in
    let:8 a3 = (a1[15:8] & 0F) in
    let:8 a4 = (~40 & 0F) in
    let:16 a5 = addWithCarry(!false,a3,a4) in
    #1A65
    if (!is_zero(a2[7:0])) {
      A := a1[15:8];
      H := a1[15:8];
      L := a1[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      FlagCY := !a2[15:8][0];
      jump (1A5F);
    } else {
      #1A68
      let:16 a6 = (1 + (SPH,SPL)) in
      let:16 a7 = (1 + a6) in
      A := a1[15:8];
      H := a1[15:8];
      L := a1[7:0];
      SPH := a7[15:8];
      SPL := a7[7:0];
      FlagS := a2[7:0][7];
      FlagZ := is_zero(a2[7:0]);
      FlagA := a5[7:0][4];
      FlagP := parity(a2[7:0]);
      FlagCY := !a2[15:8][0];
      jump ((M[a6],M[(SPH,SPL)]));
    }

1A69:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    #1A6A
    let:16 a3 = (-1 + a2) in
    M[a3] := H;
    let:16 a4 = (-1 + a3) in
    M[a4] := L;
    SPH := a4[15:8];
    SPL := a4[7:0];
    jump (1A6B);

1A6B:

    #1A6C
    let:8 a1 = (M[(H,L)] | M[(D,E)]) in
    #1A6D
    M[(H,L)] := a1;
    #1A6E
    let:16 a2 = (1 + (D,E)) in
    #1A6F
    let:16 a3 = (1 + (H,L)) in
    #1A70
    let:16 a4 = addWithCarry(!true,C,~00) in
    let:8 a5 = (C & 0F) in
    let:8 a6 = (~00 & 0F) in
    let:16 a7 = addWithCarry(!true,a5,a6) in
    #1A71
    if (!is_zero(a4[7:0])) {
      A := a1;
      C := a4[7:0];
      D := a2[15:8];
      E := a2[7:0];
      H := a3[15:8];
      L := a3[7:0];
      FlagS := a4[7:0][7];
      FlagZ := is_zero(a4[7:0]);
      FlagA := a7[7:0][4];
      FlagP := parity(a4[7:0]);
      FlagCY := false;
      jump (1A6B);
    } else {
      #1A74
      let:16 a8 = (1 + (SPH,SPL)) in
      let:16 a9 = (1 + a8) in
      #1A75
      #1A78
      let:17 a10 = add17(0020,(M[a8],M[(SPH,SPL)])) in
      #1A79
      let:16 a11 = (1 + a9) in
      let:16 a12 = (1 + a11) in
      #1A7A
      let:16 a13 = addWithCarry(!true,M[a11],~00) in
      let:8 a14 = (M[a11] & 0F) in
      let:8 a15 = (~00 & 0F) in
      let:16 a16 = addWithCarry(!true,a14,a15) in
      #1A7B
      if (!is_zero(a13[7:0])) {
        A := a1;
        B := a13[7:0];
        C := M[a9];
        D := a2[15:8];
        E := a2[7:0];
        H := a10[15:0][15:8];
        L := a10[15:0][7:0];
        SPH := a12[15:8];
        SPL := a12[7:0];
        FlagS := a13[7:0][7];
        FlagZ := is_zero(a13[7:0]);
        FlagA := a16[7:0][4];
        FlagP := parity(a13[7:0]);
        FlagCY := a10[16];
        jump (1A69);
      } else {
        #1A7E
        let:16 a17 = (1 + a12) in
        let:16 a18 = (1 + a17) in
        A := a1;
        B := a13[7:0];
        C := M[a9];
        D := a2[15:8];
        E := a2[7:0];
        H := a10[15:0][15:8];
        L := a10[15:0][7:0];
        SPH := a18[15:8];
        SPL := a18[7:0];
        FlagS := a13[7:0][7];
        FlagZ := is_zero(a13[7:0]);
        FlagA := a16[7:0][4];
        FlagP := parity(a13[7:0]);
        FlagCY := a10[16];
        jump ((M[a17],M[a12]));
      }
    }

1A7F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 1A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 82;
    #return-to: 1A82
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (092E);

1A82:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    #1A83
    if (is_zero(a1)) {
      let:16 a3 = (1 + (SPH,SPL)) in
      let:16 a4 = (1 + a3) in
      A := a1;
      SPH := a4[15:8];
      SPL := a4[7:0];
      FlagS := a1[7];
      FlagZ := is_zero(a1);
      FlagA := a2[3];
      FlagP := parity(a1);
      FlagCY := false;
      jump ((M[a3],M[(SPH,SPL)]));
    } else {
      #1A84
      let:16 a5 = (-1 + (SPH,SPL)) in
      M[a5] := a1;
      let:16 a6 = (-1 + a5) in
      M[a6] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,a1[7]),6,is_zero(a1)),4,a2[3]),2,parity(a1)),0,false);
      #1A85
      let:16 a7 = addWithCarry(!true,a1,~00) in
      let:8 a8 = (a1 & 0F) in
      let:8 a9 = (~00 & 0F) in
      let:16 a10 = addWithCarry(!true,a8,a9) in
      #1A86
      M[(H,L)] := a7[7:0];
      #1A87
      let:16 a11 = (-1 + a6) in
      M[a11] := 1A;
      let:16 a12 = (-1 + a11) in
      M[a12] := 8A;
      #return-to: 1A8A
      #19E6
      if ((g_time_to_wakeup && g_interrupts_enabled)) {
        disable_interrupts()
        if (g_half_frame) {
          let:16 a13 = (-1 + a12) in
          M[a13] := 19;
          let:16 a14 = (-1 + a13) in
          M[a14] := E6;
          A := a7[7:0];
          SPH := a14[15:8];
          SPL := a14[7:0];
          FlagS := a7[7:0][7];
          FlagZ := is_zero(a7[7:0]);
          FlagA := a10[7:0][4];
          FlagP := parity(a7[7:0]);
          FlagCY := false;
          jump (0008);
        } else {
          let:16 a15 = (-1 + a12) in
          M[a15] := 19;
          let:16 a16 = (-1 + a15) in
          M[a16] := E6;
          A := a7[7:0];
          SPH := a16[15:8];
          SPL := a16[7:0];
          FlagS := a7[7:0][7];
          FlagZ := is_zero(a7[7:0]);
          FlagA := a10[7:0][4];
          FlagP := parity(a7[7:0]);
          FlagCY := false;
          jump (0010);
        }
      } else {
        #19E9
        if (is_zero(a7[7:0])) {
          A := a7[7:0];
          H := 27;
          L := 01;
          SPH := a12[15:8];
          SPL := a12[7:0];
          FlagS := a7[7:0][7];
          FlagZ := is_zero(a7[7:0]);
          FlagA := a10[7:0][4];
          FlagP := parity(a7[7:0]);
          FlagCY := false;
          jump (19FA);
        } else {
          A := a7[7:0];
          H := 27;
          L := 01;
          SPH := a12[15:8];
          SPL := a12[7:0];
          FlagS := a7[7:0][7];
          FlagZ := is_zero(a7[7:0]);
          FlagA := a10[7:0][4];
          FlagP := parity(a7[7:0]);
          FlagCY := false;
          jump (19EC);
        }
      }
    }

1A8A:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[a1];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagS := M[(SPH,SPL)][7];
    FlagZ := M[(SPH,SPL)][6];
    FlagA := M[(SPH,SPL)][4];
    FlagP := M[(SPH,SPL)][2];
    FlagCY := M[(SPH,SPL)][0];
    jump (1A8B);

1A8B:

    #1A8E
    let:8 a1 = (0F & A) in
    let:8 a2 = (0F | A) in
    #1A90
    A := a1;
    H := 25;
    L := 01;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (09C5);
