
0000:

    jump (0001);

0001:

    jump (0002);

0002:

    jump (0003);

0003:

    jump (18D4);

0008:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0009);

0009:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (000A);

000A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (000B);

000B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (000C);

000C:

    jump (008C);

0010:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0011);

0011:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0012);

0012:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0013);

0013:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0014);

0014:

    A := 80;
    jump (0016);

0016:

    M[2072] := A;
    jump (0019);

0019:

    H := 20;
    L := C0;
    jump (001C);

001C:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (001D);

001D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 20;
    #return-to: 0020
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (17CD);

0020:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
    jump (0022);

0022:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (0023);

0023:

    if (FlagCY) {
      jump (0067);
    } else {
      jump (0026);
    }

0026:

    A := M[20EA];
    jump (0029);

0029:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (002A);

002A:

    if (FlagZ) {
      jump (0042);
    } else {
      jump (002D);
    }

002D:

    A := M[20EB];
    jump (0030);

0030:

    let:16 a1 = addWithCarry(!false,A,~99) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~99 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0032);

0032:

    if (FlagZ) {
      jump (003E);
    } else {
      jump (0035);
    }

0035:

    let:16 a1 = addWithCarry(false,01,A) in
    let:8 a2 = (01 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (0037);

0037:

    let:8 a1 = (A & 0F) in
    let:16 a2 = addWithCarry(false,a1,06) in
    let:16 a3 = addWithCarry(((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1)[4],(A >> 04),00) in
    let:16 a4 = addWithCarry(false,a3[7:0],06) in
    let:8 a5 = (((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1) & 0F) in
    let:8 a6 = ((((((a3[7:0][1] || a3[7:0][2]) && a3[7:0][3]) || FlagCY) ? a4[7:0] : a3[7:0]) << 04) | a5) in
    A := a6;
    FlagS := a6[7];
    FlagZ := is_zero(a6);
    FlagA := ((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1)[4];
    FlagP := parity(a6);
    FlagCY := (((((a3[7:0][1] || a3[7:0][2]) && a3[7:0][3]) || FlagCY) ? a4[7:0] : a3[7:0])[4] || FlagCY);
    jump (0038);

0038:

    M[20EB] := A;
    jump (003B);

003B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3E;
    #return-to: 003E
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1947);

003E:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (003F);

003F:

    M[20EA] := A;
    jump (0042);

0042:

    A := M[20E9];
    jump (0045);

0045:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0046);

0046:

    if (FlagZ) {
      jump (0082);
    } else {
      jump (0049);
    }

0049:

    A := M[20EF];
    jump (004C);

004C:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (004D);

004D:

    if (!FlagZ) {
      jump (006F);
    } else {
      jump (0050);
    }

0050:

    A := M[20EB];
    jump (0053);

0053:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0054);

0054:

    if (!FlagZ) {
      jump (005D);
    } else {
      jump (0057);
    }

0057:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5A;
    #return-to: 005A
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0ABF);

005A:

    jump (0082);

005D:

    A := M[2093];
    jump (0060);

0060:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0061);

0061:

    if (!FlagZ) {
      jump (0082);
    } else {
      jump (0064);
    }

0064:

    jump (0765);

0067:

    A := 01;
    jump (0069);

0069:

    M[20EA] := A;
    jump (006C);

006C:

    jump (003F);

006F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 72;
    #return-to: 0072
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1740);

0072:

    A := M[2032];
    jump (0075);

0075:

    M[2080] := A;
    jump (0078);

0078:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7B;
    #return-to: 007B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0100);

007B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7E;
    #return-to: 007E
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0248);

007E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := 81;
    #return-to: 0081
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0913);

0081:

    jump (0082);

0082:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0083);

0083:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    D := M[a1];
    E := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0084);

0084:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0085);

0085:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[a1];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagS := M[(SPH,SPL)][7];
    FlagZ := M[(SPH,SPL)][6];
    FlagA := M[(SPH,SPL)][4];
    FlagP := M[(SPH,SPL)][2];
    FlagCY := M[(SPH,SPL)][0];
    jump (0086);

0086:

    enable_interrupts()
    jump (0087);

0087:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

008C:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (008D);

008D:

    M[2072] := A;
    jump (0090);

0090:

    A := M[20E9];
    jump (0093);

0093:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0094);

0094:

    if (FlagZ) {
      jump (0082);
    } else {
      jump (0097);
    }

0097:

    A := M[20EF];
    jump (009A);

009A:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (009B);

009B:

    if (!FlagZ) {
      jump (00A5);
    } else {
      jump (009E);
    }

009E:

    A := M[20C1];
    jump (00A1);

00A1:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (00A2);

00A2:

    if (!FlagCY) {
      jump (0082);
    } else {
      jump (00A5);
    }

00A5:

    H := 20;
    L := 20;
    jump (00A8);

00A8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := AB;
    #return-to: 00AB
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (024B);

00AB:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := AE;
    #return-to: 00AE
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0141);

00AE:

    jump (0082);

00B1:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 00;
    let:16 a2 = (-1 + a1) in
    M[a2] := B4;
    #return-to: 00B4
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0886);

00B4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (00B5);

00B5:

    A := M[(H,L)];
    jump (00B6);

00B6:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (00B7);

00B7:

    H := M[(H,L)];
    jump (00B8);

00B8:

    L := A;
    jump (00B9);

00B9:

    M[2009] := L;
    M[200A] := H;
    jump (00BC);

00BC:

    M[200B] := L;
    M[200C] := H;
    jump (00BF);

00BF:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (00C0);

00C0:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (00C1);

00C1:

    A := M[(H,L)];
    jump (00C2);

00C2:

    let:16 a1 = addWithCarry(!false,A,~03) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~03 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (00C4);

00C4:

    if (!FlagZ) {
      jump (00C8);
    } else {
      jump (00C7);
    }

00C7:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (00C8);

00C8:

    M[2008] := A;
    jump (00CB);

00CB:

    let:16 a1 = addWithCarry(!false,A,~FE) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~FE & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (00CD);

00CD:

    A := 00;
    jump (00CF);

00CF:

    if (!FlagZ) {
      jump (00D3);
    } else {
      jump (00D2);
    }

00D2:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (00D3);

00D3:

    M[200D] := A;
    jump (00D6);

00D6:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

00D7:

    A := 02;
    jump (00D9);

00D9:

    M[21FB] := A;
    jump (00DC);

00DC:

    M[22FB] := A;
    jump (00DF);

00DF:

    jump (08E4);

0100:

    H := 20;
    L := 02;
    jump (0103);

0103:

    A := M[(H,L)];
    jump (0104);

0104:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0105);

0105:

    if (!FlagZ) {
      jump (1538);
    } else {
      jump (0108);
    }

0108:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0109);

0109:

    A := M[2006];
    jump (010C);

010C:

    L := A;
    jump (010D);

010D:

    A := M[2067];
    jump (0110);

0110:

    H := A;
    jump (0111);

0111:

    A := M[(H,L)];
    jump (0112);

0112:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0113);

0113:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0114);

0114:

    if (FlagZ) {
      jump (0136);
    } else {
      jump (0117);
    }

0117:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0118);

0118:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0119);

0119:

    A := M[(H,L)];
    jump (011A);

011A:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (011B);

011B:

    B := M[(H,L)];
    jump (011C);

011C:

    let:8 a1 = (FE & A) in
    let:8 a2 = (FE | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (011E);

011E:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (011F);

011F:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (0120);

0120:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (0121);

0121:

    E := A;
    jump (0122);

0122:

    D := 00;
    jump (0124);

0124:

    H := 1C;
    L := 00;
    jump (0127);

0127:

    let:17 a1 = add17((D,E),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (0128);

0128:

    D := H;
    E := L;
    H := D;
    L := E;
    jump (0129);

0129:

    A := B;
    jump (012A);

012A:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (012B);

012B:

    if (!FlagZ) {
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 01;
      let:16 a2 = (-1 + a1) in
      M[a2] := 2E;
      #return-to: 012E
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (013B);
    } else {
      jump (012E);
    }

012E:

    H := M[200C];
    L := M[200B];
    jump (0131);

0131:

    B := 10;
    jump (0133);

0133:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 01;
    let:16 a2 = (-1 + a1) in
    M[a2] := 36;
    #return-to: 0136
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15D3);

0136:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0137);

0137:

    M[2000] := A;
    jump (013A);

013A:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

013B:

    H := 00;
    L := 30;
    jump (013E);

013E:

    let:17 a1 = add17((D,E),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (013F);

013F:

    D := H;
    E := L;
    H := D;
    L := E;
    jump (0140);

0140:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0141:

    A := M[2068];
    jump (0144);

0144:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0145);

0145:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0146);
    }

0146:

    A := M[2000];
    jump (0149);

0149:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (014A);

014A:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (014B);
    }

014B:

    A := M[2067];
    jump (014E);

014E:

    H := A;
    jump (014F);

014F:

    A := M[2006];
    jump (0152);

0152:

    D := 02;
    jump (0154);

0154:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0155);

0155:

    let:16 a1 = addWithCarry(!false,A,~37) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~37 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0157);

0157:

    if (FlagZ) {
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 01;
      let:16 a2 = (-1 + a1) in
      M[a2] := 5A;
      #return-to: 015A
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (01A1);
    } else {
      jump (015A);
    }

015A:

    L := A;
    jump (015B);

015B:

    B := M[(H,L)];
    jump (015C);

015C:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (015D);

015D:

    if (!FlagZ) {
      jump (0154);
    } else {
      jump (0160);
    }

0160:

    M[2006] := A;
    jump (0163);

0163:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 01;
    let:16 a2 = (-1 + a1) in
    M[a2] := 66;
    #return-to: 0166
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (017A);

0166:

    H := C;
    jump (0167);

0167:

    M[200B] := L;
    M[200C] := H;
    jump (016A);

016A:

    A := L;
    jump (016B);

016B:

    let:16 a1 = addWithCarry(!false,A,~28) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~28 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (016D);

016D:

    if (FlagCY) {
      jump (1971);
    } else {
      jump (0170);
    }

0170:

    A := D;
    jump (0171);

0171:

    M[2004] := A;
    jump (0174);

0174:

    A := 01;
    jump (0176);

0176:

    M[2000] := A;
    jump (0179);

0179:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

017A:

    D := 00;
    jump (017C);

017C:

    A := L;
    jump (017D);

017D:

    H := 20;
    L := 09;
    jump (0180);

0180:

    B := M[(H,L)];
    jump (0181);

0181:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0182);

0182:

    C := M[(H,L)];
    jump (0183);

0183:

    let:16 a1 = addWithCarry(!false,A,~0B) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~0B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0185);

0185:

    if (FlagS) {
      jump (0194);
    } else {
      jump (0188);
    }

0188:

    let:16 a1 = addWithCarry(!FlagCY,A,~0B) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~0B & 0F) in
    let:16 a4 = addWithCarry(!FlagCY,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (018A);

018A:

    E := A;
    jump (018B);

018B:

    A := B;
    jump (018C);

018C:

    let:16 a1 = addWithCarry(false,10,A) in
    let:8 a2 = (10 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (018E);

018E:

    B := A;
    jump (018F);

018F:

    A := E;
    jump (0190);

0190:

    let:16 a1 = addWithCarry(true,D,00) in
    let:8 a2 = (D & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    D := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0191);

0191:

    jump (0183);

0194:

    L := B;
    jump (0195);

0195:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0196);

0196:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0197);
    }

0197:

    E := A;
    jump (0198);

0198:

    A := C;
    jump (0199);

0199:

    let:16 a1 = addWithCarry(false,10,A) in
    let:8 a2 = (10 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (019B);

019B:

    C := A;
    jump (019C);

019C:

    A := E;
    jump (019D);

019D:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (019E);

019E:

    jump (0195);

01A1:

    let:16 a1 = addWithCarry(!true,D,~00) in
    let:8 a2 = (D & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    D := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (01A2);

01A2:

    if (FlagZ) {
      jump (01CD);
    } else {
      jump (01A5);
    }

01A5:

    H := 20;
    L := 06;
    jump (01A8);

01A8:

    M[(H,L)] := 00;
    jump (01AA);

01AA:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (01AB);

01AB:

    C := M[(H,L)];
    jump (01AC);

01AC:

    M[(H,L)] := 00;
    jump (01AE);

01AE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 01;
    let:16 a2 = (-1 + a1) in
    M[a2] := B1;
    #return-to: 01B1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01D9);

01B1:

    H := 20;
    L := 05;
    jump (01B4);

01B4:

    A := M[(H,L)];
    jump (01B5);

01B5:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (01B6);

01B6:

    let:8 a1 = (01 & A) in
    let:8 a2 = (01 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (01B8);

01B8:

    M[(H,L)] := A;
    jump (01B9);

01B9:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (01BA);

01BA:

    H := 20;
    L := 67;
    jump (01BD);

01BD:

    H := M[(H,L)];
    jump (01BE);

01BE:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

01C0:

    H := 21;
    L := 00;
    jump (01C3);

01C3:

    B := 37;
    jump (01C5);

01C5:

    M[(H,L)] := 01;
    jump (01C7);

01C7:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (01C8);

01C8:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (01C9);

01C9:

    if (!FlagZ) {
      jump (01C5);
    } else {
      jump (01CC);
    }

01CC:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

01CD:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01CE);

01CE:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

01CF:

    A := 01;
    jump (01D1);

01D1:

    B := E0;
    jump (01D3);

01D3:

    H := 24;
    L := 02;
    jump (01D6);

01D6:

    jump (14CC);

01D9:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (01DA);

01DA:

    B := M[(H,L)];
    jump (01DB);

01DB:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (01DC);

01DC:

    A := C;
    jump (01DD);

01DD:

    let:16 a1 = addWithCarry(false,M[(H,L)],A) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (01DE);

01DE:

    M[(H,L)] := A;
    jump (01DF);

01DF:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (01E0);

01E0:

    A := B;
    jump (01E1);

01E1:

    let:16 a1 = addWithCarry(false,M[(H,L)],A) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (01E2);

01E2:

    M[(H,L)] := A;
    jump (01E3);

01E3:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

01E4:

    B := C0;
    jump (01E6);

01E6:

    D := 1B;
    E := 00;
    jump (01E9);

01E9:

    H := 20;
    L := 00;
    jump (01EC);

01EC:

    jump (1A32);

01EF:

    H := 21;
    L := 42;
    jump (01F2);

01F2:

    jump (01F8);

01F5:

    H := 22;
    L := 42;
    jump (01F8);

01F8:

    C := 04;
    jump (01FA);

01FA:

    D := 1D;
    E := 20;
    jump (01FD);

01FD:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01FE);

01FE:

    B := 2C;
    jump (0200);

0200:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := 03;
    #return-to: 0203
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A32);

0203:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    D := M[a1];
    E := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0204);

0204:

    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0205);

0205:

    if (!FlagZ) {
      jump (01FD);
    } else {
      jump (0208);
    }

0208:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0209:

    A := 01;
    jump (020B);

020B:

    jump (021B);

020E:

    A := 01;
    jump (0210);

0210:

    jump (0214);

0213:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0214);

0214:

    D := 22;
    E := 42;
    jump (0217);

0217:

    jump (021E);

021A:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (021B);

021B:

    D := 21;
    E := 42;
    jump (021E);

021E:

    M[2081] := A;
    jump (0221);

0221:

    B := 16;
    C := 02;
    jump (0224);

0224:

    H := 28;
    L := 06;
    jump (0227);

0227:

    A := 04;
    jump (0229);

0229:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (022A);

022A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (022B);

022B:

    A := M[2081];
    jump (022E);

022E:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (022F);

022F:

    if (!FlagZ) {
      jump (0242);
    } else {
      jump (0232);
    }

0232:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := 35;
    #return-to: 0235
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A69);

0235:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0236);

0236:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[a1];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagS := M[(SPH,SPL)][7];
    FlagZ := M[(SPH,SPL)][6];
    FlagA := M[(SPH,SPL)][4];
    FlagP := M[(SPH,SPL)][2];
    FlagCY := M[(SPH,SPL)][0];
    jump (0237);

0237:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0238);

0238:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0239);
    }

0239:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (023A);

023A:

    D := 02;
    E := E0;
    jump (023D);

023D:

    let:17 a1 = add17((D,E),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (023E);

023E:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    D := M[a1];
    E := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (023F);

023F:

    jump (0229);

0242:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := 45;
    #return-to: 0245
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (147C);

0245:

    jump (0235);

0248:

    H := 20;
    L := 10;
    jump (024B);

024B:

    A := M[(H,L)];
    jump (024C);

024C:

    let:16 a1 = addWithCarry(!false,A,~FF) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~FF & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (024E);

024E:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (024F);
    }

024F:

    let:16 a1 = addWithCarry(!false,A,~FE) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~FE & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0251);

0251:

    if (FlagZ) {
      jump (0281);
    } else {
      jump (0254);
    }

0254:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0255);

0255:

    B := M[(H,L)];
    jump (0256);

0256:

    C := A;
    jump (0257);

0257:

    let:8 a1 = (B | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0258);

0258:

    A := C;
    jump (0259);

0259:

    if (!FlagZ) {
      jump (0277);
    } else {
      jump (025C);
    }

025C:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (025D);

025D:

    A := M[(H,L)];
    jump (025E);

025E:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (025F);

025F:

    if (!FlagZ) {
      jump (0288);
    } else {
      jump (0262);
    }

0262:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0263);

0263:

    E := M[(H,L)];
    jump (0264);

0264:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0265);

0265:

    D := M[(H,L)];
    jump (0266);

0266:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0267);

0267:

    D := H;
    E := L;
    H := D;
    L := E;
    jump (0268);

0268:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0269);

0269:

    H := 02;
    L := 6F;
    jump (026C);

026C:

    let:16 a1 = (1 + (SPH,SPL)) in
    M[(SPH,SPL)] := L;
    M[a1] := H;
    H := M[a1];
    L := M[(SPH,SPL)];
    jump (026D);

026D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (026E);

026E:

    jump ((H,L));

026F:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0270);

0270:

    D := 00;
    E := 0C;
    jump (0273);

0273:

    let:17 a1 = add17((D,E),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (0274);

0274:

    jump (024B);

0277:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0278);

0278:

    let:16 a1 = addWithCarry(true,B,00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0279);

0279:

    if (!FlagZ) {
      jump (027D);
    } else {
      jump (027C);
    }

027C:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (027D);

027D:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (027E);

027E:

    M[(H,L)] := B;
    jump (027F);

027F:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0280);

0280:

    M[(H,L)] := A;
    jump (0281);

0281:

    D := 00;
    E := 10;
    jump (0284);

0284:

    let:17 a1 = add17((D,E),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (0285);

0285:

    jump (024B);

0288:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0289);

0289:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (028A);

028A:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (028B);

028B:

    jump (0281);

028E:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (028F);

028F:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0290);

0290:

    A := M[(H,L)];
    jump (0291);

0291:

    let:16 a1 = addWithCarry(!false,A,~FF) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~FF & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0293);

0293:

    if (FlagZ) {
      jump (033B);
    } else {
      jump (0296);
    }

0296:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0297);

0297:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0298);

0298:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0299);
    }

0299:

    B := A;
    jump (029A);

029A:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (029B);

029B:

    M[2068] := A;
    jump (029E);

029E:

    M[2069] := A;
    jump (02A1);

02A1:

    A := 30;
    jump (02A3);

02A3:

    M[206A] := A;
    jump (02A6);

02A6:

    A := B;
    jump (02A7);

02A7:

    M[(H,L)] := 05;
    jump (02A9);

02A9:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (02AA);

02AA:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (02AB);

02AB:

    if (!FlagZ) {
      jump (039B);
    } else {
      jump (02AE);
    }

02AE:

    H := M[201B];
    L := M[201A];
    jump (02B1);

02B1:

    B := 10;
    jump (02B3);

02B3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := B6;
    #return-to: 02B6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1424);

02B6:

    H := 20;
    L := 10;
    jump (02B9);

02B9:

    D := 1B;
    E := 10;
    jump (02BC);

02BC:

    B := 10;
    jump (02BE);

02BE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := C1;
    #return-to: 02C1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A32);

02C1:

    B := 00;
    jump (02C3);

02C3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := C6;
    #return-to: 02C6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19DC);

02C6:

    A := M[206D];
    jump (02C9);

02C9:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (02CA);

02CA:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (02CB);
    }

02CB:

    A := M[20EF];
    jump (02CE);

02CE:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (02CF);

02CF:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (02D0);
    }

02D0:

    SPH := 24;
    SPL := 00;
    jump (02D3);

02D3:

    enable_interrupts()
    jump (02D4);

02D4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := D7;
    #return-to: 02D7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19D7);

02D7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := DA;
    #return-to: 02DA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (092E);

02DA:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (02DB);

02DB:

    if (FlagZ) {
      jump (166D);
    } else {
      jump (02DE);
    }

02DE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := E1;
    #return-to: 02E1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (18E7);

02E1:

    A := M[(H,L)];
    jump (02E2);

02E2:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (02E3);

02E3:

    if (FlagZ) {
      jump (032C);
    } else {
      jump (02E6);
    }

02E6:

    A := M[20CE];
    jump (02E9);

02E9:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (02EA);

02EA:

    if (FlagZ) {
      jump (032C);
    } else {
      jump (02ED);
    }

02ED:

    A := M[2067];
    jump (02F0);

02F0:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (02F1);

02F1:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (02F2);

02F2:

    if (FlagCY) {
      jump (0332);
    } else {
      jump (02F5);
    }

02F5:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := F8;
    #return-to: 02F8
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (020E);

02F8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 02;
    let:16 a2 = (-1 + a1) in
    M[a2] := FB;
    #return-to: 02FB
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0878);

02FB:

    M[(H,L)] := E;
    jump (02FC);

02FC:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (02FD);

02FD:

    M[(H,L)] := D;
    jump (02FE);

02FE:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (02FF);

02FF:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0300);

0300:

    M[(H,L)] := B;
    jump (0301);

0301:

    jump (0302);

0302:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 05;
    #return-to: 0305
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01E4);

0305:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[a1];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagS := M[(SPH,SPL)][7];
    FlagZ := M[(SPH,SPL)][6];
    FlagA := M[(SPH,SPL)][4];
    FlagP := M[(SPH,SPL)][2];
    FlagCY := M[(SPH,SPL)][0];
    jump (0306);

0306:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (0307);

0307:

    A := 21;
    jump (0309);

0309:

    B := 00;
    jump (030B);

030B:

    if (!FlagCY) {
      jump (0312);
    } else {
      jump (030E);
    }

030E:

    B := 20;
    jump (0310);

0310:

    A := 22;
    jump (0312);

0312:

    M[2067] := A;
    jump (0315);

0315:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 18;
    #return-to: 0318
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB6);

0318:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0319);

0319:

    M[2011] := A;
    jump (031C);

031C:

    A := B;
    jump (031D);

031D:

    sound_control(FleetMovement1,A[0]);
    sound_control(FleetMovement2,A[1]);
    sound_control(FleetMovement3,A[2]);
    sound_control(FleetMovement4,A[3]);
    sound_control(UfoHit,A[4]);
    jump (031F);

031F:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0320);

0320:

    M[2098] := A;
    jump (0323);

0323:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 26;
    #return-to: 0326
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

0326:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 29;
    #return-to: 0329
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A7F);

0329:

    jump (07F9);

032C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2F;
    #return-to: 032F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A7F);

032F:

    jump (0817);

0332:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 35;
    #return-to: 0335
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0209);

0335:

    jump (02F8);

033B:

    H := 20;
    L := 68;
    jump (033E);

033E:

    M[(H,L)] := 01;
    jump (0340);

0340:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0341);

0341:

    A := M[(H,L)];
    jump (0342);

0342:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0343);

0343:

    jump (03B0);

0346:

    jump (0347);

0347:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0348);

0348:

    M[(H,L)] := 01;
    jump (034A);

034A:

    A := M[201B];
    jump (034D);

034D:

    B := A;
    jump (034E);

034E:

    A := M[20EF];
    jump (0351);

0351:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0352);

0352:

    if (!FlagZ) {
      jump (0363);
    } else {
      jump (0355);
    }

0355:

    A := M[201D];
    jump (0358);

0358:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (0359);

0359:

    if (FlagCY) {
      jump (0381);
    } else {
      jump (035C);
    }

035C:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (035D);

035D:

    if (FlagCY) {
      jump (038E);
    } else {
      jump (0360);
    }

0360:

    jump (036F);

0363:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 66;
    #return-to: 0366
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (17C0);

0366:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (0367);

0367:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (0368);

0368:

    if (FlagCY) {
      jump (0381);
    } else {
      jump (036B);
    }

036B:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (036C);

036C:

    if (FlagCY) {
      jump (038E);
    } else {
      jump (036F);
    }

036F:

    H := 20;
    L := 18;
    jump (0372);

0372:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 75;
    #return-to: 0375
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

0375:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 78;
    #return-to: 0378
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A47);

0378:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7B;
    #return-to: 037B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1439);

037B:

    A := 00;
    jump (037D);

037D:

    M[2012] := A;
    jump (0380);

0380:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0381:

    A := B;
    jump (0382);

0382:

    let:16 a1 = addWithCarry(!false,A,~D9) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~D9 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0384);

0384:

    if (FlagZ) {
      jump (036F);
    } else {
      jump (0387);
    }

0387:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0388);

0388:

    M[201B] := A;
    jump (038B);

038B:

    jump (036F);

038E:

    A := B;
    jump (038F);

038F:

    let:16 a1 = addWithCarry(!false,A,~30) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~30 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0391);

0391:

    if (FlagZ) {
      jump (036F);
    } else {
      jump (0394);
    }

0394:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0395);

0395:

    M[201B] := A;
    jump (0398);

0398:

    jump (036F);

039B:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (039C);

039C:

    let:8 a1 = (01 & A) in
    let:8 a2 = (01 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (039E);

039E:

    M[2015] := A;
    jump (03A1);

03A1:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (03A2);

03A2:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (03A3);

03A3:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (03A4);

03A4:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (03A5);

03A5:

    H := 1C;
    L := 70;
    jump (03A8);

03A8:

    let:16 a1 = addWithCarry(false,L,A) in
    let:8 a2 = (L & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (03A9);

03A9:

    L := A;
    jump (03AA);

03AA:

    M[2018] := L;
    M[2019] := H;
    jump (03AD);

03AD:

    jump (036F);

03B0:

    if (!FlagZ) {
      jump (034A);
    } else {
      jump (03B3);
    }

03B3:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (03B4);

03B4:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (03B5);

03B5:

    if (!FlagZ) {
      jump (034A);
    } else {
      jump (03B8);
    }

03B8:

    jump (0346);

03BB:

    D := 20;
    E := 2A;
    jump (03BE);

03BE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := C1;
    #return-to: 03C1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A06);

03C1:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (03C2);

03C2:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (03C3);
    }

03C3:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (03C4);

03C4:

    A := M[(H,L)];
    jump (03C5);

03C5:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (03C6);

03C6:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (03C7);
    }

03C7:

    let:16 a1 = addWithCarry(!false,A,~01) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~01 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (03C9);

03C9:

    if (FlagZ) {
      jump (03FA);
    } else {
      jump (03CC);
    }

03CC:

    let:16 a1 = addWithCarry(!false,A,~02) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~02 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (03CE);

03CE:

    if (FlagZ) {
      jump (040A);
    } else {
      jump (03D1);
    }

03D1:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (03D2);

03D2:

    let:16 a1 = addWithCarry(!false,A,~03) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~03 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (03D4);

03D4:

    if (!FlagZ) {
      jump (042A);
    } else {
      jump (03D7);
    }

03D7:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (03D8);

03D8:

    if (FlagZ) {
      jump (0436);
    } else {
      jump (03DB);
    }

03DB:

    A := M[(H,L)];
    jump (03DC);

03DC:

    let:16 a1 = addWithCarry(!false,A,~0F) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~0F & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (03DE);

03DE:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (03DF);
    }

03DF:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (03E0);

03E0:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := E3;
    #return-to: 03E3
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0430);

03E3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := E6;
    #return-to: 03E6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1452);

03E6:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (03E7);

03E7:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (03E8);

03E8:

    let:16 a1 = addWithCarry(true,M[(H,L)],00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (03E9);

03E9:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (03EA);

03EA:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (03EB);

03EB:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (03EC);

03EC:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (03ED);

03ED:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (03EE);

03EE:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (03EF);

03EF:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (03F0);

03F0:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (03F1);

03F1:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (03F2);

03F2:

    M[(H,L)] := 08;
    jump (03F4);

03F4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 03;
    let:16 a2 = (-1 + a1) in
    M[a2] := F7;
    #return-to: 03F7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0430);

03F7:

    jump (1400);

03FA:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (03FB);

03FB:

    M[(H,L)] := A;
    jump (03FC);

03FC:

    A := M[201B];
    jump (03FF);

03FF:

    let:16 a1 = addWithCarry(false,08,A) in
    let:8 a2 = (08 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (0401);

0401:

    M[202A] := A;
    jump (0404);

0404:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 07;
    #return-to: 0407
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0430);

0407:

    jump (1400);

040A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 0D;
    #return-to: 040D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0430);

040D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (040E);

040E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (040F);

040F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0410);

0410:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 13;
    #return-to: 0413
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1452);

0413:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0414);

0414:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0415);

0415:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    D := M[a1];
    E := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0416);

0416:

    A := M[202C];
    jump (0419);

0419:

    let:16 a1 = addWithCarry(false,L,A) in
    let:8 a2 = (L & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (041A);

041A:

    L := A;
    jump (041B);

041B:

    M[2029] := A;
    jump (041E);

041E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 21;
    #return-to: 0421
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1491);

0421:

    A := M[2061];
    jump (0424);

0424:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0425);

0425:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0426);
    }

0426:

    M[2002] := A;
    jump (0429);

0429:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

042A:

    let:16 a1 = addWithCarry(!false,A,~05) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~05 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (042C);

042C:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (042D);
    }

042D:

    jump (0436);

0430:

    H := 20;
    L := 27;
    jump (0433);

0433:

    jump (1A3B);

0436:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 39;
    #return-to: 0439
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0430);

0439:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3C;
    #return-to: 043C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1452);

043C:

    H := 20;
    L := 25;
    jump (043F);

043F:

    D := 1B;
    E := 25;
    jump (0442);

0442:

    B := 07;
    jump (0444);

0444:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 47;
    #return-to: 0447
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A32);

0447:

    H := M[208E];
    L := M[208D];
    jump (044A);

044A:

    let:16 a1 = addWithCarry(true,L,00) in
    let:8 a2 = (L & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    L := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (044B);

044B:

    A := L;
    jump (044C);

044C:

    let:16 a1 = addWithCarry(!false,A,~63) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~63 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (044E);

044E:

    if (FlagCY) {
      jump (0453);
    } else {
      jump (0451);
    }

0451:

    L := 54;
    jump (0453);

0453:

    M[208D] := L;
    M[208E] := H;
    jump (0456);

0456:

    H := M[2090];
    L := M[208F];
    jump (0459);

0459:

    let:16 a1 = addWithCarry(true,L,00) in
    let:8 a2 = (L & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    L := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (045A);

045A:

    M[208F] := L;
    M[2090] := H;
    jump (045D);

045D:

    A := M[2084];
    jump (0460);

0460:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0461);

0461:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0462);
    }

0462:

    A := M[(H,L)];
    jump (0463);

0463:

    let:8 a1 = (01 & A) in
    let:8 a2 = (01 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0465);

0465:

    B := 02;
    C := 29;
    jump (0468);

0468:

    if (!FlagZ) {
      jump (046E);
    } else {
      jump (046B);
    }

046B:

    B := FE;
    C := E0;
    jump (046E);

046E:

    H := 20;
    L := 8A;
    jump (0471);

0471:

    M[(H,L)] := C;
    jump (0472);

0472:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0473);

0473:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0474);

0474:

    M[(H,L)] := B;
    jump (0475);

0475:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0476:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0477);

0477:

    A := 02;
    jump (047A);

047A:

    M[2032] := A;
    jump (047D);

047D:

    H := M[2039];
    L := M[2038];
    jump (0480);

0480:

    A := L;
    jump (0481);

0481:

    let:8 a1 = (H | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0482);

0482:

    if (!FlagZ) {
      jump (048A);
    } else {
      jump (0485);
    }

0485:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0486);

0486:

    M[2038] := L;
    M[2039] := H;
    jump (0489);

0489:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

048A:

    D := 20;
    E := 35;
    jump (048D);

048D:

    A := F9;
    jump (048F);

048F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := 92;
    #return-to: 0492
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0550);

0492:

    A := M[2046];
    jump (0495);

0495:

    M[2070] := A;
    jump (0498);

0498:

    A := M[2056];
    jump (049B);

049B:

    M[2071] := A;
    jump (049E);

049E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := A1;
    #return-to: 04A1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0563);

04A1:

    A := M[2078];
    jump (04A4);

04A4:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (04A5);

04A5:

    H := 20;
    L := 35;
    jump (04A8);

04A8:

    if (!FlagZ) {
      jump (055B);
    } else {
      jump (04AB);
    }

04AB:

    D := 1B;
    E := 30;
    jump (04AE);

04AE:

    H := 20;
    L := 30;
    jump (04B1);

04B1:

    B := 10;
    jump (04B3);

04B3:

    jump (1A32);

04B6:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (04B7);

04B7:

    A := M[206E];
    jump (04BA);

04BA:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (04BB);

04BB:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (04BC);
    }

04BC:

    A := M[2080];
    jump (04BF);

04BF:

    let:16 a1 = addWithCarry(!false,A,~01) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~01 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (04C1);

04C1:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (04C2);
    }

04C2:

    D := 20;
    E := 45;
    jump (04C5);

04C5:

    A := ED;
    jump (04C7);

04C7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := CA;
    #return-to: 04CA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0550);

04CA:

    A := M[2036];
    jump (04CD);

04CD:

    M[2070] := A;
    jump (04D0);

04D0:

    A := M[2056];
    jump (04D3);

04D3:

    M[2071] := A;
    jump (04D6);

04D6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := D9;
    #return-to: 04D9
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0563);

04D9:

    A := M[2076];
    jump (04DC);

04DC:

    let:16 a1 = addWithCarry(!false,A,~10) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~10 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (04DE);

04DE:

    if (FlagCY) {
      jump (04E7);
    } else {
      jump (04E1);
    }

04E1:

    A := 00;
    jump (04E4);

04E4:

    M[2076] := A;
    jump (04E7);

04E7:

    A := M[2078];
    jump (04EA);

04EA:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (04EB);

04EB:

    H := 20;
    L := 45;
    jump (04EE);

04EE:

    if (!FlagZ) {
      jump (055B);
    } else {
      jump (04F1);
    }

04F1:

    D := 1B;
    E := 40;
    jump (04F4);

04F4:

    H := 20;
    L := 40;
    jump (04F7);

04F7:

    B := 10;
    jump (04F9);

04F9:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 04;
    let:16 a2 = (-1 + a1) in
    M[a2] := FC;
    #return-to: 04FC
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A32);

04FC:

    A := M[2082];
    jump (04FF);

04FF:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0500);

0500:

    if (!FlagZ) {
      jump (0508);
    } else {
      jump (0503);
    }

0503:

    A := 01;
    jump (0505);

0505:

    M[206E] := A;
    jump (0508);

0508:

    H := M[2077];
    L := M[2076];
    jump (050B);

050B:

    jump (067E);

050E:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (050F);

050F:

    D := 20;
    E := 55;
    jump (0512);

0512:

    A := DB;
    jump (0514);

0514:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := 17;
    #return-to: 0517
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0550);

0517:

    A := M[2046];
    jump (051A);

051A:

    M[2070] := A;
    jump (051D);

051D:

    A := M[2036];
    jump (0520);

0520:

    M[2071] := A;
    jump (0523);

0523:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := 26;
    #return-to: 0526
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0563);

0526:

    A := M[2076];
    jump (0529);

0529:

    let:16 a1 = addWithCarry(!false,A,~15) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~15 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (052B);

052B:

    if (FlagCY) {
      jump (0534);
    } else {
      jump (052E);
    }

052E:

    A := 06;
    jump (0531);

0531:

    M[2076] := A;
    jump (0534);

0534:

    A := M[2078];
    jump (0537);

0537:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0538);

0538:

    H := 20;
    L := 55;
    jump (053B);

053B:

    if (!FlagZ) {
      jump (055B);
    } else {
      jump (053E);
    }

053E:

    D := 1B;
    E := 50;
    jump (0541);

0541:

    H := 20;
    L := 50;
    jump (0544);

0544:

    B := 10;
    jump (0546);

0546:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := 49;
    #return-to: 0549
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A32);

0549:

    H := M[2077];
    L := M[2076];
    jump (054C);

054C:

    M[2058] := L;
    M[2059] := H;
    jump (054F);

054F:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0550:

    M[207F] := A;
    jump (0553);

0553:

    H := 20;
    L := 73;
    jump (0556);

0556:

    B := 0B;
    jump (0558);

0558:

    jump (1A32);

055B:

    D := 20;
    E := 73;
    jump (055E);

055E:

    B := 0B;
    jump (0560);

0560:

    jump (1A32);

0563:

    H := 20;
    L := 73;
    jump (0566);

0566:

    A := M[(H,L)];
    jump (0567);

0567:

    let:8 a1 = (80 & A) in
    let:8 a2 = (80 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0569);

0569:

    if (!FlagZ) {
      jump (05C1);
    } else {
      jump (056C);
    }

056C:

    A := M[20C1];
    jump (056F);

056F:

    let:16 a1 = addWithCarry(!false,A,~04) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~04 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0571);

0571:

    A := M[2069];
    jump (0574);

0574:

    if (FlagZ) {
      jump (05B7);
    } else {
      jump (0577);
    }

0577:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0578);

0578:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0579);
    }

0579:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (057A);

057A:

    M[(H,L)] := 00;
    jump (057C);

057C:

    A := M[2070];
    jump (057F);

057F:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0580);

0580:

    if (FlagZ) {
      jump (0589);
    } else {
      jump (0583);
    }

0583:

    B := A;
    jump (0584);

0584:

    A := M[20CF];
    jump (0587);

0587:

    let:16 a1 = addWithCarry(!false,A,~B) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0588);

0588:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0589);
    }

0589:

    A := M[2071];
    jump (058C);

058C:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (058D);

058D:

    if (FlagZ) {
      jump (0596);
    } else {
      jump (0590);
    }

0590:

    B := A;
    jump (0591);

0591:

    A := M[20CF];
    jump (0594);

0594:

    let:16 a1 = addWithCarry(!false,A,~B) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0595);

0595:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0596);
    }

0596:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0597);

0597:

    A := M[(H,L)];
    jump (0598);

0598:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0599);

0599:

    if (FlagZ) {
      jump (061B);
    } else {
      jump (059C);
    }

059C:

    H := M[2077];
    L := M[2076];
    jump (059F);

059F:

    C := M[(H,L)];
    jump (05A0);

05A0:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (05A1);

05A1:

    jump (05A2);

05A2:

    M[2076] := L;
    M[2077] := H;
    jump (05A5);

05A5:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := A8;
    #return-to: 05A8
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (062F);

05A8:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (05A9);
    }

05A9:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := AC;
    #return-to: 05AC
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (017A);

05AC:

    A := C;
    jump (05AD);

05AD:

    let:16 a1 = addWithCarry(false,07,A) in
    let:8 a2 = (07 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (05AF);

05AF:

    H := A;
    jump (05B0);

05B0:

    A := L;
    jump (05B1);

05B1:

    let:16 a1 = addWithCarry(!false,A,~0A) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~0A & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (05B3);

05B3:

    L := A;
    jump (05B4);

05B4:

    M[207B] := L;
    M[207C] := H;
    jump (05B7);

05B7:

    H := 20;
    L := 73;
    jump (05BA);

05BA:

    A := M[(H,L)];
    jump (05BB);

05BB:

    let:8 a1 = (80 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (05BD);

05BD:

    M[(H,L)] := A;
    jump (05BE);

05BE:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (05BF);

05BF:

    let:16 a1 = addWithCarry(true,M[(H,L)],00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (05C0);

05C0:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

05C1:

    D := 20;
    E := 7C;
    jump (05C4);

05C4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := C7;
    #return-to: 05C7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A06);

05C7:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (05C8);
    }

05C8:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (05C9);

05C9:

    A := M[(H,L)];
    jump (05CA);

05CA:

    let:8 a1 = (01 & A) in
    let:8 a2 = (01 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (05CC);

05CC:

    if (!FlagZ) {
      jump (0644);
    } else {
      jump (05CF);
    }

05CF:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (05D0);

05D0:

    let:16 a1 = addWithCarry(true,M[(H,L)],00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (05D1);

05D1:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := D4;
    #return-to: 05D4
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0675);

05D4:

    A := M[2079];
    jump (05D7);

05D7:

    let:16 a1 = addWithCarry(false,03,A) in
    let:8 a2 = (03 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (05D9);

05D9:

    H := 20;
    L := 7F;
    jump (05DC);

05DC:

    let:16 a1 = addWithCarry(!false,A,~M[(H,L)]) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~M[(H,L)] & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (05DD);

05DD:

    if (FlagCY) {
      jump (05E2);
    } else {
      jump (05E0);
    }

05E0:

    let:16 a1 = addWithCarry(!false,A,~0C) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~0C & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (05E2);

05E2:

    M[2079] := A;
    jump (05E5);

05E5:

    A := M[207B];
    jump (05E8);

05E8:

    B := A;
    jump (05E9);

05E9:

    A := M[207E];
    jump (05EC);

05EC:

    let:16 a1 = addWithCarry(false,B,A) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (05ED);

05ED:

    M[207B] := A;
    jump (05F0);

05F0:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 05;
    let:16 a2 = (-1 + a1) in
    M[a2] := F3;
    #return-to: 05F3
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (066C);

05F3:

    A := M[207B];
    jump (05F6);

05F6:

    let:16 a1 = addWithCarry(!false,A,~15) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~15 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (05F8);

05F8:

    if (FlagCY) {
      jump (0612);
    } else {
      jump (05FB);
    }

05FB:

    A := M[2061];
    jump (05FE);

05FE:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (05FF);

05FF:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0600);
    }

0600:

    A := M[207B];
    jump (0603);

0603:

    let:16 a1 = addWithCarry(!false,A,~1E) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~1E & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0605);

0605:

    if (FlagCY) {
      jump (0612);
    } else {
      jump (0608);
    }

0608:

    let:16 a1 = addWithCarry(!false,A,~27) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~27 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (060A);

060A:

    jump (060B);

060B:

    if (!FlagCY) {
      jump (0612);
    } else {
      jump (060E);
    }

060E:

    let:16 a1 = addWithCarry(!false,A,~A) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~A & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (060F);

060F:

    M[2015] := A;
    jump (0612);

0612:

    A := M[2073];
    jump (0615);

0615:

    let:8 a1 = (01 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0617);

0617:

    M[2073] := A;
    jump (061A);

061A:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

061B:

    A := M[201B];
    jump (061E);

061E:

    let:16 a1 = addWithCarry(false,08,A) in
    let:8 a2 = (08 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (0620);

0620:

    H := A;
    jump (0621);

0621:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := 24;
    #return-to: 0624
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (156F);

0624:

    A := C;
    jump (0625);

0625:

    let:16 a1 = addWithCarry(!false,A,~0C) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~0C & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0627);

0627:

    if (FlagCY) {
      jump (05A5);
    } else {
      jump (062A);
    }

062A:

    C := 0B;
    jump (062C);

062C:

    jump (05A5);

062F:

    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0630);

0630:

    A := M[2067];
    jump (0633);

0633:

    H := A;
    jump (0634);

0634:

    L := C;
    jump (0635);

0635:

    D := 05;
    jump (0637);

0637:

    A := M[(H,L)];
    jump (0638);

0638:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0639);

0639:

    FlagCY := true;
    jump (063A);

063A:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (063B);
    }

063B:

    A := L;
    jump (063C);

063C:

    let:16 a1 = addWithCarry(false,0B,A) in
    let:8 a2 = (0B & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (063E);

063E:

    L := A;
    jump (063F);

063F:

    let:16 a1 = addWithCarry(!true,D,~00) in
    let:8 a2 = (D & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    D := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0640);

0640:

    if (!FlagZ) {
      jump (0637);
    } else {
      jump (0643);
    }

0643:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0644:

    H := 20;
    L := 78;
    jump (0647);

0647:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0648);

0648:

    A := M[(H,L)];
    jump (0649);

0649:

    let:16 a1 = addWithCarry(!false,A,~03) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~03 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (064B);

064B:

    if (!FlagZ) {
      jump (0667);
    } else {
      jump (064E);
    }

064E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := 51;
    #return-to: 0651
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0675);

0651:

    H := 1C;
    L := DC;
    jump (0654);

0654:

    M[2079] := L;
    M[207A] := H;
    jump (0657);

0657:

    H := 20;
    L := 7C;
    jump (065A);

065A:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (065B);

065B:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (065C);

065C:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (065D);

065D:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (065E);

065E:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (065F);

065F:

    A := 06;
    jump (0661);

0661:

    M[207D] := A;
    jump (0664);

0664:

    jump (066C);

0667:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0668);

0668:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0669);
    }

0669:

    jump (0675);

066C:

    H := 20;
    L := 79;
    jump (066F);

066F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := 72;
    #return-to: 0672
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

0672:

    jump (1491);

0675:

    H := 20;
    L := 79;
    jump (0678);

0678:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7B;
    #return-to: 067B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

067B:

    jump (1452);

067E:

    M[2048] := L;
    M[2049] := H;
    jump (0681);

0681:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0682:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0683);

0683:

    A := M[2080];
    jump (0686);

0686:

    let:16 a1 = addWithCarry(!false,A,~02) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~02 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0688);

0688:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0689);
    }

0689:

    H := 20;
    L := 83;
    jump (068C);

068C:

    A := M[(H,L)];
    jump (068D);

068D:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (068E);

068E:

    if (FlagZ) {
      jump (050F);
    } else {
      jump (0691);
    }

0691:

    A := M[2056];
    jump (0694);

0694:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0695);

0695:

    if (!FlagZ) {
      jump (050F);
    } else {
      jump (0698);
    }

0698:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0699);

0699:

    A := M[(H,L)];
    jump (069A);

069A:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (069B);

069B:

    if (!FlagZ) {
      jump (06AB);
    } else {
      jump (069E);
    }

069E:

    A := M[2082];
    jump (06A1);

06A1:

    let:16 a1 = addWithCarry(!false,A,~08) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~08 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (06A3);

06A3:

    if (FlagCY) {
      jump (050F);
    } else {
      jump (06A6);
    }

06A6:

    M[(H,L)] := 01;
    jump (06A8);

06A8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := AB;
    #return-to: 06AB
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (073C);

06AB:

    D := 20;
    E := 8A;
    jump (06AE);

06AE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := B1;
    #return-to: 06B1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A06);

06B1:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (06B2);
    }

06B2:

    H := 20;
    L := 85;
    jump (06B5);

06B5:

    A := M[(H,L)];
    jump (06B6);

06B6:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (06B7);

06B7:

    if (!FlagZ) {
      jump (06D6);
    } else {
      jump (06BA);
    }

06BA:

    H := 20;
    L := 8A;
    jump (06BD);

06BD:

    A := M[(H,L)];
    jump (06BE);

06BE:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (06BF);

06BF:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (06C0);

06C0:

    let:16 a1 = addWithCarry(false,M[(H,L)],A) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (06C1);

06C1:

    M[208A] := A;
    jump (06C4);

06C4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := C7;
    #return-to: 06C7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (073C);

06C7:

    H := 20;
    L := 8A;
    jump (06CA);

06CA:

    A := M[(H,L)];
    jump (06CB);

06CB:

    let:16 a1 = addWithCarry(!false,A,~28) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~28 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (06CD);

06CD:

    if (FlagCY) {
      jump (06F9);
    } else {
      jump (06D0);
    }

06D0:

    let:16 a1 = addWithCarry(!false,A,~E1) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~E1 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (06D2);

06D2:

    if (!FlagCY) {
      jump (06F9);
    } else {
      jump (06D5);
    }

06D5:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

06D6:

    B := FE;
    jump (06D8);

06D8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := DB;
    #return-to: 06DB
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19DC);

06DB:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (06DC);

06DC:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (06DD);

06DD:

    A := M[(H,L)];
    jump (06DE);

06DE:

    let:16 a1 = addWithCarry(!false,A,~1F) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~1F & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (06E0);

06E0:

    if (FlagZ) {
      jump (074B);
    } else {
      jump (06E3);
    }

06E3:

    let:16 a1 = addWithCarry(!false,A,~18) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~18 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (06E5);

06E5:

    if (FlagZ) {
      jump (070C);
    } else {
      jump (06E8);
    }

06E8:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (06E9);

06E9:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (06EA);
    }

06EA:

    B := EF;
    jump (06EC);

06EC:

    H := 20;
    L := 98;
    jump (06EF);

06EF:

    A := M[(H,L)];
    jump (06F0);

06F0:

    let:8 a1 = (B & A) in
    let:8 a2 = (B | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (06F1);

06F1:

    M[(H,L)] := A;
    jump (06F2);

06F2:

    let:8 a1 = (20 & A) in
    let:8 a2 = (20 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (06F4);

06F4:

    sound_control(FleetMovement1,A[0]);
    sound_control(FleetMovement2,A[1]);
    sound_control(FleetMovement3,A[2]);
    sound_control(FleetMovement4,A[3]);
    sound_control(UfoHit,A[4]);
    jump (06F6);

06F6:

    jump (06F7);

06F7:

    jump (06F8);

06F8:

    jump (06F9);

06F9:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := FC;
    #return-to: 06FC
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0742);

06FC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 06;
    let:16 a2 = (-1 + a1) in
    M[a2] := FF;
    #return-to: 06FF
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14CB);

06FF:

    H := 20;
    L := 83;
    jump (0702);

0702:

    B := 0A;
    jump (0704);

0704:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 07;
    #return-to: 0707
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (075F);

0707:

    B := FE;
    jump (0709);

0709:

    jump (19DC);

070C:

    A := 01;
    jump (070E);

070E:

    M[20F1] := A;
    jump (0711);

0711:

    H := M[208E];
    L := M[208D];
    jump (0714);

0714:

    B := M[(H,L)];
    jump (0715);

0715:

    C := 04;
    jump (0717);

0717:

    H := 1D;
    L := 50;
    jump (071A);

071A:

    D := 1D;
    E := 4C;
    jump (071D);

071D:

    A := M[(D,E)];
    jump (071E);

071E:

    let:16 a1 = addWithCarry(!false,A,~B) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (071F);

071F:

    if (FlagZ) {
      jump (0728);
    } else {
      jump (0722);
    }

0722:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0723);

0723:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (0724);

0724:

    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0725);

0725:

    if (!FlagZ) {
      jump (071D);
    } else {
      jump (0728);
    }

0728:

    A := M[(H,L)];
    jump (0729);

0729:

    M[2087] := A;
    jump (072C);

072C:

    H := 00;
    jump (072E);

072E:

    L := B;
    jump (072F);

072F:

    let:17 a1 = add17((H,L),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (0730);

0730:

    let:17 a1 = add17((H,L),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (0731);

0731:

    let:17 a1 = add17((H,L),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (0732);

0732:

    let:17 a1 = add17((H,L),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (0733);

0733:

    M[20F2] := L;
    M[20F3] := H;
    jump (0736);

0736:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 39;
    #return-to: 0739
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0742);

0739:

    jump (08F1);

073C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3F;
    #return-to: 073F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0742);

073F:

    jump (1439);

0742:

    H := 20;
    L := 87;
    jump (0745);

0745:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 48;
    #return-to: 0748
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

0748:

    jump (1A47);

074B:

    B := 10;
    jump (074D);

074D:

    H := 20;
    L := 98;
    jump (0750);

0750:

    A := M[(H,L)];
    jump (0751);

0751:

    let:8 a1 = (B | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0752);

0752:

    M[(H,L)] := A;
    jump (0753);

0753:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 56;
    #return-to: 0756
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1770);

0756:

    H := 1D;
    L := 7C;
    jump (0759);

0759:

    M[2087] := L;
    M[2088] := H;
    jump (075C);

075C:

    jump (073C);

075F:

    D := 1B;
    E := 83;
    jump (0762);

0762:

    jump (1A32);

0765:

    A := 01;
    jump (0767);

0767:

    M[2093] := A;
    jump (076A);

076A:

    SPH := 24;
    SPL := 00;
    jump (076D);

076D:

    enable_interrupts()
    jump (076E);

076E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 71;
    #return-to: 0771
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1979);

0771:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 74;
    #return-to: 0774
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

0774:

    H := 30;
    L := 13;
    jump (0777);

0777:

    D := 1F;
    E := F3;
    jump (077A);

077A:

    C := 04;
    jump (077C);

077C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7F;
    #return-to: 077F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08F3);

077F:

    A := M[20EB];
    jump (0782);

0782:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0783);

0783:

    H := 28;
    L := 10;
    jump (0786);

0786:

    C := 14;
    jump (0788);

0788:

    if (!FlagZ) {
      jump (0857);
    } else {
      jump (078B);
    }

078B:

    D := 1A;
    E := CF;
    jump (078E);

078E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := 91;
    #return-to: 0791
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08F3);

0791:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
    jump (0793);

0793:

    let:8 a1 = (04 & A) in
    let:8 a2 = (04 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0795);

0795:

    if (FlagZ) {
      jump (077F);
    } else {
      jump (0798);
    }

0798:

    B := 99;
    jump (079A);

079A:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (079B);

079B:

    M[20CE] := A;
    jump (079E);

079E:

    A := M[20EB];
    jump (07A1);

07A1:

    let:16 a1 = addWithCarry(false,B,A) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (07A2);

07A2:

    let:8 a1 = (A & 0F) in
    let:16 a2 = addWithCarry(false,a1,06) in
    let:16 a3 = addWithCarry(((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1)[4],(A >> 04),00) in
    let:16 a4 = addWithCarry(false,a3[7:0],06) in
    let:8 a5 = (((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1) & 0F) in
    let:8 a6 = ((((((a3[7:0][1] || a3[7:0][2]) && a3[7:0][3]) || FlagCY) ? a4[7:0] : a3[7:0]) << 04) | a5) in
    A := a6;
    FlagS := a6[7];
    FlagZ := is_zero(a6);
    FlagA := ((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1)[4];
    FlagP := parity(a6);
    FlagCY := (((((a3[7:0][1] || a3[7:0][2]) && a3[7:0][3]) || FlagCY) ? a4[7:0] : a3[7:0])[4] || FlagCY);
    jump (07A3);

07A3:

    M[20EB] := A;
    jump (07A6);

07A6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := A9;
    #return-to: 07A9
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1947);

07A9:

    H := 00;
    L := 00;
    jump (07AC);

07AC:

    M[20F8] := L;
    M[20F9] := H;
    jump (07AF);

07AF:

    M[20FC] := L;
    M[20FD] := H;
    jump (07B2);

07B2:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := B5;
    #return-to: 07B5
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1925);

07B5:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := B8;
    #return-to: 07B8
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (192B);

07B8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := BB;
    #return-to: 07BB
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19D7);

07BB:

    H := 01;
    L := 01;
    jump (07BE);

07BE:

    A := H;
    jump (07BF);

07BF:

    M[20EF] := A;
    jump (07C2);

07C2:

    M[20E7] := L;
    M[20E8] := H;
    jump (07C5);

07C5:

    M[20E5] := L;
    M[20E6] := H;
    jump (07C8);

07C8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := CB;
    #return-to: 07CB
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1956);

07CB:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := CE;
    #return-to: 07CE
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01EF);

07CE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := D1;
    #return-to: 07D1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01F5);

07D1:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := D4;
    #return-to: 07D4
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08D1);

07D4:

    M[21FF] := A;
    jump (07D7);

07D7:

    M[22FF] := A;
    jump (07DA);

07DA:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := DD;
    #return-to: 07DD
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (00D7);

07DD:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (07DE);

07DE:

    M[21FE] := A;
    jump (07E1);

07E1:

    M[22FE] := A;
    jump (07E4);

07E4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := E7;
    #return-to: 07E7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01C0);

07E7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := EA;
    #return-to: 07EA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1904);

07EA:

    H := 38;
    L := 78;
    jump (07ED);

07ED:

    M[21FC] := L;
    M[21FD] := H;
    jump (07F0);

07F0:

    M[22FC] := L;
    M[22FD] := H;
    jump (07F3);

07F3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := F6;
    #return-to: 07F6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01E4);

07F6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := F9;
    #return-to: 07F9
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A7F);

07F9:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := FC;
    #return-to: 07FC
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (088D);

07FC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 07;
    let:16 a2 = (-1 + a1) in
    M[a2] := FF;
    #return-to: 07FF
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

07FF:

    jump (0800);

0800:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0801);

0801:

    M[20C1] := A;
    jump (0804);

0804:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 07;
    #return-to: 0807
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01CF);

0807:

    A := M[2067];
    jump (080A);

080A:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (080B);

080B:

    if (FlagCY) {
      jump (0872);
    } else {
      jump (080E);
    }

080E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 11;
    #return-to: 0811
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0213);

0811:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 14;
    #return-to: 0814
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01CF);

0814:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 17;
    #return-to: 0817
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (00B1);

0817:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 1A;
    #return-to: 081A
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19D1);

081A:

    B := 20;
    jump (081C);

081C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 1F;
    #return-to: 081F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (18FA);

081F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 22;
    #return-to: 0822
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1618);

0822:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 25;
    #return-to: 0825
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (190A);

0825:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 28;
    #return-to: 0828
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15F3);

0828:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2B;
    #return-to: 082B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0988);

082B:

    A := M[2082];
    jump (082E);

082E:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (082F);

082F:

    if (FlagZ) {
      jump (09EF);
    } else {
      jump (0832);
    }

0832:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 35;
    #return-to: 0835
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (170E);

0835:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 38;
    #return-to: 0838
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0935);

0838:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3B;
    #return-to: 083B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08D8);

083B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3E;
    #return-to: 083E
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (172C);

083E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 41;
    #return-to: 0841
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

0841:

    if (FlagZ) {
      jump (0849);
    } else {
      jump (0844);
    }

0844:

    B := 04;
    jump (0846);

0846:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 49;
    #return-to: 0849
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (18FA);

0849:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4C;
    #return-to: 084C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1775);

084C:

    jump (084E);

084E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 51;
    #return-to: 0851
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1804);

0851:

    jump (081F);

0857:

    D := 1A;
    E := BA;
    jump (085A);

085A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5D;
    #return-to: 085D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08F3);

085D:

    B := 98;
    jump (085F);

085F:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
    jump (0861);

0861:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (0862);

0862:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (0863);

0863:

    if (FlagCY) {
      jump (086D);
    } else {
      jump (0866);
    }

0866:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (0867);

0867:

    if (FlagCY) {
      jump (0798);
    } else {
      jump (086A);
    }

086A:

    jump (077F);

086D:

    A := 01;
    jump (086F);

086F:

    jump (079B);

0872:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 75;
    #return-to: 0875
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (021A);

0875:

    jump (0814);

0878:

    A := M[2008];
    jump (087B);

087B:

    B := A;
    jump (087C);

087C:

    H := M[200A];
    L := M[2009];
    jump (087F);

087F:

    D := H;
    E := L;
    H := D;
    L := E;
    jump (0880);

0880:

    jump (0886);

0886:

    A := M[2067];
    jump (0889);

0889:

    H := A;
    jump (088A);

088A:

    L := FC;
    jump (088C);

088C:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

088D:

    H := 2B;
    L := 11;
    jump (0890);

0890:

    D := 1B;
    E := 70;
    jump (0893);

0893:

    C := 0E;
    jump (0895);

0895:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := 98;
    #return-to: 0898
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08F3);

0898:

    A := M[2067];
    jump (089B);

089B:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (089C);

089C:

    A := 1C;
    jump (089E);

089E:

    H := 37;
    L := 11;
    jump (08A1);

08A1:

    if (!FlagCY) {
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 08;
      let:16 a2 = (-1 + a1) in
      M[a2] := A4;
      #return-to: 08A4
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (08FF);
    } else {
      jump (08A4);
    }

08A4:

    A := B0;
    jump (08A6);

08A6:

    M[20C0] := A;
    jump (08A9);

08A9:

    A := M[20C0];
    jump (08AC);

08AC:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (08AD);

08AD:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (08AE);
    }

08AE:

    let:8 a1 = (04 & A) in
    let:8 a2 = (04 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (08B0);

08B0:

    if (!FlagZ) {
      jump (08BC);
    } else {
      jump (08B3);
    }

08B3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := B6;
    #return-to: 08B6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09CA);

08B6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := B9;
    #return-to: 08B9
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1931);

08B9:

    jump (08A9);

08BC:

    B := 20;
    jump (08BE);

08BE:

    H := 27;
    L := 1C;
    jump (08C1);

08C1:

    A := M[2067];
    jump (08C4);

08C4:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (08C5);

08C5:

    if (FlagCY) {
      jump (08CB);
    } else {
      jump (08C8);
    }

08C8:

    H := 39;
    L := 1C;
    jump (08CB);

08CB:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := CE;
    #return-to: 08CE
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14CB);

08CE:

    jump (08A9);

08D1:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
    jump (08D3);

08D3:

    let:8 a1 = (03 & A) in
    let:8 a2 = (03 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (08D5);

08D5:

    let:16 a1 = addWithCarry(false,03,A) in
    let:8 a2 = (03 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (08D7);

08D7:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

08D8:

    A := M[2082];
    jump (08DB);

08DB:

    let:16 a1 = addWithCarry(!false,A,~09) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~09 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (08DD);

08DD:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (08DE);
    }

08DE:

    A := FB;
    jump (08E0);

08E0:

    M[207E] := A;
    jump (08E3);

08E3:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

08E4:

    A := M[20CE];
    jump (08E7);

08E7:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (08E8);

08E8:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (08E9);
    }

08E9:

    H := 39;
    L := 1C;
    jump (08EC);

08EC:

    B := 20;
    jump (08EE);

08EE:

    jump (14CB);

08F1:

    C := 03;
    jump (08F3);

08F3:

    A := M[(D,E)];
    jump (08F4);

08F4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08F5);

08F5:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 08;
    let:16 a2 = (-1 + a1) in
    M[a2] := F8;
    #return-to: 08F8
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08FF);

08F8:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    D := M[a1];
    E := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08F9);

08F9:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (08FA);

08FA:

    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (08FB);

08FB:

    if (!FlagZ) {
      jump (08F3);
    } else {
      jump (08FE);
    }

08FE:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

08FF:

    D := 1E;
    E := 00;
    jump (0902);

0902:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0903);

0903:

    H := 00;
    jump (0905);

0905:

    L := A;
    jump (0906);

0906:

    let:17 a1 = add17((H,L),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (0907);

0907:

    let:17 a1 = add17((H,L),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (0908);

0908:

    let:17 a1 = add17((H,L),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (0909);

0909:

    let:17 a1 = add17((D,E),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (090A);

090A:

    D := H;
    E := L;
    H := D;
    L := E;
    jump (090B);

090B:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (090C);

090C:

    B := 08;
    jump (090E);

090E:

    jump (0910);

0910:

    jump (1439);

0913:

    A := M[2009];
    jump (0916);

0916:

    let:16 a1 = addWithCarry(!false,A,~78) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~78 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0918);

0918:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0919);
    }

0919:

    H := M[2092];
    L := M[2091];
    jump (091C);

091C:

    A := L;
    jump (091D);

091D:

    let:8 a1 = (H | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (091E);

091E:

    if (!FlagZ) {
      jump (0929);
    } else {
      jump (0921);
    }

0921:

    H := 06;
    L := 00;
    jump (0924);

0924:

    A := 01;
    jump (0926);

0926:

    M[2083] := A;
    jump (0929);

0929:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (092A);

092A:

    M[2091] := L;
    M[2092] := H;
    jump (092D);

092D:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

092E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 31;
    #return-to: 0931
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1611);

0931:

    L := FF;
    jump (0933);

0933:

    A := M[(H,L)];
    jump (0934);

0934:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0935:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 38;
    #return-to: 0938
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1910);

0938:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0939);

0939:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (093A);

093A:

    A := M[(H,L)];
    jump (093B);

093B:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (093C);

093C:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (093D);
    }

093D:

    B := 15;
    jump (093F);

093F:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
    jump (0941);

0941:

    let:8 a1 = (08 & A) in
    let:8 a2 = (08 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0943);

0943:

    if (FlagZ) {
      jump (0948);
    } else {
      jump (0946);
    }

0946:

    B := 10;
    jump (0948);

0948:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4B;
    #return-to: 094B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09CA);

094B:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (094C);

094C:

    A := M[(H,L)];
    jump (094D);

094D:

    let:16 a1 = addWithCarry(!false,A,~B) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (094E);

094E:

    if (FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (094F);
    }

094F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 52;
    #return-to: 0952
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (092E);

0952:

    let:16 a1 = addWithCarry(true,M[(H,L)],00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0953);

0953:

    A := M[(H,L)];
    jump (0954);

0954:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0955);

0955:

    H := 25;
    L := 01;
    jump (0958);

0958:

    let:16 a1 = addWithCarry(true,H,00) in
    let:8 a2 = (H & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    H := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0959);

0959:

    let:16 a1 = addWithCarry(true,H,00) in
    let:8 a2 = (H & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    H := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (095A);

095A:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (095B);

095B:

    if (!FlagZ) {
      jump (0958);
    } else {
      jump (095E);
    }

095E:

    B := 10;
    jump (0960);

0960:

    D := 1C;
    E := 60;
    jump (0963);

0963:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 66;
    #return-to: 0966
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1439);

0966:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[a1];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagS := M[(SPH,SPL)][7];
    FlagZ := M[(SPH,SPL)][6];
    FlagA := M[(SPH,SPL)][4];
    FlagP := M[(SPH,SPL)][2];
    FlagCY := M[(SPH,SPL)][0];
    jump (0967);

0967:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0968);

0968:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 6B;
    #return-to: 096B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A8B);

096B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 6E;
    #return-to: 096E
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1910);

096E:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (096F);

096F:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0970);

0970:

    M[(H,L)] := 00;
    jump (0972);

0972:

    A := FF;
    jump (0974);

0974:

    M[2099] := A;
    jump (0977);

0977:

    B := 10;
    jump (0979);

0979:

    jump (18FA);

097C:

    H := 1D;
    L := A0;
    jump (097F);

097F:

    let:16 a1 = addWithCarry(!false,A,~02) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~02 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0981);

0981:

    if (FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0982);
    }

0982:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0983);

0983:

    let:16 a1 = addWithCarry(!false,A,~04) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~04 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0985);

0985:

    if (FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0986);
    }

0986:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0987);

0987:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0988:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := 8B;
    #return-to: 098B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09CA);

098B:

    A := M[20F1];
    jump (098E);

098E:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (098F);

098F:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0990);
    }

0990:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0991);

0991:

    M[20F1] := A;
    jump (0994);

0994:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0995);

0995:

    H := M[20F3];
    L := M[20F2];
    jump (0998);

0998:

    D := H;
    E := L;
    H := D;
    L := E;
    jump (0999);

0999:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (099A);

099A:

    A := M[(H,L)];
    jump (099B);

099B:

    let:16 a1 = addWithCarry(false,E,A) in
    let:8 a2 = (E & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (099C);

099C:

    let:8 a1 = (A & 0F) in
    let:16 a2 = addWithCarry(false,a1,06) in
    let:16 a3 = addWithCarry(((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1)[4],(A >> 04),00) in
    let:16 a4 = addWithCarry(false,a3[7:0],06) in
    let:8 a5 = (((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1) & 0F) in
    let:8 a6 = ((((((a3[7:0][1] || a3[7:0][2]) && a3[7:0][3]) || FlagCY) ? a4[7:0] : a3[7:0]) << 04) | a5) in
    A := a6;
    FlagS := a6[7];
    FlagZ := is_zero(a6);
    FlagA := ((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1)[4];
    FlagP := parity(a6);
    FlagCY := (((((a3[7:0][1] || a3[7:0][2]) && a3[7:0][3]) || FlagCY) ? a4[7:0] : a3[7:0])[4] || FlagCY);
    jump (099D);

099D:

    M[(H,L)] := A;
    jump (099E);

099E:

    E := A;
    jump (099F);

099F:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (09A0);

09A0:

    A := M[(H,L)];
    jump (09A1);

09A1:

    let:16 a1 = addWithCarry(FlagCY,D,A) in
    let:8 a2 = (D & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(FlagCY,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (09A2);

09A2:

    let:8 a1 = (A & 0F) in
    let:16 a2 = addWithCarry(false,a1,06) in
    let:16 a3 = addWithCarry(((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1)[4],(A >> 04),00) in
    let:16 a4 = addWithCarry(false,a3[7:0],06) in
    let:8 a5 = (((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1) & 0F) in
    let:8 a6 = ((((((a3[7:0][1] || a3[7:0][2]) && a3[7:0][3]) || FlagCY) ? a4[7:0] : a3[7:0]) << 04) | a5) in
    A := a6;
    FlagS := a6[7];
    FlagZ := is_zero(a6);
    FlagA := ((((a1[1] || a1[2]) && a1[3]) || FlagA) ? a2[7:0] : a1)[4];
    FlagP := parity(a6);
    FlagCY := (((((a3[7:0][1] || a3[7:0][2]) && a3[7:0][3]) || FlagCY) ? a4[7:0] : a3[7:0])[4] || FlagCY);
    jump (09A3);

09A3:

    M[(H,L)] := A;
    jump (09A4);

09A4:

    D := A;
    jump (09A5);

09A5:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (09A6);

09A6:

    A := M[(H,L)];
    jump (09A7);

09A7:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (09A8);

09A8:

    H := M[(H,L)];
    jump (09A9);

09A9:

    L := A;
    jump (09AA);

09AA:

    jump (09AD);

09AD:

    A := D;
    jump (09AE);

09AE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := B1;
    #return-to: 09B1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09B2);

09B1:

    A := E;
    jump (09B2);

09B2:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09B3);

09B3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09B4);

09B4:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (09B5);

09B5:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (09B6);

09B6:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (09B7);

09B7:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (09B8);

09B8:

    let:8 a1 = (0F & A) in
    let:8 a2 = (0F | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (09BA);

09BA:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := BD;
    #return-to: 09BD
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09C5);

09BD:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[a1];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagS := M[(SPH,SPL)][7];
    FlagZ := M[(SPH,SPL)][6];
    FlagA := M[(SPH,SPL)][4];
    FlagP := M[(SPH,SPL)][2];
    FlagCY := M[(SPH,SPL)][0];
    jump (09BE);

09BE:

    let:8 a1 = (0F & A) in
    let:8 a2 = (0F | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (09C0);

09C0:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := C3;
    #return-to: 09C3
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09C5);

09C3:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    D := M[a1];
    E := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09C4);

09C4:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

09C5:

    let:16 a1 = addWithCarry(false,1A,A) in
    let:8 a2 = (1A & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (09C7);

09C7:

    jump (08FF);

09CA:

    A := M[2067];
    jump (09CD);

09CD:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (09CE);

09CE:

    H := 20;
    L := F8;
    jump (09D1);

09D1:

    if (FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (09D2);
    }

09D2:

    H := 20;
    L := FC;
    jump (09D5);

09D5:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

09D6:

    H := 24;
    L := 02;
    jump (09D9);

09D9:

    M[(H,L)] := 00;
    jump (09DB);

09DB:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (09DC);

09DC:

    A := L;
    jump (09DD);

09DD:

    let:8 a1 = (1F & A) in
    let:8 a2 = (1F | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (09DF);

09DF:

    let:16 a1 = addWithCarry(!false,A,~1C) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~1C & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (09E1);

09E1:

    if (FlagCY) {
      jump (09E8);
    } else {
      jump (09E4);
    }

09E4:

    D := 00;
    E := 06;
    jump (09E7);

09E7:

    let:17 a1 = add17((D,E),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (09E8);

09E8:

    A := H;
    jump (09E9);

09E9:

    let:16 a1 = addWithCarry(!false,A,~40) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~40 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (09EB);

09EB:

    if (FlagCY) {
      jump (09D9);
    } else {
      jump (09EE);
    }

09EE:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

09EF:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := F2;
    #return-to: 09F2
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A3C);

09F2:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (09F3);

09F3:

    M[20E9] := A;
    jump (09F6);

09F6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 09;
    let:16 a2 = (-1 + a1) in
    M[a2] := F9;
    #return-to: 09F9
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

09F9:

    A := M[2067];
    jump (09FC);

09FC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09FD);

09FD:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 00;
    #return-to: 0A00
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01E4);

0A00:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[a1];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagS := M[(SPH,SPL)][7];
    FlagZ := M[(SPH,SPL)][6];
    FlagA := M[(SPH,SPL)][4];
    FlagP := M[(SPH,SPL)][2];
    FlagCY := M[(SPH,SPL)][0];
    jump (0A01);

0A01:

    M[2067] := A;
    jump (0A04);

0A04:

    A := M[2067];
    jump (0A07);

0A07:

    H := A;
    jump (0A08);

0A08:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A09);

0A09:

    L := FE;
    jump (0A0B);

0A0B:

    A := M[(H,L)];
    jump (0A0C);

0A0C:

    let:8 a1 = (07 & A) in
    let:8 a2 = (07 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0A0E);

0A0E:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0A0F);

0A0F:

    M[(H,L)] := A;
    jump (0A10);

0A10:

    H := 1D;
    L := A2;
    jump (0A13);

0A13:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0A14);

0A14:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0A15);

0A15:

    if (!FlagZ) {
      jump (0A13);
    } else {
      jump (0A18);
    }

0A18:

    A := M[(H,L)];
    jump (0A19);

0A19:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A1A);

0A1A:

    L := FC;
    jump (0A1C);

0A1C:

    M[(H,L)] := A;
    jump (0A1D);

0A1D:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0A1E);

0A1E:

    M[(H,L)] := 38;
    jump (0A20);

0A20:

    A := H;
    jump (0A21);

0A21:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (0A22);

0A22:

    if (FlagCY) {
      jump (0A33);
    } else {
      jump (0A25);
    }

0A25:

    A := 21;
    jump (0A27);

0A27:

    M[2098] := A;
    jump (0A2A);

0A2A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2D;
    #return-to: 0A2D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01F5);

0A2D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 30;
    #return-to: 0A30
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1904);

0A30:

    jump (0804);

0A33:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 36;
    #return-to: 0A36
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01EF);

0A36:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 39;
    #return-to: 0A39
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01C0);

0A39:

    jump (0804);

0A3C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3F;
    #return-to: 0A3F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

0A3F:

    if (!FlagZ) {
      jump (0A52);
    } else {
      jump (0A42);
    }

0A42:

    A := 30;
    jump (0A44);

0A44:

    M[20C0] := A;
    jump (0A47);

0A47:

    A := M[20C0];
    jump (0A4A);

0A4A:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0A4B);

0A4B:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (0A4C);
    }

0A4C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4F;
    #return-to: 0A4F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

0A4F:

    if (FlagZ) {
      jump (0A47);
    } else {
      jump (0A52);
    }

0A52:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 55;
    #return-to: 0A55
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

0A55:

    if (!FlagZ) {
      jump (0A52);
    } else {
      jump (0A58);
    }

0A58:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0A59:

    A := M[2015];
    jump (0A5C);

0A5C:

    let:16 a1 = addWithCarry(!false,A,~FF) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~FF & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0A5E);

0A5E:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0A5F:

    A := M[20EF];
    jump (0A62);

0A62:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0A63);

0A63:

    if (FlagZ) {
      jump (0A7C);
    } else {
      jump (0A66);
    }

0A66:

    C := B;
    jump (0A67);

0A67:

    B := 08;
    jump (0A69);

0A69:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 6C;
    #return-to: 0A6C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (18FA);

0A6C:

    B := C;
    jump (0A6D);

0A6D:

    A := B;
    jump (0A6E);

0A6E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 71;
    #return-to: 0A71
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (097C);

0A71:

    A := M[(H,L)];
    jump (0A72);

0A72:

    H := 20;
    L := F3;
    jump (0A75);

0A75:

    M[(H,L)] := 00;
    jump (0A77);

0A77:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0A78);

0A78:

    M[(H,L)] := A;
    jump (0A79);

0A79:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (0A7A);

0A7A:

    M[(H,L)] := 01;
    jump (0A7C);

0A7C:

    H := 20;
    L := 62;
    jump (0A7F);

0A7F:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0A80:

    A := 02;
    jump (0A82);

0A82:

    M[20C1] := A;
    jump (0A85);

0A85:

    jump (0A87);

0A87:

    A := M[20CB];
    jump (0A8A);

0A8A:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0A8B);

0A8B:

    if (FlagZ) {
      jump (0A85);
    } else {
      jump (0A8E);
    }

0A8E:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0A8F);

0A8F:

    M[20C1] := A;
    jump (0A92);

0A92:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0A93:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := D;
    let:16 a2 = (-1 + a1) in
    M[a2] := E;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A94);

0A94:

    A := M[(D,E)];
    jump (0A95);

0A95:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 98;
    #return-to: 0A98
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08FF);

0A98:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    D := M[a1];
    E := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A99);

0A99:

    A := 07;
    jump (0A9B);

0A9B:

    M[20C0] := A;
    jump (0A9E);

0A9E:

    A := M[20C0];
    jump (0AA1);

0AA1:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0AA2);

0AA2:

    if (!FlagZ) {
      jump (0A9E);
    } else {
      jump (0AA5);
    }

0AA5:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (0AA6);

0AA6:

    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0AA7);

0AA7:

    if (!FlagZ) {
      jump (0A93);
    } else {
      jump (0AAA);
    }

0AAA:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0AAB:

    H := 20;
    L := 50;
    jump (0AAE);

0AAE:

    jump (024B);

0AB1:

    A := 40;
    jump (0AB3);

0AB3:

    jump (0AD7);

0AB6:

    A := 80;
    jump (0AB8);

0AB8:

    jump (0AD7);

0ABB:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0ABC);

0ABC:

    jump (0072);

0ABF:

    A := M[20C1];
    jump (0AC2);

0AC2:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (0AC3);

0AC3:

    if (FlagCY) {
      jump (0ABB);
    } else {
      jump (0AC6);
    }

0AC6:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (0AC7);

0AC7:

    if (FlagCY) {
      jump (1868);
    } else {
      jump (0ACA);
    }

0ACA:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (0ACB);

0ACB:

    if (FlagCY) {
      jump (0AAB);
    } else {
      jump (0ACE);
    }

0ACE:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0ACF:

    H := 2B;
    L := 14;
    jump (0AD2);

0AD2:

    C := 0F;
    jump (0AD4);

0AD4:

    jump (0A93);

0AD7:

    M[20C0] := A;
    jump (0ADA);

0ADA:

    A := M[20C0];
    jump (0ADD);

0ADD:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0ADE);

0ADE:

    if (!FlagZ) {
      jump (0ADA);
    } else {
      jump (0AE1);
    }

0AE1:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

0AE2:

    H := 20;
    L := C2;
    jump (0AE5);

0AE5:

    B := 0C;
    jump (0AE7);

0AE7:

    jump (1A32);

0AEA:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0AEB);

0AEB:

    sound_control(Ufo,A[0]);
    sound_control(Shot,A[1]);
    sound_control(PlayerDie,A[2]);
    sound_control(InvaderDie,A[3]);
    sound_control(ExtraLife,A[4]);
    jump (0AED);

0AED:

    sound_control(FleetMovement1,A[0]);
    sound_control(FleetMovement2,A[1]);
    sound_control(FleetMovement3,A[2]);
    sound_control(FleetMovement4,A[3]);
    sound_control(UfoHit,A[4]);
    jump (0AEF);

0AEF:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := F2;
    #return-to: 0AF2
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1982);

0AF2:

    enable_interrupts()
    jump (0AF3);

0AF3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0A;
    let:16 a2 = (-1 + a1) in
    M[a2] := F6;
    #return-to: 0AF6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

0AF6:

    A := M[20EC];
    jump (0AF9);

0AF9:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0AFA);

0AFA:

    H := 30;
    L := 17;
    jump (0AFD);

0AFD:

    C := 04;
    jump (0AFF);

0AFF:

    if (!FlagZ) {
      jump (0BE8);
    } else {
      jump (0B02);
    }

0B02:

    D := 1C;
    E := FA;
    jump (0B05);

0B05:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 08;
    #return-to: 0B08
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A93);

0B08:

    D := 1D;
    E := AF;
    jump (0B0B);

0B0B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 0E;
    #return-to: 0B0E
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0ACF);

0B0E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 11;
    #return-to: 0B11
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

0B11:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 14;
    #return-to: 0B14
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1815);

0B14:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 17;
    #return-to: 0B17
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB6);

0B17:

    A := M[20EC];
    jump (0B1A);

0B1A:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0B1B);

0B1B:

    if (!FlagZ) {
      jump (0B4A);
    } else {
      jump (0B1E);
    }

0B1E:

    D := 1A;
    E := 95;
    jump (0B21);

0B21:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 24;
    #return-to: 0B24
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AE2);

0B24:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 27;
    #return-to: 0B27
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A80);

0B27:

    D := 1B;
    E := B0;
    jump (0B2A);

0B2A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2D;
    #return-to: 0B2D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AE2);

0B2D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 30;
    #return-to: 0B30
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A80);

0B30:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 33;
    #return-to: 0B33
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

0B33:

    D := 1F;
    E := C9;
    jump (0B36);

0B36:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 39;
    #return-to: 0B39
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AE2);

0B39:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3C;
    #return-to: 0B3C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A80);

0B3C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3F;
    #return-to: 0B3F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

0B3F:

    H := 33;
    L := B7;
    jump (0B42);

0B42:

    B := 0A;
    jump (0B44);

0B44:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 47;
    #return-to: 0B47
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14CB);

0B47:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4A;
    #return-to: 0B4A
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB6);

0B4A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4D;
    #return-to: 0B4D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

0B4D:

    A := M[21FF];
    jump (0B50);

0B50:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0B51);

0B51:

    if (!FlagZ) {
      jump (0B5D);
    } else {
      jump (0B54);
    }

0B54:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 57;
    #return-to: 0B57
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08D1);

0B57:

    M[21FF] := A;
    jump (0B5A);

0B5A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5D;
    #return-to: 0B5D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A7F);

0B5D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 60;
    #return-to: 0B60
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01E4);

0B60:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 63;
    #return-to: 0B63
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01C0);

0B63:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 66;
    #return-to: 0B66
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01EF);

0B66:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 69;
    #return-to: 0B69
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (021A);

0B69:

    A := 01;
    jump (0B6B);

0B6B:

    M[20C1] := A;
    jump (0B6E);

0B6E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 71;
    #return-to: 0B71
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01CF);

0B71:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 74;
    #return-to: 0B74
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1618);

0B74:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 77;
    #return-to: 0B77
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0BF1);

0B77:

    jump (0B79);

0B79:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7C;
    #return-to: 0B7C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

0B7C:

    if (FlagZ) {
      jump (0B71);
    } else {
      jump (0B7F);
    }

0B7F:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0B80);

0B80:

    M[2025] := A;
    jump (0B83);

0B83:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 86;
    #return-to: 0B86
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

0B86:

    if (!FlagZ) {
      jump (0B83);
    } else {
      jump (0B89);
    }

0B89:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (0B8A);

0B8A:

    M[20C1] := A;
    jump (0B8D);

0B8D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 90;
    #return-to: 0B90
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

0B90:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 93;
    #return-to: 0B93
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1988);

0B93:

    C := 0C;
    jump (0B95);

0B95:

    H := 2C;
    L := 11;
    jump (0B98);

0B98:

    D := 1F;
    E := 90;
    jump (0B9B);

0B9B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := 9E;
    #return-to: 0B9E
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08F3);

0B9E:

    A := M[20EC];
    jump (0BA1);

0BA1:

    let:16 a1 = addWithCarry(!false,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0BA3);

0BA3:

    if (!FlagZ) {
      jump (0BAE);
    } else {
      jump (0BA6);
    }

0BA6:

    H := 33;
    L := 11;
    jump (0BA9);

0BA9:

    A := 02;
    jump (0BAB);

0BAB:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := AE;
    #return-to: 0BAE
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08FF);

0BAE:

    B := 1F;
    C := 9C;
    jump (0BB1);

0BB1:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := B4;
    #return-to: 0BB4
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1856);

0BB4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := B7;
    #return-to: 0BB7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (184C);

0BB7:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
    jump (0BB9);

0BB9:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (0BBA);

0BBA:

    if (FlagCY) {
      jump (0BC3);
    } else {
      jump (0BBD);
    }

0BBD:

    B := 1F;
    C := A0;
    jump (0BC0);

0BC0:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C3;
    #return-to: 0BC3
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (183A);

0BC3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C6;
    #return-to: 0BC6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB6);

0BC6:

    A := M[20EC];
    jump (0BC9);

0BC9:

    let:16 a1 = addWithCarry(!false,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (0BCB);

0BCB:

    if (!FlagZ) {
      jump (0BDA);
    } else {
      jump (0BCE);
    }

0BCE:

    D := 1F;
    E := D5;
    jump (0BD1);

0BD1:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := D4;
    #return-to: 0BD4
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AE2);

0BD4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := D7;
    #return-to: 0BD7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A80);

0BD7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := DA;
    #return-to: 0BDA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (189E);

0BDA:

    H := 20;
    L := EC;
    jump (0BDD);

0BDD:

    A := M[(H,L)];
    jump (0BDE);

0BDE:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (0BDF);

0BDF:

    let:8 a1 = (01 & A) in
    let:8 a2 = (01 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (0BE1);

0BE1:

    M[(H,L)] := A;
    jump (0BE2);

0BE2:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := E5;
    #return-to: 0BE5
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

0BE5:

    jump (18DF);

0BE8:

    D := 1D;
    E := AB;
    jump (0BEB);

0BEB:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := EE;
    #return-to: 0BEE
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A93);

0BEE:

    jump (0B0B);

0BF1:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 0B;
    let:16 a2 = (-1 + a1) in
    M[a2] := F4;
    #return-to: 0BF4
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (190A);

0BF4:

    jump (199A);

1400:

    jump (1401);

1401:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 04;
    #return-to: 1404
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1474);

1404:

    jump (1405);

1405:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1406);

1406:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1407);

1407:

    A := M[(D,E)];
    jump (1408);

1408:

    Shifter_HI := A;
    Shifter_LO := Shifter_HI;
    jump (140A);

140A:

    let:8 a1 = (Shifter_OFF & 07) in
    let:8 a2 = (~Shifter_OFF & 07) in
    let:8 a3 = ((Shifter_HI << a1) | ((Shifter_LO >> a2) >> 01)) in
    A := a3;
    jump (140C);

140C:

    let:8 a1 = (M[(H,L)] | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (140D);

140D:

    M[(H,L)] := A;
    jump (140E);

140E:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (140F);

140F:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (1410);

1410:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1411);

1411:

    Shifter_HI := A;
    Shifter_LO := Shifter_HI;
    jump (1413);

1413:

    let:8 a1 = (Shifter_OFF & 07) in
    let:8 a2 = (~Shifter_OFF & 07) in
    let:8 a3 = ((Shifter_HI << a1) | ((Shifter_LO >> a2) >> 01)) in
    A := a3;
    jump (1415);

1415:

    let:8 a1 = (M[(H,L)] | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1416);

1416:

    M[(H,L)] := A;
    jump (1417);

1417:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1418);

1418:

    B := 00;
    C := 20;
    jump (141B);

141B:

    let:17 a1 = add17((B,C),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (141C);

141C:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (141D);

141D:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (141E);

141E:

    if (!FlagZ) {
      jump (1405);
    } else {
      jump (1421);
    }

1421:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1424:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 27;
    #return-to: 1427
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1474);

1427:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1428);

1428:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1429);

1429:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (142A);

142A:

    M[(H,L)] := A;
    jump (142B);

142B:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (142C);

142C:

    M[(H,L)] := A;
    jump (142D);

142D:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (142E);

142E:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (142F);

142F:

    B := 00;
    C := 20;
    jump (1432);

1432:

    let:17 a1 = add17((B,C),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (1433);

1433:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1434);

1434:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1435);

1435:

    if (!FlagZ) {
      jump (1427);
    } else {
      jump (1438);
    }

1438:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1439:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (143A);

143A:

    A := M[(D,E)];
    jump (143B);

143B:

    M[(H,L)] := A;
    jump (143C);

143C:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (143D);

143D:

    B := 00;
    C := 20;
    jump (1440);

1440:

    let:17 a1 = add17((B,C),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (1441);

1441:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1442);

1442:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1443);

1443:

    if (!FlagZ) {
      jump (1439);
    } else {
      jump (1446);
    }

1446:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1452:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 55;
    #return-to: 1455
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1474);

1455:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1456);

1456:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1457);

1457:

    A := M[(D,E)];
    jump (1458);

1458:

    Shifter_HI := A;
    Shifter_LO := Shifter_HI;
    jump (145A);

145A:

    let:8 a1 = (Shifter_OFF & 07) in
    let:8 a2 = (~Shifter_OFF & 07) in
    let:8 a3 = ((Shifter_HI << a1) | ((Shifter_LO >> a2) >> 01)) in
    A := a3;
    jump (145C);

145C:

    A := ~A;
    jump (145D);

145D:

    let:8 a1 = (M[(H,L)] & A) in
    let:8 a2 = (M[(H,L)] | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (145E);

145E:

    M[(H,L)] := A;
    jump (145F);

145F:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1460);

1460:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (1461);

1461:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1462);

1462:

    Shifter_HI := A;
    Shifter_LO := Shifter_HI;
    jump (1464);

1464:

    let:8 a1 = (Shifter_OFF & 07) in
    let:8 a2 = (~Shifter_OFF & 07) in
    let:8 a3 = ((Shifter_HI << a1) | ((Shifter_LO >> a2) >> 01)) in
    A := a3;
    jump (1466);

1466:

    A := ~A;
    jump (1467);

1467:

    let:8 a1 = (M[(H,L)] & A) in
    let:8 a2 = (M[(H,L)] | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1468);

1468:

    M[(H,L)] := A;
    jump (1469);

1469:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (146A);

146A:

    B := 00;
    C := 20;
    jump (146D);

146D:

    let:17 a1 = add17((B,C),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (146E);

146E:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (146F);

146F:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1470);

1470:

    if (!FlagZ) {
      jump (1455);
    } else {
      jump (1473);
    }

1473:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1474:

    A := L;
    jump (1475);

1475:

    let:8 a1 = (07 & A) in
    let:8 a2 = (07 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1477);

1477:

    Shifter_OFF := A;
    jump (1479);

1479:

    jump (1A47);

147C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (147D);

147D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (147E);

147E:

    A := M[(H,L)];
    jump (147F);

147F:

    M[(D,E)] := A;
    jump (1480);

1480:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (1481);

1481:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1482);

1482:

    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1483);

1483:

    if (!FlagZ) {
      jump (147E);
    } else {
      jump (1486);
    }

1486:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1487);

1487:

    B := 00;
    C := 20;
    jump (148A);

148A:

    let:17 a1 = add17((B,C),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (148B);

148B:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (148C);

148C:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (148D);

148D:

    if (!FlagZ) {
      jump (147C);
    } else {
      jump (1490);
    }

1490:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1491:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 14;
    let:16 a2 = (-1 + a1) in
    M[a2] := 94;
    #return-to: 1494
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1474);

1494:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1495);

1495:

    M[2061] := A;
    jump (1498);

1498:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1499);

1499:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (149A);

149A:

    A := M[(D,E)];
    jump (149B);

149B:

    Shifter_HI := A;
    Shifter_LO := Shifter_HI;
    jump (149D);

149D:

    let:8 a1 = (Shifter_OFF & 07) in
    let:8 a2 = (~Shifter_OFF & 07) in
    let:8 a3 = ((Shifter_HI << a1) | ((Shifter_LO >> a2) >> 01)) in
    A := a3;
    jump (149F);

149F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14A0);

14A0:

    let:8 a1 = (M[(H,L)] & A) in
    let:8 a2 = (M[(H,L)] | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (14A1);

14A1:

    if (FlagZ) {
      jump (14A9);
    } else {
      jump (14A4);
    }

14A4:

    A := 01;
    jump (14A6);

14A6:

    M[2061] := A;
    jump (14A9);

14A9:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[a1];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagS := M[(SPH,SPL)][7];
    FlagZ := M[(SPH,SPL)][6];
    FlagA := M[(SPH,SPL)][4];
    FlagP := M[(SPH,SPL)][2];
    FlagCY := M[(SPH,SPL)][0];
    jump (14AA);

14AA:

    let:8 a1 = (M[(H,L)] | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (14AB);

14AB:

    M[(H,L)] := A;
    jump (14AC);

14AC:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (14AD);

14AD:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (14AE);

14AE:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (14AF);

14AF:

    Shifter_HI := A;
    Shifter_LO := Shifter_HI;
    jump (14B1);

14B1:

    let:8 a1 = (Shifter_OFF & 07) in
    let:8 a2 = (~Shifter_OFF & 07) in
    let:8 a3 = ((Shifter_HI << a1) | ((Shifter_LO >> a2) >> 01)) in
    A := a3;
    jump (14B3);

14B3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14B4);

14B4:

    let:8 a1 = (M[(H,L)] & A) in
    let:8 a2 = (M[(H,L)] | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (14B5);

14B5:

    if (FlagZ) {
      jump (14BD);
    } else {
      jump (14B8);
    }

14B8:

    A := 01;
    jump (14BA);

14BA:

    M[2061] := A;
    jump (14BD);

14BD:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[a1];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagS := M[(SPH,SPL)][7];
    FlagZ := M[(SPH,SPL)][6];
    FlagA := M[(SPH,SPL)][4];
    FlagP := M[(SPH,SPL)][2];
    FlagCY := M[(SPH,SPL)][0];
    jump (14BE);

14BE:

    let:8 a1 = (M[(H,L)] | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (14BF);

14BF:

    M[(H,L)] := A;
    jump (14C0);

14C0:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14C1);

14C1:

    B := 00;
    C := 20;
    jump (14C4);

14C4:

    let:17 a1 = add17((B,C),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (14C5);

14C5:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14C6);

14C6:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (14C7);

14C7:

    if (!FlagZ) {
      jump (1498);
    } else {
      jump (14CA);
    }

14CA:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

14CB:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (14CC);

14CC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14CD);

14CD:

    M[(H,L)] := A;
    jump (14CE);

14CE:

    B := 00;
    C := 20;
    jump (14D1);

14D1:

    let:17 a1 = add17((B,C),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (14D2);

14D2:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14D3);

14D3:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (14D4);

14D4:

    if (!FlagZ) {
      jump (14CC);
    } else {
      jump (14D7);
    }

14D7:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

14D8:

    A := M[2025];
    jump (14DB);

14DB:

    let:16 a1 = addWithCarry(!false,A,~05) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~05 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (14DD);

14DD:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (14DE);
    }

14DE:

    let:16 a1 = addWithCarry(!false,A,~02) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~02 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (14E0);

14E0:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (14E1);
    }

14E1:

    A := M[2029];
    jump (14E4);

14E4:

    let:16 a1 = addWithCarry(!false,A,~D8) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~D8 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (14E6);

14E6:

    B := A;
    jump (14E7);

14E7:

    if (!FlagCY) {
      jump (1530);
    } else {
      jump (14EA);
    }

14EA:

    A := M[2002];
    jump (14ED);

14ED:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (14EE);

14EE:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (14EF);
    }

14EF:

    A := B;
    jump (14F0);

14F0:

    let:16 a1 = addWithCarry(!false,A,~CE) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~CE & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (14F2);

14F2:

    if (!FlagCY) {
      jump (1579);
    } else {
      jump (14F5);
    }

14F5:

    let:16 a1 = addWithCarry(false,06,A) in
    let:8 a2 = (06 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (14F7);

14F7:

    B := A;
    jump (14F8);

14F8:

    A := M[2009];
    jump (14FB);

14FB:

    let:16 a1 = addWithCarry(!false,A,~90) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~90 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (14FD);

14FD:

    if (!FlagCY) {
      jump (1504);
    } else {
      jump (1500);
    }

1500:

    let:16 a1 = addWithCarry(!false,A,~B) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (1501);

1501:

    if (!FlagCY) {
      jump (1530);
    } else {
      jump (1504);
    }

1504:

    L := B;
    jump (1505);

1505:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 08;
    #return-to: 1508
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1562);

1508:

    A := M[202A];
    jump (150B);

150B:

    H := A;
    jump (150C);

150C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 0F;
    #return-to: 150F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (156F);

150F:

    M[2064] := L;
    M[2065] := H;
    jump (1512);

1512:

    A := 05;
    jump (1514);

1514:

    M[2025] := A;
    jump (1517);

1517:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 1A;
    #return-to: 151A
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1581);

151A:

    A := M[(H,L)];
    jump (151B);

151B:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (151C);

151C:

    if (FlagZ) {
      jump (1530);
    } else {
      jump (151F);
    }

151F:

    M[(H,L)] := 00;
    jump (1521);

1521:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 24;
    #return-to: 1524
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A5F);

1524:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 27;
    #return-to: 1527
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

1527:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2A;
    #return-to: 152A
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15D3);

152A:

    A := 10;
    jump (152C);

152C:

    M[2003] := A;
    jump (152F);

152F:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1530:

    A := 03;
    jump (1532);

1532:

    M[2025] := A;
    jump (1535);

1535:

    jump (154A);

1538:

    H := 20;
    L := 03;
    jump (153B);

153B:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (153C);

153C:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (153D);
    }

153D:

    H := M[2065];
    L := M[2064];
    jump (1540);

1540:

    B := 10;
    jump (1542);

1542:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 45;
    #return-to: 1545
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1424);

1545:

    A := 04;
    jump (1547);

1547:

    M[2025] := A;
    jump (154A);

154A:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (154B);

154B:

    M[2002] := A;
    jump (154E);

154E:

    B := F7;
    jump (1550);

1550:

    jump (19DC);

1554:

    C := 00;
    jump (1556);

1556:

    let:16 a1 = addWithCarry(!false,A,~H) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~H & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (1557);

1557:

    if (!FlagCY) {
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 15;
      let:16 a2 = (-1 + a1) in
      M[a2] := 5A;
      #return-to: 155A
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (1590);
    } else {
      jump (155A);
    }

155A:

    let:16 a1 = addWithCarry(!false,A,~H) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~H & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (155B);

155B:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (155C);
    }

155C:

    let:16 a1 = addWithCarry(false,10,A) in
    let:8 a2 = (10 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (155E);

155E:

    let:16 a1 = addWithCarry(true,C,00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (155F);

155F:

    jump (155A);

1562:

    A := M[2009];
    jump (1565);

1565:

    H := L;
    jump (1566);

1566:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 69;
    #return-to: 1569
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1554);

1569:

    B := C;
    jump (156A);

156A:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (156B);

156B:

    let:16 a1 = addWithCarry(!FlagCY,A,~10) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~10 & 0F) in
    let:16 a4 = addWithCarry(!FlagCY,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (156D);

156D:

    L := A;
    jump (156E);

156E:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

156F:

    A := M[200A];
    jump (1572);

1572:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := 75;
    #return-to: 1575
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1554);

1575:

    let:16 a1 = addWithCarry(!FlagCY,A,~10) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~10 & 0F) in
    let:16 a4 = addWithCarry(!FlagCY,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (1577);

1577:

    H := A;
    jump (1578);

1578:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1579:

    A := 01;
    jump (157B);

157B:

    M[2085] := A;
    jump (157E);

157E:

    jump (1545);

1581:

    A := B;
    jump (1582);

1582:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (1583);

1583:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (1584);

1584:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (1585);

1585:

    let:16 a1 = addWithCarry(false,B,A) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (1586);

1586:

    let:16 a1 = addWithCarry(false,B,A) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (1587);

1587:

    let:16 a1 = addWithCarry(false,B,A) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (1588);

1588:

    let:16 a1 = addWithCarry(false,C,A) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (1589);

1589:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (158A);

158A:

    L := A;
    jump (158B);

158B:

    A := M[2067];
    jump (158E);

158E:

    H := A;
    jump (158F);

158F:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1590:

    let:16 a1 = addWithCarry(true,C,00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1591);

1591:

    let:16 a1 = addWithCarry(false,10,A) in
    let:8 a2 = (10 & 0F) in
    let:8 a3 = (A & 0F) in
    let:16 a4 = addWithCarry(false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := a1[15:8][0];
    jump (1593);

1593:

    if (FlagS) {
      jump (1590);
    } else {
      jump (1596);
    }

1596:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1597:

    A := M[200D];
    jump (159A);

159A:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (159B);

159B:

    if (!FlagZ) {
      jump (15B7);
    } else {
      jump (159E);
    }

159E:

    H := 3E;
    L := A4;
    jump (15A1);

15A1:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := A4;
    #return-to: 15A4
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15C5);

15A4:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (15A5);
    }

15A5:

    B := FE;
    jump (15A7);

15A7:

    A := 01;
    jump (15A9);

15A9:

    M[200D] := A;
    jump (15AC);

15AC:

    A := B;
    jump (15AD);

15AD:

    M[2008] := A;
    jump (15B0);

15B0:

    A := M[200E];
    jump (15B3);

15B3:

    M[2007] := A;
    jump (15B6);

15B6:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

15B7:

    H := 25;
    L := 24;
    jump (15BA);

15BA:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := BD;
    #return-to: 15BD
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15C5);

15BD:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (15BE);
    }

15BE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := C1;
    #return-to: 15C1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (18F1);

15C1:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (15C2);

15C2:

    jump (15A9);

15C5:

    B := 17;
    jump (15C7);

15C7:

    A := M[(H,L)];
    jump (15C8);

15C8:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (15C9);

15C9:

    if (!FlagZ) {
      jump (166B);
    } else {
      jump (15CC);
    }

15CC:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (15CD);

15CD:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (15CE);

15CE:

    if (!FlagZ) {
      jump (15C7);
    } else {
      jump (15D1);
    }

15D1:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

15D3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := D6;
    #return-to: 15D6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1474);

15D6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15D7);

15D7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15D8);

15D8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15D9);

15D9:

    A := M[(D,E)];
    jump (15DA);

15DA:

    Shifter_HI := A;
    Shifter_LO := Shifter_HI;
    jump (15DC);

15DC:

    let:8 a1 = (Shifter_OFF & 07) in
    let:8 a2 = (~Shifter_OFF & 07) in
    let:8 a3 = ((Shifter_HI << a1) | ((Shifter_LO >> a2) >> 01)) in
    A := a3;
    jump (15DE);

15DE:

    M[(H,L)] := A;
    jump (15DF);

15DF:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (15E0);

15E0:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (15E1);

15E1:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (15E2);

15E2:

    Shifter_HI := A;
    Shifter_LO := Shifter_HI;
    jump (15E4);

15E4:

    let:8 a1 = (Shifter_OFF & 07) in
    let:8 a2 = (~Shifter_OFF & 07) in
    let:8 a3 = ((Shifter_HI << a1) | ((Shifter_LO >> a2) >> 01)) in
    A := a3;
    jump (15E6);

15E6:

    M[(H,L)] := A;
    jump (15E7);

15E7:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15E8);

15E8:

    B := 00;
    C := 20;
    jump (15EB);

15EB:

    let:17 a1 = add17((B,C),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (15EC);

15EC:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15ED);

15ED:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (15EE);

15EE:

    if (!FlagZ) {
      jump (15D7);
    } else {
      jump (15F1);
    }

15F1:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (15F2);

15F2:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

15F3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 15;
    let:16 a2 = (-1 + a1) in
    M[a2] := F6;
    #return-to: 15F6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1611);

15F6:

    B := 37;
    C := 00;
    jump (15F9);

15F9:

    A := M[(H,L)];
    jump (15FA);

15FA:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (15FB);

15FB:

    if (FlagZ) {
      jump (15FF);
    } else {
      jump (15FE);
    }

15FE:

    let:16 a1 = addWithCarry(true,C,00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (15FF);

15FF:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1600);

1600:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1601);

1601:

    if (!FlagZ) {
      jump (15F9);
    } else {
      jump (1604);
    }

1604:

    A := C;
    jump (1605);

1605:

    M[2082] := A;
    jump (1608);

1608:

    let:16 a1 = addWithCarry(!false,A,~01) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~01 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (160A);

160A:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (160B);
    }

160B:

    H := 20;
    L := 6B;
    jump (160E);

160E:

    M[(H,L)] := 01;
    jump (1610);

1610:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1611:

    L := 00;
    jump (1613);

1613:

    A := M[2067];
    jump (1616);

1616:

    H := A;
    jump (1617);

1617:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1618:

    A := M[2015];
    jump (161B);

161B:

    let:16 a1 = addWithCarry(!false,A,~FF) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~FF & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (161D);

161D:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (161E);
    }

161E:

    H := 20;
    L := 10;
    jump (1621);

1621:

    A := M[(H,L)];
    jump (1622);

1622:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1623);

1623:

    B := M[(H,L)];
    jump (1624);

1624:

    let:8 a1 = (B | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1625);

1625:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (1626);
    }

1626:

    A := M[2025];
    jump (1629);

1629:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (162A);

162A:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (162B);
    }

162B:

    A := M[20EF];
    jump (162E);

162E:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (162F);

162F:

    if (FlagZ) {
      jump (1652);
    } else {
      jump (1632);
    }

1632:

    A := M[202D];
    jump (1635);

1635:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1636);

1636:

    if (!FlagZ) {
      jump (1648);
    } else {
      jump (1639);
    }

1639:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3C;
    #return-to: 163C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (17C0);

163C:

    let:8 a1 = (10 & A) in
    let:8 a2 = (10 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (163E);

163E:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (163F);
    }

163F:

    A := 01;
    jump (1641);

1641:

    M[2025] := A;
    jump (1644);

1644:

    M[202D] := A;
    jump (1647);

1647:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1648:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4B;
    #return-to: 164B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (17C0);

164B:

    let:8 a1 = (10 & A) in
    let:8 a2 = (10 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (164D);

164D:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (164E);
    }

164E:

    M[202D] := A;
    jump (1651);

1651:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1652:

    H := 20;
    L := 25;
    jump (1655);

1655:

    M[(H,L)] := 01;
    jump (1657);

1657:

    H := M[20EE];
    L := M[20ED];
    jump (165A);

165A:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (165B);

165B:

    A := L;
    jump (165C);

165C:

    let:16 a1 = addWithCarry(!false,A,~7E) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~7E & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (165E);

165E:

    if (FlagCY) {
      jump (1663);
    } else {
      jump (1661);
    }

1661:

    L := 74;
    jump (1663);

1663:

    M[20ED] := L;
    M[20EE] := H;
    jump (1666);

1666:

    A := M[(H,L)];
    jump (1667);

1667:

    M[201D] := A;
    jump (166A);

166A:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

166B:

    FlagCY := true;
    jump (166C);

166C:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

166D:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (166E);

166E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := 71;
    #return-to: 1671
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A8B);

1671:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := 74;
    #return-to: 1674
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1910);

1674:

    M[(H,L)] := 00;
    jump (1676);

1676:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := 79;
    #return-to: 1679
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09CA);

1679:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (167A);

167A:

    D := 20;
    E := F5;
    jump (167D);

167D:

    A := M[(D,E)];
    jump (167E);

167E:

    let:16 a1 = addWithCarry(!false,A,~M[(H,L)]) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~M[(H,L)] & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (167F);

167F:

    let:16 a1 = (-1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (1680);

1680:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1681);

1681:

    A := M[(D,E)];
    jump (1682);

1682:

    if (FlagZ) {
      jump (168B);
    } else {
      jump (1685);
    }

1685:

    if (!FlagCY) {
      jump (1698);
    } else {
      jump (1688);
    }

1688:

    jump (168F);

168B:

    let:16 a1 = addWithCarry(!false,A,~M[(H,L)]) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~M[(H,L)] & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (168C);

168C:

    if (!FlagCY) {
      jump (1698);
    } else {
      jump (168F);
    }

168F:

    A := M[(H,L)];
    jump (1690);

1690:

    M[(D,E)] := A;
    jump (1691);

1691:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (1692);

1692:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1693);

1693:

    A := M[(H,L)];
    jump (1694);

1694:

    M[(D,E)] := A;
    jump (1695);

1695:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := 98;
    #return-to: 1698
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1950);

1698:

    A := M[20CE];
    jump (169B);

169B:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (169C);

169C:

    if (FlagZ) {
      jump (16C9);
    } else {
      jump (169F);
    }

169F:

    H := 28;
    L := 03;
    jump (16A2);

16A2:

    D := 1A;
    E := A6;
    jump (16A5);

16A5:

    C := 14;
    jump (16A7);

16A7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := AA;
    #return-to: 16AA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A93);

16AA:

    let:16 a1 = addWithCarry(!true,H,~00) in
    let:8 a2 = (H & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    H := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (16AB);

16AB:

    let:16 a1 = addWithCarry(!true,H,~00) in
    let:8 a2 = (H & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    H := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (16AC);

16AC:

    B := 1B;
    jump (16AE);

16AE:

    A := M[2067];
    jump (16B1);

16B1:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (16B2);

16B2:

    if (FlagCY) {
      jump (16B7);
    } else {
      jump (16B5);
    }

16B5:

    B := 1C;
    jump (16B7);

16B7:

    A := B;
    jump (16B8);

16B8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := BB;
    #return-to: 16BB
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08FF);

16BB:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := BE;
    #return-to: 16BE
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

16BE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := C1;
    #return-to: 16C1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (18E7);

16C1:

    A := M[(H,L)];
    jump (16C2);

16C2:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (16C3);

16C3:

    if (FlagZ) {
      jump (16C9);
    } else {
      jump (16C6);
    }

16C6:

    jump (02ED);

16C9:

    H := 2D;
    L := 18;
    jump (16CC);

16CC:

    D := 1A;
    E := A6;
    jump (16CF);

16CF:

    C := 0A;
    jump (16D1);

16D1:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := D4;
    #return-to: 16D4
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A93);

16D4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := D7;
    #return-to: 16D7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB6);

16D7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := DA;
    #return-to: 16DA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

16DA:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (16DB);

16DB:

    M[20EF] := A;
    jump (16DE);

16DE:

    sound_control(FleetMovement1,A[0]);
    sound_control(FleetMovement2,A[1]);
    sound_control(FleetMovement3,A[2]);
    sound_control(FleetMovement4,A[3]);
    sound_control(UfoHit,A[4]);
    jump (16E0);

16E0:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := E3;
    #return-to: 16E3
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19D1);

16E3:

    jump (0B89);

16E6:

    SPH := 24;
    SPL := 00;
    jump (16E9);

16E9:

    enable_interrupts()
    jump (16EA);

16EA:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (16EB);

16EB:

    M[2015] := A;
    jump (16EE);

16EE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := F1;
    #return-to: 16F1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14D8);

16F1:

    B := 04;
    jump (16F3);

16F3:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := F6;
    #return-to: 16F6
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (18FA);

16F6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := F9;
    #return-to: 16F9
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A59);

16F9:

    if (!FlagZ) {
      jump (16EE);
    } else {
      jump (16FC);
    }

16FC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 16;
    let:16 a2 = (-1 + a1) in
    M[a2] := FF;
    #return-to: 16FF
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19D7);

16FF:

    H := 27;
    L := 01;
    jump (1702);

1702:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := 05;
    #return-to: 1705
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19FA);

1705:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1706);

1706:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := 09;
    #return-to: 1709
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A8B);

1709:

    B := FB;
    jump (170B);

170B:

    jump (196B);

170E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := 11;
    #return-to: 1711
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09CA);

1711:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1712);

1712:

    A := M[(H,L)];
    jump (1713);

1713:

    D := 1C;
    E := B8;
    jump (1716);

1716:

    H := 1A;
    L := A1;
    jump (1719);

1719:

    C := 04;
    jump (171B);

171B:

    B := A;
    jump (171C);

171C:

    A := M[(D,E)];
    jump (171D);

171D:

    let:16 a1 = addWithCarry(!false,A,~B) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (171E);

171E:

    if (!FlagCY) {
      jump (1727);
    } else {
      jump (1721);
    }

1721:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1722);

1722:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (1723);

1723:

    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1724);

1724:

    if (!FlagZ) {
      jump (171C);
    } else {
      jump (1727);
    }

1727:

    A := M[(H,L)];
    jump (1728);

1728:

    M[20CF] := A;
    jump (172B);

172B:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

172C:

    A := M[2025];
    jump (172F);

172F:

    let:16 a1 = addWithCarry(!false,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (1731);

1731:

    if (!FlagZ) {
      jump (1739);
    } else {
      jump (1734);
    }

1734:

    B := FD;
    jump (1736);

1736:

    jump (19DC);

1739:

    B := 02;
    jump (173B);

173B:

    jump (18FA);

1740:

    H := 20;
    L := 9B;
    jump (1743);

1743:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1744);

1744:

    if (FlagZ) {
      let:16 a1 = (-1 + (SPH,SPL)) in
      M[a1] := 17;
      let:16 a2 = (-1 + a1) in
      M[a2] := 47;
      #return-to: 1747
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump (176D);
    } else {
      jump (1747);
    }

1747:

    A := M[2068];
    jump (174A);

174A:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (174B);

174B:

    if (FlagZ) {
      jump (176D);
    } else {
      jump (174E);
    }

174E:

    H := 20;
    L := 96;
    jump (1751);

1751:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1752);

1752:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (1753);
    }

1753:

    H := 20;
    L := 98;
    jump (1756);

1756:

    A := M[(H,L)];
    jump (1757);

1757:

    sound_control(FleetMovement1,A[0]);
    sound_control(FleetMovement2,A[1]);
    sound_control(FleetMovement3,A[2]);
    sound_control(FleetMovement4,A[3]);
    sound_control(UfoHit,A[4]);
    jump (1759);

1759:

    A := M[2082];
    jump (175C);

175C:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (175D);

175D:

    if (FlagZ) {
      jump (176D);
    } else {
      jump (1760);
    }

1760:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1761);

1761:

    A := M[(H,L)];
    jump (1762);

1762:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1763);

1763:

    M[(H,L)] := A;
    jump (1764);

1764:

    let:16 a1 = (-1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1765);

1765:

    M[(H,L)] := 01;
    jump (1767);

1767:

    A := 04;
    jump (1769);

1769:

    M[209B] := A;
    jump (176C);

176C:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

176D:

    A := M[2098];
    jump (1770);

1770:

    let:8 a1 = (30 & A) in
    let:8 a2 = (30 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1772);

1772:

    sound_control(FleetMovement1,A[0]);
    sound_control(FleetMovement2,A[1]);
    sound_control(FleetMovement3,A[2]);
    sound_control(FleetMovement4,A[3]);
    sound_control(UfoHit,A[4]);
    jump (1774);

1774:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1775:

    A := M[2095];
    jump (1778);

1778:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1779);

1779:

    if (FlagZ) {
      jump (17AA);
    } else {
      jump (177C);
    }

177C:

    H := 1A;
    L := 11;
    jump (177F);

177F:

    D := 1A;
    E := 21;
    jump (1782);

1782:

    A := M[2082];
    jump (1785);

1785:

    let:16 a1 = addWithCarry(!false,A,~M[(H,L)]) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~M[(H,L)] & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (1786);

1786:

    if (!FlagCY) {
      jump (178E);
    } else {
      jump (1789);
    }

1789:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (178A);

178A:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (178B);

178B:

    jump (1785);

178E:

    A := M[(D,E)];
    jump (178F);

178F:

    M[2097] := A;
    jump (1792);

1792:

    H := 20;
    L := 98;
    jump (1795);

1795:

    A := M[(H,L)];
    jump (1796);

1796:

    let:8 a1 = (30 & A) in
    let:8 a2 = (30 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1798);

1798:

    B := A;
    jump (1799);

1799:

    A := M[(H,L)];
    jump (179A);

179A:

    let:8 a1 = (0F & A) in
    let:8 a2 = (0F | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (179C);

179C:

    A := updateBit((A << 01),0,A[7]);
    FlagCY := A[7];
    jump (179D);

179D:

    let:16 a1 = addWithCarry(!false,A,~10) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~10 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (179F);

179F:

    if (!FlagZ) {
      jump (17A4);
    } else {
      jump (17A2);
    }

17A2:

    A := 01;
    jump (17A4);

17A4:

    let:8 a1 = (B | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (17A5);

17A5:

    M[(H,L)] := A;
    jump (17A6);

17A6:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (17A7);

17A7:

    M[2095] := A;
    jump (17AA);

17AA:

    H := 20;
    L := 99;
    jump (17AD);

17AD:

    let:16 a1 = addWithCarry(!true,M[(H,L)],~00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (17AE);

17AE:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (17AF);
    }

17AF:

    B := EF;
    jump (17B1);

17B1:

    jump (19DC);

17B4:

    B := EF;
    jump (17B6);

17B6:

    H := 20;
    L := 98;
    jump (17B9);

17B9:

    A := M[(H,L)];
    jump (17BA);

17BA:

    let:8 a1 = (B & A) in
    let:8 a2 = (B | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (17BB);

17BB:

    M[(H,L)] := A;
    jump (17BC);

17BC:

    sound_control(FleetMovement1,A[0]);
    sound_control(FleetMovement2,A[1]);
    sound_control(FleetMovement3,A[2]);
    sound_control(FleetMovement4,A[3]);
    sound_control(UfoHit,A[4]);
    jump (17BE);

17BE:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

17C0:

    A := M[2067];
    jump (17C3);

17C3:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (17C4);

17C4:

    if (!FlagCY) {
      jump (17CA);
    } else {
      jump (17C7);
    }

17C7:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
    jump (17C9);

17C9:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

17CA:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
    jump (17CC);

17CC:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

17CD:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,is_pressed([dip3] lives (3,4,5,6) lsb)),1,is_pressed([dip5] lives (3,4,5,6) msb)),2,is_pressed(TILT)),3,is_pressed([dip6] extra ship at 1000)),4,is_pressed(player2 shoot)),5,is_pressed(player2 left)),6,is_pressed(player2 right)),7,is_pressed([dip7] coin info off));
    jump (17CF);

17CF:

    let:8 a1 = (04 & A) in
    let:8 a2 = (04 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (17D1);

17D1:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (17D2);
    }

17D2:

    A := M[209A];
    jump (17D5);

17D5:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (17D6);

17D6:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (17D7);
    }

17D7:

    SPH := 24;
    SPL := 00;
    jump (17DA);

17DA:

    B := 04;
    jump (17DC);

17DC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := DF;
    #return-to: 17DF
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (09D6);

17DF:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (17E0);

17E0:

    if (!FlagZ) {
      jump (17DC);
    } else {
      jump (17E3);
    }

17E3:

    A := 01;
    jump (17E5);

17E5:

    M[209A] := A;
    jump (17E8);

17E8:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := EB;
    #return-to: 17EB
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19D7);

17EB:

    enable_interrupts()
    jump (17EC);

17EC:

    D := 1C;
    E := BC;
    jump (17EF);

17EF:

    H := 30;
    L := 16;
    jump (17F2);

17F2:

    C := 04;
    jump (17F4);

17F4:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := F7;
    #return-to: 17F7
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A93);

17F7:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 17;
    let:16 a2 = (-1 + a1) in
    M[a2] := FA;
    #return-to: 17FA
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

17FA:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (17FB);

17FB:

    M[209A] := A;
    jump (17FE);

17FE:

    M[2093] := A;
    jump (1801);

1801:

    jump (16C9);

1804:

    H := 20;
    L := 84;
    jump (1807);

1807:

    A := M[(H,L)];
    jump (1808);

1808:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1809);

1809:

    if (FlagZ) {
      jump (0707);
    } else {
      jump (180C);
    }

180C:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (180D);

180D:

    A := M[(H,L)];
    jump (180E);

180E:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (180F);

180F:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (1810);
    }

1810:

    B := 01;
    jump (1812);

1812:

    jump (18FA);

1815:

    H := 28;
    L := 10;
    jump (1818);

1818:

    D := 1C;
    E := A3;
    jump (181B);

181B:

    C := 15;
    jump (181D);

181D:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 20;
    #return-to: 1820
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08F3);

1820:

    A := 0A;
    jump (1822);

1822:

    M[206C] := A;
    jump (1825);

1825:

    B := 1D;
    C := BE;
    jump (1828);

1828:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 2B;
    #return-to: 182B
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1856);

182B:

    if (FlagCY) {
      jump (1837);
    } else {
      jump (182E);
    }

182E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 31;
    #return-to: 1831
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1844);

1831:

    jump (1828);

1834:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 37;
    #return-to: 1837
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0AB1);

1837:

    B := 1D;
    C := CF;
    jump (183A);

183A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 3D;
    #return-to: 183D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1856);

183D:

    if (FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (183E);
    }

183E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 41;
    #return-to: 1841
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (184C);

1841:

    jump (183A);

1844:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1845);

1845:

    B := 10;
    jump (1847);

1847:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 4A;
    #return-to: 184A
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1439);

184A:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (184B);

184B:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

184C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (184D);

184D:

    A := M[206C];
    jump (1850);

1850:

    C := A;
    jump (1851);

1851:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 54;
    #return-to: 1854
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (0A93);

1854:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1855);

1855:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1856:

    A := M[(B,C)];
    jump (1857);

1857:

    let:16 a1 = addWithCarry(!false,A,~FF) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~FF & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (1859);

1859:

    FlagCY := true;
    jump (185A);

185A:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (185B);
    }

185B:

    L := A;
    jump (185C);

185C:

    let:16 a1 = (1 + (B,C)) in
    B := a1[15:8];
    C := a1[7:0];
    jump (185D);

185D:

    A := M[(B,C)];
    jump (185E);

185E:

    H := A;
    jump (185F);

185F:

    let:16 a1 = (1 + (B,C)) in
    B := a1[15:8];
    C := a1[7:0];
    jump (1860);

1860:

    A := M[(B,C)];
    jump (1861);

1861:

    E := A;
    jump (1862);

1862:

    let:16 a1 = (1 + (B,C)) in
    B := a1[15:8];
    C := a1[7:0];
    jump (1863);

1863:

    A := M[(B,C)];
    jump (1864);

1864:

    D := A;
    jump (1865);

1865:

    let:16 a1 = (1 + (B,C)) in
    B := a1[15:8];
    C := a1[7:0];
    jump (1866);

1866:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1867);

1867:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1868:

    H := 20;
    L := C2;
    jump (186B);

186B:

    let:16 a1 = addWithCarry(true,M[(H,L)],00) in
    let:8 a2 = (M[(H,L)] & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    M[(H,L)] := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (186C);

186C:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (186D);

186D:

    C := M[(H,L)];
    jump (186E);

186E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 71;
    #return-to: 1871
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01D9);

1871:

    B := A;
    jump (1872);

1872:

    A := M[20CA];
    jump (1875);

1875:

    let:16 a1 = addWithCarry(!false,A,~B) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~B & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (1876);

1876:

    if (FlagZ) {
      jump (1898);
    } else {
      jump (1879);
    }

1879:

    A := M[20C2];
    jump (187C);

187C:

    let:8 a1 = (04 & A) in
    let:8 a2 = (04 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (187E);

187E:

    H := M[20CD];
    L := M[20CC];
    jump (1881);

1881:

    if (!FlagZ) {
      jump (1888);
    } else {
      jump (1884);
    }

1884:

    D := 00;
    E := 30;
    jump (1887);

1887:

    let:17 a1 = add17((D,E),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (1888);

1888:

    M[20C7] := L;
    M[20C8] := H;
    jump (188B);

188B:

    H := 20;
    L := C5;
    jump (188E);

188E:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := 91;
    #return-to: 1891
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A3B);

1891:

    D := H;
    E := L;
    H := D;
    L := E;
    jump (1892);

1892:

    jump (15D3);

1898:

    A := 01;
    jump (189A);

189A:

    M[20CB] := A;
    jump (189D);

189D:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

189E:

    H := 20;
    L := 50;
    jump (18A1);

18A1:

    D := 1B;
    E := C0;
    jump (18A4);

18A4:

    B := 10;
    jump (18A6);

18A6:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := A9;
    #return-to: 18A9
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A32);

18A9:

    A := 02;
    jump (18AB);

18AB:

    M[2080] := A;
    jump (18AE);

18AE:

    A := FF;
    jump (18B0);

18B0:

    M[207E] := A;
    jump (18B3);

18B3:

    A := 04;
    jump (18B5);

18B5:

    M[20C1] := A;
    jump (18B8);

18B8:

    A := M[2055];
    jump (18BB);

18BB:

    let:8 a1 = (01 & A) in
    let:8 a2 = (01 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (18BD);

18BD:

    if (FlagZ) {
      jump (18B8);
    } else {
      jump (18C0);
    }

18C0:

    A := M[2055];
    jump (18C3);

18C3:

    let:8 a1 = (01 & A) in
    let:8 a2 = (01 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (18C5);

18C5:

    if (!FlagZ) {
      jump (18C0);
    } else {
      jump (18C8);
    }

18C8:

    H := 33;
    L := 11;
    jump (18CB);

18CB:

    A := 26;
    jump (18CD);

18CD:

    jump (18CE);

18CE:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := D1;
    #return-to: 18D1
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (08FF);

18D1:

    jump (0AB6);

18D4:

    SPH := 24;
    SPL := 00;
    jump (18D7);

18D7:

    B := 00;
    jump (18D9);

18D9:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := DC;
    #return-to: 18DC
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (01E6);

18DC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 18;
    let:16 a2 = (-1 + a1) in
    M[a2] := DF;
    #return-to: 18DF
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1956);

18DF:

    A := 08;
    jump (18E1);

18E1:

    M[20CF] := A;
    jump (18E4);

18E4:

    jump (0AEA);

18E7:

    A := M[2067];
    jump (18EA);

18EA:

    H := 20;
    L := E7;
    jump (18ED);

18ED:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (18EE);

18EE:

    if (!FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (18EF);
    }

18EF:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (18F0);

18F0:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

18F1:

    B := 02;
    jump (18F3);

18F3:

    A := M[2082];
    jump (18F6);

18F6:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (18F7);

18F7:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (18F8);
    }

18F8:

    let:16 a1 = addWithCarry(true,B,00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (18F9);

18F9:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

18FA:

    A := M[2094];
    jump (18FD);

18FD:

    let:8 a1 = (B | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (18FE);

18FE:

    M[2094] := A;
    jump (1901);

1901:

    sound_control(Ufo,A[0]);
    sound_control(Shot,A[1]);
    sound_control(PlayerDie,A[2]);
    sound_control(InvaderDie,A[3]);
    sound_control(ExtraLife,A[4]);
    jump (1903);

1903:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1904:

    H := 22;
    L := 00;
    jump (1907);

1907:

    jump (01C3);

190A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 0D;
    #return-to: 190D
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14D8);

190D:

    jump (1597);

1910:

    H := 20;
    L := E7;
    jump (1913);

1913:

    A := M[2067];
    jump (1916);

1916:

    A := updateBit((A >> 01),7,A[0]);
    FlagCY := A[0];
    jump (1917);

1917:

    if (FlagCY) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (1918);
    }

1918:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1919);

1919:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

191A:

    C := 1C;
    jump (191C);

191C:

    H := 24;
    L := 1E;
    jump (191F);

191F:

    D := 1A;
    E := E4;
    jump (1922);

1922:

    jump (08F3);

1925:

    H := 20;
    L := F8;
    jump (1928);

1928:

    jump (1931);

192B:

    H := 20;
    L := FC;
    jump (192E);

192E:

    jump (1931);

1931:

    E := M[(H,L)];
    jump (1932);

1932:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1933);

1933:

    D := M[(H,L)];
    jump (1934);

1934:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1935);

1935:

    A := M[(H,L)];
    jump (1936);

1936:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1937);

1937:

    H := M[(H,L)];
    jump (1938);

1938:

    L := A;
    jump (1939);

1939:

    jump (09AD);

193C:

    C := 07;
    jump (193E);

193E:

    H := 35;
    L := 01;
    jump (1941);

1941:

    D := 1F;
    E := A9;
    jump (1944);

1944:

    jump (08F3);

1947:

    A := M[20EB];
    jump (194A);

194A:

    H := 3C;
    L := 01;
    jump (194D);

194D:

    jump (09B2);

1950:

    H := 20;
    L := F4;
    jump (1953);

1953:

    jump (1931);

1956:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 59;
    #return-to: 1959
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A5C);

1959:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5C;
    #return-to: 195C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (191A);

195C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 5F;
    #return-to: 195F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1925);

195F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 62;
    #return-to: 1962
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (192B);

1962:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 65;
    #return-to: 1965
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1950);

1965:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 68;
    #return-to: 1968
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (193C);

1968:

    jump (1947);

196B:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 6E;
    #return-to: 196E
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19DC);

196E:

    jump (1671);

1971:

    A := 01;
    jump (1973);

1973:

    M[206D] := A;
    jump (1976);

1976:

    jump (16E6);

1979:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7C;
    #return-to: 197C
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19D7);

197C:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := 7F;
    #return-to: 197F
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1947);

197F:

    jump (193C);

1982:

    M[20C1] := A;
    jump (1985);

1985:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1988:

    jump (09D6);

199A:

    A := M[201E];
    jump (199D);

199D:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (199E);

199E:

    if (!FlagZ) {
      jump (19AC);
    } else {
      jump (19A1);
    }

19A1:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
    jump (19A3);

19A3:

    let:8 a1 = (76 & A) in
    let:8 a2 = (76 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (19A5);

19A5:

    let:16 a1 = addWithCarry(!false,A,~72) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~72 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (19A7);

19A7:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (19A8);
    }

19A8:

    let:16 a1 = addWithCarry(true,A,00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (00 & 0F) in
    let:16 a4 = addWithCarry(true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (19A9);

19A9:

    M[201E] := A;
    jump (19AC);

19AC:

    A := updateBit(updateBit(updateBit(updateBit(updateBit(updateBit(00,0,!is_pressed(coin entry)),1,is_pressed(player2 start)),2,is_pressed(player1 start)),4,is_pressed(player1 shoot)),5,is_pressed(player1 left)),6,is_pressed(player1 right));
    jump (19AE);

19AE:

    let:8 a1 = (76 & A) in
    let:8 a2 = (76 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (19B0);

19B0:

    let:16 a1 = addWithCarry(!false,A,~34) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~34 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (19B2);

19B2:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (19B3);
    }

19B3:

    H := 2E;
    L := 1B;
    jump (19B6);

19B6:

    D := 0B;
    E := F7;
    jump (19B9);

19B9:

    C := 09;
    jump (19BB);

19BB:

    jump (08F3);

19D1:

    A := 01;
    jump (19D3);

19D3:

    M[20E9] := A;
    jump (19D6);

19D6:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

19D7:

    let:8 a1 = (A ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (19D8);

19D8:

    jump (19D3);

19DC:

    A := M[2094];
    jump (19DF);

19DF:

    let:8 a1 = (B & A) in
    let:8 a2 = (B | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (19E0);

19E0:

    M[2094] := A;
    jump (19E3);

19E3:

    sound_control(Ufo,A[0]);
    sound_control(Shot,A[1]);
    sound_control(PlayerDie,A[2]);
    sound_control(InvaderDie,A[3]);
    sound_control(ExtraLife,A[4]);
    jump (19E5);

19E5:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

19E6:

    H := 27;
    L := 01;
    jump (19E9);

19E9:

    if (FlagZ) {
      jump (19FA);
    } else {
      jump (19EC);
    }

19EC:

    D := 1C;
    E := 60;
    jump (19EF);

19EF:

    B := 10;
    jump (19F1);

19F1:

    C := A;
    jump (19F2);

19F2:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := F5;
    #return-to: 19F5
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1439);

19F5:

    A := C;
    jump (19F6);

19F6:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (19F7);

19F7:

    if (!FlagZ) {
      jump (19EC);
    } else {
      jump (19FA);
    }

19FA:

    B := 10;
    jump (19FC);

19FC:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 19;
    let:16 a2 = (-1 + a1) in
    M[a2] := FF;
    #return-to: 19FF
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (14CB);

19FF:

    A := H;
    jump (1A00);

1A00:

    let:16 a1 = addWithCarry(!false,A,~35) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~35 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (1A02);

1A02:

    if (!FlagZ) {
      jump (19FA);
    } else {
      jump (1A05);
    }

1A05:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1A06:

    H := 20;
    L := 72;
    jump (1A09);

1A09:

    B := M[(H,L)];
    jump (1A0A);

1A0A:

    A := M[(D,E)];
    jump (1A0B);

1A0B:

    let:8 a1 = (80 & A) in
    let:8 a2 = (80 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1A0D);

1A0D:

    let:8 a1 = (B ^ A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1A0E);

1A0E:

    if (!FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (1A0F);
    }

1A0F:

    FlagCY := true;
    jump (1A10);

1A10:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1A32:

    A := M[(D,E)];
    jump (1A33);

1A33:

    M[(H,L)] := A;
    jump (1A34);

1A34:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1A35);

1A35:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (1A36);

1A36:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1A37);

1A37:

    if (!FlagZ) {
      jump (1A32);
    } else {
      jump (1A3A);
    }

1A3A:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1A3B:

    E := M[(H,L)];
    jump (1A3C);

1A3C:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1A3D);

1A3D:

    D := M[(H,L)];
    jump (1A3E);

1A3E:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1A3F);

1A3F:

    A := M[(H,L)];
    jump (1A40);

1A40:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1A41);

1A41:

    C := M[(H,L)];
    jump (1A42);

1A42:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1A43);

1A43:

    B := M[(H,L)];
    jump (1A44);

1A44:

    H := C;
    jump (1A45);

1A45:

    L := A;
    jump (1A46);

1A46:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1A47:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A48);

1A48:

    B := 03;
    jump (1A4A);

1A4A:

    A := H;
    jump (1A4B);

1A4B:

    A := updateBit((A >> 01),7,FlagCY);
    FlagCY := A[0];
    jump (1A4C);

1A4C:

    H := A;
    jump (1A4D);

1A4D:

    A := L;
    jump (1A4E);

1A4E:

    A := updateBit((A >> 01),7,FlagCY);
    FlagCY := A[0];
    jump (1A4F);

1A4F:

    L := A;
    jump (1A50);

1A50:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1A51);

1A51:

    if (!FlagZ) {
      jump (1A4A);
    } else {
      jump (1A54);
    }

1A54:

    A := H;
    jump (1A55);

1A55:

    let:8 a1 = (3F & A) in
    let:8 a2 = (3F | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1A57);

1A57:

    let:8 a1 = (20 | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1A59);

1A59:

    H := A;
    jump (1A5A);

1A5A:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A5B);

1A5B:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1A5C:

    H := 24;
    L := 00;
    jump (1A5F);

1A5F:

    M[(H,L)] := 00;
    jump (1A61);

1A61:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1A62);

1A62:

    A := H;
    jump (1A63);

1A63:

    let:16 a1 = addWithCarry(!false,A,~40) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~40 & 0F) in
    let:16 a4 = addWithCarry(!false,a2,a3) in
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    FlagCY := !a1[15:8][0];
    jump (1A65);

1A65:

    if (!FlagZ) {
      jump (1A5F);
    } else {
      jump (1A68);
    }

1A68:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1A69:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := B;
    let:16 a2 = (-1 + a1) in
    M[a2] := C;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A6A);

1A6A:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := H;
    let:16 a2 = (-1 + a1) in
    M[a2] := L;
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A6B);

1A6B:

    A := M[(D,E)];
    jump (1A6C);

1A6C:

    let:8 a1 = (M[(H,L)] | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := false;
    FlagP := parity(a1);
    FlagCY := false;
    jump (1A6D);

1A6D:

    M[(H,L)] := A;
    jump (1A6E);

1A6E:

    let:16 a1 = (1 + (D,E)) in
    D := a1[15:8];
    E := a1[7:0];
    jump (1A6F);

1A6F:

    let:16 a1 = (1 + (H,L)) in
    H := a1[15:8];
    L := a1[7:0];
    jump (1A70);

1A70:

    let:16 a1 = addWithCarry(!true,C,~00) in
    let:8 a2 = (C & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    C := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1A71);

1A71:

    if (!FlagZ) {
      jump (1A6B);
    } else {
      jump (1A74);
    }

1A74:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    H := M[a1];
    L := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A75);

1A75:

    B := 00;
    C := 20;
    jump (1A78);

1A78:

    let:17 a1 = add17((B,C),(H,L)) in
    H := a1[15:0][15:8];
    L := a1[15:0][7:0];
    FlagCY := a1[16];
    jump (1A79);

1A79:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    B := M[a1];
    C := M[(SPH,SPL)];
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A7A);

1A7A:

    let:16 a1 = addWithCarry(!true,B,~00) in
    let:8 a2 = (B & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    B := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1A7B);

1A7B:

    if (!FlagZ) {
      jump (1A69);
    } else {
      jump (1A7E);
    }

1A7E:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump ((M[a1],M[(SPH,SPL)]));

1A7F:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 1A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 82;
    #return-to: 1A82
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (092E);

1A82:

    let:8 a1 = (A & A) in
    let:8 a2 = (A | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1A83);

1A83:

    if (FlagZ) {
      let:16 a1 = (1 + (SPH,SPL)) in
      let:16 a2 = (1 + a1) in
      SPH := a2[15:8];
      SPL := a2[7:0];
      jump ((M[a1],M[(SPH,SPL)]));
    } else {
      jump (1A84);
    }

1A84:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := A;
    let:16 a2 = (-1 + a1) in
    M[a2] := updateBit(updateBit(updateBit(updateBit(updateBit(02,7,FlagS),6,FlagZ),4,FlagA),2,FlagP),0,FlagCY);
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (1A85);

1A85:

    let:16 a1 = addWithCarry(!true,A,~00) in
    let:8 a2 = (A & 0F) in
    let:8 a3 = (~00 & 0F) in
    let:16 a4 = addWithCarry(!true,a2,a3) in
    A := a1[7:0];
    FlagS := a1[7:0][7];
    FlagZ := is_zero(a1[7:0]);
    FlagA := a4[7:0][4];
    FlagP := parity(a1[7:0]);
    jump (1A86);

1A86:

    M[(H,L)] := A;
    jump (1A87);

1A87:

    let:16 a1 = (-1 + (SPH,SPL)) in
    M[a1] := 1A;
    let:16 a2 = (-1 + a1) in
    M[a2] := 8A;
    #return-to: 1A8A
    SPH := a2[15:8];
    SPL := a2[7:0];
    jump (19E6);

1A8A:

    let:16 a1 = (1 + (SPH,SPL)) in
    let:16 a2 = (1 + a1) in
    A := M[a1];
    SPH := a2[15:8];
    SPL := a2[7:0];
    FlagS := M[(SPH,SPL)][7];
    FlagZ := M[(SPH,SPL)][6];
    FlagA := M[(SPH,SPL)][4];
    FlagP := M[(SPH,SPL)][2];
    FlagCY := M[(SPH,SPL)][0];
    jump (1A8B);

1A8B:

    H := 25;
    L := 01;
    jump (1A8E);

1A8E:

    let:8 a1 = (0F & A) in
    let:8 a2 = (0F | A) in
    A := a1;
    FlagS := a1[7];
    FlagZ := is_zero(a1);
    FlagA := a2[3];
    FlagP := parity(a1);
    FlagCY := false;
    jump (1A90);

1A90:

    jump (09C5);
